<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_filter\aribcam.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb25/arib_std_b25.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb25/arib_std_b25_error_code.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb25/b_cas_card.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb25/b_cas_card_error_code.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_INPUT_STREAM_FILTER</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"stream_filter"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"aribcam"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"ARIB STD-B25 Cam module"</literal>)</argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>error_messages_s</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name>i_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>psz_error</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>error_messages_s</name></name> <specifier>const</specifier></type> <name><name>b25_errors</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_INVALID_PARAM</name></expr>, <expr><literal type="string">"Invalid parameter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_NO_ENOUGH_MEMORY</name></expr> , <expr><literal type="string">"Not enough memory"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_NON_TS_INPUT_STREAM</name></expr>, <expr><literal type="string">"Non TS input stream"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_NO_PAT_IN_HEAD_16M</name></expr>, <expr><literal type="string">"No PAT in first 16MB"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_NO_PMT_IN_HEAD_32M</name></expr>, <expr><literal type="string">"No PMT in first 32MB"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_NO_ECM_IN_HEAD_32M</name></expr>, <expr><literal type="string">"No ECM in first 32MB"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_EMPTY_B_CAS_CARD</name></expr>, <expr><literal type="string">"Empty BCAS card"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_INVALID_B_CAS_STATUS</name></expr>, <expr><literal type="string">"Invalid BCAS status"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_ECM_PROC_FAILURE</name></expr>, <expr><literal type="string">"ECM Proc failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_DECRYPT_FAILURE</name></expr>, <expr><literal type="string">"Decryption failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_PAT_PARSE_FAILURE</name></expr>, <expr><literal type="string">"PAT Parsing failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_PMT_PARSE_FAILURE</name></expr>, <expr><literal type="string">"PMT Parsing failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_ECM_PARSE_FAILURE</name></expr>, <expr><literal type="string">"ECM Parsing failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_CAT_PARSE_FAILURE</name></expr>, <expr><literal type="string">"CAT Parsing failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_EMM_PARSE_FAILURE</name></expr>, <expr><literal type="string">"EMM Parsing failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARIB_STD_B25_ERROR_EMM_PROC_FAILURE</name></expr>, <expr><literal type="string">"EMM Proc failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>error_messages_s</name></name> <specifier>const</specifier></type> <name><name>bcas_errors</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>B_CAS_CARD_ERROR_INVALID_PARAMETER</name></expr>, <expr><literal type="string">"Invalid parameter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>B_CAS_CARD_ERROR_NOT_INITIALIZED</name></expr>, <expr><literal type="string">"Card not initialized"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>B_CAS_CARD_ERROR_NO_SMART_CARD_READER</name></expr>, <expr><literal type="string">"No smart card reader"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>B_CAS_CARD_ERROR_ALL_READERS_CONNECTION_FAILED</name></expr>, <expr><literal type="string">"Reader connection failed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>B_CAS_CARD_ERROR_NO_ENOUGH_MEMORY</name></expr>, <expr><literal type="string">"Not enough memory"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>B_CAS_CARD_ERROR_TRANSMIT_FAILED</name></expr>, <expr><literal type="string">"Transmission failed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>ARIB_STD_B25</name> <modifier>*</modifier></type><name>p_b25</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>B_CAS_CARD</name> <modifier>*</modifier></type><name>p_bcas</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_list</name></decl>;</decl_stmt>
}</block> <decl><name>remain</name></decl>;</struct>
}</block></struct></type> <name>stream_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>GetErrorMessage</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_error</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>error_messages_s</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>p_errors_messages</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name><name>p_errors_messages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_error</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_errors_messages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_error</name> <operator>==</operator> <name>i_error</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_errors_messages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_error</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="string">"unknown error"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>RemainRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_toread</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name></name> <operator>&amp;&amp;</operator> <name>i_toread</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_toread</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_toread</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>i_size</name></name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_prevhead</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_prevhead</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>i_total</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>RemainAdd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>i_size</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RemainFlush</name><parameter_list>( <parameter><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>p_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>remain</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_READY</name></cpp:macro> <cpp:value>(UNIT_SIZE_READY|ECM_READY|PMT_READY)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_toread</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name>p_buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_total_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>i_toread</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_fromremain</name> <init>= <expr><call><name>RemainRead</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_toread</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_total_read</name> <operator>+=</operator> <name>i_fromremain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_fromremain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_toread</name> <operator>-=</operator> <name>i_fromremain</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>i_toread</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_srcread</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_toread</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_srcread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ARIB_STD_B25_BUFFER</name></type> <name>putbuf</name> <init>= <expr><block>{ <expr><name>p_dst</name></expr>, <expr><name>i_srcread</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>put</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>putbuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"decoder put failed: %s"</literal></expr></argument>,
<argument><expr><call><name>GetErrorMessage</name><argument_list>( <argument><expr><name>i_ret</name></expr></argument>, <argument><expr><name>b25_errors</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_srcread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Can't read %lu bytes from source stream: %d"</literal></expr></argument>, <argument><expr><name>i_toread</name></expr></argument>, <argument><expr><name>i_srcread</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ARIB_STD_B25_BUFFER</name></type> <name>getbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>get</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>getbuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"decoder get failed: %s"</literal></expr></argument>,
<argument><expr><call><name>GetErrorMessage</name><argument_list>( <argument><expr><name>i_ret</name></expr></argument>, <argument><expr><name>b25_errors</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>getbuf</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>i_toread</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>RemainAdd</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>getbuf</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>i_toread</name></expr></argument>, <argument><expr><name><name>getbuf</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>i_toread</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consume</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>getbuf</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>i_toread</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>getbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>consume</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_total_read</name> <operator>+=</operator> <name>consume</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>consume</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_toread</name> <operator>-=</operator> <name>consume</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>i_total_read</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RemainFlush</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator> <name>p_object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_stream_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_stream_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_stream_size</name> <operator>&lt;</operator> <name>ARIB_STD_B25_TS_PROBING_MIN_DATA</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name> <operator>=</operator> <call><name>create_arib_std_b25</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>set_multi2_round</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot set B25 round number"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>set_strip</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot set B25 strip option"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>set_emm_proc</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot set B25 emm_proc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>set_unit_size</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument>, <argument><expr><literal type="number">188</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot set B25 TS packet size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name> <operator>=</operator> <call><name>create_b_cas_card</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_code</name> <init>= <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name><operator>-&gt;</operator><name>init</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize BCAS card (missing ?): %s"</literal></expr></argument>,
<argument><expr><call><name>GetErrorMessage</name><argument_list>( <argument><expr><name>i_code</name></expr></argument>, <argument><expr><name>bcas_errors</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>B_CAS_ID</name></type> <name>bcasid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name><operator>-&gt;</operator><name>get_id</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcasid</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>bcasid</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"BCAS card id 0x%"</literal><name>PRId64</name><literal type="string">" initialized"</literal></expr></argument>,
<argument><expr><name><name>bcasid</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>B_CAS_INIT_STATUS</name></type> <name>bcas_status</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name><operator>-&gt;</operator><name>get_init_status</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcas_status</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"BCAS card system id 0x%"</literal><name>PRIx32</name></expr></argument>,
<argument><expr><name><name>bcas_status</name><operator>.</operator><name>ca_system_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_code</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>set_b_cas_card</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot attach BCAS card to decoder: %s"</literal></expr></argument>,
<argument><expr><call><name>GetErrorMessage</name><argument_list>( <argument><expr><name>i_code</name></expr></argument>, <argument><expr><name>bcas_errors</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot create BCAS card"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot create B25 instance"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>Read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>Seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_object</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name><operator>-&gt;</operator><name>release</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcas</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name><operator>-&gt;</operator><name>release</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_b25</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
