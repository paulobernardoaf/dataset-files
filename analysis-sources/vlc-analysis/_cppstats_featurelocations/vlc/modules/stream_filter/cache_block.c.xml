<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_filter\cache_block.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPTIMIZE_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_CACHE_SIZE</name></cpp:macro> <cpp:value>(1024*128)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_CACHE_SIZE</name></cpp:macro> <cpp:value>(4*12*1024*1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_CACHE_PREBUFFER_SIZE</name></cpp:macro> <cpp:value>(128)</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>block_bytestream_t</name></type> <name>cache</name></decl>;</decl_stmt> 

<struct>struct
<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>read_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>read_time</name></decl>;</decl_stmt>
}</block> <decl><name>stat</name></decl>;</struct>
}</block></struct></type> <name>stream_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AStreamRefillBlock</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cache_size</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>i_total</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>cache_size</name> <operator>&gt;=</operator> <name>STREAM_CACHE_SIZE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_size</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>i_total</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_size</name> <operator>&gt;=</operator> <name>STREAM_CACHE_SIZE</name> <operator>&amp;&amp;</operator>
<name><name>sys</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>p_chain</name></name> <operator>!=</operator> <operator>*</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>pp_last</name></name></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>start</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>vlc_stream_ReadBlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Eof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>read_time</name></name> <operator>+=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>added_bytes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>added_bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>read_bytes</name></name> <operator>+=</operator> <name>added_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamPush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AStreamPrebufferBlock</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>start</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"starting pre-buffering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cache_size</name> <init>= <expr><call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call> <operator>||</operator> <name>cache_size</name> <operator>&gt;</operator> <name>STREAM_CACHE_PREBUFFER_SIZE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>byterate</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>read_bytes</name></name> <operator>=</operator> <name>cache_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>read_time</name></name> <operator>=</operator> <name>now</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>byterate</name> <operator>=</operator> <operator>(</operator><name>CLOCK_FREQ</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>read_bytes</name></name> <operator>)</operator> <operator>/</operator>
<operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>read_time</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"prebuffering done %zu bytes "</literal>
<literal type="string">"in %"</literal><name>PRIu64</name><literal type="string">"s - %"</literal><name>PRIu64</name><literal type="string">"u KiB/s"</literal></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>,
<argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>read_time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>byterate</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>vlc_stream_ReadBlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Eof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_BytestreamPush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"received first data after %"</literal><name>PRId64</name><literal type="string">" ms"</literal></expr></argument>,
<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>AStreamControlReset</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AStreamPrebufferBlock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AStreamSeekBlock</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>block_SkipBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>AStreamRefillBlock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>AStreamReadBlock</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_current</name> <init>= <expr><call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><call><name>VLC_CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i_current</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><call><name>AStreamRefillBlock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>block_GetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>p_chain</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AStreamReadBlock</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>i_copy</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>AStreamControl</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>i_query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<case>case <expr><name>STREAM_GET_TITLE_INFO</name></expr>:</case>
<case>case <expr><name>STREAM_GET_TITLE</name></expr>:</case>
<case>case <expr><name>STREAM_GET_SEEKPOINT</name></expr>:</case>
<case>case <expr><name>STREAM_GET_META</name></expr>:</case>
<case>case <expr><name>STREAM_GET_CONTENT_TYPE</name></expr>:</case>
<case>case <expr><name>STREAM_GET_SIGNAL</name></expr>:</case>
<case>case <expr><name>STREAM_GET_TAGS</name></expr>:</case>
<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>STREAM_SET_PRIVATE_ID_STATE</name></expr>:</case>
<case>case <expr><name>STREAM_SET_PRIVATE_ID_CA</name></expr>:</case>
<case>case <expr><name>STREAM_GET_PRIVATE_ID_STATE</name></expr>:</case>
<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>STREAM_SET_TITLE</name></expr>:</case>
<case>case <expr><name>STREAM_SET_SEEKPOINT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_stream_vaControl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AStreamControlReset</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>STREAM_SET_RECORD_STATE</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"invalid vlc_stream_vaControl query=0x%x"</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Using block method for AStream*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>block_BytestreamInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AStreamPrebufferBlock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot pre fill buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>AStreamReadBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>AStreamSeekBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>AStreamControl</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_STREAM_FILTER</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"stream_filter"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"cache"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Block stream cache"</literal>)</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
