<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\player\timer.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>vlc_player_ResetTimer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>VLC_PLAYER_TIMER_STATE_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_normal_time</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_position</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>smpte_source</name><operator>.</operator><name>smpte</name><operator>.</operator><name>last_framenum</name></name> <operator>=</operator> <name>ULONG_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_SendTimerSourceUpdates</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>force_update</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name> <modifier>*</modifier></type><name>point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_player_timer_id</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>timer</argument>, <argument>&amp;source-&gt;listeners</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>force_update</name> <operator>||</operator> <name><name>timer</name><operator>-&gt;</operator><name>period</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name>
<operator>||</operator> <name><name>timer</name><operator>-&gt;</operator><name>last_update_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name>
<operator>||</operator> <name><name>point</name><operator>-&gt;</operator><name>system_date</name></name> <operator>==</operator> <name>INT64_MAX</name> 
<operator>||</operator> <name><name>point</name><operator>-&gt;</operator><name>system_date</name></name> <operator>-</operator> <name><name>timer</name><operator>-&gt;</operator><name>last_update_date</name></name> <operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>period</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>timer</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_update</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_update_date</name></name> <operator>=</operator> <ternary><condition><expr><name><name>point</name><operator>-&gt;</operator><name>system_date</name></name> <operator>==</operator> <name>INT64_MAX</name></expr> ?</condition><then>
<expr><name>VLC_TICK_INVALID</name></expr> </then><else>: <expr><name><name>point</name><operator>-&gt;</operator><name>system_date</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_SendSmpteTimerSourceUpdates</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name> <modifier>*</modifier></type><name>point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_player_timer_id</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_smpte_timecode</name></name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>framenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df_fps</name></name> <operator>==</operator> <literal type="number">30</literal> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df_fps</name></name> <operator>==</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df_fps</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate_base</name> <operator>=</operator> <literal type="number">1001</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>framenum</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name> <operator>*</operator> <name>frame_rate</name>
<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>frame_rate_base</name> <operator>/</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>ldiv_t</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldiv</name><argument_list>(<argument><expr><name>framenum</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frames_per_10mins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>framenum</name> <operator>+=</operator> <operator>(</operator><literal type="number">9</literal> <operator>*</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df</name></name> <operator>*</operator> <name><name>res</name><operator>.</operator><name>quot</name></name><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>res</name><operator>.</operator><name>rem</name></name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df</name></name><operator>)</operator>
<operator>/</operator> <operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frames_per_10mins</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>drop_frame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<expr_stmt><expr><name>frame_rate</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df_fps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate_base</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>frame_rate</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate_base</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_rate_base</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>framenum</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name> <operator>*</operator> <name>frame_rate</name>
<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>frame_rate_base</name> <operator>/</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>drop_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>framenum</name> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>last_framenum</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>last_framenum</name></name> <operator>=</operator> <name>framenum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>framenum</name> <operator>%</operator> <operator>(</operator><name>frame_rate</name> <operator>/</operator> <name>frame_rate_base</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>seconds</name></name> <operator>=</operator> <operator>(</operator><name>framenum</name> <operator>*</operator> <name>frame_rate_base</name> <operator>/</operator> <name>frame_rate</name><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>minutes</name></name> <operator>=</operator> <operator>(</operator><name>framenum</name> <operator>*</operator> <name>frame_rate_base</name> <operator>/</operator> <name>frame_rate</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>hours</name></name> <operator>=</operator> <name>framenum</name> <operator>*</operator> <name>frame_rate_base</name> <operator>/</operator> <name>frame_rate</name> <operator>/</operator> <literal type="number">3600</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>frame_resolution</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_resolution</name></name></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>timer</argument>, <argument>&amp;source-&gt;listeners</argument>, <argument>node</argument>)</argument_list></macro>
<expr_stmt><expr><call><name><name>timer</name><operator>-&gt;</operator><name>smpte_cbs</name><operator>-&gt;</operator><name>on_update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_UpdateSmpteTimerFPS</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_rate</name></name> <operator>=</operator> <name>frame_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_rate_base</name></name> <operator>=</operator> <name>frame_rate_base</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_resolution</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_frames</name> <init>= <expr><name>frame_rate</name> <operator>/</operator> <name>frame_rate_base</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_frames</name> <operator>==</operator> <literal type="number">29</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>frame_rate</name> <operator>/</operator> <name>frame_rate_base</name><operator>)</operator> <operator>==</operator> <literal type="number">2997</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df_fps</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frames_per_10mins</name></name> <operator>=</operator> <literal type="number">17982</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>max_frames</name> <operator>==</operator> <literal type="number">59</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>frame_rate</name> <operator>/</operator> <name>frame_rate_base</name><operator>)</operator> <operator>==</operator> <literal type="number">5994</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df_fps</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frames_per_10mins</name></name> <operator>=</operator> <literal type="number">35964</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>df</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>max_frames</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>max_frames</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_resolution</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_UpdateTimerState</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_source</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_player_timer_state</name></name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>VLC_PLAYER_TIMER_STATE_DISCONTINUITY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>system_date</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>signal_discontinuity</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_PLAYER_TIMER_TYPE_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>sources</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>es_source</name>
<operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>VLC_PLAYER_TIMER_TYPE_BEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>signal_discontinuity</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>signal_discontinuity</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name>VLC_PLAYER_TIMER_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>system_date</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>best_source</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_timer_id</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>timer</argument>, <argument>&amp;source-&gt;listeners</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_update_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>timer</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_discontinuity</name></name><argument_list>(<argument><expr><name>system_date</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_UpdateTimerSource</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ts</name> <operator>&gt;=</operator> <name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_normal_time</name></name> <operator>&gt;=</operator> <name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name>ts</name> <operator>-</operator> <name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_normal_time</name></name> <operator>+</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_length</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>=</operator> <name>system_date</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>ts</name> <operator>-</operator> <name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_normal_time</name></name><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_position</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_UpdateTimer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_source</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>es_source_is_master</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name> <modifier>*</modifier></type><name>point</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>normal_time</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><ternary><condition><expr><name>es_source</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>!</operator><name>es_source_is_master</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>es_source</name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_normal_time</name></name> <operator>!=</operator> <name>normal_time</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_normal_time</name></name> <operator>=</operator> <name>normal_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_length</name></name> <operator>!=</operator> <name><name>point</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name><name>point</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>input_position</name></name> <operator>=</operator> <name><name>point</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name>
<operator>||</operator> <name><name>point</name><operator>-&gt;</operator><name>system_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>VLC_PLAYER_TIMER_STATE_DISCONTINUITY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>VLC_PLAYER_TIMER_STATE_PLAYING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>









<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>best_source</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>||</operator> <name>es_source_is_master</name>
<operator>||</operator> <operator>(</operator><name>es_source</name> <operator>&amp;&amp;</operator> <name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>VLC_PLAYER_TIMER_STATE_PAUSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>es_source</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>es_source</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>rate</name></name> <operator>!=</operator> <name><name>point</name><operator>-&gt;</operator><name>rate</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name> <operator>!=</operator> <name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name>
<operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>!=</operator> <name><name>point</name><operator>-&gt;</operator><name>system_date</name></name>
<operator>||</operator> <name><name>point</name><operator>-&gt;</operator><name>system_date</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_UpdateTimerSource</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>,
<argument><expr><name><name>point</name><operator>-&gt;</operator><name>system_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_SendTimerSourceUpdates</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>force_update</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>smpte_source</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>&amp;&amp;</operator> <name>es_source</name> <operator>&amp;&amp;</operator> <call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>es_source</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>es_source</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>es_source</name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>es</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frame_rate</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>frame_rate</name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_rate</name></name>
<operator>||</operator> <name>frame_rate_base</name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_rate_base</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>frame_rate_base</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_UpdateSmpteTimerFPS</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>,
<argument><expr><name>frame_rate_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name> <operator>!=</operator> <name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name> <operator>&amp;&amp;</operator> <name><name>source</name><operator>-&gt;</operator><name>smpte</name><operator>.</operator><name>frame_rate</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_UpdateTimerSource</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>,
<argument><expr><name><name>point</name><operator>-&gt;</operator><name>system_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_SendSmpteTimerSourceUpdates</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>source</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>last_ts</name></name> <operator>=</operator> <name><name>point</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_RemoveTimerSource</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_PLAYER_TIMER_TYPE_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_source</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>sources</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>es_source</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_player_GetTimerPoint</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>out_ts</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>best_source</name><operator>.</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>=
<expr><call><name>vlc_player_timer_point_Interpolate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>best_source</name><operator>.</operator><name>point</name></name></expr></argument>,
<argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>out_ts</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_player_timer_id</name> <modifier>*</modifier></type>
<name>vlc_player_AddTimer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>min_period</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>min_period</name> <operator>&gt;=</operator> <name>VLC_TICK_0</name> <operator>||</operator> <name>min_period</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cbs</name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>on_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_id</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>min_period</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_update_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>best_source</name><operator>.</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>timer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_player_timer_id</name> <modifier>*</modifier></type>
<name>vlc_player_AddSmpteTimer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_smpte_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cbs</name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>on_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_id</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>last_update_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>smpte_cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>smpte_source</name><operator>.</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>timer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_RemoveTimer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_player_timer_id</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_player_timer_point_Interpolate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name> <modifier>*</modifier></type><name>point</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>out_ts</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>system_now</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out_ts</name> <operator>||</operator> <name>out_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>drift</name> <init>= <expr><ternary><condition><expr><name><name>point</name><operator>-&gt;</operator><name>system_date</name></name> <operator>==</operator> <name>INT64_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><operator>(</operator><name>system_now</name> <operator>-</operator> <name><name>point</name><operator>-&gt;</operator><name>system_date</name></name><operator>)</operator> <operator>*</operator> <name><name>point</name><operator>-&gt;</operator><name>rate</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ts</name> <init>= <expr><name><name>point</name><operator>-&gt;</operator><name>ts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><name><name>point</name><operator>-&gt;</operator><name>position</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ts</name> <operator>+=</operator> <name>drift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ts</name> <operator>&lt;</operator> <name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>point</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>drift</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>point</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;</operator> <name><name>point</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>point</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_ts</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type>
<name>vlc_player_timer_point_GetNextIntervalDate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name> <modifier>*</modifier></type><name>point</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>interpolated_ts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>next_interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>system_now</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>next_interval</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>ts_interval</name> <init>= <expr><name>interpolated_ts</name> <operator>/</operator> <name>next_interval</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>ts_next_interval</name> <init>=
<expr><name>ts_interval</name> <operator>*</operator> <name>next_interval</name> <operator>+</operator> <name>next_interval</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>ts_next_interval</name> <operator>-</operator> <name>interpolated_ts</name><operator>)</operator> <operator>/</operator> <name><name>point</name><operator>-&gt;</operator><name>rate</name></name> <operator>+</operator> <name>system_now</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_InitTimer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_PLAYER_TIMER_TYPE_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>listeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>point</name><operator>.</operator><name>system_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>es</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_player_ResetTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_DestroyTimer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_PLAYER_TIMER_TYPE_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>sources</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>listeners</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
