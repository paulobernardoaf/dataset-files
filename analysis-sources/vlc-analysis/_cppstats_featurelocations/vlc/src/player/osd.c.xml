<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\player\osd.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/resource.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>vlc_player_osd_HoldAll</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_resource_HoldVouts</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_FlushSubpictureChannel</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_FlushSubpictureChannel</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD_HSLIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_FlushSubpictureChannel</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD_HSLIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>vouts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_osd_ReleaseAll</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vouts_osd_Message</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>acpy</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>acpy</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_OSDMessageVa</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>acpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>acpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vouts_osd_Icon</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_OSDIcon</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vouts_osd_Slider</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>OSD_HOR_SLIDER</name></expr> ?</condition><then>
<expr><name>VOUT_SPU_CHANNEL_OSD_HSLIDER</name></expr> </then><else>: <expr><name>VOUT_SPU_CHANNEL_OSD_VSLIDER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_OSDSlider</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_osd_Message</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name> <init>= <expr><call><name>vlc_player_osd_HoldAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>acpy</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>acpy</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_OSDMessageVa</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>acpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>acpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_ReleaseAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_osd_Icon</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name> <init>= <expr><call><name>vlc_player_osd_HoldAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vouts_osd_Icon</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_ReleaseAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_osd_Position</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>time</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>time</name> <operator>=</operator> <name>position</name> <operator>*</operator> <name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name>time</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name> <init>= <expr><call><name>vlc_player_osd_HoldAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_RELATIVE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>time</name> <operator>+=</operator> <call><name>vlc_player_input_GetTime</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>time_text</name><index>[<expr><name>MSTRTIME_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>secstotimestr</name><argument_list>(<argument><expr><name>time_text</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>len_text</name><index>[<expr><name>MSTRTIME_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>secstotimestr</name><argument_list>(<argument><expr><name>len_text</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"%s / %s"</literal></expr></argument>, <argument><expr><name>time_text</name></expr></argument>, <argument><expr><name>len_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>time_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_vout_IsFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_RELATIVE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>position</name> <operator>+=</operator> <call><name>vlc_player_input_GetPos</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vouts_osd_Slider</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>position</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>OSD_HOR_SLIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_player_osd_ReleaseAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_osd_Volume</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute_action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name> <init>= <expr><call><name>vlc_player_osd_HoldAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mute</name> <init>= <expr><call><name>vlc_player_aout_IsMuted</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>volume</name> <init>= <expr><call><name>lroundf</name><argument_list>(<argument><expr><call><name>vlc_player_aout_GetVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">100.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mute_action</name> <operator>&amp;&amp;</operator> <name>mute</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Icon</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>OSD_MUTE_ICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_player_vout_IsFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Slider</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>, <argument><expr><name>OSD_VERT_SLIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Volume: %ld%%"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_ReleaseAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_osd_Track</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>select</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><call><name>vlc_player_GetTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>track</name> <operator>&amp;&amp;</operator> <name>select</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cat_name</name> <init>= <expr><call><name>es_format_category_to_string</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cat_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>track_name</name> <init>= <expr><ternary><condition><expr><name>select</name></expr> ?</condition><then> <expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s track: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cat_name</name></expr></argument>, <argument><expr><name>track_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_osd_Program</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Program Service ID: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>vout_osd_PrintVariableText</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vartype</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>varval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>osdfmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isvarstring</name> <init>= <expr><name>vartype</name> <operator>==</operator> <name>VLC_VAR_STRING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_choices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>choices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>choices_text</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>VLC_VAR_GETCHOICES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>num_choices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>choices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>choices_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_choices</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>isvarstring</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>, <argument><expr><name><name>varval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>isvarstring</name> <operator>&amp;&amp;</operator> <name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_float</name> <operator>==</operator> <name><name>varval</name><operator>.</operator><name>f_float</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>osdfmt</name></expr></argument>, <argument><expr><name><name>choices_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isvarstring</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>choices_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>choices_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_player_vout_OSDCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_osd_PrintVariableText</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>,
<argument><expr><name>newval</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Aspect ratio: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr> ?</condition><then>
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scaled to screen"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Original size"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_osd_PrintVariableText</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Crop: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"crop-bottom"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bottom crop: %d px"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"crop-top"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Top crop: %d px"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"crop-left"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Left crop: %d px"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"crop-right"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Right crop: %d px"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>varmode</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>varmode</name></expr> ?</condition><then>
<expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr> </then><else>: <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><ternary><condition><expr><name>varmode</name></expr> ?</condition><then>
<expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr> </then><else>: <expr><call><name>var_GetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Deinterlace %s (%s)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>on</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"On"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Off"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>varmode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"sub-margin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Subtitle position %d px"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"secondary-sub-margin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Secondary subtitle position %d px"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"sub-text-scale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Subtitle text scale %d%%"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>newval</name><operator>.</operator><name>f_float</name></name> <operator>==</operator> <literal type="number">1.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Zooming reset"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>vout_osd_PrintVariableText</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument>,
<argument><expr><name>newval</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Zoom mode: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vouts_osd_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Zoom: x%f"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
