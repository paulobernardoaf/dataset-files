<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\player\medialib.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc/variables.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>vlc_player_input_RestoreMlStates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name><modifier>*</modifier></type> <name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>restore_pos</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>force_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>restore_pos</name> <operator>=</operator> <name>VLC_PLAYER_RESTORE_PLAYBACK_POS_ALWAYS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>restore_pos</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"restore-playback-pos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>restore_states</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"restore-playback-states"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>ml</name> <init>= <expr><call><name>vlc_ml_instance_get</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ml</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>media</name> <init>= <expr><call><name>vlc_ml_get_media_by_mrl</name><argument_list>( <argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>media</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>media</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>VLC_ML_MEDIA_TYPE_VIDEO</name> <operator>||</operator>
<call><name>vlc_ml_media_get_all_playback_pref</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_ml_release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_ml_release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>restore_pos</name> <operator>==</operator> <name>VLC_PLAYER_RESTORE_PLAYBACK_POS_ALWAYS</name><operator>)</operator></expr> ?</condition><then>
<expr><name>VLC_RESTOREPOINT_TITLE</name></expr> </then><else>: <expr><name>VLC_RESTOREPOINT_NONE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore_states</name></name> <operator>=</operator> <name>restore_states</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>restore_pos</name> <operator>==</operator> <name>VLC_PLAYER_RESTORE_PLAYBACK_POS_ALWAYS</name> <operator>&amp;&amp;</operator>
<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name> <operator>&gt;</operator> <literal type="number">.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SetPosition</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>restore_pos</name> <operator>==</operator> <name>VLC_PLAYER_RESTORE_PLAYBACK_POS_ASK</name> <operator>&amp;&amp;</operator>
<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name> <operator>&gt;</operator> <literal type="number">.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>delay_restore</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>restore_states</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>rate</name></name> <operator>!=</operator> <literal type="number">.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>video_track_ids</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_video_track</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>audio_track_ids</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_audio_track</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subtitle_track_ids</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_subtitle_track</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>video_track_ids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_input_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>,
<argument><expr><name>video_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>audio_track_ids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_input_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>,
<argument><expr><name>audio_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>subtitle_track_ids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_input_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>,
<argument><expr><name>subtitle_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name><modifier>*</modifier></type> <name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>zoom</name></name> <operator>&gt;=</operator> <literal type="number">.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>aspect_ratio</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>video_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>video_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>beginning_of_media_percent</name> <init>= <expr><literal type="number">.05f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name>beginning_of_media_sec</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>beginning_of_media</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>position</name></name> <operator>&lt;=</operator> <name>beginning_of_media_percent</name> <operator>&amp;&amp;</operator>
<name><name>input</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><name>beginning_of_media_sec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>end_of_media_percent</name> <init>= <expr><literal type="number">.95f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name>end_of_media_sec</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>end_of_media</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>position</name></name> <operator>&gt;=</operator> <name>end_of_media_percent</name> <operator>&amp;&amp;</operator>
<name><name>input</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>input</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><name>end_of_media_sec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>vlc_player_UpdateMediaType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_input</name></name><modifier>*</modifier></type> <name>input</name></decl></parameter>,
<parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>ml</name></decl></parameter>, <parameter><decl><type><name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>media</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>VLC_ML_MEDIA_TYPE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_type_t</name></type> <name>media_type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>video_track_vector</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>media_type</name> <operator>=</operator> <name>VLC_ML_MEDIA_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>audio_track_vector</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>media_type</name> <operator>=</operator> <name>VLC_ML_MEDIA_TYPE_AUDIO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_ml_media_set_type</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>media_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>media_type</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_CompareAssignState</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target_ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>input_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><operator>*</operator><name>target_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><operator>*</operator><name>input_ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>input</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>target</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>target</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>input</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>target</name> <operator>!=</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>input</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>target</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>target_ptr</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>input_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>target_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_UpdateMLStates</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>priv</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>ml</name> <init>= <expr><call><name>vlc_ml_instance_get</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ml</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>media</name> <init>= <expr><call><name>vlc_ml_get_media_by_mrl</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>media</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>vlc_ml_new_external_media</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>media</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>media</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>VLC_ML_MEDIA_TYPE_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_player_UpdateMediaType</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>VLC_ML_MEDIA_TYPE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>end_of_media</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_ml_media_increase_playcount</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>beginning_of_media</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>end_of_media</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name> <operator>&gt;=</operator> <literal type="number">.0f</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_ml_media_set_playback_state</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>,
<argument><expr><name>VLC_ML_PLAYBACK_STATE_PROGRESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>rate</name></name> <operator>!=</operator> <name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>rate</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>rate</name></name> <operator>!=</operator> <literal type="number">1.f</literal> <operator>||</operator> <name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>rate</name></name> <operator>!=</operator> <literal type="number">.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name><modifier>*</modifier></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name><modifier>*</modifier></type> <name>vout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>t</argument>, <argument>&amp;input-&gt;video_track_vector</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>selected</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vlc_player_GetEsIdVout</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vout</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>order</name> <operator>==</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>vout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>aspect_ratio</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>crop</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>deinterlace</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>video_filter</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_CompareAssignState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>aspect_ratio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aspect_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_CompareAssignState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>crop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_CompareAssignState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deinterlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_CompareAssignState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>video_filter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>video_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>video_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>deinterlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>crop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aspect_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>zoom</name> <init>= <expr><call><name>var_GetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zoom</name> <operator>!=</operator> <name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>zoom</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>zoom</name> <operator>!=</operator> <literal type="number">1.f</literal> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>zoom</name></name> <operator>&gt;=</operator> <literal type="number">.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <name>zoom</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>video_track_ids</name> <init>=
<expr><call><name>vlc_player_input_GetSelectedTrackStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>audio_track_ids</name> <init>=
<expr><call><name>vlc_player_input_GetSelectedTrackStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtitle_track_ids</name> <init>=
<expr><call><name>vlc_player_input_GetSelectedTrackStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_CompareAssignState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_video_track</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>video_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_CompareAssignState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_audio_track</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_CompareAssignState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_subtitle_track</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtitle_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>video_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>audio_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subtitle_track_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_ml_media_set_all_playback_states</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_ml_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_ml_release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_RestorePlaybackPos</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_input_RestoreMlStates</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
