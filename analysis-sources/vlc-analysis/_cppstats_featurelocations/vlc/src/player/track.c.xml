<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\player\track.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_player_program_DupTitle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>title</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dup</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dup</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type>
<name>vlc_player_program_New</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>prgm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prgm</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>prgm</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>vlc_player_program_DupTitle</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prgm</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>prgm</name><operator>-&gt;</operator><name>group_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prgm</name><operator>-&gt;</operator><name>selected</name></name> <operator>=</operator> <name><name>prgm</name><operator>-&gt;</operator><name>scrambled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>prgm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_player_program_Update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>prgm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prgm</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>vlc_player_program_DupTitle</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>prgm</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_ENOMEM</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type>
<name>vlc_player_program_Dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>dup</name> <init>=
<expr><call><name>vlc_player_program_New</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>selected</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>selected</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>scrambled</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>scrambled</name></name></expr>;</expr_stmt>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_program_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>prgm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type>
<name>vlc_player_program_vector_FindById</name><parameter_list>(<parameter><decl><type><name>vlc_player_program_vector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prgm</name><operator>-&gt;</operator><name>group_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>prgm</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type>
<name>vlc_player_track_priv_New</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>trackpriv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trackpriv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>vout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>vout_order</name></name> <operator>=</operator> <name>VLC_VOUT_ORDER_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>selected_by_user</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name> <operator>=</operator> <call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>trackpriv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_track_priv_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trackpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_track_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr>struct <name>vlc_player_track_priv</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_track_priv_Delete</name><argument_list>(<argument><expr><name>trackpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type>
<name>vlc_player_track_Dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>duppriv</name> <init>=
<expr><call><name>vlc_player_track_priv_New</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duppriv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>duppriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>selected</name></name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>duppriv</name><operator>-&gt;</operator><name>t</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_player_track_priv_Update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>dup</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmtdup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmtdup</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmtdup</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type>
<name>vlc_player_track_vector_FindById</name><parameter_list>(<parameter><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>trackpriv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>vlc_player_GetFirstSelectedTrackId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_player_track_vector</name><modifier>*</modifier></type> <name>tracks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name><modifier>*</modifier></type> <name>t</name></decl>;</decl_stmt>
<macro><name>vlc_vector_foreach</name><argument_list>(<argument>t</argument>, <argument>tracks</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>selected</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
