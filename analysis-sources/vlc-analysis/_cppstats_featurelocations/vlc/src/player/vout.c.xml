<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\player\vout.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/resource.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_vout_SendEvent</name><parameter_list>(<parameter><type><name>player</name></type></parameter>, <parameter><type><name>event</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vlc_mutex_lock(&amp;player-&gt;vout_listeners_lock); vlc_player_vout_listener_id *listener; vlc_list_foreach(listener, &amp;player-&gt;vout_listeners, node) { if (listener-&gt;cbs-&gt;event) listener-&gt;cbs-&gt;event(__VA_ARGS__, listener-&gt;cbs_data); } vlc_mutex_unlock(&amp;player-&gt;vout_listeners_lock); } while(0)</cpp:value></cpp:define>










<function><type><name>vout_thread_t</name> <modifier>*</modifier></type>
<name>vlc_player_vout_Hold</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>input_resource_HoldVout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>vout</name></expr> ?</condition><then> <expr><name>vout</name></expr> </then><else>: <expr><call><name>input_resource_HoldDummyVout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>vlc_player_vout_HoldAll</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_resource_HoldVouts</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vouts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vouts</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vouts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vouts</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vouts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>input_resource_HoldDummyVout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>vouts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_player_vout_listener_id</name> <modifier>*</modifier></type>
<name>vlc_player_vout_AddListener</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_vout_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_vout_listener_id</name> <modifier>*</modifier></type><name>listener</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>listener</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>cbs_data</name></name> <operator>=</operator> <name>cbs_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listener</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>listener</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_vout_RemoveListener</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name>vlc_player_vout_listener_id</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>vlc_player_vout_IsFullscreen</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fs</name> <init>= <expr><call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_player_VoutCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oldval</name><operator>.</operator><name>b_bool</name></name> <operator>!=</operator> <name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_vout_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_fullscreen_changed</name></expr></argument>,
<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>oldval</name><operator>.</operator><name>b_bool</name></name> <operator>!=</operator> <name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_vout_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_wallpaper_mode_changed</name></expr></argument>,
<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>osd_vars</name><index>[]</index><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"secondary-sub-margin"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"aspect-ratio"</literal></expr>, <expr><literal type="string">"autoscale"</literal></expr>, <expr><literal type="string">"crop"</literal></expr>, <expr><literal type="string">"crop-bottom"</literal></expr>,
<expr><literal type="string">"crop-top"</literal></expr>, <expr><literal type="string">"crop-left"</literal></expr>, <expr><literal type="string">"crop-right"</literal></expr>, <expr><literal type="string">"deinterlace"</literal></expr>,
<expr><literal type="string">"deinterlace-mode"</literal></expr>, <expr><literal type="string">"sub-margin"</literal></expr>, <expr><literal type="string">"secondary-sub-margin"</literal></expr>, <expr><literal type="string">"zoom"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>vlc_player_vout_AddCallbacks</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>vlc_player_VoutCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>, <argument><expr><name>vlc_player_VoutCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>osd_vars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name><name>osd_vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vlc_player_vout_OSDCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_vout_DelCallbacks</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>vlc_player_VoutCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>, <argument><expr><name>vlc_player_VoutCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>osd_vars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name><name>osd_vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vlc_player_vout_OSDCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_vout_SetVar</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_SetChecked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_player_vout_TriggerOption</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>input_resource_HoldVout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>vlc_player_vout_SetFullscreen</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>vlc_player_vout_SetVar</name><argument_list>(<argument>player</argument>, <argument><literal type="string">"fullscreen"</literal></argument>, <argument>VLC_VAR_BOOL</argument>,
<argument>(vlc_value_t) { .b_bool = enabled }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>vlc_player_vout_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_fullscreen_changed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>vlc_player_vout_IsWallpaperModeEnabled</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wm</name> <init>= <expr><call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>wm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_vout_SetWallpaperModeEnabled</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>vlc_player_vout_SetVar</name><argument_list>(<argument>player</argument>, <argument><literal type="string">"video-wallpaper"</literal></argument>, <argument>VLC_VAR_BOOL</argument>,
<argument>(vlc_value_t) { .b_bool = enabled }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>vlc_player_vout_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_wallpaper_mode_changed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_vout_Snapshot</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_vout_TriggerOption</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"video-snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
