<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\player\title.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type>
<name>vlc_player_title_list_Hold</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type><name>titles</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>titles</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>titles</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_player_title_list_Release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type><name>titles</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_atomic_rc_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>titles</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>title_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>title_idx</name> <operator>&lt;</operator> <name><name>titles</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>title_idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>= <expr><operator>&amp;</operator><name><name>titles</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>title_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>title</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>chapter_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chapter_idx</name> <operator>&lt;</operator> <name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>;</condition>
<incr><expr><operator>++</operator><name>chapter_idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>chapter</name> <init>=
<expr><operator>&amp;</operator><name><name>title</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>chapter_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>chapter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>title</name><operator>-&gt;</operator><name>chapters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>input_title_GetName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_title_t</name></name> <modifier>*</modifier></type><name>input_title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>title_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>length_str</name><index>[<expr><name>MSTRTIME_MAX_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" []"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_title</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>length_str</name></expr></argument>, <argument><expr><literal type="string">" ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>secstotimestr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>length_str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>input_title</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>length_str</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>length_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input_title</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>&amp;&amp;</operator> <name><name>input_title</name><operator>-&gt;</operator><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dup</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>input_title</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>length_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dup</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Title %i%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>title_offset</name></expr></argument>, <argument><expr><name>length_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>seekpoint_GetName</name><parameter_list>(<parameter><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>seekpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chapter_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>&amp;&amp;</operator> <name><name>seekpoint</name><operator>-&gt;</operator><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dup</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Chapter %i"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>chapter_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type>
<name>vlc_player_title_list_Create</name><parameter_list>(<parameter><decl><type><name>input_title_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>title_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chapter_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mul_overflow</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vlc_player_title</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_overflow</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vlc_player_title_list</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type><name>titles</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>titles</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>titles</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>titles</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>title_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>title_idx</name> <operator>&lt;</operator> <name><name>titles</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>title_idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_title_t</name></name> <modifier>*</modifier></type><name>input_title</name> <init>= <expr><name><name>array</name><index>[<expr><name>title_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>= <expr><operator>&amp;</operator><name><name>titles</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>title_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>title</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>input_title_GetName</name><argument_list>(<argument><expr><name>input_title</name></expr></argument>, <argument><expr><name>title_idx</name></expr></argument>, <argument><expr><name>title_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>title</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>input_title</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>title</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>input_title</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>seekpoint_count</name> <init>= <expr><ternary><condition><expr><name><name>input_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name><name>input_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>=</operator> <name>seekpoint_count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>chapters</name> <init>= <expr><ternary><condition><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:
<expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>chapters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chapters</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>chapter_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chapter_idx</name> <operator>&lt;</operator> <name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>;</condition>
<incr><expr><operator>++</operator><name>chapter_idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>chapter</name> <init>= <expr><operator>&amp;</operator><name><name>chapters</name><index>[<expr><name>chapter_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>seekpoint</name> <init>= <expr><name><name>input_title</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>chapter_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chapter</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>seekpoint_GetName</name><argument_list>(<argument><expr><name>seekpoint</name></expr></argument>, <argument><expr><name>chapter_idx</name></expr></argument>,
<argument><expr><name>chapter_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chapter</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>seekpoint</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chapter</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>=</operator> <name>chapter_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>seekpoint_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>title</name><operator>-&gt;</operator><name>chapters</name></name> <operator>=</operator> <name>chapters</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>title</name><operator>-&gt;</operator><name>name</name></name> <operator>||</operator> <name>seekpoint_count</name> <operator>!=</operator> <name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>titles</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>title_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_title_list_Release</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>titles</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type>
<name>vlc_player_title_list_GetAt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type><name>titles</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>titles</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>titles</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>vlc_player_title_list_GetCount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type><name>titles</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>titles</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
