<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\video_output\video_widgets.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_osd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_spuregion_helper.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_EMPTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FILLED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_BLUE</name></cpp:macro> <cpp:value>0x2badde</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_TRANSPARENT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_WHITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_BLUE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_BLUE_SHADE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_PALETTE_COLOR</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>rgb</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{uint8_t color[4] = { HEX2YUV(rgb), alpha };memcpy( &amp;palette.palette[id], &amp;color, 4 );}</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawRect</name><parameter_list>(<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>x1</name> <operator>&gt;</operator> <name>x2</name> <operator>||</operator> <name>y1</name> <operator>&gt;</operator> <name>y2</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fill</name> <operator>==</operator> <name>STYLE_FILLED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>pitch</name> <operator>*</operator> <name>y1</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>pitch</name> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y1</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y2</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>x1</name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>x1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawTriangle</name><parameter_list>(<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>color</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><name>y1</name> <operator>+</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_swap</name> <init>= <expr><operator>(</operator><name>x1</name> <operator>&gt;</operator> <name>x2</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y1</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>mid</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name>y</name> <operator>-</operator> <name>y1</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fill</name> <operator>==</operator> <name>STYLE_FILLED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>b_swap</name></expr> ?</condition><then> <expr><call><name>__MAX</name><argument_list>(<argument><expr><name>x1</name> <operator>-</operator> <name>h</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>x1</name> <operator>+</operator> <name>h</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>color</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>b_swap</name><operator>)</operator></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><name>x1</name></expr></else></ternary></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b_swap</name><operator>)</operator></expr> ?</condition><then> <expr><name>x1</name></expr> </then><else>: <expr><name>w</name></expr></else></ternary></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>color</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>b_swap</name><operator>)</operator></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><name>x1</name></expr></else></ternary></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>h</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b_swap</name><operator>)</operator></expr> ?</condition><then> <expr><name>x1</name></expr> </then><else>: <expr><name>w</name></expr></else></ternary></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>x1</name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <name>y</name></expr> ]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>x1</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>b_swap</name></expr> ?</condition><then> <expr><operator>-</operator><name>h</name></expr> </then><else>: <expr><name>h</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>pitch</name> <operator>*</operator> <name>y</name></expr> ]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>x1</name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>h</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>x1</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>b_swap</name></expr> ?</condition><then> <expr><operator>-</operator><name>h</name></expr> </then><else>: <expr><name>h</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>h</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>OSDRegion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name></decl>;</decl_stmt>
<macro><name>SET_PALETTE_COLOR</name><argument_list>(<argument>COL_WHITE</argument>, <argument><literal type="number">0xffffff</literal></argument>, <argument>STYLE_ALPHA_OPAQUE</argument>)</argument_list></macro>
<macro><name>SET_PALETTE_COLOR</name><argument_list>(<argument>COL_TRANSPARENT</argument>, <argument><literal type="number">0xffffff</literal></argument>, <argument>STYLE_ALPHA_TRANSPARENT</argument>)</argument_list></macro>
<macro><name>SET_PALETTE_COLOR</name><argument_list>(<argument>COL_BLUE</argument>, <argument>RGB_BLUE</argument>, <argument>STYLE_ALPHA_OPAQUE</argument>)</argument_list></macro>
<macro><name>SET_PALETTE_COLOR</name><argument_list>(<argument>COL_BLUE_SHADE</argument>, <argument>RGB_BLUE</argument>, <argument><literal type="number">0x40</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name><name>palette</name><operator>.</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>
<name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>
<name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <operator>&amp;</operator><name>palette</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDER_MARGIN_BASE</name></cpp:macro> <cpp:value>0.10</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>OSDSlider</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>margin</name> <init>= <expr><name>size</name> <operator>*</operator> <name>SLIDER_MARGIN_BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>marginbottom</name> <init>= <expr><name>size</name> <operator>*</operator> <name>SLIDER_MARGIN_BASE</name> <operator>*</operator> <literal type="number">0.6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_padding</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OSD_HOR_SLIDER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>margin</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>*</operator> <literal type="number">0.05</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name>margin</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>-</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>-</operator> <name>marginbottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator> <literal type="number">0.025</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>margin</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>-</operator> <name>margin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name>margin</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>-</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_padding</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>height</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_padding</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>OSDRegion</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_x</name> <init>= <expr><name>i_padding</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos_y</name></decl>, <decl><type ref="prev"/><name>pos_xend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos_yend</name> <init>= <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_padding</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OSD_HOR_SLIDER</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>pos_y</name> <operator>=</operator> <name>i_padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_xend</name> <operator>=</operator> <name>pos_x</name> <operator>+</operator> <operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_padding</name><operator>)</operator> <operator>*</operator> <name>position</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos_y</name> <operator>=</operator> <name>height</name> <operator>-</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_padding</name><operator>)</operator> <operator>*</operator> <name>position</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_xend</name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_padding</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_BLUE_SHADE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_BLUE</name></expr></argument>, <argument><expr><name>pos_x</name></expr></argument>, <argument><expr><name>pos_y</name></expr></argument>, <argument><expr><name>pos_xend</name></expr></argument>, <argument><expr><name>pos_yend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>OSDIcon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>size_ratio</name> <init>= <expr><literal type="number">0.05</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>margin_ratio</name> <init>= <expr><literal type="number">0.07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name>size</name> <operator>*</operator> <name>size_ratio</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name>size</name> <operator>*</operator> <name>size_ratio</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>-</operator> <name>margin_ratio</name> <operator>*</operator> <name>size</name> <operator>-</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name>margin_ratio</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>height</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>OSDRegion</name><argument_list>(<argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>-</operator> <name>height</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_TRANSPARENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OSD_PAUSE_ICON</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bar_width</name> <init>= <expr><name>width</name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_WHITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bar_width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_WHITE</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>bar_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OSD_PLAY_ICON</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>width</name> <operator>-</operator> <name>mid</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DrawTriangle</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_WHITE</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>delta</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>width</name> <operator>-</operator> <name>mid</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_WHITE</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>mid</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>delta</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>mid</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawTriangle</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_WHITE</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OSD_MUTE_ICON</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y1</name> <operator>&lt;=</operator> <name>height</name> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawRect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>STYLE_FILLED</name></expr></argument>, <argument><expr><name>COL_BLUE</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>y1</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
}</block></struct></type> <name>osdwidget_spu_updater_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OSDWidgetValidate</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>has_src_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_src</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>has_dst_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_dst</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>has_src_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>fmt_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_dst_changed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OSDWidgetUpdate</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_dst</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>osdwidget_spu_updater_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><operator>*</operator><name>fmt_dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OSD_HOR_SLIDER</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OSD_VERT_SLIDER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>OSDSlider</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>OSDIcon</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OSDWidgetDestroy</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OSDWidget</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"osd"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OSD_HOR_SLIDER</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OSD_VERT_SLIDER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>osdwidget_spu_updater_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_updater_t</name></type> <name>updater</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pf_validate</name> <operator>=</operator> <name>OSDWidgetValidate</name></expr>,
<expr><operator>.</operator><name>pf_update</name> <operator>=</operator> <name>OSDWidgetUpdate</name></expr>,
<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>OSDWidgetDestroy</name></expr>,
<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>sys</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><call><name>subpicture_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>updater</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subpic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_fade</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_PutSubpicture</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_OSDSlider</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>OSDWidget</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_OSDIcon</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>OSDWidget</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
