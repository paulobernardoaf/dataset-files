<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\video_output\window.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inhibit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vout_window_t</name></type> <name>wnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>inhibit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>inhibit_windowed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fullscreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block></struct></type> <name>window_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vout_window_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>activate</name>)<parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>func</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vout_window_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>activate</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_objres_clear</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>forced</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vout_window_t</name> <modifier>*</modifier></type><name>vout_window_New</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vout_window_owner_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>window_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name> <init>= <expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>wnd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>has_double_click</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>owner</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <operator>*</operator><name>owner</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dss</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"disable-screensaver"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>inhibit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>inhibit_windowed</name></name> <operator>=</operator> <name>dss</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>fullscreen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>vlc_module_load</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="string">"vout window"</literal></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>vout_window_start</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dss</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>inh</name> <init>= <expr><call><name>vlc_inhibit_Create</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>inhibit</name></name> <operator>=</operator> <name>inh</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>window</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vout_window_Enable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vout_window_cfg_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>enable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>enable</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_window_SetInhibition</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_window_Disable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_window_SetInhibition</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>disable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>disable</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_window_Delete</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>window_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>window_t</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>inhibit</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>inh</name> <init>= <expr><name><name>w</name><operator>-&gt;</operator><name>inhibit</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>inhibit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_inhibit_Destroy</name><argument_list>(<argument><expr><name>inh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_objres_clear</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_window_UpdateInhibitionUnlocked</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>window_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>window_t</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>VLC_INHIBIT_NONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>active</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>inhibit_windowed</name></name> <operator>||</operator> <name><name>w</name><operator>-&gt;</operator><name>fullscreen</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>VLC_INHIBIT_VIDEO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>inhibit</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_inhibit_Set</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>inhibit</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_window_SetInhibition</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>window_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>window_t</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_UpdateInhibitionUnlocked</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_window_ReportWindowed</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>window_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>window_t</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>inhibit_windowed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>fullscreen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_UpdateInhibitionUnlocked</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>windowed</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>windowed</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_window_ReportFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>window_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>window_t</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>inhibit_windowed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>fullscreen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_window_UpdateInhibitionUnlocked</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>fullscreened</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>fullscreened</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_CLICK_TIME</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(300)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>vout_display_window</name>
<block>{
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mouse_t</name></type> <name>mouse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_left_press</name></decl>;</decl_stmt>
}</block></struct></type> <name>vout_display_window_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_ResizeNotify</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_window_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>vout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="string">"resized to %ux%u"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_ChangeDisplaySize</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_CloseNotify</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="string">"window closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_StateNotify</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>window_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_window_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>vout</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>states</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VOUT_WINDOW_STATE_NORMAL</name></expr>]</index> <operator>=</operator> <literal type="string">"normal"</literal></expr>,
<expr><index>[<expr><name>VOUT_WINDOW_STATE_ABOVE</name></expr>]</index> <operator>=</operator> <literal type="string">"above"</literal></expr>,
<expr><index>[<expr><name>VOUT_WINDOW_STATE_BELOW</name></expr>]</index> <operator>=</operator> <literal type="string">"below"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window_state</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="string">"window state changed: %s"</literal></expr></argument>, <argument><expr><name><name>states</name><index>[<expr><name>window_state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-state"</literal></expr></argument>, <argument><expr><name>window_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_FullscreenNotify</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_window_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>vout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>id</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"window set to fullscreen on %s"</literal></expr>
</then><else>: <expr><literal type="string">"window set to fullscreen"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-fullscreen-output"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>id</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-fullscreen"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_WindowingNotify</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_window_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>vout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="string">"window set windowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-fullscreen"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_MouseEvent</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vout_window_mouse_event_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_window_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>vout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mouse</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b_double_click</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VOUT_WINDOW_MOUSE_MOVED</name></expr>:</case>
<expr_stmt><expr><call><name>vlc_mouse_SetPosition</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>last_left_press</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VOUT_WINDOW_MOUSE_PRESSED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>has_double_click</name></name>
<operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>button_mask</name></name> <operator>==</operator> <name>MOUSE_BUTTON_LEFT</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_mouse_IsLeftPressed</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>last_left_press</name></name> <operator>!=</operator> <name>INT64_MIN</name>
<operator>&amp;&amp;</operator> <name>now</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>last_left_press</name></name> <operator>&lt;</operator> <name>DOUBLE_CLICK_TIME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b_double_click</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>last_left_press</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>last_left_press</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mouse_SetPressed</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>button_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VOUT_WINDOW_MOUSE_RELEASED</name></expr>:</case>
<expr_stmt><expr><call><name>vlc_mouse_SetReleased</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>button_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VOUT_WINDOW_MOUSE_DOUBLE_CLICK</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>has_double_click</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b_double_click</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>vout_MouseState</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_KeyboardEvent</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-pressed"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_window_OutputEvent</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="string">"fullscreen output %s (%s) added"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="string">"fullscreen output %s removed"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vout_window_callbacks</name></name></type> <name>vout_display_window_cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>resized</name> <operator>=</operator> <name>vout_display_window_ResizeNotify</name></expr>,
<expr><operator>.</operator><name>closed</name> <operator>=</operator> <name>vout_display_window_CloseNotify</name></expr>,
<expr><operator>.</operator><name>state_changed</name> <operator>=</operator> <name>vout_display_window_StateNotify</name></expr>,
<expr><operator>.</operator><name>fullscreened</name> <operator>=</operator> <name>vout_display_window_FullscreenNotify</name></expr>,
<expr><operator>.</operator><name>windowed</name> <operator>=</operator> <name>vout_display_window_WindowingNotify</name></expr>,
<expr><operator>.</operator><name>mouse_event</name> <operator>=</operator> <name>vout_display_window_MouseEvent</name></expr>,
<expr><operator>.</operator><name>keyboard_event</name> <operator>=</operator> <name>vout_display_window_KeyboardEvent</name></expr>,
<expr><operator>.</operator><name>output_event</name> <operator>=</operator> <name>vout_display_window_OutputEvent</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>vout_window_t</name> <modifier>*</modifier></type><name>vout_display_window_New</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_window_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mouse_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mouse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>last_left_press</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>vout</name></name> <operator>=</operator> <name>vout</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modlist</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_owner_t</name></type> <name>owner</name> <init>= <expr><block>{
<expr><operator>.</operator><name>cbs</name> <operator>=</operator> <operator>&amp;</operator><name>vout_display_window_cbs</name></expr>,
<expr><operator>.</operator><name>sys</name> <operator>=</operator> <name>state</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-state"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-fullscreen"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-fullscreen-output"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>vout_window_New</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>vout</name></expr></argument>, <argument><expr><name>modlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>modlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>window</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>vout_display_window_Delete</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_window_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>vout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_window_Delete</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-fullscreen-output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-fullscreen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window-state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
