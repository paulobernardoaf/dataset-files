<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\stream_output\stream_output.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_output.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/input_interface.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG_BUFFER</name></cpp:undef>



<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sout_stream_url_to_chain</name><parameter_list>( <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>






<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_way</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>mrl_t</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mrl_Parse</name><parameter_list>( <parameter><decl><type><name>mrl_t</name> <modifier>*</modifier></type><name>p_mrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mrl_Clean</name><parameter_list>( <parameter><decl><type><name>mrl_t</name> <modifier>*</modifier></type><name>p_mrl</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sout_NewInstance</name></cpp:undef>




<function><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>sout_NewInstance</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_chain</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_dest</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_chain</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_chain</name> <operator>=</operator> <call><name>sout_stream_url_to_chain</name><argument_list>(
<argument><expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"sout-display"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_chain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_sout</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sout</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"stream output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sout</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><literal type="string">"using sout chain=`%s'"</literal></expr></argument>, <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sout</name><operator>-&gt;</operator><name>psz_sout</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sout</name><operator>-&gt;</operator><name>i_out_pace_nocontrol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sout</name><operator>-&gt;</operator><name>b_wants_substreams</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><literal type="string">"sout-mux-caching"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name> <operator>=</operator> <call><name>sout_StreamChainNew</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><name>psz_chain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_StreamControl</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>,
<argument><expr><name>SOUT_STREAM_WANTS_SUBSTREAMS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>b_wants_substreams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_sout</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><literal type="string">"stream chain failed for `%s'"</literal></expr></argument>, <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>psz_sout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_sout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>sout_DeleteInstance</name><parameter_list>( <parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type> <name>p_sout</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>sout_StreamChainDelete</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>psz_sout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_sout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>sout_instance_ControlsPace</name><parameter_list>( <parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>sout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>sout</name><operator>-&gt;</operator><name>i_out_pace_nocontrol</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>sout_InputNew</name><parameter_list>( <parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>p_input</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sout_packetizer_input_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <name>p_sout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>b_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><literal type="string">"adding a new sout input for `%4.4s` (sout_input: %p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>sout_StreamIdAdd</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><literal type="string">"new sout input failed (sout_input: %p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_input</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator> <name>p_input</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>sout_InputDelete</name><parameter_list>( <parameter><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><literal type="string">"removing a sout input (sout_input: %p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>sout_InputIsEmpty</name><parameter_list>( <parameter><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>sout_StreamControl</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>SOUT_STREAM_EMPTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sout_InputControlVa</name><parameter_list>( <parameter><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sout</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>SOUT_INPUT_SET_SPU_HIGHLIGHT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>sout_StreamControl</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>,
<argument><expr><name>SOUT_STREAM_ID_SPU_HIGHLIGHT</name></expr></argument>,
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sout_InputControl</name><parameter_list>( <parameter><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>sout_InputControlVa</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sout_InputFlush</name><parameter_list>( <parameter><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_StreamFlush</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>b_flushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>sout_InputSendBuffer</name><parameter_list>( <parameter><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>b_flushed</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>b_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_sout</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sout</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sout_AccessOutNew</name></cpp:undef>



<function><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>sout_AccessOutNew</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_access</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_access</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"access out"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_access</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_next</name> <operator>=</operator> <call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_access</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>,
<argument><expr><name>psz_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><ternary><condition><expr><name>psz_name</name></expr> ?</condition><then> <expr><name>psz_name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>
<call><name>module_need</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"sout access"</literal></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_access</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_access</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>sout_AccessOutDelete</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>sout_AccessOutSeek</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>p_access</name><operator>-&gt;</operator><name>pf_seek</name></name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ssize_t</name></type> <name>sout_AccessOutRead</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator> <ternary><condition><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_read</name></name></expr> ?</condition><then>
<expr><call><name><name>p_access</name><operator>-&gt;</operator><name>pf_read</name></name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>ssize_t</name></type> <name>sout_AccessOutWrite</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>p_access</name><operator>-&gt;</operator><name>pf_write</name></name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>sout_AccessOutControl</name> <parameter_list>(<parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>sout_MuxNew</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_mux</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_mux</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mux</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_next</name> <operator>=</operator> <call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_mux</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>, <argument><expr><name>psz_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name> <operator>=</operator> <name>p_access</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_add_stream_any_time</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_waiting_stream</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_add_stream_start</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>
<call><name>module_need</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"sout mux"</literal></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b_answer</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sout_MuxControl</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_answer</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_answer</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_answer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"muxer support adding stream at any time"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_add_stream_any_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_waiting_stream</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_mux</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>sout_MuxDelete</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>sout_input_t</name> <modifier>*</modifier></type><name>sout_MuxAddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_mux</name><operator>-&gt;</operator><name>b_add_stream_any_time</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_mux</name><operator>-&gt;</operator><name>b_waiting_stream</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"cannot add a new stream (unsupported while muxing "</literal>
<literal type="string">"to this format). You can try increasing sout-mux-caching value"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding a new input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_input</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_input_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_input</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name></name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"cannot add this stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name></name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_input</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>sout_MuxDeleteStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_waiting_stream</name></name>
<operator>&amp;&amp;</operator> <call><name>block_FifoCount</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_waiting_stream</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_FIND</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name></name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TAB_ERASE</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name></name></expr></argument>, <argument><expr><name>i_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"no more input streams for this mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>sout_MuxSendBuffer</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_waiting_stream</name></name> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_caching</name> <init>= <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"sout-mux-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_add_stream_start</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_add_stream_start</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>llabs</name><argument_list>( <argument><expr><name>i_dts</name> <operator>-</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_add_stream_start</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_caching</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>b_waiting_stream</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sout_MuxFlush</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_FifoEmpty</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>sout_MuxGetStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_blocks</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_dts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_blocks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>block_FifoCount</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_blocks</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>!</operator><name><name>p_mux</name><operator>-&gt;</operator><name>b_add_stream_any_time</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_FifoShow</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&lt;</operator> <name>i_dts</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_stream</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>pi_dts</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_dts</name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_stream</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>mrl_Parse</name><parameter_list>( <parameter><decl><type><name>mrl_t</name> <modifier>*</modifier></type><name>p_mrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_dup</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_parser</name> <init>= <expr><name>psz_dup</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_way</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>


<while>while<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name> <operator>!=</operator> <literal type="char">':'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name> <operator>!=</operator> <literal type="char">'}'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name> <operator>-</operator> <name>psz_dup</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>psz_parser</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_access</name> <operator>=</operator> <name>psz_way</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name>psz_dup</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_parser</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>psz_parser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>psz_parser</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name> <operator>+=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name>psz_parser</name></expr> ;</expr_stmt>


<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_dup</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>psz_access</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>psz_access</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_access</name> <operator>=</operator> <name>psz_parser</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name> <operator>!=</operator> <literal type="char">'/'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name> <operator>!=</operator> <literal type="char">'}'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_parser</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>psz_way</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_way</name> <operator>=</operator> <name>psz_parser</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_mrl</name><operator>-&gt;</operator><name>psz_access</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mrl</name><operator>-&gt;</operator><name>psz_way</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_way</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mrl</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>VLC_SUCCESS</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>mrl_Clean</name><parameter_list>( <parameter><decl><type><name>mrl_t</name> <modifier>*</modifier></type><name>p_mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_mrl</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_mrl</name><operator>-&gt;</operator><name>psz_way</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_mrl</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type> <name>sout_StreamDelete</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name> <init>= <expr><operator>(</operator><name>sout_instance_t</name> <operator>*</operator><operator>)</operator><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"destroying chain... (name=%s)"</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sout</name><operator>-&gt;</operator><name>i_out_pace_nocontrol</name></name> <operator>-=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_module</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"destroying chain done"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>sout_StreamChainDelete</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_first</name></decl></parameter>, <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><name>p_first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_first</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sout_StreamDelete</name><argument_list>(<argument><expr><name>p_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_first</name> <operator>==</operator> <name>p_last</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_first</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>sout_stream_t</name> <modifier>*</modifier></type><name>sout_StreamNew</name><parameter_list>( <parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>p_next</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"sout filter"</literal></expr> </then><else>: <expr><literal type="string">"sout output"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_stream</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"stream out"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <name>p_sout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name>p_cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><literal type="string">"stream=`%s'"</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_StreamDelete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sout</name><operator>-&gt;</operator><name>i_out_pace_nocontrol</name></name> <operator>+=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name></expr>;</expr_stmt>
<return>return <expr><name>p_stream</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>sout_StreamChainNew</name><parameter_list>(<parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_chain</name></decl></parameter>,
<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_next</name></decl></parameter>, <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_chain</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_chain</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pp_last</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_next</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_parser</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>cfg</name></decl>, <decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while<condition>(<expr><name>psz_parser</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rest_chain</name> <init>= <expr><call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_cfg</name></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_rest_chain</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>module</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_next</name> <operator>=</operator> <call><name>sout_StreamNew</name><argument_list>( <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_next</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pp_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>module</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_next</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>modules</name> <init>= <expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>modules</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sout_StreamDelete</name><argument_list>(<argument><expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>module</name></expr></argument>, <argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while<condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sout_stream_url_to_chain</name><parameter_list>( <parameter><decl><type><name>bool</name></type> <name>b_sout_display</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mrl_t</name></type> <name>mrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_chain</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mrl_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mrl</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rtplist</name><index>[]</index></name> <init>= <expr><literal type="string">"dccp\0sctp\0tcp\0udplite\0"</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>rtplist</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>a</name></expr>;</condition> <incr><expr><name>a</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>mrl</name><operator>.</operator><name>psz_access</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>rtp</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>mrl</name><operator>.</operator><name>psz_access</name></name></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>mrl</name><operator>.</operator><name>psz_access</name></name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>rtp</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>mrl</name><operator>.</operator><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>mrl</name><operator>.</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"]:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>mrl</name><operator>.</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>port</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>psz_chain</name></expr></argument>,
<argument><expr><literal type="string">"rtp{mux=\"%s\",proto=\"%s\",dst=\"%s%s%s\"}"</literal></expr></argument>,
<argument><expr><name><name>mrl</name><operator>.</operator><name>psz_way</name></name></expr></argument>, <argument><expr><name><name>mrl</name><operator>.</operator><name>psz_access</name></name></expr></argument>, <argument><expr><name><name>mrl</name><operator>.</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><literal type="string">"\",port=\""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><name>port</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>psz_chain</name></expr></argument>,
<argument><expr><literal type="string">"standard{mux=\"%s\",access=\"%s\",dst=\"%s\"}"</literal></expr></argument>,
<argument><expr><name><name>mrl</name><operator>.</operator><name>psz_way</name></name></expr></argument>, <argument><expr><name><name>mrl</name><operator>.</operator><name>psz_access</name></name></expr></argument>, <argument><expr><name><name>mrl</name><operator>.</operator><name>psz_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>psz_chain</name> <operator>&amp;&amp;</operator> <name>b_sout_display</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"duplicate{dst=display,dst=%s}"</literal></expr></argument>, <argument><expr><name>psz_chain</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_chain</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mrl_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_chain</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sout_EncoderCreate</name></cpp:undef>
<function><type><name>encoder_t</name> <modifier>*</modifier></type><name>sout_EncoderCreate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>owner_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>owner_size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>encoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>owner_size</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
