<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\android\specific.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>JavaVM</name> <modifier>*</modifier></type><name>s_jvm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERIC_DIR_COUNT</name></cpp:macro> <cpp:value>(VLC_VIDEOS_DIR - VLC_DESKTOP_DIR + 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_generic_names</name><index>[<expr><name>GENERIC_DIR_COUNT</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getExternalStoragePublicDirectory</name></decl>;</decl_stmt>
}</block> <decl><name>Environment</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getAbsolutePath</name></decl>;</decl_stmt>
}</block> <decl><name>File</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getProperty</name></decl>;</decl_stmt>
}</block> <decl><name>System</name></decl>;</struct>
}</block> <decl><name>fields</name> <init>= <expr><block>{ <expr><operator>.</operator><name><name>Environment</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_java_string</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>id</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>jstring</name></type> <name>jstr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_str</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_strdup</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jstr</name></expr></argument>, <argument><expr><name>psz_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_strdup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>JNI_OnUnload</name><parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type> <name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>reserved</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GENERIC_DIR_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ppsz_generic_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>vm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>Environment</name><operator>.</operator><name>clazz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>Environment</name><operator>.</operator><name>clazz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>clazz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>clazz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>jint</name></type>
<name>JNI_OnLoad</name><parameter_list>(<parameter><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>s_jvm</name> <operator>=</operator> <name>vm</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>vm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"android/os/Environment"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_env_names</name><index>[<expr><name>GENERIC_DIR_COUNT</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>, 
<expr><literal type="string">"DIRECTORY_DOWNLOADS"</literal></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><literal type="string">"DIRECTORY_DOCUMENTS"</literal></expr>, 
<expr><literal type="string">"DIRECTORY_MUSIC"</literal></expr>, 
<expr><literal type="string">"DIRECTORY_PICTURES"</literal></expr>, 
<expr><literal type="string">"DIRECTORY_MOVIES"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GENERIC_DIR_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ppsz_env_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ppsz_generic_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_java_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>,
<argument><expr><name><name>ppsz_env_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>Environment</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>Environment</name><operator>.</operator><name>getExternalStoragePublicDirectory</name></name> <operator>=</operator>
<call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>,
<argument><expr><literal type="string">"getExternalStoragePublicDirectory"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/lang/String;)Ljava/io/File;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"java/io/File"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>File</name><operator>.</operator><name>getAbsolutePath</name></name> <operator>=</operator>
<call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><literal type="string">"getAbsolutePath"</literal></expr></argument>,
<argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"java/lang/System"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>getProperty</name></name> <operator>=</operator>
<call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><literal type="string">"getProperty"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/lang/String;)Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>JNI_VERSION_1_2</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>clazz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>JNI_OnUnload</name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><name>reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>system_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>system_Configure</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>pp_argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i_argc</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pp_argv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s_jvm</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"android-jvm"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"android-jvm"</literal></expr></argument>, <argument><expr><name>s_jvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetHomeDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_home</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_home</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fallback</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_home</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fullpath</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_fullpath</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>psz_home</name></expr></argument>, <argument><expr><name>psz_dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fallback</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_mkdir</name><argument_list>(<argument><expr><name>psz_fullpath</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_fullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fallback</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>psz_fullpath</name></expr>;</return>

<label><name>fallback</name>:</label>
<return>return <expr><ternary><condition><expr><name>psz_default_dir</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_default_dir</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JNIEnv</name> <modifier>*</modifier></type><name>get_env</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_detach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>s_jvm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>s_jvm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>JavaVMAttachArgs</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>JNI_VERSION_1_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"config_GetGenericDir"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>s_jvm</name><operator>)</operator><operator>-&gt;</operator><name>AttachCurrentThread</name></name><argument_list>(<argument><expr><name>s_jvm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_detach</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_detach</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>env</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>release_env</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b_detach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b_detach</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>s_jvm</name><operator>)</operator><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>s_jvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetGenericDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_detach</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>get_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jstring</name></type> <name>jname</name><init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>jfile</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>Environment</name><operator>.</operator><name>clazz</name></name></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>Environment</name><operator>.</operator><name>getExternalStoragePublicDirectory</name></name></expr></argument>,
<argument><expr><name>jname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jstring</name></type> <name>jpath</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jfile</name></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>File</name><operator>.</operator><name>getAbsolutePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jpath</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>release_env</name><argument_list>(<argument><expr><name>b_detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetUserDir</name> <parameter_list>(<parameter><decl><type><name>vlc_userdir_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_USERDATA_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetHomeDir</name><argument_list>(<argument><expr><literal type="string">".share"</literal></expr></argument>,
<argument><expr><literal type="string">"/sdcard/Android/data/org.videolan.vlc"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_CACHE_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetHomeDir</name><argument_list>(<argument><expr><literal type="string">".cache"</literal></expr></argument>,
<argument><expr><literal type="string">"/sdcard/Android/data/org.videolan.vlc/cache"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_HOME_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetHomeDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_CONFIG_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetHomeDir</name><argument_list>(<argument><expr><literal type="string">".config"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_DESKTOP_DIR</name></expr>:</case>
<case>case <expr><name>VLC_DOWNLOAD_DIR</name></expr>:</case>
<case>case <expr><name>VLC_TEMPLATES_DIR</name></expr>:</case>
<case>case <expr><name>VLC_PUBLICSHARE_DIR</name></expr>:</case>
<case>case <expr><name>VLC_DOCUMENTS_DIR</name></expr>:</case>
<case>case <expr><name>VLC_MUSIC_DIR</name></expr>:</case>
<case>case <expr><name>VLC_PICTURES_DIR</name></expr>:</case>
<case>case <expr><name>VLC_VIDEOS_DIR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <name>VLC_DESKTOP_DIR</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name>VLC_VIDEOS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name><name>ppsz_generic_names</name><index>[<expr><name>type</name> <operator>-</operator> <name>VLC_DESKTOP_DIR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_GetGenericDir</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetSysPath</name><parameter_list>(<parameter><decl><type><name>vlc_sysdir_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_SYSDATA_DIR</name></expr>:</case>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/system/usr/share"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_LIB_DIR</name></expr>:</case>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>config_GetLibDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>dir</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_getProxyUrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_detach</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_host</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>jhost</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jport</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>get_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>jstring</name></type> <name>jkey</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"http.proxyHost"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jkey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jkey</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jhost</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>clazz</name></name></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>getProperty</name></name></expr></argument>, <argument><expr><name>jkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jhost</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_host</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jhost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_host</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>psz_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>jkey</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"http.proxyPort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jkey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jkey</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jport</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>clazz</name></name></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>System</name><operator>.</operator><name>getProperty</name></name></expr></argument>, <argument><expr><name>jkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>jport</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_port</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jport</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_port</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>psz_port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>psz_port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jport</name></expr></argument>, <argument><expr><name>psz_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_ret</name></expr></argument>, <argument><expr><literal type="string">"http://%s%s%s"</literal></expr></argument>,
<argument><expr><name>psz_host</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_port</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_port</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>psz_port</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>psz_host</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jhost</name></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jhost</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jport</name></expr></argument>, <argument><expr><name>psz_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jport</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>release_env</name><argument_list>(<argument><expr><name>b_detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
