<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\win32\specific.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/libvlc_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/vlc_getopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>system_InitWSA</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WSAStartup</name><argument_list>(<argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>HIBYTE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WSACleanup</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>system_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>system_InitWSA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>system_InitWSA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Error: cannot initialize Winsocks\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enqueue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ipc_data_t</name>;</typedef>

<function><type><name>void</name></type> <name>system_Configure</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_argv</name><index>[]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one-instance"</literal></expr></argument> )</argument_list></call>
<operator>||</operator> <operator>(</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one-instance-when-started-from-file"</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"started-from-file"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hmutex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one instance mode ENABLED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>hmutex</name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="string">L"VLC ipc "</literal> <call><name>TEXT</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one instance mode DISABLED "</literal>
<literal type="string">"(mutex couldn't be created)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_ALREADY_EXISTS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_InternalAddIntf</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"win_msg,none"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>( <argument><expr><name>hmutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><name>HWND</name></type> <name>ipcwindow</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>( <argument><expr><name>hmutex</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>ipcwindow</name> <operator>=</operator> <call><name>FindWindow</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">L"VLC ipc "</literal> <call><name>TEXT</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one instance mode DISABLED "</literal>
<literal type="string">"(couldn't find 1st instance of program)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>( <argument><expr><name>hmutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name>i_argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>COPYDATASTRUCT</name></type> <name>wm_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ipc_data_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_opt</name> <operator>&lt;</operator> <name>i_argc</name></expr>;</condition> <incr><expr><name>i_opt</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_data</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>i_argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>enqueue</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"playlist-enqueue"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_opt</name> <operator>&lt;</operator> <name>i_argc</name></expr>;</condition> <incr><expr><name>i_opt</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i_data</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>i_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i_data</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i_data</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><name><name>wm_data</name><operator>.</operator><name>dwData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wm_data</name><operator>.</operator><name>cbData</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wm_data</name><operator>.</operator><name>lpData</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>( <argument><expr><name>ipcwindow</name></expr></argument>, <argument><expr><name>WM_COPYDATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>wm_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>( <argument><expr><name>hmutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>system_End</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>system_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
