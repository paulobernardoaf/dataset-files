<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\input\item.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<struct>struct <name>input_item_opaque</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>input_item_opaque</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name><name>enum</name> <name>input_item_type_e</name></name></type> <name>GuessType</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_net</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>input_item_SetErrorWhenReading</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_error</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_changed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_changed</name> <operator>=</operator> <name><name>p_i</name><operator>-&gt;</operator><name>b_error_when_reading</name></name> <operator>!=</operator> <name>b_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>b_error_when_reading</name></name> <operator>=</operator> <name>b_error</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_changed</name></expr> )</condition>
<block>{<block_content>
<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_i-&gt;event_manager</argument>, <argument>&amp;(vlc_event_t) {
.type = vlc_InputItemErrorWhenReadingChanged</argument>,
<argument>.u.input_item_error_when_reading_changed.new_value = b_error }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>input_item_SetPreparsed</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_preparsed</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_send_event</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_meta_GetStatus</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_status</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_preparsed</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>status</name> <operator>|</operator> <name>ITEM_PREPARSED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>status</name> <operator>&amp;</operator> <operator>~</operator><name>ITEM_PREPARSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>status</name> <operator>!=</operator> <name>new_status</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_meta_SetStatus</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>new_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_send_event</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_send_event</name></expr> )</condition>
<block>{<block_content>
<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_i-&gt;event_manager</argument>, <argument>&amp;(vlc_event_t) {
.type = vlc_InputItemPreparsedChanged</argument>,
<argument>.u.input_item_preparsed_changed.new_status = new_status }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetArtNotFound</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_not_found</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_meta_GetStatus</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_not_found</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <name>ITEM_ART_NOTFOUND</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>&amp;=</operator> <operator>~</operator><name>ITEM_ART_NOTFOUND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_meta_SetStatus</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetArtFetched</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_art_fetched</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_meta_GetStatus</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_art_fetched</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <name>ITEM_ART_FETCHED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>&amp;=</operator> <operator>~</operator><name>ITEM_ART_FETCHED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_meta_SetStatus</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetMeta</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>meta_type</name></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_i-&gt;event_manager</argument>, <argument>&amp;(vlc_event_t) {
.type = vlc_InputItemMetaChanged</argument>,
<argument>.u.input_item_meta_changed.meta_type = meta_type }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_CopyOptions</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>flagv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optv_realloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>flagv_realloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_parent</name><operator>-&gt;</operator><name>i_options</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>optv</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_parent</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>optv</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>optv</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flagv</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_parent</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>flagv</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>flagv</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_parent</name><operator>-&gt;</operator><name>i_options</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_parent</name><operator>-&gt;</operator><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>psz_dup</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flagv</name><index>[<expr><name>optc</name></expr>]</index></name> <operator>=</operator> <name><name>p_parent</name><operator>-&gt;</operator><name>optflagv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>optv</name><index>[<expr><name>optc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>psz_dup</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>optv</name> <operator>&amp;&amp;</operator> <name>flagv</name> <operator>&amp;&amp;</operator> <name>optc</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_child</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>INT_MAX</name> <operator>-</operator> <name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name> <operator>&gt;=</operator> <name>optc</name> <operator>&amp;&amp;</operator>
<name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>flagv</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name> <operator>+</operator> <name>optc</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flagv_realloc</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name><name>p_child</name><operator>-&gt;</operator><name>optflagv</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name> <operator>+</operator> <name>optc</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>flagv</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>flagv_realloc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_child</name><operator>-&gt;</operator><name>optflagv</name></name> <operator>=</operator> <name>flagv_realloc</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>optv</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name> <operator>+</operator> <name>optc</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optv_realloc</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name><name>p_child</name><operator>-&gt;</operator><name>ppsz_options</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name> <operator>+</operator> <name>optc</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>optv</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>optv_realloc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_child</name><operator>-&gt;</operator><name>ppsz_options</name></name> <operator>=</operator> <name>optv_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_child</name><operator>-&gt;</operator><name>ppsz_options</name></name> <operator>+</operator> <name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><name>optv</name></expr></argument>,
<argument><expr><name>optc</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>optv</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_child</name><operator>-&gt;</operator><name>optflagv</name></name> <operator>+</operator> <name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><name>flagv</name></expr></argument>,
<argument><expr><name>optc</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>flagv</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_child</name><operator>-&gt;</operator><name>i_options</name></name> <operator>+=</operator> <name>optc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_child</name><operator>-&gt;</operator><name>optflagc</name></name> <operator>+=</operator> <name>optc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_child</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>flagv_realloc</name> <operator>||</operator> <operator>!</operator><name>optv_realloc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>optc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>optv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>flagv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>optv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_item_HasErrorWhenReading</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>b_error_when_reading</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_error</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_item_MetaMatch</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_meta</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>meta_type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>psz_meta</name> <operator>&amp;&amp;</operator> <call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_meta</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_item_GetMetaLocked</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>meta_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>input_item_GetMeta</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>( <argument><expr><name>p_i</name></expr></argument>, <argument><expr><name>meta_type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>input_item_GetTitleFbName</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <ternary><condition><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <ternary><condition><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>input_item_GetName</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><ternary><condition><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_name</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>input_item_SetName</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>input_item_GetURI</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_s</name> <init>= <expr><ternary><condition><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_uri</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetURI</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strstr</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Warning: %s(\"%s\"): file path instead of URL.\n"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <call><name>GuessType</name><argument_list>( <argument><expr><name>p_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>b_net</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><name><name>p_i</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_FILE</name> <operator>||</operator> <name><name>p_i</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_DIRECTORY</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_filename</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_filename</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_filename</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_uri_decode</name><argument_list>( <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name><operator>=</operator><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"%s://%s:%u%s"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> ?</condition><then> <expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name><operator>=</operator><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"%s://%s%s"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr> ?</condition><then> <expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> ?</condition><then> <expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name><operator>=</operator><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%u%s"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> ?</condition><then> <expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name><operator>=</operator><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> ?</condition><then> <expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>-</operator><literal type="number">1</literal><operator>==</operator><name>r</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>psz_name</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>input_item_GetDuration</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name> <init>= <expr><name><name>p_i</name><operator>-&gt;</operator><name>i_duration</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_duration</name> <operator>==</operator> <name>INPUT_DURATION_INDEFINITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_duration</name> <operator>==</operator> <name>INPUT_DURATION_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_duration</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetDuration</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_send_event</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_i</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>!=</operator> <name>i_duration</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_i</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>i_duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_send_event</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_send_event</name></expr> )</condition>
<block>{<block_content>
<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_i-&gt;event_manager</argument>, <argument>&amp;(vlc_event_t) {
.type = vlc_InputItemDurationChanged</argument>,
<argument>.u.input_item_duration_changed.new_duration = i_duration }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>input_item_GetNowPlayingFb</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_meta</name> <init>= <expr><call><name>input_item_GetMeta</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>vlc_meta_NowPlaying</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_meta</name> <operator>||</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_meta</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>input_item_GetMeta</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>vlc_meta_ESNowPlaying</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>psz_meta</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_item_IsPreparsed</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_preparsed</name> <init>= <expr><ternary><condition><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr> ?</condition><then> <expr><operator>(</operator> <call><name>vlc_meta_GetStatus</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ITEM_PREPARSED</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_preparsed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_item_IsArtFetched</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_fetched</name> <init>= <expr><ternary><condition><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr> ?</condition><then> <expr><operator>(</operator> <call><name>vlc_meta_GetStatus</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ITEM_ART_FETCHED</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_fetched</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_item_ShouldPreparseSubItems</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <ternary><condition><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>input_item_t</name> <modifier>*</modifier></type><name>input_item_Hold</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>item_owner</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_Release</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>item_owner</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_atomic_rc_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_event_manager_fini</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_stats</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>input_item_opaque_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>opaques</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</init> <condition><expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name>next</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>o</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_options</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>ppsz_options</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>optflagv</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_es</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_categories</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_Delete</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_categories</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_categories</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_categories</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_item_AddOption</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_option</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_option</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VLC_INPUT_OPTION_UNIQUE</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_input</name><operator>-&gt;</operator><name>i_options</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_option</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>flagv</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>optflagv</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>optflagc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flagv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>optflagv</name></name> <operator>=</operator> <name>flagv</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_option_dup</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_option_dup</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>ppsz_options</name></name></expr></argument>, <argument><expr><name>psz_option_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flagv</name><index>[<expr><name><name>p_input</name><operator>-&gt;</operator><name>optflagc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_item_AddOptions</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_options</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_flags</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_options</name> <operator>&amp;&amp;</operator> <name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>input_item_AddOption</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_item_AddOpaque</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_opaque_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>namelen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>opaques</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>opaques</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_ApplyOptions</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>optflagc</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>i_options</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_OptionParse</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>optflagv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>VLC_INPUT_OPTION_TRUSTED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>input_item_opaque_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>opaques</name></name></expr></init></decl>;</init> <condition><expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bsearch_strcmp_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>input_item_IsMaster</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_master_exts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>MASTER_EXTENSIONS</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_ext</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>psz_ext</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>bsearch</name><argument_list>(<argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><name>ppsz_master_exts</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ppsz_master_exts</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>bsearch_strcmp_cb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_item_slave_GetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>slave_type</name></name> <modifier>*</modifier></type><name>p_slave_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sub_exts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>SLAVE_SPU_EXTENSIONS</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_audio_exts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>SLAVE_AUDIO_EXTENSIONS</name></expr> }</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_exts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nmemb</name></decl>;</decl_stmt>
}</block> <decl><name><name>p_slave_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SLAVE_TYPE_SPU</name></expr>, <expr><name>ppsz_sub_exts</name></expr>, <macro><name>ARRAY_SIZE</name><argument_list>(<argument>ppsz_sub_exts</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>SLAVE_TYPE_AUDIO</name></expr>, <expr><name>ppsz_audio_exts</name></expr>, <macro><name>ARRAY_SIZE</name><argument_list>(<argument>ppsz_audio_exts</argument>)</argument_list></macro> }</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_ext</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>psz_ext</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_slave_list</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_slave_list</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bsearch</name><argument_list>(<argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><name><name>p_slave_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppsz_exts</name></expr></argument>, <argument><expr><name><name>p_slave_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nmemb</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>bsearch_strcmp_cb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_slave_type</name> <operator>=</operator> <name><name>p_slave_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>input_item_slave_New</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>slave_priority</name></name></type> <name>i_priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_uri</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_slave</name></expr></argument> )</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_slave</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <name>i_priority</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>b_forced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name><name>p_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_slave</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_item_AddSlave</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_item</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p_slave</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>&lt;</operator> <name>SLAVE_PRIORITY_MATCH_NONE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument>, <argument><expr><name>p_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>info_category_t</name> <modifier>*</modifier></type><name>InputItemFindCat</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_categories</name></name> <operator>&amp;&amp;</operator> <name>psz_cat</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_cat</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_categories</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cat</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>pi_index</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_cat</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>char</name> <modifier>*</modifier></type><name>input_item_GetInfo</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>info_category_t</name> <modifier>*</modifier></type><name>p_cat</name> <init>= <expr><call><name>InputItemFindCat</name><argument_list>( <argument><expr><name>p_i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_cat</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>info_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><call><name>info_category_FindInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_info</name> <operator>&amp;&amp;</operator> <name><name>p_info</name><operator>-&gt;</operator><name>psz_value</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InputItemVaAddInfo</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_cat</name> <init>= <expr><call><name>InputItemFindCat</name><argument_list>( <argument><expr><name>p_i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cat</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_cat</name> <operator>=</operator> <call><name>info_category_New</name><argument_list>( <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cat</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>i_categories</name></name></expr></argument>, <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>pp_categories</name></name></expr></argument>, <argument><expr><name>p_cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>info_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><call><name>info_category_VaAddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_info</name> <operator>||</operator> <operator>!</operator><name><name>p_info</name><operator>-&gt;</operator><name>psz_value</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_item_AddInfo</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>InputItemVaAddInfo</name><argument_list>( <argument><expr><name>p_i</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>
<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_i-&gt;event_manager</argument>, <argument>&amp;(vlc_event_t) {
.type = vlc_InputItemInfoChanged }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_item_DelInfo</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_cat</name> <init>= <expr><call><name>InputItemFindCat</name><argument_list>( <argument><expr><name>p_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_cat</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cat</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_name</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>info_category_DeleteInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>info_category_Delete</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_ERASE</name><argument_list>(<argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>i_categories</name></name></expr></argument>, <argument><expr><name><name>p_i</name><operator>-&gt;</operator><name>pp_categories</name></name></expr></argument>, <argument><expr><name>i_cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_i</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_i-&gt;event_manager</argument>,
<argument>&amp;(vlc_event_t) { .type = vlc_InputItemInfoChanged }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>input_item_ReplaceInfos</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_old</name> <init>= <expr><call><name>InputItemFindCat</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_cat</name></expr></argument>, <argument><expr><name><name>p_cat</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_old</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>info_category_Delete</name><argument_list>( <argument><expr><name>p_old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_categories</name><index>[<expr><name>i_cat</name></expr>]</index></name> <operator>=</operator> <name>p_cat</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_categories</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_categories</name></name></expr></argument>, <argument><expr><name>p_cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_item-&gt;event_manager</argument>,
<argument>&amp;(vlc_event_t) { .type = vlc_InputItemInfoChanged }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_MergeInfos</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_old</name> <init>= <expr><call><name>InputItemFindCat</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_cat</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_old</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>info_t</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<macro><name>info_foreach</name><argument_list>(<argument>info</argument>, <argument>&amp;p_cat-&gt;infos</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>info_category_ReplaceInfo</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cat</name><operator>-&gt;</operator><name>infos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_Delete</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_categories</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_categories</name></name></expr></argument>, <argument><expr><name>p_cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_item-&gt;event_manager</argument>,
<argument>&amp;(vlc_event_t) { .type = vlc_InputItemInfoChanged }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetEpgEvent</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_epg_evt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>i_id</name> <operator>==</operator> <name><name>p_epg_evt</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>vlc_epg_event_Duplicate</name><argument_list>( <argument><expr><name>p_epg_evt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_dup</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>==</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>b_changed</name></expr> )</condition>
<block>{<block_content>
<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_item-&gt;event_manager</argument>,
<argument>&amp;(vlc_event_t) { .type = vlc_InputItemInfoChanged }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>InputItemAddInfo</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>InputItemVaAddInfo</name><argument_list>( <argument><expr><name>p_i</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>input_item_SetEpg</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_current_source</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><call><name>vlc_epg_Duplicate</name><argument_list>( <argument><expr><name>p_update</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_epg</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_epg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_source_id</name> <operator>==</operator> <name><name>p_update</name><operator>-&gt;</operator><name>i_source_id</name></name> <operator>&amp;&amp;</operator>
<name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_id</name> <operator>==</operator> <name><name>p_update</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pp_epg</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>pp_epg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><operator>*</operator><name>pp_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_epg</name> <operator>==</operator> <name><name>p_item</name><operator>-&gt;</operator><name>p_epg_table</name></name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_epg_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_epg</name> <operator>=</operator> <name>p_epg</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name></name></expr></argument>, <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_current_source</name> <operator>&amp;&amp;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>b_present</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_epg_table</name></name> <operator>=</operator> <name>p_epg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_epg</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_epg</name></expr></argument>, <argument><expr><literal type="string">"EPG %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_epg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>p_epg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>signal</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_DelInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_epg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name> <init>= <expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t_start</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_start</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_start</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%4.4d-%2.2d-%2.2d %2.2d:%2.2d:%2.2d"</literal></expr></argument>,
<argument><expr><literal type="number">1900</literal> <operator>+</operator> <name><name>tm_start</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>tm_start</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm_start</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tm_start</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm_start</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm_start</name><operator>.</operator><name>tm_sec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_short_description</name></name> <operator>||</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InputItemAddInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_epg</name></expr></argument>, <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><literal type="string">"%s (%2.2d:%2.2d) - %s %s"</literal></expr></argument>,
<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_duration</name></name><operator>/</operator><literal type="number">60</literal><operator>/</operator><literal type="number">60</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p_evt</name><operator>-&gt;</operator><name>i_duration</name></name><operator>/</operator><literal type="number">60</literal><operator>)</operator><operator>%</operator><literal type="number">60</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_short_description</name></name></expr> ?</condition><then> <expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_short_description</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> ,
<argument><expr><ternary><condition><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> ?</condition><then> <expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InputItemAddInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_epg</name></expr></argument>, <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><literal type="string">"%s (%2.2d:%2.2d)"</literal></expr></argument>,
<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_duration</name></name><operator>/</operator><literal type="number">60</literal><operator>/</operator><literal type="number">60</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p_evt</name><operator>-&gt;</operator><name>i_duration</name></name><operator>/</operator><literal type="number">60</literal><operator>)</operator><operator>%</operator><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>signal</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_item-&gt;event_manager</argument>,
<argument>&amp;(vlc_event_t){ .type = vlc_InputItemInfoChanged</argument>, <argument>}</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_ChangeEPGSource</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_source_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_epg_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_source_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_source_id</name> <operator>==</operator> <name>i_source_id</name> <operator>&amp;&amp;</operator>
<name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_present</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_epg_table</name></name> <operator>=</operator> <name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetEpgTime</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_epg_time</name></name> <operator>=</operator> <name>i_time</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_SetEpgOffline</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_ChangeEPGSource</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_epg_info</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_epg_info</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_epg_info</name><index>[<expr><name>i_epg_info</name></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ppsz_epg_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"EPG %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_epg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>p_epg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ppsz_epg_info</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_epg_info</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>ppsz_epg_info</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_item_DelInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><name>ppsz_epg_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ppsz_epg_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_event_send</name><argument_list>( <argument>&amp;p_item-&gt;event_manager</argument>,
<argument>&amp;(vlc_event_t) { .type = vlc_InputItemInfoChanged }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>input_item_t</name> <modifier>*</modifier></type>
<name>input_item_NewExt</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>input_item_type_e</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>input_item_net_type</name></name></type> <name>i_net</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>owner</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>owner</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_event_manager_t</name> <modifier>*</modifier></type> <name>p_em</name> <init>= <expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>event_manager</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_name</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetName</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_uri</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetURI</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>ITEM_TYPE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>b_net</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>ppsz_options</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>optflagc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>optflagv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>opaques</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_categories</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>pp_categories</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_stats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_epg</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>pp_epg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_event_manager_init</name><argument_list>( <argument><expr><name>p_em</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>!=</operator> <name>ITEM_TYPE_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>b_error_when_reading</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_net</name> <operator>!=</operator> <name>ITEM_NET_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>b_net</name></name> <operator>=</operator> <name>i_net</name> <operator>==</operator> <name>ITEM_NET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_input</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>input_item_t</name> <modifier>*</modifier></type><name>input_item_Copy</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_net</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>input_item_NewExt</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>,
<argument><expr><name>ITEM_NET_UNKNOWN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b_net</name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>b_net</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_input</name><operator>-&gt;</operator><name>i_slaves</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_input</name><operator>-&gt;</operator><name>i_slaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_slave_t</name><modifier>*</modifier></type> <name>slave</name> <init>= <expr><call><name>input_item_slave_New</name><argument_list>(
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_uri</name></expr></argument>,
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_type</name></expr></argument>,
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_priority</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>slave</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument>, <argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>input_item_CopyOptions</name><argument_list>( <argument><expr><name>item</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>b_net</name></name> <operator>=</operator> <name>b_net</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>item_type_entry</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>input_item_type_e</name></name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_net</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>typecmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>item_type_entry</name></name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><name>key</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scheme</name> <init>= <expr><name><name>type</name><operator>-&gt;</operator><name>psz_scheme</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>scheme</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>enum</name> <name>input_item_type_e</name></name></type> <name>GuessType</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_net</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>item_type_entry</name></name></type> <name><name>tab</name><index>[]</index></name> <init>=
<expr><block>{ 

<expr><block>{ <expr><literal type="string">"alsa"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"atsc"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bd"</literal></expr>, <expr><name>ITEM_TYPE_DISC</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bluray"</literal></expr>, <expr><name>ITEM_TYPE_DISC</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cable"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cdda"</literal></expr>, <expr><name>ITEM_TYPE_DISC</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cqam"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dc1394"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dccp"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"deckli"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"dir"</literal></expr>, <expr><name>ITEM_TYPE_DIRECTORY</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dshow"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dtv"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dvb"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dvd"</literal></expr>, <expr><name>ITEM_TYPE_DISC</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eyetv"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fd"</literal></expr>, <expr><name>ITEM_TYPE_UNKNOWN</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"file"</literal></expr>, <expr><name>ITEM_TYPE_FILE</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ftp"</literal></expr>, <expr><name>ITEM_TYPE_FILE</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gopher"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"http"</literal></expr>, <expr><name>ITEM_TYPE_FILE</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icyx"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"imem"</literal></expr>, <expr><name>ITEM_TYPE_UNKNOWN</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"isdb-"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"itpc"</literal></expr>, <expr><name>ITEM_TYPE_PLAYLIST</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jack"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linsys"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"live"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"mms"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mtp"</literal></expr>, <expr><name>ITEM_TYPE_DISC</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nfs"</literal></expr>, <expr><name>ITEM_TYPE_FILE</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ofdm"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oss"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pnm"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pulse"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qam"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qpsk"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qtcapt"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"qtsound"</literal></expr>,<expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"raw139"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"rt"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"satell"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"satip"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"screen"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sdp"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sftp"</literal></expr>, <expr><name>ITEM_TYPE_FILE</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shm"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smb"</literal></expr>, <expr><name>ITEM_TYPE_FILE</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stream"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"svcd"</literal></expr>, <expr><name>ITEM_TYPE_DISC</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tcp"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"terres"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"udp"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"unsv"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"upnp"</literal></expr>, <expr><name>ITEM_TYPE_FILE</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"usdigi"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"v4l"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vcd"</literal></expr>, <expr><name>ITEM_TYPE_DISC</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vdr"</literal></expr>, <expr><name>ITEM_TYPE_STREAM</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wasapi"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"window"</literal></expr>, <expr><name>ITEM_TYPE_CARD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>tab</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>typecmp</name><argument_list>( <argument><expr><operator>(</operator><name>tab</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>psz_scheme</name></expr></argument>, <argument><expr><name>tab</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>p_net</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ITEM_TYPE_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>item_type_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>=
<expr><call><name>bsearch</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>tab</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>typecmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>e</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ITEM_TYPE_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_net</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>b_net</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>input_item_node_Create</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_node_t</name><modifier>*</modifier></type> <name>p_node</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_item_node_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_node</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>pp_children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p_node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_node_Delete</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_node</name><operator>-&gt;</operator><name>i_children</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>pp_children</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>input_item_node_AppendItem</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_preparse_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_new_child</name> <init>= <expr><call><name>input_item_node_Create</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_new_child</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_preparse_depth</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>=</operator> <ternary><condition><expr><name>i_preparse_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name>i_preparse_depth</name> <operator>-</operator><literal type="number">1</literal></expr> </then><else>:
<expr><name>i_preparse_depth</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_node_AppendNode</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_new_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_new_child</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_node_AppendNode</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>,
<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_parent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_child</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_parent</name><operator>-&gt;</operator><name>i_children</name></name></expr></argument>, <argument><expr><name><name>p_parent</name><operator>-&gt;</operator><name>pp_children</name></name></expr></argument>, <argument><expr><name>p_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_item_node_RemoveNode</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>i_children</name></name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>pp_children</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>input_item_UpdateTracksInfo</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt_copy</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>fmt_copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt_copy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><name>fmt_copy</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>i_es</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_id</name> <operator>!=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>fmt_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></for>


<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>fmt_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>input_item_CreateFilename</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filenamefmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>str_format</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>filenamefmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filename_sanitize</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>ext</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>input_item_parser_id_t</name>
<block>{
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>input_item_parser_cbs_t</name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>input_item_parser_InputEvent</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parser_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><name>parser_</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INPUT_EVENT_TIMES</name></expr>:</case>
<expr_stmt><expr><call><name>input_item_SetDuration</name><argument_list>(<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INPUT_EVENT_STATE</name></expr>:</case>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INPUT_EVENT_DEAD</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><ternary><condition><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>END_S</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_ended</name></name><argument_list>(<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>INPUT_EVENT_SUBITEMS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_subtree_added</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_subtree_added</name></name><argument_list>(<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>subitems</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type>
<name>input_item_Parse</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>input_item_parser_cbs_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cbs</name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>on_ended</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>parser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parser</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>INIT_S</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>userdata</name></name> <operator>=</operator> <name>userdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>input_CreatePreparser</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>input_item_parser_InputEvent</name></expr></argument>,
<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>input</name></name> <operator>||</operator> <call><name>input_Start</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_Close</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>parser</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>input_item_parser_id_Interrupt</name><parameter_list>(<parameter><decl><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>input_Stop</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>input_item_parser_id_Release</name><parameter_list>(<parameter><decl><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_parser_id_Interrupt</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_Close</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rdh_compar_type</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name><name>p2</name><operator>-&gt;</operator><name>i_type</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p2</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rdh_compar_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>na</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <modifier>*</modifier><name>nb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>ia</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>na</name><operator>)</operator><operator>-&gt;</operator><name>p_item</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ib</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>nb</name><operator>)</operator><operator>-&gt;</operator><name>p_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>rdh_compar_type</name><argument_list>(<argument><expr><name>ia</name></expr></argument>, <argument><expr><name>ib</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_filenamecmp</name><argument_list>(<argument><expr><name><name>ia</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>ib</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rdh_sort</name><parameter_list>(<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>pp_children</name></name></expr></argument>, <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_children</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_item_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rdh_compar_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_node</name><operator>-&gt;</operator><name>i_children</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rdh_sort</name><argument_list>(<argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>rdh_file_has_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ignored_exts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>psz_ignored_exts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>++</operator><name>ext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>psz_ignored_exts</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</init> <condition><expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>type</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>type</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>+</operator> <name>extlen</name> <operator>==</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>extlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rdh_file_is_ignored</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>psz_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal>
<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><operator>!</operator><name><name>p_rdh</name><operator>-&gt;</operator><name>b_show_hiddenfiles</name></name> <operator>&amp;&amp;</operator> <name><name>psz_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator>
<operator>||</operator> <call><name>rdh_file_has_ext</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>psz_ignored_exts</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>rdh_slave</name>
<block>{
<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rdh_dir</name>
<block>{
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_path</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rdh_name_from_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>psz_filename</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_filename</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_filename</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ptr</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_ptr</name> <operator>&amp;&amp;</operator> <name>psz_ptr</name> <operator>!=</operator> <name>psz_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>psz_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psz_name</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>psz_ptr</name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>psz_ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_ptr</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>psz_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>psz_name</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>rdh_get_slave_priority</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>,
<parameter><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_slave_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_priority</name> <init>= <expr><name>SLAVE_PRIORITY_MATCH_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_item_name</name> <init>= <expr><call><name>rdh_name_from_filename</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_slave_name</name> <init>= <expr><call><name>rdh_name_from_filename</name><argument_list>(<argument><expr><name>psz_slave_filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_item_name</name> <operator>||</operator> <operator>!</operator><name>psz_slave_name</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_item_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_item_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_slave_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_slave_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>i_item_len</name> <operator>&gt;</operator> <name>i_slave_len</name> <operator>||</operator> <name>i_slave_len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_item_len</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_item_name</name></expr></argument>, <argument><expr><name>psz_slave_name</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_MATCH_ALL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>SLAVE_TYPE_SPU</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>psz_slave_name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_ext</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><operator>++</operator><name>psz_ext</name></expr></argument>, <argument><expr><literal type="string">"cdg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sub</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>psz_slave_name</name></expr></argument>, <argument><expr><name>psz_item_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_sub</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_sub</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_item_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_MATCH_RIGHT</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_MATCH_LEFT</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_item_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_slave_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_priority</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rdh_should_match_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rdh_slave</name></name> <modifier>*</modifier></type><name>p_rdh_sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>p_rdh_sub</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_ext</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_ext</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_rdh</name><operator>-&gt;</operator><name>i_slaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rdh_slave</name></name> <modifier>*</modifier></type><name>p_rdh_slave</name> <init>= <expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_rdh_slave</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p_rdh_slave</name> <operator>==</operator> <name>p_rdh_sub</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>!=</operator>
<name><name>p_rdh_sub</name><operator>-&gt;</operator><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>p_rdh_sub</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>, <argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p_rdh_sub</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ext_idx</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_ext_idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_ext_idx</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>psz_ext_idx</name></expr></argument>, <argument><expr><literal type="string">"idx"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rdh_attach_slaves</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,
<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_parent_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_sub_autodetect_fuzzy</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_parent_node</name><operator>-&gt;</operator><name>i_children</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name><name>p_parent_node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>unused</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>input_item_IsMaster</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>input_item_slave_GetType</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_rdh</name><operator>-&gt;</operator><name>i_slaves</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rdh_slave</name></name> <modifier>*</modifier></type><name>p_rdh_slave</name> <init>= <expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_node</name></name> <operator>==</operator> <name>p_node</name>
<operator>||</operator> <name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>==</operator> <name>SLAVE_PRIORITY_MATCH_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_priority</name> <init>=
<expr><call><name>rdh_get_slave_priority</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name></name></expr></argument>,
<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_priority</name> <operator>&lt;</operator> <name><name>p_rdh</name><operator>-&gt;</operator><name>i_sub_autodetect_fuzzy</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>SLAVE_TYPE_SPU</name>
<operator>&amp;&amp;</operator> <call><name>rdh_should_match_idx</name><argument_list>(<argument><expr><name>p_rdh</name></expr></argument>, <argument><expr><name>p_rdh_slave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>=
<expr><call><name>input_item_slave_New</name><argument_list>(<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>,
<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>,
<argument><expr><name>i_priority</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_slave</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>input_item_AddSlave</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>p_slave</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>(<argument><expr><name>p_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_node</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_node_RemoveNode</name><argument_list>(<argument><expr><name>p_parent_node</name></expr></argument>, <argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>(<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <name>i_priority</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_parent_node</name><operator>-&gt;</operator><name>i_children</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rdh_attach_slaves</name><argument_list>(<argument><expr><name>p_rdh</name></expr></argument>, <argument><expr><name><name>p_parent_node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rdh_unflatten</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,
<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_net</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_subpaths</name> <init>= <expr><name>psz_path</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>psz_subpaths</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>psz_subpaths</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_subnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_rdh</name><operator>-&gt;</operator><name>i_dirs</name></name> <operator>&amp;&amp;</operator> <name>p_subnode</name> <operator>==</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rdh_dir</name></name> <modifier>*</modifier></type><name>rdh_dir</name> <init>= <expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_dirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>rdh_dir</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>psz_subpaths</name> <operator>-</operator> <name>psz_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_subnode</name> <operator>=</operator> <name><name>rdh_dir</name><operator>-&gt;</operator><name>p_node</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>p_subnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_sub_path_len</name> <init>= <expr><name>psz_subpaths</name> <operator>-</operator> <name>psz_path</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rdh_dir</name></name> <modifier>*</modifier></type><name>p_rdh_dir</name> <init>=
<expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rdh_dir</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i_sub_path_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_rdh_dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>p_rdh_dir</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>i_sub_path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rdh_dir</name><operator>-&gt;</operator><name>psz_path</name><index>[<expr><name>i_sub_path_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_subpathname</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>p_rdh_dir</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_subpathname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>psz_subpathname</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subpathname</name> <operator>=</operator> <name><name>p_rdh_dir</name><operator>-&gt;</operator><name>psz_path</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>=
<expr><call><name>input_item_NewExt</name><argument_list>(<argument><expr><name>INPUT_ITEM_URI_NOP</name></expr></argument>, <argument><expr><name>psz_subpathname</name></expr></argument>, <argument><expr><name>INPUT_DURATION_UNSET</name></expr></argument>,
<argument><expr><name>ITEM_TYPE_DIRECTORY</name></expr></argument>, <argument><expr><name>i_net</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_rdh_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>input_item_CopyOptions</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_node</name><operator>)</operator><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_node</name> <operator>=</operator> <call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><operator>*</operator><name>pp_node</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp_node</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_rdh_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_rdh_dir</name><operator>-&gt;</operator><name>p_node</name></name> <operator>=</operator> <operator>*</operator><name>pp_node</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_dirs</name></name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_dirs</name></name></expr></argument>, <argument><expr><name>p_rdh_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_node</name> <operator>=</operator> <name>p_subnode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>psz_subpaths</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_readdir_helper_init</name></cpp:undef>
<function><type><name>void</name></type> <name>vlc_readdir_helper_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,
<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_var_obj</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_var_obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_ApplyOptions</name><argument_list>(<argument><expr><name>p_var_obj</name></expr></argument>, <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <name>p_var_obj</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>p_node</name></name> <operator>=</operator> <name>p_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>b_show_hiddenfiles</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"show-hiddenfiles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>psz_ignored_exts</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"ignore-filetypes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_autodetect</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub-autodetect-file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_sub_autodetect_fuzzy</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>b_autodetect</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub-autodetect-fuzzy"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>b_flatten</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"extractor-flatten"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_dirs</name></name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_var_obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_var_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_readdir_helper_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b_success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rdh_sort</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>p_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdh_attach_slaves</name><argument_list>(<argument><expr><name>p_rdh</name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>p_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>psz_ignored_exts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_rdh</name><operator>-&gt;</operator><name>i_slaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rdh_slave</name></name> <modifier>*</modifier></type><name>p_rdh_slave</name> <init>= <expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_rdh_slave</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>(<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_rdh_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_rdh</name><operator>-&gt;</operator><name>i_dirs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_dirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_dirs</name></name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_readdir_helper_additem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_flatpath</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_net</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>i_slave_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rdh_slave</name></name> <modifier>*</modifier></type><name>p_rdh_slave</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_flatpath</name> <operator>||</operator> <name>psz_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_rdh</name><operator>-&gt;</operator><name>b_flatten</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>psz_filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>psz_flatpath</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_filename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>psz_filename</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <name>psz_flatpath</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>psz_filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <name>psz_flatpath</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_flatpath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_sub_autodetect_fuzzy</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>input_item_slave_GetType</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_slave_type</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_rdh_slave</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_rdh_slave</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_rdh_slave</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>psz_filename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name></name> <operator>=</operator> <call><name>input_item_slave_New</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>i_slave_type</name></expr></argument>,
<argument><expr><name>SLAVE_PRIORITY_MATCH_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_slave</name></name> <operator>||</operator> <operator>!</operator><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>psz_filename</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_rdh_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_rdh</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument>, <argument><expr><name>p_rdh_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rdh_file_is_ignored</name><argument_list>(<argument><expr><name>p_rdh</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name><name>p_rdh</name><operator>-&gt;</operator><name>p_node</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_flatpath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>rdh_unflatten</name><argument_list>(<argument><expr><name>p_rdh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument>, <argument><expr><name>psz_flatpath</name></expr></argument>, <argument><expr><name>i_net</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_item_NewExt</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>INPUT_DURATION_UNSET</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>,
<argument><expr><name>i_net</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_CopyOptions</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_node</name> <operator>=</operator> <call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>p_rdh_slave</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_rdh_slave</name><operator>-&gt;</operator><name>p_node</name></name> <operator>=</operator> <name>p_node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
