<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\input\input_internal.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBVLC_INPUT_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_INPUT_INTERNAL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_viewpoint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc/interrupt.h"</cpp:file></cpp:include>

<struct_decl>struct <name>input_stats</name>;</struct_decl>









<typedef>typedef <type><struct>struct <name>input_thread_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>
}</block></struct></type> <name>input_thread_t</name>;</typedef>










<typedef>typedef <type><enum>enum <name>input_state_e</name>
<block>{
<decl><name>INIT_S</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>OPENING_S</name></decl>,
<decl><name>PLAYING_S</name></decl>,
<decl><name>PAUSE_S</name></decl>,
<decl><name>END_S</name></decl>,
<decl><name>ERROR_S</name></decl>,
}</block></enum></type> <name>input_state_e</name>;</typedef>







<typedef>typedef <type><enum>enum <name>input_event_type_e</name>
<block>{

<decl><name>INPUT_EVENT_STATE</name></decl>,

<decl><name>INPUT_EVENT_DEAD</name></decl>,


<decl><name>INPUT_EVENT_RATE</name></decl>,


<decl><name>INPUT_EVENT_CAPABILITIES</name></decl>,


<decl><name>INPUT_EVENT_TIMES</name></decl>,


<decl><name>INPUT_EVENT_OUTPUT_CLOCK</name></decl>,



<decl><name>INPUT_EVENT_TITLE</name></decl>,

<decl><name>INPUT_EVENT_CHAPTER</name></decl>,



<decl><name>INPUT_EVENT_PROGRAM</name></decl>,

<decl><name>INPUT_EVENT_ES</name></decl>,


<decl><name>INPUT_EVENT_RECORD</name></decl>,


<decl><name>INPUT_EVENT_ITEM_META</name></decl>,

<decl><name>INPUT_EVENT_ITEM_INFO</name></decl>,

<decl><name>INPUT_EVENT_ITEM_EPG</name></decl>,


<decl><name>INPUT_EVENT_STATISTICS</name></decl>,

<decl><name>INPUT_EVENT_SIGNAL</name></decl>,


<decl><name>INPUT_EVENT_BOOKMARK</name></decl>,


<decl><name>INPUT_EVENT_CACHE</name></decl>,


<decl><name>INPUT_EVENT_VOUT</name></decl>,


<decl><name>INPUT_EVENT_SUBITEMS</name></decl>,


<decl><name>INPUT_EVENT_VBI_PAGE</name></decl>,

<decl><name>INPUT_EVENT_VBI_TRANSPARENCY</name></decl>,


<decl><name>INPUT_EVENT_SUBS_FPS</name></decl>,


<decl><name>INPUT_EVENT_THUMBNAIL_READY</name></decl>,
}</block></enum></type> <name>input_event_type_e</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INPUT_CAPABILITIES_SEEKABLE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INPUT_CAPABILITIES_PAUSEABLE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INPUT_CAPABILITIES_CHANGE_RATE</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INPUT_CAPABILITIES_REWINDABLE</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INPUT_CAPABILITIES_RECORDABLE</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<struct>struct <name>vlc_input_event_state</name>
<block>{
<decl_stmt><decl><type><name>input_state_e</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_input_event_times</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>percentage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>normal_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_input_event_output_clock</name>
<block>{
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_input_event_title</name>
<block>{
<enum>enum <block>{
<decl><name>VLC_INPUT_TITLE_NEW_LIST</name></decl>,
<decl><name>VLC_INPUT_TITLE_SELECTED</name></decl>,
}</block> <decl><name>action</name></decl>;</enum>
<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block> <decl><name>list</name></decl>;</struct>
<decl_stmt><decl><type><name>size_t</name></type> <name>selected_idx</name></decl>;</decl_stmt>
}</block>;</union>
}</block>;</struct>

<struct>struct <name>vlc_input_event_chapter</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seekpoint</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_input_event_program</name> <block>{
<enum>enum <block>{
<decl><name>VLC_INPUT_PROGRAM_ADDED</name></decl>,
<decl><name>VLC_INPUT_PROGRAM_DELETED</name></decl>,
<decl><name>VLC_INPUT_PROGRAM_UPDATED</name></decl>,
<decl><name>VLC_INPUT_PROGRAM_SELECTED</name></decl>,
<decl><name>VLC_INPUT_PROGRAM_SCRAMBLED</name></decl>,
}</block> <decl><name>action</name></decl>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>scrambled</name></decl>;</decl_stmt>
}</block>;</union>
}</block>;</struct>

<struct>struct <name>vlc_input_event_es</name> <block>{
<enum>enum <block>{
<decl><name>VLC_INPUT_ES_ADDED</name></decl>,
<decl><name>VLC_INPUT_ES_DELETED</name></decl>,
<decl><name>VLC_INPUT_ES_UPDATED</name></decl>,
<decl><name>VLC_INPUT_ES_SELECTED</name></decl>,
<decl><name>VLC_INPUT_ES_UNSELECTED</name></decl>,
}</block> <decl><name>action</name></decl>;</enum>



<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>forced</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_input_event_signal</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>strength</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_input_event_vout</name>
<block>{
<enum>enum <block>{
<decl><name>VLC_INPUT_EVENT_VOUT_STARTED</name></decl>,
<decl><name>VLC_INPUT_EVENT_VOUT_STOPPED</name></decl>,
}</block> <decl><name>action</name></decl>;</enum>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_input_event</name>
<block>{
<decl_stmt><decl><type><name>input_event_type_e</name></type> <name>type</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capabilities</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_times</name></name></type> <name>times</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_output_clock</name></name></type> <name>output_clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_title</name></name></type> <name>title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_chapter</name></name></type> <name>chapter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_program</name></name></type> <name>program</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_es</name></name></type> <name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>record</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_stats_t</name></name> <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_signal</name></name></type> <name>signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_vout</name></name></type> <name>vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>subitems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>vbi_page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>vbi_transparent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>subs_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>thumbnail</name></decl>;</decl_stmt>
}</block>;</union>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>input_thread_events_cb</name>)<parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type> <name>input_Create</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>p_parent</name></expr></argument>,
<argument><expr><name>input_thread_events_cb</name> <name>event_cb</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>events_data</name></expr></argument>,
<argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>input_resource_t</name> <operator>*</operator></expr></argument>,
<argument><expr><name>vlc_renderer_item_t</name><operator>*</operator> <name>p_renderer</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_Create</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>input_Create(VLC_OBJECT(a),b,c,d,e,f)</cpp:value></cpp:define>












<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input_CreatePreparser</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>,
<argument><expr><name>input_thread_events_cb</name> <name>events_cb</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>events_data</name></expr></argument>, <argument><expr><name>input_item_t</name> <operator>*</operator><name>item</name></expr></argument>)</argument_list>
<name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name>
<name>input_thread_t</name> <modifier>*</modifier></type><name>input_CreateThumbnailer</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>,
<argument><expr><name>input_thread_events_cb</name> <name>events_cb</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>events_data</name></expr></argument>, <argument><expr><name>input_item_t</name> <operator>*</operator><name>item</name></expr></argument>)</argument_list>
<name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>input_Start</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>input_Stop</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>input_Close</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>input_SetTime</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fast</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>input_SetPosition</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fast</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>input_SetEsIdDelay</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>input_GetItem</name><argument_list>( <argument><expr><name>input_thread_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_CONTROL_FIFO_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>


<struct>struct <name>input_source_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_slave_es_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auto_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>autoselect_cats</name><index>[<expr><name>ES_CATEGORY_COUNT</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_title_demux</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_title_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_title_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_title_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint_end</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_can_pause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_pace_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_rate_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_stream_record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_rescale_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f_fps</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_slave_sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sub_rate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><union>union
<block>{
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>viewpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>
}</block> <decl><name>list</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_fast_seek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_val</name></decl>;</decl_stmt>
}</block> <decl><name>time</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_fast_seek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_val</name></decl>;</decl_stmt>
}</block> <decl><name>pos</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>
}</block> <decl><name>cat_delay</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_ids</name></decl>;</decl_stmt>
}</block> <decl><name>cat_ids</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>
}</block> <decl><name>es_delay</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>page</name></decl>;</decl_stmt>
}</block> <decl><name>vbi_page</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>
}</block> <decl><name>vbi_transparency</name></decl>;</struct>
}</block></union></type> <name>input_control_param_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name></decl>;</decl_stmt>
}</block></struct></type> <name>input_control_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>input_thread_private_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>input_thread_t</name></name></type> <name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_thread_events_cb</name></type> <name>events_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>events_data</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_preparsing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_pause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_rate_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_pace_control</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_stopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_recording</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_thumbnailing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>normal_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>bool</name></type> <name>b_low_delay</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_out_pace_control</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_es_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_es_out_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>viewpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>viewpoint_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_renderer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_title_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_attachment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>demux_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachment_demux</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>slave_subs_rate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_control_t</name></type> <name><name>control</name><index>[<expr><name>INPUT_CONTROL_FIFO_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_interrupt_t</name></type> <name>interrupt</name></decl>;</decl_stmt>
}</block></struct></type> <name>input_thread_private_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>input_thread_private_t</name> <modifier>*</modifier></type><name>input_priv</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>container_of</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>input_thread_private_t</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<enum>enum <name>input_control_e</name>
<block>{
<decl><name>INPUT_CONTROL_SET_STATE</name></decl>,

<decl><name>INPUT_CONTROL_SET_RATE</name></decl>,

<decl><name>INPUT_CONTROL_SET_POSITION</name></decl>,
<decl><name>INPUT_CONTROL_JUMP_POSITION</name></decl>,

<decl><name>INPUT_CONTROL_SET_TIME</name></decl>,
<decl><name>INPUT_CONTROL_JUMP_TIME</name></decl>,

<decl><name>INPUT_CONTROL_SET_PROGRAM</name></decl>,

<decl><name>INPUT_CONTROL_SET_TITLE</name></decl>,
<decl><name>INPUT_CONTROL_SET_TITLE_NEXT</name></decl>,
<decl><name>INPUT_CONTROL_SET_TITLE_PREV</name></decl>,

<decl><name>INPUT_CONTROL_SET_SEEKPOINT</name></decl>,
<decl><name>INPUT_CONTROL_SET_SEEKPOINT_NEXT</name></decl>,
<decl><name>INPUT_CONTROL_SET_SEEKPOINT_PREV</name></decl>,

<decl><name>INPUT_CONTROL_SET_BOOKMARK</name></decl>,

<decl><name>INPUT_CONTROL_NAV_ACTIVATE</name></decl>, 
<decl><name>INPUT_CONTROL_NAV_UP</name></decl>, 
<decl><name>INPUT_CONTROL_NAV_DOWN</name></decl>, 
<decl><name>INPUT_CONTROL_NAV_LEFT</name></decl>,
<decl><name>INPUT_CONTROL_NAV_RIGHT</name></decl>,
<decl><name>INPUT_CONTROL_NAV_POPUP</name></decl>,
<decl><name>INPUT_CONTROL_NAV_MENU</name></decl>,

<decl><name>INPUT_CONTROL_SET_ES</name></decl>,
<decl><name>INPUT_CONTROL_SET_ES_LIST</name></decl>, 
<decl><name>INPUT_CONTROL_UNSET_ES</name></decl>,
<decl><name>INPUT_CONTROL_RESTART_ES</name></decl>,
<decl><name>INPUT_CONTROL_SET_ES_CAT_IDS</name></decl>,

<decl><name>INPUT_CONTROL_SET_VIEWPOINT</name></decl>, 
<decl><name>INPUT_CONTROL_SET_INITIAL_VIEWPOINT</name></decl>, 
<decl><name>INPUT_CONTROL_UPDATE_VIEWPOINT</name></decl>, 

<decl><name>INPUT_CONTROL_SET_CATEGORY_DELAY</name></decl>,
<decl><name>INPUT_CONTROL_SET_ES_DELAY</name></decl>,

<decl><name>INPUT_CONTROL_ADD_SLAVE</name></decl>,
<decl><name>INPUT_CONTROL_SET_SUBS_FPS</name></decl>,

<decl><name>INPUT_CONTROL_SET_RECORD_STATE</name></decl>,

<decl><name>INPUT_CONTROL_SET_FRAME_NEXT</name></decl>,

<decl><name>INPUT_CONTROL_SET_RENDERER</name></decl>,

<decl><name>INPUT_CONTROL_SET_VBI_PAGE</name></decl>,
<decl><name>INPUT_CONTROL_SET_VBI_TRANSPARENCY</name></decl>,
}</block>;</enum>



<function_decl><type><name>int</name></type> <name>input_ControlPush</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>input_control_param_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>input_ControlPushHelper</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name> <init>= <expr><block>{ <expr><operator>.</operator><name>val</name> <operator>=</operator> <operator>*</operator><name>val</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>input_ControlPush</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><call><name>input_ControlPush</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>input_ControlPushEsHelper</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_ES</name> <operator>||</operator> <name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_UNSET_ES</name> <operator>||</operator>
<name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_RESTART_ES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <macro><name>input_ControlPush</name><argument_list>( <argument>p_input</argument>, <argument>i_type</argument>, <argument>&amp;(input_control_param_t) {
.id = vlc_es_id_Hold( id )</argument>,
<argument>}</argument> )</argument_list></macro>;</return>
</block_content>}</block></function>







<function_decl><type><name>void</name></type> <name>input_SetEsCatIds</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_ids</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>input_Stopped</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>input_GetAttachments</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>attachments</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>input_GetAttachment</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>input_source_Hold</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>input_source_Release</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_source_GetStrId</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>input_source_GetNewAutoId</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>input_source_IsCatAutoselected</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter> )</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_PTS_DELAY_MAX</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(60)</cpp:value></cpp:define>






<function_decl><type><name>void</name></type> <name>input_ExtractAttachmentAndCacheArt</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>input_ConfigVarInit</name> <parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>subtitles_Detect</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_slave_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>subtitles_Filter</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>vlc_audio_replay_gain_MergeFromMeta</name><parameter_list>( <parameter><decl><type><name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <name>input_rate_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>updates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>value</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl>;</decl_stmt>
}</block> <decl><name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>input_rate_t</name>;</typedef>

<struct>struct <name>input_stats</name> <block>{
<decl_stmt><decl><type><name>input_rate_t</name></type> <name>input_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_rate_t</name></type> <name>demux_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>demux_corrupted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>demux_discontinuity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>decoded_audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>decoded_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>played_abuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>lost_abuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>displayed_pictures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintmax_t</name></type> <name>lost_pictures</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>input_stats_Create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>input_stats_Destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>input_rate_Add</name><parameter_list>(<parameter><decl><type><name>input_rate_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>input_stats_Compute</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_stats_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
