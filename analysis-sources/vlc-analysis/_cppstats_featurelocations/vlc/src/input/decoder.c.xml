<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\input\decoder.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_decoder.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/aout_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_output/stream_output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../clock/clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resource.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../video_output/vout_internal.h"</cpp:file></cpp:include>




<enum>enum <name>reload</name>
<block>{
<decl><name>RELOAD_NO_REQUEST</name></decl>,
<decl><name>RELOAD_DECODER</name></decl>, 
<decl><name>RELOAD_DECODER_AOUT</name></decl> 
}</block>;</enum>

<struct>struct <name>vlc_input_decoder_t</name>
<block>{
<decl_stmt><decl><type><name>decoder_t</name></type> <name>dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_resource_t</name><modifier>*</modifier></type><name>p_resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>p_clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_decoder_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_spu_channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_spu_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_sout_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_packetizer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>atomic_bool</name></type> <name>b_fmt_description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_int</name></type> <name>reload</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait_acknowledge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait_fifo</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name><name>struct</name> <name>picture_pool_t</name></name> <modifier>*</modifier></type><name>out_pool</name></decl>;</decl_stmt>





















<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>vout_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>vout_thread_started</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_preroll_end</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREROLL_NONE</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREROLL_FORCED</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define> 


<decl_stmt><decl><type><name>bool</name></type> <name>reset_out_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pause_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>request_rate</name></decl>, <decl><type ref="prev"/><name>output_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frames_countdown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_waiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_data</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>flushing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_draining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_bool</name></type> <name>drained</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_idle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>aborting</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CC_DECODERS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_supported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_cc_desc_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name><name>pp_decoder</name><index>[<expr><name>MAX_CC_DECODERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_sout_created</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_packetizer_input_t</name> <modifier>*</modifier></type><name>p_sout_input</name></decl>;</decl_stmt>
}</block> <decl><name>cc</name></decl>;</struct>


<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>mouse_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mouse_event</name></type> <name>mouse_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mouse_opaque</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_BOGUS_VIDEO_DELAY</name></cpp:macro> <cpp:value>((vlc_tick_t)(DEFAULT_PTS_DELAY * 30))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_SPU_VOUT_WAIT_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(200)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_CORE_PRIVATE_RELOADED</name></cpp:macro> <cpp:value>(1 &lt;&lt; BLOCK_FLAG_CORE_PRIVATE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decoder_Notify</name><parameter_list>(<parameter><type><name>decoder_priv</name></type></parameter>, <parameter><type><name>event</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (decoder_priv-&gt;cbs &amp;&amp; decoder_priv-&gt;cbs-&gt;event) decoder_priv-&gt;cbs-&gt;event(decoder_priv, __VA_ARGS__, decoder_priv-&gt;cbs_userdata);</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>dec_get_owner</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>container_of</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>vlc_input_decoder_t</name></expr></argument>, <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadDecoder</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_Init</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>b_frame_drop_allowed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_packetizer</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>caps</name><index>[<expr><name>ES_CATEGORY_COUNT</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VIDEO_ES</name></expr>]</index> <operator>=</operator> <literal type="string">"video decoder"</literal></expr>,
<expr><index>[<expr><name>AUDIO_ES</name></expr>]</index> <operator>=</operator> <literal type="string">"audio decoder"</literal></expr>,
<expr><index>[<expr><name>SPU_ES</name></expr>]</index> <operator>=</operator> <literal type="string">"spu decoder"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need_var</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>caps</name><index>[<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need_var</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"packetizer"</literal></expr></argument>, <argument><expr><literal type="string">"packetizer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_Clean</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecoderThread_Reload</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>reload</name></name></type> <name>reload</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>decoder_Clean</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>reload</name> <operator>==</operator> <name>RELOAD_DECODER_AOUT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_DecDelete</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_resource_PutAout</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LoadDecoder</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderUpdateFormatLocked</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_fmt_description</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MouseEvent</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>newmouse</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>mouse_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>owner</name><operator>-&gt;</operator><name>mouse_event</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>owner</name><operator>-&gt;</operator><name>mouse_event</name></name><argument_list>( <argument><expr><name>newmouse</name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>mouse_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>mouse_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>aout_replaygain_changed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>AUDIO_REPLAY_GAIN_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ModuleThread_UpdateAudioFormat</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>!</operator><call><name>AOUT_FMTS_IDENTICAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_DecDelete</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_resource_PutAout</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>aout_replaygain_changed</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio_replay_gain</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio_replay_gain</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio_replay_gain</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio_replay_gain</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio_replay_gain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument>, <argument><expr><literal type="string">"audio-replay-gain-mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>format</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name>format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_force_dolby</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"force-dolby-surround"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_force_dolby</name> <operator>&amp;&amp;</operator>
<name><name>format</name><operator>.</operator><name>i_physical_channels</name></name> <operator>==</operator> <operator>(</operator><name>AOUT_CHAN_LEFT</name><operator>|</operator><name>AOUT_CHAN_RIGHT</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_force_dolby</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>i_chan_mode</name></name> <operator>|=</operator> <name>AOUT_CHANMODE_DOLBYSTEREO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>i_chan_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AOUT_CHANMODE_DOLBYSTEREO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_aout</name> <operator>=</operator> <call><name>input_resource_GetAout</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>aout_DecNew</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name></expr></argument>,
<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_resource_PutAout</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_aout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>=</operator> <name>p_aout</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecoderUpdateFormatLocked</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to create audio output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator>
<name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator>
<name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>reset_out_state</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CreateVoutIfNeeded</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ModuleThread_UpdateVideoFormat</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>vout_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>created_vout</name> <init>= <expr><call><name>CreateVoutIfNeeded</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vout_order</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>created_vout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>created_vout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vctx</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>vctx</name></name> <operator>==</operator> <name>vctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>vctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vctx</name></name> <operator>=</operator> <ternary><condition><expr><name>vctx</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>



<if_stmt><if>if <condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dpb_size</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_DIRAC</name></expr>:</case> 
<expr_stmt><expr><name>dpb_size</name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_AV1</name></expr>:</case>
<expr_stmt><expr><name>dpb_size</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_VP5</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_VP6</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_VP6F</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>
<expr_stmt><expr><name>dpb_size</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>dpb_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>=</operator> <call><name>picture_pool_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>,
<argument><expr><name>dpb_size</name> <operator>+</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>i_extra_picture_buffers</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed to create a pool of %d %4.4s pictures"</literal></expr></argument>,
<argument><expr><name>dpb_size</name> <operator>+</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>i_extra_picture_buffers</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vout_ChangeSource</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vout_configuration_t</name></type> <name>cfg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>vout</name> <operator>=</operator> <name>p_vout</name></expr>, <expr><operator>.</operator><name>clock</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name></expr>, <expr><operator>.</operator><name>fmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr>,
<expr><operator>.</operator><name>mouse_event</name> <operator>=</operator> <name>MouseEvent</name></expr>, <expr><operator>.</operator><name>mouse_opaque</name> <operator>=</operator> <name>p_dec</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>input_resource_StartVout</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_vout_started</name></expr></argument>, <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>vout_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CreateVoutIfNeeded</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vout</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name> <modifier>*</modifier></type><name>order</name></decl></parameter>,
<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dec_dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_vout</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout: none found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name>
<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout change: decoder size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name>
<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name>
<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name>
<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout change: visible size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout change: chroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>!=</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout change: SAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout change: orientation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout change: multiview"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_vout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>need_vout</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pp_vout</name> <operator>||</operator> <name>pp_dec_dev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>pp_vout</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_vout</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>pp_dec_dev</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_dec_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_resource_GetVoutDecoderDevice</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>,
<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>pp_dec_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>order</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>vout_order</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>pp_dec_dev</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pp_dec_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_vout</name> <operator>=</operator> <call><name>input_resource_GetVoutDecoderDevice</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>,
<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>pp_dec_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pp_vout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_vout</name> <operator>=</operator> <name>p_vout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>=</operator> <name>p_vout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_order</name></name> <operator>=</operator> <operator>*</operator><name>order</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>pp_dec_dev</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_vout</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp_dec_dev</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>( <argument><expr><operator>*</operator><name>pp_dec_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_dec_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DecoderUpdateFormatLocked</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_pool_Release</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_vout</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to create video output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>reset_out_state</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>ModuleThread_GetDecoderDevice</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"hw-dec"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>vout_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>created_vout</name> <init>= <expr><call><name>CreateVoutIfNeeded</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vout_order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>created_vout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>dec_device</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>( <argument><expr><name>dec_device</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>created_vout</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>dec_device</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_format_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout update: mastering data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_format_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>!=</operator>
<name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name> <operator>!=</operator>
<name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vout update: lighting data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_format_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>need_format_update</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DecoderUpdateFormatLocked</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dec_device</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ModuleThread_NewVideoBuffer</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_pool_Wait</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Reset</name><argument_list>( <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>ModuleThread_NewSpuBuffer</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_updater_t</name> <modifier>*</modifier></type><name>p_updater</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_attempts</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_attempts</name><operator>--</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_vout</name> <operator>=</operator> <call><name>input_resource_HoldVout</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_vout</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><name>DECODER_SPU_VOUT_WAIT_DURATION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_vout</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"no vout found, dropping subpicture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_vout_stopped</name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_UnregisterSubpictureChannel</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>,
<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>p_vout</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_vout_stopped</name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_UnregisterSubpictureChannel</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>,
<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>channel_order</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>=</operator>
<call><name>vout_RegisterSubpictureChannelInternal</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>channel_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>==</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>=</operator> <name>p_vout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_order</name></name> <operator>=</operator> <name>channel_order</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>channel_order</name> <operator>!=</operator> <name>VLC_VOUT_ORDER_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_vout_started</name></expr></argument>, <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>channel_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_subpic</name> <operator>=</operator> <call><name>subpicture_New</name><argument_list>( <argument><expr><name>p_updater</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_subpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_order</name></name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_order</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InputThread_GetInputAttachments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_attachment</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>cbs</name></name> <operator>||</operator> <operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>get_attachments</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOOBJ</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>p_owner</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>get_attachments</name></name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>ppp_attachment</name></expr></argument>,
<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cbs_userdata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_attachment</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ModuleThread_GetDisplayDate</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name> <operator>||</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ts</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>output_rate</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>||</operator> <name>i_ts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ts</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>ModuleThread_GetDisplayRate</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.f</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>output_rate</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rate</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>block_t</name> <modifier>*</modifier></type><name>decoder_NewAudioBuffer</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><name>samples</name> <operator>*</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name>
<operator>/</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>length</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RequestReload</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>expected</name> <init>= <expr><name>RELOAD_NO_REQUEST</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_compare_exchange_strong</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>reload</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expected</name></expr></argument>, <argument><expr><name>RELOAD_DECODER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_AbortPictures</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_abort</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_pool_Cancel</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument>, <argument><expr><name>b_abort</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderWaitUnblock</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name> <operator>||</operator> <operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_request</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>DecoderUpdatePreroll</name><parameter_list>( <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_preroll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_PREROLL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_preroll</name> <operator>=</operator> <name>PREROLL_FORCED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_preroll</name> <operator>=</operator> <name>PREROLL_FORCED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_preroll</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><operator>*</operator><name>pi_preroll</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_preroll</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><operator>*</operator><name>pi_preroll</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DecoderThread_PlaySout</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_sout_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sout_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DecoderWaitUnblock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>sout_InputSendBuffer</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name></expr></argument>, <argument><expr><name>p_sout_block</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_ProcessSout</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_sout_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name> <init>= <expr><ternary><condition><expr><name>p_block</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>p_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>p_sout_block</name> <operator>=</operator>
<call><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DecoderUpdateFormatLocked</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_group</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_id</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator>
<call><name>strdup</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>=</operator>
<call><name>sout_InputNew</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot create packetized sout output (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>p_sout_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>p_sout_block</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sout_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sout_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout</name><operator>-&gt;</operator><name>b_wants_substreams</name></name> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>pf_get_cc</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_sout_input</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_sout_created</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_cc_desc_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name> <init>= <expr><call><name><name>p_dec</name><operator>-&gt;</operator><name>pf_get_cc</name></name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_cc</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_sout_created</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>ccfmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ccfmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_CEA608</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>=</operator> <name><name>desc</name><operator>.</operator><name>i_reorder_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_sout_input</name></name> <operator>=</operator> <call><name>sout_InputNew</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ccfmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ccfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_sout_created</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_sout_input</name></name> <operator>||</operator>
<call><name>sout_InputSendBuffer</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_sout_input</name></name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DecoderThread_PlaySout</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_sout_block</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot continue streaming due to errors with codec %4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sout_block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderPlayCc</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <operator>*</operator><name>p_desc</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_bitmap</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name><operator>.</operator><name>i_608_channels</name></name> <operator>|</operator>
<name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name><operator>.</operator><name>i_708_channels</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_bitmap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_bitmap</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_ccowner</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_decoder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ccowner</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_bitmap</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_ccowner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><call><name>block_Duplicate</name><argument_list>(<argument><expr><name>p_cc</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_ccowner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cc</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PacketizerGetCc</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec_cc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_cc_desc_t</name></type> <name>desc</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_supported</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_dec_cc</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cc</name> <operator>=</operator> <call><name><name>p_dec_cc</name><operator>-&gt;</operator><name>pf_get_cc</name></name><argument_list>( <argument><expr><name>p_dec_cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DecoderPlayCc</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_QueueCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_videodec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_videodec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_cc</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_supported</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>||</operator> <operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DecoderPlayCc</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument>, <argument><expr><name>p_desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ModuleThread_PlayVideo</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><ternary><condition><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name></expr> ?</condition><then> <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_picture</name><operator>-&gt;</operator><name>date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"non-dated video buffer received"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>prerolled</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>!=</operator> <name>PREROLL_NONE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>prerolled</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>&gt;</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>date</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <name>PREROLL_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>prerolled</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"end of video preroll"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_vout</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_FlushAll</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DecoderWaitUnblock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Received first picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>b_force</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>likely</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>p_vout</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_picture</name><operator>-&gt;</operator><name>b_still</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vout_Flush</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vout_PutPicture</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_UpdateStatVideo</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>lost</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>displayed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>vout_lost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_GetResetStatistic</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>displayed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vout_lost</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lost</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vout_lost</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_new_video_stats</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vout_lost</name></expr></argument>, <argument><expr><name>displayed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_QueueVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><call><name>ModuleThread_PlayVideo</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ModuleThread_UpdateStatVideo</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>success</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>thumbnailer_get_device</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>thumbnailer_buffer_new</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_QueueThumbnail</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_first</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_first</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_first</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_thumbnail_ready</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ModuleThread_PlayAudio</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_audio</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_audio</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"non-dated audio buffer received"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_audio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>prerolled</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>!=</operator> <name>PREROLL_NONE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>prerolled</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>&gt;</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_pts</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_audio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <name>PREROLL_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>prerolled</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"end of audio preroll"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DecFlush</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>DecoderWaitUnblock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"discarded audio buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_audio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>aout_DecPlay</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>p_audio</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>status</name> <operator>==</operator> <name>AOUT_DEC_CHANGED</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>RequestReload</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>status</name> <operator>==</operator> <name>AOUT_DEC_FAILED</name></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>reload</name></name></expr></argument>, <argument><expr><name>RELOAD_DECODER_AOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_UpdateStatAudio</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>lost</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>played</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>aout_lost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_DecGetResetStats</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aout_lost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>played</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lost</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>aout_lost</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_new_audio_stats</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>aout_lost</name></expr></argument>, <argument><expr><name>played</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_QueueAudio</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><call><name>ModuleThread_PlayAudio</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_aout_buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ModuleThread_UpdateStatAudio</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>success</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_PlaySpu</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"non-dated spu buffer received"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DecoderWaitUnblock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_PutSubpicture</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ModuleThread_QueueSpu</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>||</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ModuleThread_PlaySpu</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_ProcessInput</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_DecodeBlock</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>ret</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLCDEC_SUCCESS</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>VLCDEC_ECRITICAL</name></expr>:</case>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLCDEC_RELOAD</name></expr>:</case>
<expr_stmt><expr><call><name>RequestReload</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORE_PRIVATE_RELOADED</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_CORE_PRIVATE_RELOADED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DecoderThread_ProcessInput</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_ProcessInput</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>





<decl_stmt><decl><type><name><name>enum</name> <name>reload</name></name></type> <name>reload</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>reload</name> <operator>=</operator> <call><name>atomic_exchange</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>reload</name></name></expr></argument>, <argument><expr><name>RELOAD_NO_REQUEST</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Reloading the decoder module%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>reload</name> <operator>==</operator> <name>RELOAD_DECODER_AOUT</name></expr> ?</condition><then> <expr><literal type="string">" and the audio output"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DecoderThread_Reload</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>reload</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>packetize</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DecoderUpdatePreroll</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORE_PRIVATE_RELOADED</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>packetize</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DecoderThread_ProcessSout</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name>packetize</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_packetized_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name> <init>= <expr><ternary><condition><expr><name>p_block</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>p_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p_packetized_block</name> <operator>=</operator>
<call><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>( <argument><expr><name>p_packetizer</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"restarting module due to input format change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DecoderThread_DecodeBlock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DecoderThread_Reload</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>,
<argument><expr><name>RELOAD_DECODER</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_packetized_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_get_cc</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PacketizerGetCc</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_packetizer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>p_packetized_block</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_packetized_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_packetized_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecoderThread_DecodeBlock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_packetized_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_packetized_block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DecoderThread_DecodeBlock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DecoderThread_DecodeBlock</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_Flush</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_packetizer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_flush</name></name><argument_list>( <argument><expr><name>p_packetizer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_supported</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_CC_DECODERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_ccowner</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_decoder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_ccowner</name> <operator>&amp;&amp;</operator> <name><name>p_ccowner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>pf_flush</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_ccowner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>pf_flush</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccowner</name><operator>-&gt;</operator><name>dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sout_InputFlush</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DecFlush</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_FlushAll</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_FlushSubpictureChannel</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <name>PREROLL_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_ChangePause</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"toggling %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>paused</name></expr> ?</condition><then> <expr><literal type="string">"resume"</literal></expr> </then><else>: <expr><literal type="string">"pause"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_ChangePause</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>paused</name></expr></argument>, <argument><expr><name>date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DecChangePause</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument>, <argument><expr><name>paused</name></expr></argument>, <argument><expr><name>date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_ChangeRate</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"changing rate: %f"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_ChangeRate</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DecChangeRate</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_ChangeSpuRate</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name></expr></argument>,
<argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>output_rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderThread_ChangeDelay</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"changing delay: %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_ChangeDelay</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DecChangeDelay</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_ChangeSpuDelay</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name></expr></argument>,
<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>DecoderThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><operator>(</operator><name>vlc_input_decoder_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><literal type="number">1.f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>paused</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>aborting</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>flushing</name></name></expr> )</condition>
<block>{<block_content> 

<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DecoderThread_Flush</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>reset_out_state</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>rate</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>paused</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>reset_out_state</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>paused</name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name></expr> )</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>pause_date</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>paused</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecoderThread_ChangePause</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>paused</name></expr></argument>, <argument><expr><name>date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>rate</name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>request_rate</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>rate</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>request_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecoderThread_ChangeRate</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>delay</name> <operator>!=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>delay</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>delay</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecoderThread_ChangeDelay</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_idle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Wait</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_idle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>vlc_fifo_DequeueUnlocked</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_draining</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_idle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Wait</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_idle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecoderThread_ProcessInput</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content> 

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DecDrain</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_block</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>drained</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_video_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>video</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>get_device</name> <operator>=</operator> <name>ModuleThread_GetDecoderDevice</name></expr>,
<expr><operator>.</operator><name>format_update</name> <operator>=</operator> <name>ModuleThread_UpdateVideoFormat</name></expr>,
<expr><operator>.</operator><name>buffer_new</name> <operator>=</operator> <name>ModuleThread_NewVideoBuffer</name></expr>,
<expr><operator>.</operator><name>abort_pictures</name> <operator>=</operator> <name>DecoderThread_AbortPictures</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>ModuleThread_QueueVideo</name></expr>,
<expr><operator>.</operator><name>queue_cc</name> <operator>=</operator> <name>ModuleThread_QueueCc</name></expr>,
<expr><operator>.</operator><name>get_display_date</name> <operator>=</operator> <name>ModuleThread_GetDisplayDate</name></expr>,
<expr><operator>.</operator><name>get_display_rate</name> <operator>=</operator> <name>ModuleThread_GetDisplayRate</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>get_attachments</name> <operator>=</operator> <name>InputThread_GetInputAttachments</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_thumbnailer_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>video</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>get_device</name> <operator>=</operator> <name>thumbnailer_get_device</name></expr>,
<expr><operator>.</operator><name>buffer_new</name> <operator>=</operator> <name>thumbnailer_buffer_new</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>ModuleThread_QueueThumbnail</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>get_attachments</name> <operator>=</operator> <name>InputThread_GetInputAttachments</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_audio_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>audio</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>format_update</name> <operator>=</operator> <name>ModuleThread_UpdateAudioFormat</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>ModuleThread_QueueAudio</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>get_attachments</name> <operator>=</operator> <name>InputThread_GetInputAttachments</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_spu_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>spu</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>buffer_new</name> <operator>=</operator> <name>ModuleThread_NewSpuBuffer</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>ModuleThread_QueueSpu</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>get_attachments</name> <operator>=</operator> <name>InputThread_GetInputAttachments</name></expr>,
}</block></expr></init></decl>;</decl_stmt>









<function><type><specifier>static</specifier> <name>vlc_input_decoder_t</name> <modifier>*</modifier></type>
<name>CreateDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>p_clock</name></decl></parameter>,
<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>, <parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_thumbnailing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_decoder_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>vlc_input_decoder_t</name></expr></argument>, <argument><expr><name>dec</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"the decoder must be first in the owner structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_owner</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_owner</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_owner</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_dec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>=</operator> <name>p_clock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <name>PREROLL_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name> <operator>=</operator> <name>p_resource</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cbs_userdata</name></name> <operator>=</operator> <name>cbs_userdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <name>p_sout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_fmt_description</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>reset_out_state</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>output_rate</name></name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>request_rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>drained</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>reload</name></name></expr></argument>, <argument><expr><name>RELOAD_NO_REQUEST</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_idle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>mouse_opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>mouse_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_request</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>p_sout</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>b_packetized</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>=</operator>
<call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>decoder_t</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"packetizer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>LoadDecoder</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_thumbnailing</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_video_cbs</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_thumbnailer_cbs</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_audio_cbs</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_spu_cbs</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unknown ES format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_owner</name></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if<condition>( <expr><call><name>LoadDecoder</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_sout</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_owner</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AUDIO_REPLAY_GAIN_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_supported</name></name> <operator>=</operator> <operator>(</operator> <name>p_sout</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name><operator>.</operator><name>i_608_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name><operator>.</operator><name>i_708_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CC_DECODERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_decoder</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_sout_input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_sout_created</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>p_owner</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"killing decoder fourcc `%4.4s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name> <init>=<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decoder_Clean</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_pool_Release</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>vctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sout_InputDelete</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_sout_input</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sout_InputDelete</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_sout_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>( <expr><name>i_cat</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>aout_DecDelete</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_resource_PutAout</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VIDEO_ES</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vout</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_pool_Cancel</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vout_StopDisplay</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_vout_stopped</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_resource_PutVout</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Notify</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>on_vout_stopped</name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_UnregisterSubpictureChannel</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>,
<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>i_spu_channel</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DATA_ES</name></expr>:</case>
<case>case <expr><name>UNKNOWN_ES</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderUnsupportedCodec</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_decoding</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>vlc_fourcc_GetDescription</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"No description for this codec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Codec `%4.4s' (%s) is not supported."</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Codec not supported"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC could not decode the format \"%4.4s\" (%s)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><name>b_decoding</name></expr> )</condition><block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"could not identify codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unidentified codec"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC could not identify the audio or video codec"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>vlc_input_decoder_t</name> <modifier>*</modifier></type>
<name>decoder_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>p_clock</name></decl></parameter>, <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thumbnailing</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_decoder_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name> <init>= <expr><ternary><condition><expr><name>p_sout</name></expr> ?</condition><then> <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"packetizer"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"decoder"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_priority</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name> <init>=
<expr><call><name>CreateDecoder</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p_clock</name></expr></argument>, <argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name>p_sout</name></expr></argument>,
<argument><expr><name>thumbnailing</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_owner</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"could not create %s"</literal></expr></argument>, <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Streaming / Transcoding failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC could not open the %s module."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>( <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DecoderUnsupportedCodec</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>!</operator><name>p_sout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteDecoder</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_priority</name> <operator>=</operator> <name>VLC_THREAD_PRIORITY_AUDIO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_priority</name> <operator>=</operator> <name>VLC_THREAD_PRIORITY_VIDEO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><name>p_sout</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>b_packetized</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>=</operator> <call><name>sout_InputNew</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot create sout input (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>DecoderThread</name></expr></argument>, <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>i_priority</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot spawn decoder thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDecoder</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_owner</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type>
<name>vlc_input_decoder_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>p_clock</name></decl></parameter>, <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>resource</name></decl></parameter>,
<parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thumbnailing</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_decoder_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>decoder_New</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p_clock</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><name>thumbnailing</name></expr></argument>,
<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type>
<name>vlc_input_decoder_Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>decoder_New</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>vlc_input_decoder_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>aborting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Signal</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_request</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_pool_Cancel</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_supported</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CC_DECODERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_SetCcState</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>VLC_CODEC_CEA608</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>DeleteDecoder</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>vlc_input_decoder_Decode</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_do_pace</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_do_pace</name></expr> )</condition>
<block>{<block_content>



<if_stmt><if>if<condition>( <expr><call><name>vlc_fifo_GetBytes</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">400</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>, <argument><expr><literal type="string">"decoder/packetizer fifo full (data not "</literal>
<literal type="string">"consumed quickly enough), resetting fifo!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><call><name>vlc_fifo_DequeueAllUnlocked</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr> )</condition>
<block>{<block_content> 


<while>while<condition>( <expr><call><name>vlc_fifo_GetCount</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_fifo_WaitCond</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_fifo_QueueUnlocked</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_input_decoder_IsEmpty</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type> <name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_fifo_IsEmpty</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>||</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>b_draining</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_empty</name> <operator>=</operator> <call><name>sout_InputIsEmpty</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_empty</name> <operator>=</operator> <call><name>vout_IsEmpty</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_empty</name> <operator>=</operator> <operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>||</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>drained</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b_empty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_empty</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>vlc_input_decoder_Drain</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Signal</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>vlc_input_decoder_Flush</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><call><name>vlc_fifo_DequeueAllUnlocked</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Signal</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name></expr> )</condition>
<block>{<block_content>











<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name>
<operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>&amp;&amp;</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>vout_thread_started</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_FlushAll</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_GetCcDesc</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_desc</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vlc_input_decoder_HasCCChanFlag</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_channel</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_bitmap</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_CEA608</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_bitmap</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name><operator>.</operator><name>i_608_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_CEA708</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_bitmap</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name><operator>.</operator><name>i_708_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator> <name>i_channel</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_channel</name> <operator>&lt;</operator> <name>i_max_channels</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_bitmap</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_channel</name><operator>)</operator> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_SetCcState</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_channel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_decode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_input_decoder_HasCCChanFlag</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>i_channel</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_decode</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_ccowner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>=</operator> <name>i_channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>desc</name><operator>.</operator><name>i_reorder_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ccowner</name> <operator>=</operator> <call><name>vlc_input_decoder_New</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name></expr></argument>,
<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ccowner</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"could not create decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Streaming / Transcoding failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC could not open the decoder module."</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_ccowner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DecoderUnsupportedCodec</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_input_decoder_Delete</name><argument_list>(<argument><expr><name>p_ccowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_ccowner</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>p_clock</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_decoder</name><index>[<expr><name>i_channel</name></expr>]</index></name> <operator>=</operator> <name>p_ccowner</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_cc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cc</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_decoder</name><index>[<expr><name>i_channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_decoder</name><index>[<expr><name>i_channel</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cc</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_Delete</name><argument_list>(<argument><expr><name>p_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_GetCcState</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_channel</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_decode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_input_decoder_HasCCChanFlag</name><argument_list>( <argument><expr><name>p_owner</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>i_channel</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_decode</name> <operator>=</operator> <name><name>p_owner</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_decoder</name><index>[<expr><name>i_channel</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_ChangePause</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>



<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>b_paused</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Signal</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_ChangeRate</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>request_rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_ChangeDelay</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_StartWait</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_request</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_StopWait</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_request</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_Wait</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_waiting</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_has_data</name></name></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>b_idle</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_fifo_IsEmpty</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>, <argument><expr><literal type="string">"buffer deadlock prevented"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>wait_acknowledge</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_FrameNext</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_duration</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>paused</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>frames_countdown</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Signal</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_NextPicture</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>pi_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_input_decoder_HasFormatChanged</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_meta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>atomic_exchange_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>b_fmt_description</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_fmt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_meta</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_meta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_meta</name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_meta</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><operator>*</operator><name>pp_meta</name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vlc_input_decoder_GetFifoSize</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>block_FifoSize</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DecoderHasVbi</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TELETEXT</name>
<operator>&amp;&amp;</operator> <call><name>var_Type</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_VAR_INTEGER</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_GetVbiPage</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>DecoderHasVbi</name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>opaque</name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_SetVbiPage</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>page</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>DecoderHasVbi</name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument>, <argument><expr><name>page</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_SetVbiOpaque</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>DecoderHasVbi</name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-opaque"</literal></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_input_decoder_SetVoutMouseEvent</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>,
<parameter><decl><type><name>vlc_mouse_event</name></type> <name>mouse_event</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>mouse_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <name>mouse_event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>mouse_opaque</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>mouse_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_AddVoutOverlay</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>channel</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>sub</name> <operator>&amp;&amp;</operator> <name>channel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>channel_id</name> <init>=
<expr><call><name>vout_RegisterSubpictureChannel</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <operator>*</operator><name>channel</name> <operator>=</operator> <name>channel_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_PutSubpicture</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_DelVoutOverlay</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vout_UnregisterSubpictureChannel</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_input_decoder_SetSpuHighlight</name><parameter_list>( <parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <modifier>*</modifier></type><name>spu_hl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sout_InputControl</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_sout_input</name></name></expr></argument>, <argument><expr><name>SOUT_INPUT_SET_SPU_HIGHLIGHT</name></expr></argument>, <argument><expr><name>spu_hl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_SetSpuHighlight</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>spu_hl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
