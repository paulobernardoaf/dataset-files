<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\input\mrl_helpers.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_MRL_HELPERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_MRL_HELPERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>


























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>mrl_EscapeFragmentIdentifier</name><parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>payload</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>mstream</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3986_SUBDELIMS</name></cpp:macro> <cpp:value>"!" "$" "&amp;" "'" "(" ")" "*" "+" "," ";" "="</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3986_ALPHA</name></cpp:macro> <cpp:value>"abcdefghijklmnopqrstuvwxyz" "ABCDEFGHIJKLMNOPQRSTUVWXYZ"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3986_DIGIT</name></cpp:macro> <cpp:value>"0123456789"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3986_UNRESERVED</name></cpp:macro> <cpp:value>RFC3986_ALPHA RFC3986_DIGIT "-" "." "_" "~"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3986_PCHAR</name></cpp:macro> <cpp:value>RFC3986_UNRESERVED RFC3986_SUBDELIMS ":" "@"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3986_FRAGMENT</name></cpp:macro> <cpp:value>RFC3986_PCHAR "/" "?"</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mstream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>payload</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mstream</name></expr></argument>,
<argument><expr><operator>(</operator> <ternary><condition><expr><call><name>strchr</name><argument_list>( <argument><expr><literal type="string">"!?"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>strchr</name><argument_list>( <argument><expr><name>RFC3986_FRAGMENT</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"%c"</literal></expr> </then><else>: <expr><literal type="string">"%%%02hhx"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RFC3986_FRAGMENT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RFC3986_PCHAR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RFC3986_UNRESERVEd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RFC3986_DIGIT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RFC3986_ALPHA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RFC3986_SUBDELIMS</name></cpp:undef>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mstream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>mstream</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>mrl_FragmentSplit</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name><modifier>*</modifier></type> <name>out_items</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type> <name>out_extra</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>payload</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><name>out_items</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="string">"!/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>payload</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>( <argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="string">"!?"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>decoded</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>decoded</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>vlc_uri_decode</name><argument_list>( <argument><expr><name>decoded</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_array_append</name><argument_list>( <argument><expr><name>out_items</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>decoded</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>payload</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>payload</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>payload</name> <operator>==</operator> <literal type="char">'!'</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>payload</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><name>out_items</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>payload</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><name>out_items</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><name>out_items</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><name>out_items</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return><empty_stmt>;</empty_stmt>
</block_content>}</block></function>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
