<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\input\es_out.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es_out.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fourcc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_decoder.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../clock/input_clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../clock/clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"es_out.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../stream_output/stream_output.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_iso_lang.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../text/iso-639_def.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_selected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_scrambled</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>p_input_clock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>p_main_clock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>p_master_clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>
}</block></struct></type> <name>es_out_pgrm_t</name>;</typedef>







<struct>struct <name>vlc_es_id_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_id</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>es_out_id_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_es_id_t</name></type> <name>id</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_scrambled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_forced</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_language</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_language_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_terminated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>p_dec_record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>p_clock</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>master</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>


<struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_bitmap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name><name>pp_es</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>cc</name></decl>;</struct>


<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_master</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mouse_event</name></type> <name>mouse_event_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>mouse_event_userdata</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_main_es</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>es_out_policy_e</name></name></type> <name>e_policy</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_autoselect</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_ids</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_demux_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_language</name></decl>;</decl_stmt>
}</block></struct></type> <name>es_out_es_props_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>main_source</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>programs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_master_source_cat</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>es_slaves</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>bool</name></type> <name>b_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_es_props_t</name></type> <name>video</name></decl>, <name>audio</name>, <name>sub</name>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_group_id</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_audio_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_spu_delay</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_tracks_pts_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_jitter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cr_average</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_paused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pause_date</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_preroll_end</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_buffering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_buffering_extra_initial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_buffering_extra_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_buffering_extra_system</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout_record</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_prev_stream_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_t</name></type> <name>out</name></decl>;</decl_stmt>
}</block></struct></type> <name>es_out_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDelLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDel</name> <parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutTerminate</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSelect</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSelectList</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,
<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type> <name>es_id_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutUpdateInfo</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EsOutSetRecord</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_record</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>EsIsSelected</name><parameter_list>( <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSelectEs</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDeleteInfoEs</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutUnselectEs</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_update</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDecoderChangeDelay</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDecodersChangePause</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramChangePause</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramsChangeRate</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDecodersStopBuffering</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_forced</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutGlobalMeta</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EsOutMeta</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_progmeta</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EsOutEsUpdateFmt</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EsOutControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EsOutPrivControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>LanguageGetName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_code</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>LanguageGetCode</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lang</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>LanguageSplit</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_langs</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>LanguageArrayIndex</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_langs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lang</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EsOutProgramGetMetaName</name><parameter_list>( <parameter><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EsInfoCategoryName</name><parameter_list>( <parameter><decl><type><name>es_out_id_t</name><modifier>*</modifier></type> <name>es</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>EsOutGetClosedCaptionsChannel</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_CEA608</name> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_channel</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_CEA708</name> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_channel</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_channel</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>i_channel</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foreach_es_then_es_slaves</name><parameter_list>( <parameter><type><name>pos</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for( int fetes_i=0; fetes_i&lt;2; fetes_i++ ) vlc_list_foreach( pos, (!fetes_i ? &amp;p_sys-&gt;es : &amp;p_sys-&gt;es_slaves), node )</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>decoder_on_vout_started</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>decoder</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_vout</name></name></type> <name>event</name> <init>= <expr><block>{
<expr><operator>.</operator><name>action</name> <operator>=</operator> <name>VLC_INPUT_EVENT_VOUT_STARTED</name></expr>,
<expr><operator>.</operator><name>vout</name> <operator>=</operator> <name>vout</name></expr>,
<expr><operator>.</operator><name>order</name> <operator>=</operator> <name>order</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_SendEventVout</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decoder_on_vout_stopped</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>decoder</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event_vout</name></name></type> <name>event</name> <init>= <expr><block>{
<expr><operator>.</operator><name>action</name> <operator>=</operator> <name>VLC_INPUT_EVENT_VOUT_STOPPED</name></expr>,
<expr><operator>.</operator><name>vout</name> <operator>=</operator> <name>vout</name></expr>,
<expr><operator>.</operator><name>order</name> <operator>=</operator> <name>VLC_VOUT_ORDER_NONE</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_SendEventVout</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decoder_on_thumbnail_ready</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>decoder</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_input_event</name></name></type> <name>event</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>INPUT_EVENT_THUMBNAIL_READY</name></expr>,
<expr><operator>.</operator><name>thumbnail</name> <operator>=</operator> <name>pic</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_SendEvent</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decoder_on_new_video_stats</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>decoded</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lost</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>displayed</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>decoder</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>stats</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>decoded_video</name></name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>lost_pictures</name></name></expr></argument>, <argument><expr><name>lost</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>displayed_pictures</name></name></expr></argument>, <argument><expr><name>displayed</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decoder_on_new_audio_stats</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>decoded</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lost</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>played</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>decoder</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>stats</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>decoded_audio</name></name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>lost_abuffers</name></name></expr></argument>, <argument><expr><name>lost</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>played_abuffers</name></name></expr></argument>, <argument><expr><name>played</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decoder_get_attachments</name><parameter_list>(<parameter><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>,
<parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>decoder</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>input_GetAttachments</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name>ppp_attachment</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_input_decoder_callbacks</name></name></type> <name>decoder_cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_vout_started</name> <operator>=</operator> <name>decoder_on_vout_started</name></expr>,
<expr><operator>.</operator><name>on_vout_stopped</name> <operator>=</operator> <name>decoder_on_vout_stopped</name></expr>,
<expr><operator>.</operator><name>on_thumbnail_ready</name> <operator>=</operator> <name>decoder_on_thumbnail_ready</name></expr>,
<expr><operator>.</operator><name>on_new_video_stats</name> <operator>=</operator> <name>decoder_on_new_video_stats</name></expr>,
<expr><operator>.</operator><name>on_new_audio_stats</name> <operator>=</operator> <name>decoder_on_new_audio_stats</name></expr>,
<expr><operator>.</operator><name>get_attachments</name> <operator>=</operator> <name>decoder_get_attachments</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>es_out_es_props_t</name> <modifier>*</modifier></type> <name>GetPropsByCat</name><parameter_list>( <parameter><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_cat</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>audio</name></name></expr>;</return>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name></name></expr>;</return>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>video</name></name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutPropsCleanup</name><parameter_list>( <parameter><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>str_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutPropsInit</name><parameter_list>( <parameter><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>autoselect</name></decl></parameter>,
<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_out_policy_e</name></name></type> <name>e_default_policy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_trackidvar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_trackvar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_langvar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_debug</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>e_policy</name></name> <operator>=</operator> <name>e_default_policy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>b_autoselect</name></name> <operator>=</operator> <name>autoselect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>str_ids</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>psz_trackidvar</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_trackidvar</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>psz_trackvar</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_trackvar</name></expr></argument> )</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>i_demux_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_preparsing</name> <operator>&amp;&amp;</operator> <name>psz_langvar</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_langvar</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name></name> <operator>=</operator> <call><name>LanguageSplit</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"selected %s language[%d] %s"</literal></expr></argument>,
<argument><expr><name>psz_debug</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>ppsz_language</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>es_out_callbacks</name></name></type> <name>es_out_cbs</name></decl>;</decl_stmt>




<function><type><name>es_out_t</name> <modifier>*</modifier></type><name>input_EsOutNew</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>main_source</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>es_out_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>main_source</name></name> <operator>=</operator> <name>main_source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>ES_OUT_MODE_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EsOutPropsInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>ES_OUT_ES_POLICY_AUTO</name></expr></argument>,
<argument><expr><literal type="string">"video-track-id"</literal></expr></argument>, <argument><expr><literal type="string">"video-track"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutPropsInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>ES_OUT_ES_POLICY_EXCLUSIVE</name></expr></argument>,
<argument><expr><literal type="string">"audio-track-id"</literal></expr></argument>, <argument><expr><literal type="string">"audio-track"</literal></expr></argument>, <argument><expr><literal type="string">"audio-language"</literal></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutPropsInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>ES_OUT_ES_POLICY_AUTO</name></expr></argument>,
<argument><expr><literal type="string">"sub-track-id"</literal></expr></argument>, <argument><expr><literal type="string">"sub-track"</literal></expr></argument>, <argument><expr><literal type="string">"sub-language"</literal></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_group_id</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"program"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_clock_master_source</name></name></type> <name>master_source</name> <init>=
<expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"clock-master"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>master_source</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CLOCK_MASTER_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_master_source_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CLOCK_MASTER_MONOTONIC</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_master_source_cat</name></name> <operator>=</operator> <name>UNKNOWN_ES</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_stream_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>EsTerminate</name><parameter_list>(<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>b_terminated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EsGetTitle</name><parameter_list>( <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s - [%s]"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>,
<argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>title</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s %zu - [%s]"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Track"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>es</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>title</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s %zu"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Track"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>title</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>title</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsRelease</name><parameter_list>(<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_atomic_rc_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_source_Release</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsHold</name><parameter_list>(<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDelete</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutPropsCleanup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutPropsCleanup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutPropsCleanup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProgramDelete</name><parameter_list>( <parameter><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>input_clock_Delete</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_main_Delete</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutTerminate</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSetRecord</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_Delete</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EsTerminate</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsRelease</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>p_pgrm</argument>, <argument>&amp;p_sys-&gt;programs</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pgrm</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_SendEventProgramDel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ProgramDelete</name><argument_list>(<argument><expr><name>p_pgrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetEpgOffline</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_SendEventMetaEpg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>EsOutGetWakeup</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pace_control</name> <operator>||</operator>
<call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_out_pace_control</name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>input_clock_GetWakeup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>es_out_id_t</name></type> <name><name>es_cat</name><index>[<expr><name>DATA_ES</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>EsOutGetSelectedCat</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>( <argument>es</argument> )</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>cat</name> <operator>&amp;&amp;</operator> <call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>es</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>EsOutDecodersIsEmpty</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutDecodersStopBuffering</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_input_decoder_IsEmpty</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_input_decoder_IsEmpty</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSetEsDelay</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>||</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EsOutDecoderChangeDelay</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EsOutPrivControlLocked</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ES_OUT_PRIV_SET_JITTER</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cr_average</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSetDelay</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_delay</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_audio_delay</name></name> <operator>=</operator> <name>i_delay</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_cat</name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_delay</name></name> <operator>=</operator> <name>i_delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EsOutDecoderChangeDelay</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EsOutPrivControlLocked</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ES_OUT_PRIV_SET_JITTER</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cr_average</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutSetRecord</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_record</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name>b_record</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name> <operator>)</operator> <operator>||</operator> <operator>(</operator> <operator>!</operator><name>b_record</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_record</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-record-path"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>var_CountChoices</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"video-es"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_VIDEOS_DIR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><call><name>var_CountChoices</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"audio-es"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_MUSIC_DIR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_DOWNLOAD_DIR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_sout</name> <operator>&amp;&amp;</operator> <name>psz_path</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name> <init>= <expr><call><name>input_item_CreateFilename</name><argument_list>( <argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_path</name></expr></argument>,
<argument><expr><name>INPUT_RECORD_PREFIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_file</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_file_esc</name> <init>= <expr><call><name>config_StringEscape</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_file_esc</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_sout</name></expr></argument>, <argument><expr><literal type="string">"#record{dst-prefix='%s'}"</literal></expr></argument>, <argument><expr><name>psz_file_esc</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_sout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file_esc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_sout</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name> <operator>=</operator> <call><name>sout_NewInstance</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_sout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_sout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>vlc_list_foreach</name><argument_list>( <argument>p_es</argument>, <argument>&amp;p_sys-&gt;es</argument>, <argument>node</argument> )</argument_list></macro> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>=</operator>
<call><name>vlc_input_decoder_New</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>decoder_cbs</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_StartWait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<macro><name>vlc_list_foreach</name><argument_list>( <argument>p_es</argument>, <argument>&amp;p_sys-&gt;es</argument>, <argument>node</argument> )</argument_list></macro> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_input_decoder_Delete</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sout_DeleteInstance</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutChangePause</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>b_paused</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutDecodersChangePause</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutProgramChangePause</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_system_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_system_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>input_clock_GetState</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_start</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_duration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_used</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_system</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_date</name> <operator>-=</operator> <name>i_used</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_system</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EsOutProgramChangePause</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutDecodersChangePause</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EsOutProgramsChangeRate</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name>b_paused</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutChangeRate</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutProgramsChangeRate</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_ChangeRate</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutChangePosition</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_SendEventCache</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>p_es</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_flush</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_Flush</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_StartWait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_StartWait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>pgrm</name></decl>;</decl_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>pgrm</argument>, <argument>&amp;p_sys-&gt;programs</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>input_clock_Reset</name><argument_list>(<argument><expr><name><name>pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_main_Reset</name><argument_list>(<argument><expr><name><name>pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_system</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_stream_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutStopFreeVout</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_active</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_resource_StopFreeVout</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDecodersStopBuffering</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_forced</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_system_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_system_duration</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>input_clock_GetState</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_start</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_duration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_duration</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_preroll_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_preroll_duration</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>-</operator> <name>i_stream_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_buffering_duration</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_pts_delay</name></name> <operator>+</operator>
<name>i_preroll_duration</name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_stream</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_stream_duration</name> <operator>&lt;=</operator> <name>i_buffering_duration</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_forced</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_level</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_buffering_duration</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>f_level</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i_stream_duration</name> <operator>/</operator> <name>i_buffering_duration</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>input_SendEventCache</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name>f_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_level</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>f_level</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_stream_level</name></name> <operator>!=</operator> <name>i_level</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"Buffering %d%%"</literal></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_stream_level</name></name> <operator>=</operator> <name>i_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>input_SendEventCache</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"Stream buffering done (%d ms in %d ms)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_stream_duration</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_system_duration</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_stream_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_decoder_buffering_start</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>p_es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>||</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_input_decoder_Wait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_Wait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"Decoder wait done in %d ms"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>i_decoder_buffering_start</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>EsOutStopFreeVout</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_wakeup_delay</name> <init>= <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_current_date</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pause_date</name></name></expr> </then><else>: <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>update</name> <init>= <expr><name>i_current_date</name> <operator>+</operator> <name>i_wakeup_delay</name> <operator>-</operator> <name>i_buffering_duration</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>vlc_clock_main_SetFirstPcr</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>,
<argument><expr><name>i_stream_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_clock_ChangeSystemOrigin</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>p_es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_input_decoder_StopWait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_StopWait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDecodersChangePause</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>


<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_ChangePause</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_ChangePause</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>,
<argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>EsOutIsExtraBufferingAllowed</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>p_es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <call><name>vlc_input_decoder_GetFifoSize</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <call><name>vlc_input_decoder_GetFifoSize</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPTIMIZE_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_level_high</name> <init>= <expr><literal type="number">512</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_level_high</name> <init>= <expr><literal type="number">10</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>i_size</name> <operator>&lt;</operator> <name>i_level_high</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramChangePause</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>pgrm</name></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>pgrm</argument>, <argument>&amp;p_sys-&gt;programs</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>input_clock_ChangePause</name><argument_list>(<argument><expr><name><name>pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_main_ChangePause</name><argument_list>(<argument><expr><name><name>pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>, <argument><expr><name>i_date</name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDecoderChangeDelay</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delay</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>delay</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>delay</name></name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_audio_delay</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_delay</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_ChangeDelay</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>i_delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_ChangeDelay</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument>, <argument><expr><name>i_delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramsChangeRate</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>pgrm</name></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>pgrm</argument>, <argument>&amp;p_sys-&gt;programs</argument>, <argument>node</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>input_clock_ChangeRate</name><argument_list>(<argument><expr><name><name>pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutFrameNext</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es_video</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"buffering, ignoring 'frame next'"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>p_es</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_es_video</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_es_video</name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_es_video</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"No video track selected, ignoring 'frame next'"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_input_decoder_FrameNext</name><argument_list>( <argument><expr><name><name>p_es_video</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"EsOutFrameNext consummed %d ms"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_duration</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_system_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_system_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>input_clock_GetState</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_start</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_duration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>i_stream_duration</name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_pts_delay</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_system</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_stream</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>rate</name> <init>= <expr><call><name>input_clock_GetRate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_system</name></name> <operator>+=</operator> <name>i_duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_stream</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>+</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_system</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>)</operator> <operator>*</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_stream_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>EsOutGetBuffering</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_duration</name></decl>, <decl><type ref="prev"/><name>i_system_start</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stream_start</name></decl>, <decl><type ref="prev"/><name>i_system_duration</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_clock_GetState</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_start</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream_duration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_system_duration</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delay</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <name>i_stream_duration</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_system_duration</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_system_duration</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>-</operator> <name>i_system_start</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_system_duration</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_system</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffering_extra_initial</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_system_duration</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>i_system_start</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_consumed</name> <init>= <expr><name>i_system_duration</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>-</operator> <name>i_stream_duration</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_pts_delay</name></name> <operator>-</operator> <name>i_consumed</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>i_delay</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSendEsEvent</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>

<macro><name>input_SendEventEs</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event_es) {
.action = action</argument>,
<argument>.id = &amp;es-&gt;id</argument>,
<argument>.title = es-&gt;psz_title ? es-&gt;psz_title : <literal type="string">""</literal></argument>,
<argument>.fmt = es-&gt;fmt_out.i_cat != UNKNOWN_ES ? &amp;es-&gt;fmt_out : &amp;es-&gt;fmt</argument>,
<argument>.forced = forced</argument>,
<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>EsOutIsGroupSticky</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>source</name> <operator>!=</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>master</name> <operator>&amp;&amp;</operator> <name>i_group</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>EsOutIsProgramVisible</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_group_id</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_group_id</name></name> <operator>==</operator> <name>i_group</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>source</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramSelect</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"unselecting program id=%d"</literal></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>!=</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EsIsSelected</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>!=</operator> <name>ES_OUT_MODE_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>EsOutIsGroupSticky</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>



<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_DELETED</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>p_main_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_main_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>p_main_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"selecting program id=%d"</literal></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>=</operator> <name>p_pgrm</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>input_SendEventProgramSelect</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>input_SendEventProgramScrambled</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>b_scrambled</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_ADDED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutUpdateInfo</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutSelect</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>input_item_ChangeEPGSource</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_SetESNowPlaying</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>,
<argument><expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_ESNowPlaying</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_SetPublisher</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>,
<argument><expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Publisher</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_SetTitle</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>,
<argument><expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_SendEventMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>EsOutProgramAdd</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><call><name>EsOutIsGroupSticky</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>es_out_pgrm_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <call><name>input_source_Hold</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_group</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_es</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>b_scrambled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_master_clock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name> <operator>=</operator> <call><name>input_clock_New</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name> <operator>=</operator> <call><name>vlc_clock_main_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name> <operator>||</operator> <operator>!</operator><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_clock_Delete</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_clock_ChangePause</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pause_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>pts_delay</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_pts_delay</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_clock_SetJitter</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name>pts_delay</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cr_average</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_main_SetInputDejitter</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>, <argument><expr><name>pts_delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_low_delay</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_clock_main_SetDejitter</name><argument_list>(<argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pgrm</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>EsOutIsProgramVisible</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventProgramAdd</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_group</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_group_id</name></name> <operator>||</operator> <operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_group_id</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutProgramSelect</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_pgrm</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>EsOutProgramSearch</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>pgrm</name></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>pgrm</argument>, <argument>&amp;p_sys-&gt;programs</argument>, <argument>node</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>pgrm</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <name>i_group</name> <operator>&amp;&amp;</operator> <name><name>pgrm</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>source</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pgrm</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>EsOutProgramInsert</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>pgrm</name> <init>= <expr><call><name>EsOutProgramSearch</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>pgrm</name></expr> ?</condition><then> <expr><name>pgrm</name></expr> </then><else>: <expr><call><name>EsOutProgramAdd</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutProgramDel</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name> <init>= <expr><call><name>EsOutProgramSearch</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pgrm</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_es</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"can't delete program %d which still has %i ES"</literal></expr></argument>,
<argument><expr><name>i_group</name></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>!=</operator> <name>p_pgrm</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>EsOutIsGroupSticky</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pgrm</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>input_SendEventProgramDel</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ProgramDelete</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EsOutProgramGetMetaName</name><parameter_list>( <parameter><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s [%s %d]"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Program"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Program"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>psz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EsOutProgramGetProgramName</name><parameter_list>( <parameter><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Program"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>psz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EsInfoCategoryName</name><parameter_list>( <parameter><decl><type><name>es_out_id_t</name><modifier>*</modifier></type> <name>es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_category</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_category</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Stream '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>psz_category</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramMeta</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_provider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_new_infos</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"EsOutProgramMeta: number=%d"</literal></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_ESNowPlaying</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Publisher</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_group</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutGlobalMeta</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsOutIsProgramVisible</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <call><name>EsOutProgramInsert</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_current_title</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_new_title</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><ternary><condition><expr><operator>(</operator><name>psz_current_title</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_new_title</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_new_title</name></expr></argument>, <argument><expr><name>psz_current_title</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><operator>(</operator><name>psz_current_title</name> <operator>!=</operator> <name>psz_new_title</name><operator>)</operator></expr></else></ternary></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_oldinfokey</name> <init>= <expr><call><name>EsOutProgramGetMetaName</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_item_DelInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_oldinfokey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_has_new_infos</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_oldinfokey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>p_pgrm</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutMeta</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_title</name> <operator>=</operator> <call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_provider</name> <operator>=</operator> <call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Publisher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>psz_title</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_title</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_provider</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_provider</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"%s [%s]"</literal></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_provider</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_text</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_SendEventProgramUpdated</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventProgramSelect</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_all_keys</name> <init>= <expr><call><name>vlc_meta_CopyExtraNames</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_cat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_provider</name> <operator>||</operator> <operator>(</operator> <name><name>ppsz_all_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ppsz_all_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cat</name> <init>= <expr><call><name>EsOutProgramGetMetaName</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_cat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_cat</name> <operator>=</operator> <call><name>info_category_New</name><argument_list>( <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_cat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_meta_GetExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_all_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_provider</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>p_pgrm</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_SetPublisher</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>, <argument><expr><name>psz_provider</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_SendEventMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_cat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>vlc_meta_TypeToLocalizedString</name><argument_list>(<argument><expr><name>vlc_meta_Publisher</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>psz_provider</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_cat</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_MergeInfos</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>p_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_new_infos</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_preparsing</name> <operator>&amp;&amp;</operator> <name>b_has_new_infos</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventMetaInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramEpgEvent</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsOutIsProgramVisible</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <call><name>EsOutProgramInsert</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_SetEpgEvent</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>p_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramEpg</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsOutIsProgramVisible</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <call><name>EsOutProgramInsert</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>psz_cat</name> <operator>=</operator> <call><name>EsOutProgramGetMetaName</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"EsOutProgramEpg: number=%d name=%s"</literal></expr></argument>, <argument><expr><name>i_group</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>vlc_epg_t</name></type> <name>epg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>epg</name> <operator>=</operator> <operator>*</operator><name>p_epg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epg</name><operator>.</operator><name>psz_name</name></name> <operator>=</operator> <call><name>EsOutProgramGetProgramName</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetEpg</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epg</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_epg</name><operator>-&gt;</operator><name>i_source_id</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_SendEventMetaEpg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>epg</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>b_present</name></name> <operator>&amp;&amp;</operator> <name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>||</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_meta_SetNowPlaying</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_epg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_tmp</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_epg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tmp</name><operator>-&gt;</operator><name>b_present</name></name> <operator>&amp;&amp;</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>i_source_id</name></name> <operator>==</operator> <name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>p_current</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name><name>p_tmp</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_ESNowPlaying</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>p_pgrm</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_nowplaying</name> <init>= <expr><ternary><condition><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> ?</condition><then>
<expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_ESNowPlaying</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_SetESNowPlaying</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>, <argument><expr><name>psz_nowplaying</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_SendEventMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>now_playing_tr</name> <init>=
<expr><call><name>vlc_meta_TypeToLocalizedString</name><argument_list>(<argument><expr><name>vlc_meta_ESNowPlaying</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_nowplaying</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>input_item_AddInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>, <argument><expr><name>now_playing_tr</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_nowplaying</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>input_item_DelInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>, <argument><expr><name>now_playing_tr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_preparsing</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventMetaInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutEpgTime</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_SetEpgTime</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutProgramUpdateScrambled</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_scrambled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>( <argument>es</argument>, <argument>&amp;p_sys-&gt;es</argument>, <argument>node</argument> )</argument_list></macro> 
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name>p_pgrm</name> <operator>&amp;&amp;</operator> <name><name>es</name><operator>-&gt;</operator><name>b_scrambled</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_scrambled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pgrm</name><operator>-&gt;</operator><name>b_scrambled</name></name> <operator>==</operator> <operator>!</operator><name>b_scrambled</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>b_scrambled</name></name> <operator>=</operator> <name>b_scrambled</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cat</name> <init>= <expr><call><name>EsOutProgramGetMetaName</name><argument_list>( <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_scrambled</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>input_item_AddInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scrambled"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>input_item_DelInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scrambled"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_preparsing</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventMetaInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_SendEventProgramScrambled</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>b_scrambled</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutMeta</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_program_meta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_GetItem</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_meta</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>p_meta</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>p_program_meta</name> <operator>||</operator> <call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_program_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetName</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_arturl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_alloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_program_meta</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_arturl</name> <operator>=</operator> <call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_program_meta</name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_arturl</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_meta</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_arturl</name> <operator>=</operator> <call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_arturl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>psz_arturl</name> <operator>=</operator> <name>psz_alloc</name> <operator>=</operator> <call><name>input_item_GetArtURL</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_arturl</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetArtURL</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_arturl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_arturl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument>, <argument><expr><literal type="string">"attachment://"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content> 

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetArtURL</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_ExtractAttachmentAndCacheArt</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_arturl</name> <operator>+</operator> <literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetPreparsed</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutGlobalMeta</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EsOutMeta</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_meta</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutUpdateEsLanguageTitle</name><parameter_list>(<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language_code</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>LanguageGetName</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language_code</name></name> <operator>=</operator> <call><name>LanguageGetCode</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>EsGetTitle</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutFillEsFmt</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecAudio</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>audio_replay_gain_t</name></type> <name>rg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_audio_replay_gain_MergeFromMeta</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rg</name></expr></argument>, <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AUDIO_REPLAY_GAIN_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rg</name><operator>.</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rg</name><operator>.</operator><name>pf_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rg</name><operator>.</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rg</name><operator>.</operator><name>pf_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator> <operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EsOutCreateStrId</name><parameter_list>( <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>stable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_master</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_master</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name><name>p_master</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"/cc/"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>id</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strchr</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case> <expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case> <expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case> <expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"spu"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DATA_ES</name></expr>:</case> <expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>stable</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"auto/"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"/%d"</literal></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ms</name><operator>.</operator><name>ptr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>EsOutAddLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_master</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"invalid group number"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>es</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>es</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name> <operator>=</operator> <call><name>input_source_Hold</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>stable</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <call><name>input_source_GetNewAutoId</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_id</name> <init>=
<expr><call><name>EsOutCreateStrId</name><argument_list>( <argument><expr><name>es</name></expr></argument>, <argument><expr><name>stable</name></expr></argument>, <argument><expr><call><name>input_source_GetStrId</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_master</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>str_id</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsOutIsGroupSticky</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <call><name>EsOutProgramInsert</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>str_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_es</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_pgrm</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 


<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>it</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>i_pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>=</operator> <name>p_pgrm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str_id</name></name> <operator>=</operator> <name>str_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>stable</name></name> <operator>=</operator> <name>stable</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>b_scrambled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>b_forced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>b_terminated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>EsOutFillEsFmt</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>LanguageGetName</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language_code</name></name> <operator>=</operator> <call><name>LanguageGetCode</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>EsGetTitle</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_bitmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name></name> <operator>=</operator> <name>p_master</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>mouse_event_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>mouse_event_userdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_slaves</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_ADDED</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutUpdateInfo</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutSelect</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>es</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>EsOutAdd</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>source</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>main_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>EsOutAddLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>es</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>EsIsSelected</name><parameter_list>( <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_decode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name> <init>= <expr><call><name>EsOutGetClosedCaptionsChannel</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_input_decoder_GetCcState</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name>i_channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_decode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>b_decode</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ClockUpdate</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_ts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_SendEventOutputClock</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><name>system_ts</name></expr></argument>,
<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name>frame_rate_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutCreateDecoder</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_input_decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_clock_cbs</name></name></type> <name>clock_cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_update</name> <operator>=</operator> <name>ClockUpdate</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name>
<operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_master_source_cat</name></name>
<operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_master_clock</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_master_clock</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>=</operator>
<call><name>vlc_clock_main_CreateMaster</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>clock_cbs</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>=</operator> <call><name>vlc_clock_main_CreateSlave</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>,
<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>clock_cbs</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>vlc_input_decoder_New</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>b_thumbnailing</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoder_cbs</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>dec</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_ChangeRate</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_StartWait</name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_master</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>=</operator>
<call><name>vlc_input_decoder_New</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sout_record</name></name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoder_cbs</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_StartWait</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>mouse_event_cb</name></name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_SetVoutMouseEvent</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>mouse_event_cb</name></name></expr></argument>,
<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>mouse_event_userdata</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_clock_Delete</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>dec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EsOutDecoderChangeDelay</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDestroyDecoder</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_input_decoder_Delete</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_master_clock</name></name> <operator>==</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>p_master_clock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_clock_Delete</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_clock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_Delete</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSelectEs</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_thumbnailing</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_thumbnailing</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"ES 0x%x is already selected"</literal></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>p_master</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_channel</name> <operator>=</operator> <call><name>EsOutGetClosedCaptionsChannel</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_channel</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>vlc_input_decoder_SetCcState</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name>i_channel</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_sout</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>b_forced</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_sout</name></expr> ?</condition><then> <expr><literal type="string">"sout-video"</literal></expr> </then><else>: <expr><literal type="string">"video"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"video is disabled, not selecting ES 0x%x"</literal></expr></argument>,
<argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_thumbnailing</name>
<operator>||</operator> <operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_sout</name></expr> ?</condition><then> <expr><literal type="string">"sout-audio"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"audio is disabled, not selecting ES 0x%x"</literal></expr></argument>,
<argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_thumbnailing</name>
<operator>||</operator> <operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_sout</name></expr> ?</condition><then> <expr><literal type="string">"sout-spu"</literal></expr> </then><else>: <expr><literal type="string">"spu"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"spu is disabled, not selecting ES 0x%x"</literal></expr></argument>,
<argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutCreateDecoder</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_SELECTED</name></expr></argument>, <argument><expr><name>b_force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>p_master</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>vbi_opaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vbi_page</name> <init>= <expr><call><name>vlc_input_decoder_GetVbiPage</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbi_opaque</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>vbi_page</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_SendEventVbiPage</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>vbi_page</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_SendEventVbiTransparency</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>vbi_opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDrainCCChannels</name><parameter_list>( <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_bitmap</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_bitmap</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_bitmap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>i_bitmap</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_bitmap</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>
<operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_dec</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_input_decoder_Drain</name><argument_list>( <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsDeleteCCChannels</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>spu_es</name> <init>= <expr><call><name>EsOutGetSelectedCat</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_spu_id</name> <init>= <expr><ternary><condition><expr><name>spu_es</name></expr> ?</condition><then> <expr><name><name>spu_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_bitmap</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_bitmap</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_bitmap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>i_bitmap</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_bitmap</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_spu_id</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_id</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_UNSELECTED</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EsOutDelLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_bitmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutUnselectEs</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_update</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"ES 0x%x is already unselected"</literal></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name> <init>= <expr><call><name>EsOutGetClosedCaptionsChannel</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_channel</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_SetCcState</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_master</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name>i_channel</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>EsDeleteCCChannels</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutDestroyDecoder</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_update</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_UNSELECTED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSelect</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>p_esprops</name> <init>= <expr><call><name>GetPropsByCat</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_active</name></name> <operator>||</operator>
<operator>(</operator> <operator>!</operator><name>b_force</name> <operator>&amp;&amp;</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>&lt;</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name> <operator>)</operator> <operator>||</operator>
<operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>es_out_policy_e</name></name></type> <name>policy</name> <init>= <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>e_policy</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>policy</name> <operator>==</operator> <name>ES_OUT_ES_POLICY_AUTO</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>str_ids</name></name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>( <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>policy</name> <operator>=</operator> <name>ES_OUT_ES_POLICY_SIMULTANEOUS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>policy</name> <operator>=</operator> <name>ES_OUT_ES_POLICY_EXCLUSIVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_auto_selected</name> <init>= <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>b_autoselect</name></name>
<operator>||</operator> <call><name>input_source_IsCatAutoselected</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_auto_unselect</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>ES_OUT_MODE_AUTO</name> <operator>&amp;&amp;</operator>
<name>policy</name> <operator>==</operator> <name>ES_OUT_ES_POLICY_EXCLUSIVE</name> <operator>&amp;&amp;</operator>
<name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>&amp;&amp;</operator> <name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>!=</operator> <name>es</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>ES_OUT_MODE_ALL</name> <operator>||</operator> <name>b_force</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_auto_unselect</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutSelectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>b_force</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>ES_OUT_MODE_PARTIAL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prgms</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"programs"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>prgms</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prgm</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>prgms</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>prgm</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>prgm</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>atoi</name><argument_list>( <argument><expr><name>prgm</name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name> <operator>||</operator> <name>b_force</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSelectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>b_force</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>prgms</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>ES_OUT_MODE_AUTO</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>wanted_es</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>||</operator> <operator>!</operator><name>p_esprops</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str_ids</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>str_ids</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_id</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>str_ids</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>str_id</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wanted_es</name> <operator>!=</operator> <name>es</name></expr>;</condition>
<incr><expr><name>str_id</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>str_id</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wanted_es</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>str_ids</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>==</operator> <name><name>es</name><operator>-&gt;</operator><name>i_channel</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wanted_es</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_stop_idx</name> <init>= <expr><call><name>LanguageArrayIndex</name><argument_list>( <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>current_es_idx</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>:
<expr><call><name>LanguageArrayIndex</name><argument_list>( <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr></argument>,
<argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name><operator>-&gt;</operator><name>psz_language_code</name></name></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>es_idx</name> <init>= <expr><call><name>LanguageArrayIndex</name><argument_list>( <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr></argument>,
<argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language_code</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>es_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>i_stop_idx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i_stop_idx</name></expr></argument> &gt;</argument_list></name> <name>es_idx</name><operator>)</operator></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>current_es_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> 
<name>es_idx</name> <operator>&lt;</operator> <name>current_es_idx</name> <operator>||</operator> 
<operator>(</operator> <name>es_idx</name> <operator>==</operator> <name>current_es_idx</name> <operator>&amp;&amp;</operator> 
<name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>wanted_es</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_stop_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> 
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>current_es_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> 
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>i_demux_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>==</operator> <name><name>p_esprops</name><operator>-&gt;</operator><name>i_demux_id</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>wanted_es</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>&gt;</operator> <name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_auto_selected</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wanted_es</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

</block_content>}</block></if>


<if type="elseif">else if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>i_demux_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>==</operator> <name><name>p_esprops</name><operator>-&gt;</operator><name>i_demux_id</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>wanted_es</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>&gt;</operator> <name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_auto_selected</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wanted_es</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>wanted_es</name> <operator>==</operator> <name>es</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_auto_unselect</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutSelectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>b_force</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>p_esprops</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>ES_OUT_MODE_AUTO</name> <operator>&amp;&amp;</operator> <call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>=</operator> <name>es</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSelectListFromProps</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>esprops</name> <init>= <expr><call><name>GetPropsByCat</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>esprops</name> <operator>||</operator> <operator>!</operator><name><name>esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>buffer</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>unselect_others</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>( <argument>other</argument> )</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>other</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>cat</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>select</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>unselect_others</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_id</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>str_id</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>str_id</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>other</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>str_id</name></name></expr></argument>, <argument><expr><name>str_id</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>select</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>select</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>other</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>other</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSelectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>esprops</name><operator>-&gt;</operator><name>e_policy</name></name> <operator>==</operator> <name>ES_OUT_ES_POLICY_EXCLUSIVE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unselect_others</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSelectList</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,
<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type><name>es_id_list</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>p_esprops</name> <init>= <expr><call><name>GetPropsByCat</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>unselect_others</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>other</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>other</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>cat</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>select</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>unselect_others</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><name><name>es_id_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>es_id</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>es_id</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <name><name>other</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>i_id</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>select</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>select</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>other</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>other</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSelectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>e_policy</name></name> <operator>==</operator> <name>ES_OUT_ES_POLICY_EXCLUSIVE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unselect_others</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutCreateCCChannels</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_bitmap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_descfmt</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>codec</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_existingbitmap</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_bitmap</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_bitmap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>i_bitmap</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i_existingbitmap</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_bitmap</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>i_existingbitmap</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"Adding CC track %d for es[%d]"</literal></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr></argument>, <argument><expr><name>psz_descfmt</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_es</name> <init>= <expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_es</name> <operator>=</operator> <call><name>EsOutAddLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>parent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_bitmap</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>codec</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>i_channel</name></name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSelect</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_es</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutSend</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>stats</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>stats</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_rate_Add</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_bitrate</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_corrupted</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_discontinuity</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_date</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_date</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_date</name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_PREROLL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>pace</name> <init>= <expr><call><name>sout_instance_ControlsPace</name><argument_list>(<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_out_pace_control</name> <operator>!=</operator> <name>pace</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"switching to %ssync mode"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pace</name></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_out_pace_control</name> <operator>=</operator> <name>pace</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_dup</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_Decode</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument>, <argument><expr><name>p_dup</name></expr></argument>,
<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_out_pace_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_input_decoder_Decode</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>,
<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_out_pace_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_dsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta_dsc</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_input_decoder_HasFormatChanged</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_meta_dsc</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EsOutEsUpdateFmt</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_dsc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_UPDATED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutUpdateInfo</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>p_meta_dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_dsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_meta_dsc</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name>p_meta_dsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>decoder_cc_desc_t</name></type> <name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_input_decoder_GetCcDesc</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"captions"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">708</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutCreateCCChannels</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>VLC_CODEC_CEA708</name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>i_708_channels</name></name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DTVCC Closed captions %u"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EsOutCreateCCChannels</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>VLC_CODEC_CEA608</name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>i_608_channels</name></name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Closed captions %u"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>EsOutDrainDecoder</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>vlc_input_decoder_Drain</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutDrainCCChannels</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>!</operator><call><name>input_Stopped</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_input_decoder_IsEmpty</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name> <operator>||</operator> <call><name>vlc_input_decoder_IsEmpty</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec_record</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDelLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_reselect</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>p_esprops</name> <init>= <expr><call><name>GetPropsByCat</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutDrainDecoder</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EsTerminate</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_DELETED</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutDeleteInfoEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>EsOutIsGroupSticky</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>i_es</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name><operator>-&gt;</operator><name>i_es</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"Program doesn't contain anymore ES"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>b_scrambled</name></name> <operator>&amp;&amp;</operator> <name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutProgramUpdateScrambled</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>p_esprops</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>==</operator> <name>es</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_reselect</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>i_count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>b_reselect</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>other</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name><name>other</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EsIsSelected</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_SELECTED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>p_main_es</name></name> <operator>=</operator> <name>other</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutSelect</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EsRelease</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDel</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutDelLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EsOutVaControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>EsOutVaControlLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>EsOutGetTracksDelay</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>tracks_delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_audio</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_spu</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>delay</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tracks_delay</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>tracks_delay</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_audio</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_spu</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>has_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tracks_delay</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>tracks_delay</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_audio_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_spu</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tracks_delay</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>tracks_delay</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>tracks_delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>tracks_delay</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutVaControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ES_OUT_SET_ES_STATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutSelectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name>b</name> <operator>&amp;&amp;</operator> <call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_GET_ES_STATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_ES_CAT_POLICY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>es_format_category_e</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>es_out_policy_e</name></name></type> <name>i_pol</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>es_out_policy_e</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>p_esprops</name> <init>= <expr><call><name>GetPropsByCat</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_esprops</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>e_policy</name></name> <operator>=</operator> <name>i_pol</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_ES</name></expr>:</case>
<case>case <expr><name>ES_OUT_RESTART_ES</name></expr>:</case>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_ES</name></cpp:macro> <cpp:value>DATA_ES</cpp:value></cpp:define>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>es</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>UNKNOWN_ES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>es</name> <operator>==</operator> <name>es_cat</name> <operator>+</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>es</name> <operator>==</operator> <name>es_cat</name> <operator>+</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>es</name> <operator>==</operator> <name>es_cat</name> <operator>+</operator> <name>SPU_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>b_terminated</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>IGNORE_ES</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>other</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <name>IGNORE_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>es</name> <operator>==</operator> <name>other</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_query</name> <operator>==</operator> <name>ES_OUT_RESTART_ES</name> <operator>&amp;&amp;</operator> <name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutDestroyDecoder</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutCreateDecoder</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>ES_OUT_SET_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutSelect</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_cat</name> <operator>==</operator> <name>UNKNOWN_ES</name> <operator>||</operator> <name><name>other</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>i_cat</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EsIsSelected</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_query</name> <operator>==</operator> <name>ES_OUT_RESTART_ES</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutDestroyDecoder</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutCreateDecoder</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>EsOutStopFreeVout</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_UNSET_ES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>b_terminated</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>other</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>es</name> <operator>==</operator> <name>other</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EsIsSelected</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutStopFreeVout</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_ES_DEFAULT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>es</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>i_demux_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>es</name> <operator>==</operator> <name>es_cat</name> <operator>+</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>es</name> <operator>==</operator> <name>es_cat</name> <operator>+</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>es</name> <operator>==</operator> <name>es_cat</name> <operator>+</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>i_demux_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>






<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>i_demux_id</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_PCR</name></expr>:</case>
<case>case <expr><name>ES_OUT_SET_GROUP_PCR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_group</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>ES_OUT_SET_PCR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <call><name>EsOutProgramAdd</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_group</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pgrm</name> <operator>=</operator> <call><name>EsOutProgramInsert</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_pcr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pcr</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid PCR value in ES_OUT_SET_(GROUP_)PCR !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_low_delay</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_low_delay</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_extra_buffering_allowed</name> <init>= <expr><operator>!</operator><name>b_low_delay</name> <operator>&amp;&amp;</operator> <call><name>EsOutIsExtraBufferingAllowed</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_late</name> <init>= <expr><call><name>input_clock_Update</name><argument_list>(
<argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pace_control</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr></argument>,
<argument><expr><name>b_extra_buffering_allowed</name></expr></argument>,
<argument><expr><name>i_pcr</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>EsOutDecodersStopBuffering</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>p_pgrm</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><name>i_late</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name> <operator>||</operator>
<operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_out_pace_control</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>






<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_clock_total_delay</name> <init>= <expr><call><name>input_clock_GetJitter</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_new_jitter</name> <init>= <expr><name>i_clock_total_delay</name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_pts_delay</name></name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_jitter_max</name> <init>=
<expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"clock-jitter"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_new_jitter</name> <operator>&gt;</operator> <name>i_jitter_max</name> <operator>||</operator>
<name>i_clock_total_delay</name> <operator>&gt;</operator> <name>INPUT_PTS_DELAY_MAX</name> <operator>||</operator>



<operator>(</operator><name>b_low_delay</name> <operator>&amp;&amp;</operator> <name>i_late</name> <operator>&gt;</operator> <name>i_jitter_max</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>,
<argument><expr><literal type="string">"ES_OUT_SET_(GROUP_)PCR is called %d ms late (jitter of %d ms ignored)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_late</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_new_jitter</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_new_jitter</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>,
<argument><expr><literal type="string">"ES_OUT_SET_(GROUP_)PCR is called %d ms late (pts_delay increased to %d ms)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_late</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_clock_total_delay</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>EsOutControlLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EsOutPrivControlLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ES_OUT_PRIV_SET_JITTER</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></argument>, <argument><expr><name>i_new_jitter</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cr_average</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_RESET_PCR</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"ES_OUT_RESET_PCR called"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutChangePosition</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>ES_OUT_SET_GROUP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>p_pgrm</argument>, <argument>&amp;p_sys-&gt;programs</argument>, <argument>node</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <name>i</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutProgramSelect</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_pgrm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_ES_FMT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_format_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>es</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name>
<operator>||</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>!=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name>
<operator>||</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>!=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EsOutFillEsFmt</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutUpdateEsLanguageTitle</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_was_selected</name> <init>= <expr><call><name>EsIsSelected</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutDrainDecoder</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsDeleteCCChannels</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutDestroyDecoder</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b_was_selected</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutCreateDecoder</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EsOutSendEsEvent</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>VLC_INPUT_ES_UPDATED</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_ES_SCRAMBLED_STATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_scrambled</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>b_scrambled</name></name> <operator>!=</operator> <operator>!</operator><name>b_scrambled</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>b_scrambled</name></name> <operator>=</operator> <name>b_scrambled</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutProgramUpdateScrambled</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_date</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_date</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_end</name></name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_SET_GROUP_META</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_group</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EsOutProgramMeta</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_SET_GROUP_EPG</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_group</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_epg_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EsOutProgramEpg</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument>, <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_SET_GROUP_EPG_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_group</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_epg_event_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EsOutProgramEpgEvent</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument>, <argument><expr><name>p_evt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_SET_EPG_TIME</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EsOutEpgTime</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_DEL_GROUP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_group</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>EsOutProgramDel</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_META</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EsOutGlobalMeta</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_GET_EMPTY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <call><name>EsOutDecodersIsEmpty</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_GET_PCR_SYSTEM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_system</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_delay</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_clock_GetSystemOrigin</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name>pi_system</name></expr></argument>, <argument><expr><name>pi_delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_MODIFY_PCR_SYSTEM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>p_pgrm</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pgrm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_absolute</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_system</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_clock_ChangeSystemOrigin</name><argument_list>( <argument><expr><name><name>p_pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name>b_absolute</name></expr></argument>, <argument><expr><name>i_system</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_POST_SUBNODE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_item_node_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_SendEventParsing</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_VOUT_SET_MOUSE_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_es</name> <operator>||</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>mouse_event_cb</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_mouse_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>mouse_event_userdata</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_SetVoutMouseEvent</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>,
<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>mouse_event_cb</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>mouse_event_userdata</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_VOUT_ADD_OVERLAY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>subpicture_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_es</name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_input_decoder_AddVoutOverlay</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>channel</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_VOUT_DEL_OVERLAY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>channel</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_es</name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_input_decoder_DelVoutOverlay</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_SPU_SET_HIGHLIGHT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <modifier>*</modifier></type><name>spu_hl</name> <init>=
<expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_es</name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_input_decoder_SetSpuHighlight</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>spu_hl</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutVaPrivControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ES_OUT_PRIV_SET_MODE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mode</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_mode</name> <operator>==</operator> <name>ES_OUT_MODE_NONE</name> <operator>||</operator> <name>i_mode</name> <operator>==</operator> <name>ES_OUT_MODE_ALL</name> <operator>||</operator>
<name>i_mode</name> <operator>==</operator> <name>ES_OUT_MODE_AUTO</name> <operator>||</operator> <name>i_mode</name> <operator>==</operator> <name>ES_OUT_MODE_PARTIAL</name> <operator>||</operator>
<name>i_mode</name> <operator>==</operator> <name>ES_OUT_MODE_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_mode</name> <operator>!=</operator> <name>ES_OUT_MODE_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_active</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>p_es</argument>)</argument_list></macro>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutStopFreeVout</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_active</name></name> <operator>=</operator> <name>i_mode</name> <operator>!=</operator> <name>ES_OUT_MODE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>i_mode</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EsIsSelected</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutUnselectEs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_pgrm</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pgrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutSelect</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if<condition>( <expr><name>i_mode</name> <operator>==</operator> <name>ES_OUT_MODE_END</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EsOutTerminate</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_ES</name></expr>:</case>
<case>case <expr><name>ES_OUT_PRIV_UNSET_ES</name></expr>:</case>
<case>case <expr><name>ES_OUT_PRIV_RESTART_ES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_es_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>vlc_es_id_get_out</name><argument_list>( <argument><expr><name>es_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_query</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ES_OUT_PRIV_SET_ES</name></expr>:</case> <expr_stmt><expr><name>new_query</name> <operator>=</operator> <name>ES_OUT_SET_ES</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ES_OUT_PRIV_UNSET_ES</name></expr>:</case> <expr_stmt><expr><name>new_query</name> <operator>=</operator> <name>ES_OUT_UNSET_ES</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ES_OUT_PRIV_RESTART_ES</name></expr>:</case> <expr_stmt><expr><name>new_query</name> <operator>=</operator> <name>ES_OUT_RESTART_ES</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><call><name>EsOutControlLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>main_source</name></name></expr></argument>, <argument><expr><name>new_query</name></expr></argument>, <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_ES_CAT_IDS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>es_format_category_e</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_ids</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_es_props_t</name> <modifier>*</modifier></type><name>p_esprops</name> <init>= <expr><call><name>GetPropsByCat</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_esprops</name><operator>-&gt;</operator><name>str_ids</name></name> <operator>=</operator> <ternary><condition><expr><name>str_ids</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>str_ids</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_esprops</name><operator>-&gt;</operator><name>str_ids</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>EsOutSelectListFromProps</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_GET_WAKE_UP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_wakeup</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_wakeup</name> <operator>=</operator> <call><name>EsOutGetWakeup</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_ES_LIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>es_format_category_e</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>es_id_list</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_es_id_t</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EsOutSelectList</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>es_id_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_STOP_ALL_ES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>selected_es</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_es_id_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>selected_es</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_es_id_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>selected_es</name></expr>;</expr_stmt>

<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>es</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EsIsSelected</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutDestroyDecoder</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>selected_es</name><operator>++</operator> <operator>=</operator> <call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>selected_es</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_START_ALL_ES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>selected_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_es_id_t</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>selected_es_it</name> <init>= <expr><name>selected_es</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>*</operator><name>selected_es_it</name></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>id</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>selected_es_it</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutCreateDecoder</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>vlc_es_id_get_out</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>selected_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutStopFreeVout</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_GET_BUFFERING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_ES_DELAY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_es_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>vlc_es_id_get_out</name><argument_list>( <argument><expr><name>es_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EsOutSetEsDelay</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_DELAY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_cat</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_delay</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EsOutSetDelay</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i_cat</name></expr></argument>, <argument><expr><name>i_delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_RECORD_STATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>EsOutSetRecord</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_PAUSE_STATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_source_paused</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_paused</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_date</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>b_source_paused</name> <operator>==</operator> <operator>!</operator><name>b_paused</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutChangePause</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_RATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>src_rate</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>rate</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>src_rate</name> <operator>==</operator> <name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EsOutChangeRate</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_FRAME_NEXT</name></expr>:</case>
<expr_stmt><expr><call><name>EsOutFrameNext</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>ES_OUT_PRIV_SET_TIMES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_position</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_normal_time</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_buffering</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delay</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name> <operator>||</operator>
<operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_out_pace_control</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <call><name>EsOutGetBuffering</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_time</name> <operator>-=</operator> <name>i_delay</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&lt;</operator> <name>VLC_TICK_0</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_position</name> <operator>-=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_delay</name> <operator>/</operator> <name>i_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>f_position</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_normal_time</name> <operator>&gt;=</operator> <name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventTimes</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>,
<argument><expr><name>i_normal_time</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventTimes</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>,
<argument><expr><name>i_normal_time</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_JITTER</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_jitter</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cr_average</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_pgrm_t</name> <modifier>*</modifier></type><name>pgrm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_tracks_pts_delay</name> <init>= <expr><call><name>EsOutGetTracksDelay</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_change_clock</name> <init>=
<expr><name>i_pts_delay</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>||</operator>
<name>i_pts_jitter</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name> <operator>||</operator>
<name>i_cr_average</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cr_average</name></name> <operator>||</operator>
<name>i_tracks_pts_delay</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_pts_delay</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_pts_jitter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>=</operator> <name>i_pts_delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_jitter</name></name> <operator>=</operator> <name>i_pts_jitter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cr_average</name></name> <operator>=</operator> <name>i_cr_average</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_pts_delay</name></name> <operator>=</operator> <name>i_tracks_pts_delay</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_change_clock</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pts_delay</name> <operator>+=</operator> <name>i_pts_jitter</name> <operator>+</operator> <name>i_tracks_pts_delay</name></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>pgrm</argument>, <argument>&amp;p_sys-&gt;programs</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>input_clock_SetJitter</name><argument_list>(<argument><expr><name><name>pgrm</name><operator>-&gt;</operator><name>p_input_clock</name></name></expr></argument>, <argument><expr><name>i_pts_delay</name></expr></argument>,
<argument><expr><name>i_cr_average</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_main_SetInputDejitter</name><argument_list>(<argument><expr><name><name>pgrm</name><operator>-&gt;</operator><name>p_main_clock</name></name></expr></argument>, <argument><expr><name>i_pts_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_GET_GROUP_FORCED</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_group</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_group</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_group_id</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_EOS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<macro><name>foreach_es_then_es_slaves</name><argument_list>(<argument>id</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_decoder_Drain</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_PRIV_SET_VBI_PAGE</name></expr>:</case>
<case>case <expr><name>ES_OUT_PRIV_SET_VBI_TRANSPARENCY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_es_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>vlc_es_id_get_out</name><argument_list>( <argument><expr><name>es_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>query</name> <operator>==</operator> <name>ES_OUT_PRIV_SET_VBI_PAGE</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>page</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_input_decoder_SetVbiPage</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventVbiPage</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>opaque</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_input_decoder_SetVbiOpaque</name><argument_list>( <argument><expr><name><name>es</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventVbiTransparency</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>source</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>main_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>EsOutVaControlLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutPrivControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>EsOutVaPrivControlLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutPrivControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>EsOutVaPrivControlLocked</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>es_out_callbacks</name></name></type> <name>es_out_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>add</name> <operator>=</operator> <name>EsOutAdd</name></expr>,
<expr><operator>.</operator><name>send</name> <operator>=</operator> <name>EsOutSend</name></expr>,
<expr><operator>.</operator><name>del</name> <operator>=</operator> <name>EsOutDel</name></expr>,
<expr><operator>.</operator><name>control</name> <operator>=</operator> <name>EsOutControl</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>EsOutDelete</name></expr>,
<expr><operator>.</operator><name>priv_control</name> <operator>=</operator> <name>EsOutPrivControl</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>LanguageGetName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_code</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_code</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument>, <argument><expr><literal type="string">"und"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_1</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2B</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><literal type="string">"??"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2T</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>LanguageGetCode</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_1</name><argument_list>( <argument><expr><name>lang</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>lang</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><literal type="string">"??"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_eng_name</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>LanguageGetCode</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lang</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_lang</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psz_lang</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"??"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>pl</name> <operator>=</operator> <name>p_languages</name></expr>;</init> <condition><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_eng_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pl</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_eng_name</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2B</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"??"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>LanguageSplit</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_langs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_psz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_langs</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_dup</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_langs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_psz</name></expr></argument>, <argument><expr><name>ppsz</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_psz</name></expr></argument>, <argument><expr><name>ppsz</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_code</name> <operator>=</operator> <call><name>LanguageGetCode</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument>, <argument><expr><literal type="string">"??"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_psz</name></expr></argument>, <argument><expr><name>ppsz</name></expr></argument>, <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_psz</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_psz</name></expr></argument>, <argument><expr><name>ppsz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ppsz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LanguageArrayIndex</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_langs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lang</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ppsz_langs</name> <operator>||</operator> <operator>!</operator><name>psz_lang</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_langs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ppsz_langs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ppsz_langs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_lang</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ppsz_langs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutEsUpdateFmt</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>update</name> <init>= <expr><operator>*</operator><name>fmt</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>update</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>.</operator><name>psz_language</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>.</operator><name>psz_description</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>update</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>.</operator><name>i_extra_languages</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>update</name><operator>.</operator><name>p_extra_languages</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>i_extra_languages</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra_languages</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>.</operator><name>p_extra_languages</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra_languages</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>update</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EsOutUpdateEsLanguageTitle</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_UpdateTracksInfo</name><argument_list>(<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>info_category_AddCodecInfo</name><parameter_list>( <parameter><decl><type><name>info_category_t</name><modifier>*</modifier></type> <name>p_cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_info</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ps_fcc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_fourcc</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_description</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_description</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><name>psz_info</name></expr></argument>, <argument><expr><literal type="string">"%s (%.4s)"</literal></expr></argument>,
<argument><expr><name>psz_description</name></expr></argument>, <argument><expr><name>ps_fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name>i_fourcc</name> <operator>!=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><name>psz_info</name></expr></argument>, <argument><expr><literal type="string">"%.4s"</literal></expr></argument>, <argument><expr><name>ps_fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutUpdateInfo</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_es</name> <init>= <expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><ternary><condition><expr><name><name>es</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt_out</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>fmt</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_UpdateTracksInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> , <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_cat</name> <init>= <expr><call><name>EsInfoCategoryName</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_cat</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>info_category_t</name><modifier>*</modifier></type> <name>p_cat</name> <init>= <expr><call><name>info_category_New</name><argument_list>( <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_cat</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>psz_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>i_codec_fourcc</name> <init>= <expr><name><name>p_fmt_es</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_codec_description</name> <init>=
<expr><call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name><name>p_fmt_es</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name>i_codec_fourcc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>info_category_AddCodecInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Codec"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i_codec_fourcc</name></expr></argument>, <argument><expr><name>psz_codec_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Language"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>es</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Description"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Channels"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>( <argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_fmt_es</name><operator>-&gt;</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sample rate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u Hz"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_fmt_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_orgbps</name> <init>= <expr><name><name>p_fmt_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_orgbps</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_orgbps</name> <operator>=</operator> <call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name><name>p_fmt_es</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_orgbps</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bits per sample"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>,
<argument><expr><name>i_orgbps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name><name>p_fmt_es</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_codec_description</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddCodecInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Decoded format"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr></argument>,
<argument><expr><name>psz_codec_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>!=</operator> <name><name>p_fmt_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Decoded channels"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>( <argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>p_fmt_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Decoded sample rate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u Hz"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_outbps</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_outbps</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_outbps</name> <operator>=</operator> <call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_outbps</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_outbps</name> <operator>!=</operator> <name>i_orgbps</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Decoded bits per sample"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>,
<argument><expr><name>i_outbps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bitrate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u kb/s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AUDIO_REPLAY_GAIN_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>p_rg</name> <init>= <expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_rg</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name>AUDIO_REPLAY_GAIN_TRACK</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Track replay gain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Album replay gain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%.2f dB"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_rg</name><operator>-&gt;</operator><name>pf_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Video"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Video resolution"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%ux%u"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Buffer dimensions"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%ux%u"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Frame rate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Frame rate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%.6f"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name>
<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name><name>p_fmt_es</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_codec_description</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddCodecInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Decoded format"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name>psz_codec_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>orient_names</name><index>[]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left top"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right bottom"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top right"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom right"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left bottom"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right top"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Orientation"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>orient_names</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>!=</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>primaries_names</name><index>[]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>COLOR_PRIMARIES_UNDEF</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT601_525</name></expr>]</index> <operator>=</operator>
<call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ITU-R BT.601 (525 lines, 60 Hz)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT601_625</name></expr>]</index> <operator>=</operator>
<call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ITU-R BT.601 (625 lines, 50 Hz)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT709</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.709"</literal></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT2020</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.2020"</literal></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_DCI_P3</name></expr>]</index> <operator>=</operator> <literal type="string">"DCI/P3 D65"</literal></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT470_M</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.470 M"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>primaries_names</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>COLOR_PRIMARIES_MAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Color primiaries table mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Color primaries"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>primaries_names</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>!=</operator> <name>TRANSFER_FUNC_UNDEF</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>func_names</name><index>[]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>TRANSFER_FUNC_UNDEF</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_LINEAR</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Linear"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_SRGB</name></expr>]</index> <operator>=</operator> <literal type="string">"sRGB"</literal></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_BT470_BG</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.470 BG"</literal></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_BT470_M</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.470 M"</literal></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_BT709</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.709"</literal></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_SMPTE_ST2084</name></expr>]</index> <operator>=</operator> <literal type="string">"SMPTE ST2084 (PQ)"</literal></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_SMPTE_240</name></expr>]</index> <operator>=</operator> <literal type="string">"SMPTE 240M"</literal></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_HLG</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Hybrid Log-Gamma"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>func_names</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRANSFER_FUNC_MAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Transfer functions table mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Color transfer function"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>func_names</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>!=</operator> <name>COLOR_SPACE_UNDEF</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>space_names</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>COLOR_SPACE_UNDEF</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>COLOR_SPACE_BT601</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.601"</literal></expr>,
<expr><index>[<expr><name>COLOR_SPACE_BT709</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.709"</literal></expr>,
<expr><index>[<expr><name>COLOR_SPACE_BT2020</name></expr>]</index> <operator>=</operator> <literal type="string">"ITU-R BT.2020"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>space_names</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>COLOR_SPACE_MAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Color space table mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Color space"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>space_names</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>space</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>!=</operator> <name>COLOR_RANGE_UNDEF</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>range_names</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>COLOR_RANGE_UNDEF</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>COLOR_RANGE_FULL</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Full"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>COLOR_RANGE_LIMITED</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Limited"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>range_names</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>COLOR_RANGE_MAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Color range table mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Color Range"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>range_names</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>color_range</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>!=</operator> <name>CHROMA_LOCATION_UNDEF</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>c_loc_names</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>CHROMA_LOCATION_UNDEF</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_LEFT</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_CENTER</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_TOP_LEFT</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top Left"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_TOP_CENTER</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top Center"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_BOTTOM_LEFT</name></expr>]</index> <operator>=</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom Left"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_BOTTOM_CENTER</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom Center"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>c_loc_names</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CHROMA_LOCATION_MAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Chroma location table mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Chroma location"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>c_loc_names</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>chroma_location</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>!=</operator> <name>MULTIVIEW_2D</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>c_multiview_names</name><index>[]</index><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>MULTIVIEW_2D</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"2D"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>MULTIVIEW_STEREO_SBS</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Side-By-Side"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>MULTIVIEW_STEREO_TB</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Bottom"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>MULTIVIEW_STEREO_ROW</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Row Sequential"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>MULTIVIEW_STEREO_COL</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Column Sequential"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>MULTIVIEW_STEREO_FRAME</name></expr>]</index> <operator>=</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Frame Sequential"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>MULTIVIEW_STEREO_CHECKERBOARD</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Checkboard"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>c_multiview_names</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MULTIVIEW_STEREO_MAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Multiview format table mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Stereo Mode"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>c_multiview_names</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"First Stereo Eye"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>b_multiview_right_eye_first</name></name></expr> ?</condition><then>
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>!=</operator> <name>PROJECTION_MODE_RECTANGULAR</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_loc_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>projection_mode</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PROJECTION_MODE_RECTANGULAR</name></expr>:</case>
<expr_stmt><expr><name>psz_loc_name</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rectangular"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PROJECTION_MODE_EQUIRECTANGULAR</name></expr>:</case>
<expr_stmt><expr><name>psz_loc_name</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Equirectangular"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr>:</case>
<expr_stmt><expr><name>psz_loc_name</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Cubemap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Projection"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name>psz_loc_name</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"ViewPoint"</literal></expr></argument>, <argument><expr><literal type="string">"Yaw"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>yaw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"ViewPoint"</literal></expr></argument>, <argument><expr><literal type="string">"Pitch"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"ViewPoint"</literal></expr></argument>, <argument><expr><literal type="string">"Roll"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>roll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>,
<argument><expr><call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"ViewPoint"</literal></expr></argument>, <argument><expr><literal type="string">"Field of view"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>fov</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Max. mastering luminance"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%.4f cd/mÂ²"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>/</operator> <literal type="number">10000.f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Min. mastering luminance"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%.4f cd/mÂ²"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name> <operator>/</operator> <literal type="number">10000.f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Mastering Primary R"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"x=%.4f y=%.4f"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Mastering Primary G"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"x=%.4f y=%.4f"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Mastering Primary B"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"x=%.4f y=%.4f"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">50000.f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Mastering White point"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"x=%.4f y=%.4f"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><literal type="string">"MaxCLL"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu16</name> <literal type="string">" cd/mÂ²"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><literal type="string">"MaxFALL"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu16</name> <literal type="string">" cd/mÂ²"</literal></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Subtitle"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if<condition>( <expr><name>p_meta</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_all_keys</name> <init>= <expr><call><name>vlc_meta_CopyExtraNames</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ppsz_all_keys</name> <operator>&amp;&amp;</operator> <name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>vlc_meta_GetExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>info_category_AddInfo</name><argument_list>( <argument><expr><name>p_cat</name></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name>psz_key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_all_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_ReplaceInfos</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>p_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_preparsing</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventMetaInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutDeleteInfoEs</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_info_category</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>psz_info_category</name> <operator>=</operator> <call><name>EsInfoCategoryName</name><argument_list>( <argument><expr><name>es</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_item_DelInfo</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>psz_info_category</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_info_category</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_preparsing</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_SendEventMetaInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>vlc_es_id_get_out</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>container_of</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>es_out_id_t</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_es_id_t</name> <modifier>*</modifier></type>
<name>vlc_es_id_Hold</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EsHold</name><argument_list>(<argument><expr><call><name>vlc_es_id_get_out</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_es_id_Release</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EsRelease</name><argument_list>(<argument><expr><call><name>vlc_es_id_get_out</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_es_id_GetInputId</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>id</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>vlc_es_id_IsStrIdStable</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>id</name><operator>-&gt;</operator><name>stable</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_es_id_GetStrId</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>id</name><operator>-&gt;</operator><name>str_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>es_format_category_e</name></name></type>
<name>vlc_es_id_GetCat</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>id</name><operator>-&gt;</operator><name>i_cat</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>input_source_t</name> <modifier>*</modifier></type><name>vlc_es_id_GetSource</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>id</name><operator>-&gt;</operator><name>source</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
