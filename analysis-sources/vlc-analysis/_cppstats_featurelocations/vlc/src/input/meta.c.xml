<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\input\meta.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../preparser/art.h"</cpp:file></cpp:include>

<struct>struct <name>vlc_meta_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>ppsz_meta</name><index>[<expr><name>VLC_META_TYPE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>extra_tags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>vlc_meta_TypeToLocalizedString</name><parameter_list>( <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>posix_names</name><index>[]</index><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><index>[<expr><name>vlc_meta_Title</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Artist</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Artist"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Genre</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Genre"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Copyright</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Copyright"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Album</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Album"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_TrackNumber</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Track number"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Description</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Description"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Rating</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rating"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Date</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Date"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Setting</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Setting"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_URL</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"URL"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Language</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Language"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_ESNowPlaying</name></expr>]</index><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Now Playing"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_NowPlaying</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Now Playing"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Publisher</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Publisher"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_EncodedBy</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Encoded by"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_ArtworkURL</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Artwork URL"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_TrackID</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Track ID"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_TrackTotal</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Number of Tracks"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Director</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Director"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Season</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Season"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Episode</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Episode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_ShowName</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show Name"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_Actors</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Actors"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_AlbumArtist</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Album Artist"</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>vlc_meta_DiscNumber</name></expr>]</index> <operator>=</operator> <macro><name>N_</name><argument_list>(<argument><literal type="string">"Disc number"</literal></argument>)</argument_list></macro></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>meta_type</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>posix_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>posix_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_gettext</name> <argument_list>(<argument><expr><name><name>posix_names</name><index>[<expr><name>meta_type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>






<function><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>vlc_meta_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>(</operator><name>vlc_meta_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>m</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ppsz_meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ppsz_meta</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_meta_FreeExtraKey</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_meta_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_META_TYPE_COUNT</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name>vlc_meta_FreeExtraKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>m</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>vlc_meta_Set</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_meta</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>meta_type</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>IsUTF8</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_meta</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>meta_type</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>psz_val</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_meta_Get</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_meta</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>meta_type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_meta_AddExtra</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_oldvalue</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_oldvalue</name> <operator>!=</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dictionary_remove_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><name>vlc_meta_FreeExtraKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>vlc_meta_GetExtra</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vlc_dictionary_value_for_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>vlc_meta_GetExtraCount</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_dictionary_keys_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>vlc_meta_CopyExtraNames</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_dictionary_all_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>vlc_meta_GetStatus</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>i_status</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_meta_SetStatus</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>vlc_meta_Merge</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>dst</name> <operator>||</operator> <operator>!</operator><name>src</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_META_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>src</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ppsz_meta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_all_keys</name> <init>= <expr><call><name>vlc_dictionary_all_keys</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ppsz_all_keys</name> <operator>&amp;&amp;</operator> <name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_remove_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vlc_meta_FreeExtraKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_value</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>extra_tags</name></name></expr></argument>, <argument><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>p_value</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ppsz_all_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_all_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>input_ExtractAttachmentAndCacheArt</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_item_IsArtFetched</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"art already fetched"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><call><name>input_FindArtInCache</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attachment</name> <init>= <expr><call><name>input_GetAttachment</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_attachment</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"art attachment %s not found"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_attachment</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"image/jpeg"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">".jpg"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_attachment</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"image/png"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">".png"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_attachment</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"image/x-pict"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">".pct"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_SaveArt</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_item</name></expr></argument>,
<argument><expr><name><name>p_attachment</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_attachment</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>, <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name>p_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_item_WriteMeta</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>meta_export_t</name> <modifier>*</modifier></type><name>p_export</name> <init>=
<expr><call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_export</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"meta writer"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_export</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_export</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>p_item</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>input_item_type_e</name></name></type> <name>type</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>type</name> <operator>!=</operator> <name>ITEM_TYPE_FILE</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_export</name><operator>-&gt;</operator><name>psz_file</name></name> <operator>=</operator> <call><name>vlc_uri2path</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_export</name><operator>-&gt;</operator><name>psz_file</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_export</name></expr></argument>, <argument><expr><literal type="string">"cannot write meta to remote media %s"</literal></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_export</name><operator>-&gt;</operator><name>psz_file</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_mod</name> <init>= <expr><call><name>module_need</name><argument_list>( <argument><expr><name>p_export</name></expr></argument>, <argument><expr><literal type="string">"meta writer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mod</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_export</name></expr></argument>, <argument><expr><name>p_mod</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_audio_replay_gain_MergeFromMeta</name><parameter_list>( <parameter><decl><type><name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_meta</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>psz_value</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_GAIN"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>psz_value</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"RG_RADIO"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pf_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>psz_value</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_PEAK"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>psz_value</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"RG_PEAK"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pf_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>psz_value</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_GAIN"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>psz_value</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"RG_AUDIOPHILE"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pf_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index></name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>psz_value</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_PEAK"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>pf_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index></name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
