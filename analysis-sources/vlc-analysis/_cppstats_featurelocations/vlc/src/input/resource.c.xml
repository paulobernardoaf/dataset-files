<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\input\resource.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_decoder.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../stream_output/stream_output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../audio_output/aout_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../video_output/vout_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resource.h"</cpp:file></cpp:include>

<struct>struct <name>input_resource_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout_dummy</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock_hold</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_aout_busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroySout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sout_DeleteInstance</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sout_instance_t</name> <modifier>*</modifier></type><name>RequestSout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>psz_sout</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>, <argument><expr><literal type="string">"destroying useless sout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroySout</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>p_sout</name> <operator>||</operator> <operator>(</operator> <operator>!</operator><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>psz_sout</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name><operator>-&gt;</operator><name>psz_sout</name></name></expr></argument>, <argument><expr><name>psz_sout</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"destroying unusable sout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroySout</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_sout</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"reusing sout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"you probably want to use gather stream_out"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <call><name>sout_NewInstance</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><name>psz_sout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_sout</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p_sout</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <name>p_sout</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>VLC_UNUSED</name> <argument_list>(<argument><expr><name>p_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name> <argument_list>(<argument><expr><name>p_sout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name> <argument_list>(<argument><expr><name>psz_sout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyVout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>==</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr></argument>, <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name></name></expr></argument>, <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Close</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DisplayVoutTitle</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_input</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_GetItem</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_nowplaying</name> <init>= <expr><call><name>input_item_GetNowPlayingFb</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_nowplaying</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_nowplaying</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_DisplayTitle</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_nowplaying</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_artist</name> <init>= <expr><call><name>input_item_GetArtist</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>input_item_GetTitle</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name> <operator>||</operator> <operator>*</operator><name>psz_name</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>input_item_GetName</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_artist</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_artist</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">"%s - %s"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_artist</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_DisplayTitle</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>psz_name</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_DisplayTitle</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_nowplaying</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>audio_output_t</name> <modifier>*</modifier></type><name>input_resource_GetAout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_aout</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>b_aout_busy</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"creating audio output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_aout</name> <operator>=</operator> <call><name>aout_New</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>=</operator> <name>p_aout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"reusing audio output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>==</operator> <name>p_aout</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_resource</name><operator>-&gt;</operator><name>b_aout_busy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>b_aout_busy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_aout</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_resource_PutAout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_aout</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>b_aout_busy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>b_aout_busy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"keeping audio output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_aout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"destroying extra audio output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_Destroy</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>audio_output_t</name> <modifier>*</modifier></type><name>input_resource_HoldAout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_aout</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_Hold</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_aout</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>input_resource_t</name> <modifier>*</modifier></type><name>input_resource_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_resource</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_resource</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_dummy</name></name> <operator>=</operator> <call><name>vout_CreateDummy</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_dummy</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <name>p_parent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_resource</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_resource_Release</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_atomic_rc_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DestroySout</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyVout</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_Destroy</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_aout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_dummy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>input_resource_t</name> <modifier>*</modifier></type><name>input_resource_Hold</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_resource</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_resource_SetInput</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>, <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_input</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_input</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>==</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_input</name></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_resource_PutVoutLocked</name><parameter_list>(<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vout</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>vout</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>==</operator> <name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"saving a free vout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>=</operator> <name>vout</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"destroying vout (already one saved or active)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAB_FIND</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr></argument>, <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name></name></expr></argument>, <argument><expr><name>vout</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr></argument>, <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name></name></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Stop</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Close</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_resource_PutVout</name><parameter_list>(<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_resource_PutVoutLocked</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name>vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>input_resource_GetVoutDecoderDevice</name><parameter_list>(<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>cfg_vout</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name> <modifier>*</modifier></type><name>order</name></decl></parameter>,
<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dec_dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg_vout</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cfg_vout</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg_vout</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><ternary><condition><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_dummy</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg_vout</name> <operator>=</operator> <name>vout</name> <operator>=</operator> <call><name>vout_Create</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>order</name> <operator>=</operator> <ternary><condition><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_VOUT_ORDER_PRIMARY</name></expr>
</then><else>: <expr><name>VLC_VOUT_ORDER_SECONDARY</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr></argument>, <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name></name></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>order</name> <operator>=</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"trying to reuse free vout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>order</name> <operator>=</operator> <ternary><condition><expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>cfg_vout</name></expr> ?</condition><then> <expr><name>VLC_VOUT_ORDER_PRIMARY</name></expr>
</then><else>: <expr><name>VLC_VOUT_ORDER_SECONDARY</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>==</operator> <name>cfg_vout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TAB_FIND</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr></argument>, <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name></name></expr></argument>, <argument><expr><name>cfg_vout</name></expr></argument>, <argument><expr><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>pp_dec_dev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_dec_dev</name> <operator>=</operator> <call><name>vout_GetDevice</name><argument_list>(<argument><expr><name>cfg_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <name>cfg_vout</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vout</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_resource_StartVout</name><parameter_list>(<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vout_configuration_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vout_Request</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_resource_PutVoutLocked</name><argument_list>(<argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DisplayVoutTitle</name><argument_list>(<argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_input</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name> <init>= <expr><block>{ <expr><operator>.</operator><name>viewpoint</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>pose</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_INITIAL_VIEWPOINT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>input_resource_HoldVout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><ternary><condition><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_vout</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_Hold</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_vout</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>input_resource_HoldDummyVout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vout_Hold</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_dummy</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_resource_HoldVouts</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_vout</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_vout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vout</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_vout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppp_vout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp_vout</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_vout</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_vout</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_vout</name> <operator>=</operator> <name>pp_vout</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_vout</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>i_vout</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pp_vout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>pp_vout</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Hold</name><argument_list>(<argument><expr><name><name>pp_vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock_hold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_resource_StopFreeVout</name><parameter_list>(<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name></expr></argument>, <argument><expr><literal type="string">"stop free vout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Stop</name><argument_list>(<argument><expr><name><name>p_resource</name><operator>-&gt;</operator><name>p_vout_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>input_resource_RequestSout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>, <parameter><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_ret</name> <init>= <expr><call><name>RequestSout</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name>p_sout</name></expr></argument>, <argument><expr><name>psz_sout</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resource</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>input_resource_TerminateSout</name><parameter_list>( <parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>input_resource_RequestSout</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
