<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\network\httpd.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_httpd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mime.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPD_CL_BUFSIZE</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPD_CL_BUFSIZE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>httpd_ClientDestroy</name><parameter_list>(<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>httpd_AppendData</name><parameter_list>(<parameter><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <name>httpd_host_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>atomic_uint</name></type> <name>ref</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>urls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>client_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>clients</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>p_tls</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>httpd_url_t</name>
<block>{
<decl_stmt><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>httpd_callback_t</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_callback_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
}</block> <decl><name><name>catch</name><index>[<expr><name>HTTPD_MSG_MAX</name></expr>]</index></name></decl>;</struct>
}</block>;</struct>


<enum>enum
<block>{
<decl><name>HTTPD_CLIENT_RECEIVING</name></decl>,
<decl><name>HTTPD_CLIENT_RECEIVE_DONE</name></decl>,

<decl><name>HTTPD_CLIENT_SENDING</name></decl>,
<decl><name>HTTPD_CLIENT_SEND_DONE</name></decl>,

<decl><name>HTTPD_CLIENT_WAITING</name></decl>,

<decl><name>HTTPD_CLIENT_DEAD</name></decl>,

<decl><name>HTTPD_CLIENT_TLS_HS_IN</name></decl>,
<decl><name>HTTPD_CLIENT_TLS_HS_OUT</name></decl>
}</block>;</enum>

<struct>struct <name>httpd_client_t</name>
<block>{
<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_stream_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_activity_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_activity_timeout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int64_t</name></type> <name>i_keyframe_wait_to_pass</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>httpd_message_t</name></type> <name>query</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>httpd_message_t</name></type> <name>answer</name></decl>;</decl_stmt> 
}</block>;</struct>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>httpd_ReasonFromCode</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>i_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz_reason</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>http_status_info</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>http_status_info</name></type> <name><name>http_reason</name><index>[]</index></name> <init>=
<expr><block>{


<expr><block>{ <expr><literal type="number">200</literal></expr>, <expr><literal type="string">"OK"</literal></expr> }</block></expr>,








<expr><block>{ <expr><literal type="number">301</literal></expr>, <expr><literal type="string">"Moved permanently"</literal></expr> }</block></expr>,






<expr><block>{ <expr><literal type="number">401</literal></expr>, <expr><literal type="string">"Unauthorized"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">403</literal></expr>, <expr><literal type="string">"Forbidden"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">404</literal></expr>, <expr><literal type="string">"Not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">405</literal></expr>, <expr><literal type="string">"Method not allowed"</literal></expr> }</block></expr>,















<expr><block>{ <expr><literal type="number">454</literal></expr>, <expr><literal type="string">"Session not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">455</literal></expr>, <expr><literal type="string">"Method not valid in this State"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">456</literal></expr>, <expr><literal type="string">"Header field not valid for resource"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">457</literal></expr>, <expr><literal type="string">"Invalid range"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">459</literal></expr>, <expr><literal type="string">"Aggregate operation not allowed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">460</literal></expr>, <expr><literal type="string">"Non-aggregate operation not allowed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">461</literal></expr>, <expr><literal type="string">"Unsupported transport"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">500</literal></expr>, <expr><literal type="string">"Internal server error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">501</literal></expr>, <expr><literal type="string">"Not implemented"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">503</literal></expr>, <expr><literal type="string">"Service unavailable"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">505</literal></expr>, <expr><literal type="string">"Protocol version not supported"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">551</literal></expr>, <expr><literal type="string">"Option not supported"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">999</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>psz_fallback_reason</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Continue"</literal></expr>, <expr><literal type="string">"OK"</literal></expr>, <expr><literal type="string">"Found"</literal></expr>, <expr><literal type="string">"Client error"</literal></expr>, <expr><literal type="string">"Server error"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>i_code</name> <operator>&gt;=</operator> <literal type="number">100</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_code</name> <operator>&lt;=</operator> <literal type="number">599</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>http_status_info</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>http_reason</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i_code</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>i_code</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>i_code</name></name> <operator>==</operator> <name>i_code</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>psz_reason</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>psz_fallback_reason</name><index>[<expr><operator>(</operator><name>i_code</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>httpd_HtmlError</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errname</name> <init>= <expr><call><name>httpd_ReasonFromCode</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>errname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url_Encoded</name> <init>= <expr><call><name>vlc_xml_encode</name> <argument_list>(<argument><expr><ternary><condition><expr><name>url</name></expr> ?</condition><then> <expr><name>url</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>asprintf</name> <argument_list>(<argument><expr><name>body</name></expr></argument>,
<argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"ascii\" ?&gt;\n"</literal>
<literal type="string">"&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""</literal>
<literal type="string">" \"http://www.w3.org/TR/xhtml10/DTD/xhtml10strict.dtd\"&gt;\n"</literal>
<literal type="string">"&lt;html lang=\"en\"&gt;\n"</literal>
<literal type="string">"&lt;head&gt;\n"</literal>
<literal type="string">"&lt;title&gt;%s&lt;/title&gt;\n"</literal>
<literal type="string">"&lt;/head&gt;\n"</literal>
<literal type="string">"&lt;body&gt;\n"</literal>
<literal type="string">"&lt;h1&gt;%d %s%s%s%s&lt;/h1&gt;\n"</literal>
<literal type="string">"&lt;hr /&gt;\n"</literal>
<literal type="string">"&lt;a href=\"http://www.videolan.org\"&gt;VideoLAN&lt;/a&gt;\n"</literal>
<literal type="string">"&lt;/body&gt;\n"</literal>
<literal type="string">"&lt;/html&gt;\n"</literal></expr></argument>, <argument><expr><name>errname</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>errname</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>url_Encoded</name></expr> ?</condition><then> <expr><literal type="string">" ("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>url_Encoded</name></expr> ?</condition><then> <expr><name>url_Encoded</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>url_Encoded</name></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>url_Encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>body</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>res</name></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>httpd_file_t</name>
<block>{
<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_file_callback_t</name></type> <name>pf_fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_file_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpd_FileCallBack</name><parameter_list>(<parameter><decl><type><name>httpd_callback_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>,
<parameter><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>answer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>httpd_message_t</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_file_t</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator><name>httpd_file_t</name><operator>*</operator><operator>)</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_body</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_body</name></decl>, <decl><type ref="prev"/><name>i_body</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>answer</name> <operator>||</operator> <operator>!</operator><name>query</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-type"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>mime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Cache-Control"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"no-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>HTTPD_MSG_HEAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pp_body</name> <operator>=</operator> <operator>&amp;</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pi_body</name> <operator>=</operator> <operator>&amp;</operator><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p_body</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_body</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_body</name> <operator>=</operator> <operator>&amp;</operator><name>p_body</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pi_body</name> <operator>=</operator> <operator>&amp;</operator><name>i_body</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>HTTPD_MSG_POST</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psz_args</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>psz_args</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>pf_fill</name></name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>psz_args</name></expr></argument>, <argument><expr><name>pp_body</name></expr></argument>, <argument><expr><name>pi_body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>HTTPD_MSG_HEAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>httpd_MsgGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>httpd_file_t</name> <modifier>*</modifier></type><name>httpd_FileNew</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter>,
<parameter><decl><type><name>httpd_file_callback_t</name></type> <name>pf_fill</name></decl></parameter>,
<parameter><decl><type><name>httpd_file_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime</name> <init>= <expr><name>psz_mime</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mime</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mime</name> <operator>=</operator> <call><name>vlc_mime_Ext2Mime</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mimelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_file_t</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>mimelen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>file</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>httpd_UrlNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><name>psz_user</name></expr></argument>, <argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pf_fill</name></name> <operator>=</operator> <name>pf_fill</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>mime</name></name></expr></argument>, <argument><expr><name>mime</name></expr></argument>, <argument><expr><name>mimelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_HEAD</name></expr></argument>, <argument><expr><name>httpd_FileCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_GET</name></expr></argument>, <argument><expr><name>httpd_FileCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_POST</name></expr></argument>, <argument><expr><name>httpd_FileCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>httpd_file_sys_t</name> <modifier>*</modifier></type><name>httpd_FileDelete</name><parameter_list>(<parameter><decl><type><name>httpd_file_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_file_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>httpd_UrlDelete</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_sys</name></expr>;</return>
</block_content>}</block></function>




<struct>struct <name>httpd_handler_t</name>
<block>{
<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>httpd_handler_callback_t</name></type> <name>pf_fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpd_HandlerCallBack</name><parameter_list>(<parameter><decl><type><name>httpd_callback_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>,
<parameter><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>answer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>httpd_message_t</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_handler_t</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><operator>(</operator><name>httpd_handler_t</name><operator>*</operator><operator>)</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_remote_addr</name><index>[<expr><name>NI_MAXNUMERICHOST</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>answer</name> <operator>||</operator> <operator>!</operator><name>query</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>httpd_ClientIP</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>psz_remote_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_remote_addr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psz_args</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>psz_args</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>handler</name><operator>-&gt;</operator><name>pf_fill</name></name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><name>psz_args</name></expr></argument>,
<argument><expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>i_body</name></name></expr></argument>,
<argument><expr><name>psz_remote_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>HTTPD_MSG_HEAD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>, <argument><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/1."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>, <decl><type ref="prev"/><name>i_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_headers</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>, <argument><expr><literal type="string">"Status: "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz_headers</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>psz_headers</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_headers</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz_headers</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_headers</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_headers</name> <operator>=</operator> <name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>-</operator> <operator>(</operator><name>psz_headers</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_headers</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_headers</name> <operator>=</operator> <name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>psz_status</name> <operator>=</operator> <call><name>httpd_ReasonFromCode</name><argument_list>(<argument><expr><name>i_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"HTTP/1.0 xxx \r\n"</literal></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_status</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i_headers</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_new</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz_new</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0 %03d %s\r\n"</literal></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>psz_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>psz_new</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_new</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>psz_headers</name></expr></argument>, <argument><expr><name>i_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>psz_new</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>httpd_handler_t</name> <modifier>*</modifier></type><name>httpd_HandlerNew</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter>,
<parameter><decl><type><name>httpd_handler_callback_t</name></type> <name>pf_fill</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_handler_t</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handler</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>httpd_UrlNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><name>psz_user</name></expr></argument>, <argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handler</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>pf_fill</name></name> <operator>=</operator> <name>pf_fill</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_HEAD</name></expr></argument>, <argument><expr><name>httpd_HandlerCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_GET</name></expr></argument>, <argument><expr><name>httpd_HandlerCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_POST</name></expr></argument>, <argument><expr><name>httpd_HandlerCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>handler</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>httpd_HandlerDelete</name><parameter_list>(<parameter><decl><type><name>httpd_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>handler</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>httpd_UrlDelete</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_sys</name></expr>;</return>
</block_content>}</block></function>




<struct>struct <name>httpd_redirect_t</name>
<block>{
<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>httpd_RedirectCallBack</name><parameter_list>(<parameter><decl><type><name>httpd_callback_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,
<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>answer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>httpd_message_t</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_redirect_t</name> <modifier>*</modifier></type><name>rdir</name> <init>= <expr><operator>(</operator><name>httpd_redirect_t</name><operator>*</operator><operator>)</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_body</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cl</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>answer</name> <operator>||</operator> <operator>!</operator><name>query</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <call><name>httpd_HtmlError</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p_body</name></expr></argument>, <argument><expr><literal type="number">301</literal></expr></argument>, <argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p_body</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Location"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>httpd_MsgGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>httpd_redirect_t</name> <modifier>*</modifier></type><name>httpd_RedirectNew</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url_dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>dstlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_url_dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>httpd_redirect_t</name> <modifier>*</modifier></type><name>rdir</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rdir</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>dstlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rdir</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rdir</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>httpd_UrlNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>psz_url_src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rdir</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>psz_url_dst</name></expr></argument>, <argument><expr><name>dstlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_HEAD</name></expr></argument>, <argument><expr><name>httpd_RedirectCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>rdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_GET</name></expr></argument>, <argument><expr><name>httpd_RedirectCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>rdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_POST</name></expr></argument>, <argument><expr><name>httpd_RedirectCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>rdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_DESCRIBE</name></expr></argument>, <argument><expr><name>httpd_RedirectCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>rdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdir</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>httpd_RedirectDelete</name><parameter_list>(<parameter><decl><type><name>httpd_redirect_t</name> <modifier>*</modifier></type><name>rdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>httpd_UrlDelete</name><argument_list>(<argument><expr><name><name>rdir</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<struct>struct <name>httpd_stream_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_header</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>b_has_keyframes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_last_keyframe_seen_pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_buffer_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_buffer_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_buffer_last_pos</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>size_t</name></type> <name>i_http_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_header</name> <modifier>*</modifier></type> <name>p_http_headers</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>httpd_StreamCallBack</name><parameter_list>(<parameter><decl><type><name>httpd_callback_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,
<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>answer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>httpd_message_t</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>httpd_stream_t</name><operator>*</operator><operator>)</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>answer</name> <operator>||</operator> <operator>!</operator><name>query</name> <operator>||</operator> <operator>!</operator><name>cl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_keyframe_wait_to_pass</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>i_last_keyframe_seen_pos</name></name> <operator>&lt;=</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_keyframe_wait_to_pass</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_last_keyframe_seen_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_keyframe_wait_to_pass</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_last_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>%</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_write</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name> <operator>-</operator> <name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_write</name> <operator>&gt;</operator> <name>HTTPD_CL_BUFSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_write</name> <operator>=</operator> <name>HTTPD_CL_BUFSIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_write</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>i_write</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_write</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>-</operator> <name>i_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <name>i_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>i_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>+=</operator> <name>i_write</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_content_type</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_cache_control</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_http_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_has_content_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Cache-Control"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_has_cache_control</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>HTTPD_MSG_HEAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_stream_mode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>i_header</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_header</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_last_pos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>b_has_keyframes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_keyframe_wait_to_pass</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_last_keyframe_seen_pos</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_keyframe_wait_to_pass</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"video/x-ms-asf-stream"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_xplaystream</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-type"</literal></expr></argument>, <argument><expr><literal type="string">"application/octet-stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Server"</literal></expr></argument>, <argument><expr><literal type="string">"Cougar 4.1.0.3921"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Pragma"</literal></expr></argument>, <argument><expr><literal type="string">"no-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Pragma"</literal></expr></argument>, <argument><expr><literal type="string">"client-id=%lu"</literal></expr></argument>,
<argument><expr><call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>&amp;</operator><literal type="number">0x7fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Pragma"</literal></expr></argument>, <argument><expr><literal type="string">"features=\"broadcast\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>i_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Pragma"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strstr</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"xPlayStrm=1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_xplaystream</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_xplaystream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_has_content_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-type"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_has_cache_control</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Cache-Control"</literal></expr></argument>, <argument><expr><literal type="string">"no-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>httpd_StreamNew</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_mime</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>httpd_UrlNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><name>psz_user</name></expr></argument>, <argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_mime</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>psz_mime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_mime</name> <operator>=</operator> <call><name>vlc_mime_Ext2Mime</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_mime</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>psz_mime</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <literal type="number">5000000</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_last_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>b_has_keyframes</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_last_keyframe_seen_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_http_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_HEAD</name></expr></argument>, <argument><expr><name>httpd_StreamCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_GET</name></expr></argument>, <argument><expr><name>httpd_StreamCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_UrlCatch</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>HTTPD_MSG_POST</name></expr></argument>, <argument><expr><name>httpd_StreamCallBack</name></expr></argument>,
<argument><expr><operator>(</operator><name>httpd_callback_sys_t</name><operator>*</operator><operator>)</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_UrlDelete</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>httpd_StreamHeader</name><parameter_list>(<parameter><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_header</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_AppendData</name><parameter_list>(<parameter><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name> <operator>%</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><name>i_data</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_copy</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>i_count</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>-</operator> <name>i_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <operator>(</operator><name>i_pos</name> <operator>+</operator> <name>i_copy</name><operator>)</operator> <operator>%</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name> <operator>+=</operator> <name>i_data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>httpd_StreamSend</name><parameter_list>(<parameter><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name> <operator>||</operator> <operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_buffer_last_pos</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>b_has_keyframes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>i_last_keyframe_seen_pos</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_buffer_pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>httpd_AppendData</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>httpd_StreamDelete</name><parameter_list>(<parameter><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>httpd_UrlDelete</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>i_http_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_http_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>httpd_HostThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>httpd_host_t</name> <modifier>*</modifier></type><name>httpd_HostCreate</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>vlc_http_HostNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>httpd_HostCreate</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"http-host"</literal></expr></argument>, <argument><expr><literal type="string">"http-port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>vlc_https_HostNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"http-cert"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"HTTP/TLS certificate not specified!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"http-key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><call><name>vlc_tls_ServerCreate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"HTTP/TLS certificate error (%s and %s)"</literal></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><ternary><condition><expr><name>key</name></expr> ?</condition><then> <expr><name>key</name></expr> </then><else>: <expr><name>cert</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>httpd_HostCreate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"http-host"</literal></expr></argument>, <argument><expr><literal type="string">"https-port"</literal></expr></argument>, <argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>vlc_rtsp_HostNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>httpd_HostCreate</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"rtsp-host"</literal></expr></argument>, <argument><expr><literal type="string">"rtsp-port"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>httpd</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>hosts</name></decl>;</decl_stmt>
}</block> <decl><name>httpd</name> <init>= <expr><block>{ <expr><name>VLC_STATIC_MUTEX</name></expr>, <macro><name>VLC_LIST_INITIALIZER</name><argument_list>(<argument>&amp;httpd.hosts</argument>)</argument_list></macro> }</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>httpd_host_t</name> <modifier>*</modifier></type><name>httpd_HostCreate</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostvar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>portvar</name></decl></parameter>,
<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>p_tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>port</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>portvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>vlc_list_foreach</name><argument_list>(<argument>host</argument>, <argument>&amp;httpd.hosts</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <name>port</name>
<operator>||</operator> <operator>(</operator><name><name>host</name><operator>-&gt;</operator><name>p_tls</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>p_tls</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tls_ServerDelete</name><argument_list>(<argument><expr><name>p_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>host</name></expr>;</return>
</block_content>}</block>


<expr_stmt><expr><name>host</name> <operator>=</operator> <operator>(</operator><name>httpd_host_t</name> <operator>*</operator><operator>)</operator><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"http host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>host</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>hostvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>fds</name></name> <operator>=</operator> <call><name>net_ListenTCP</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>host</name><operator>-&gt;</operator><name>fds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot create socket(s) for HTTP host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name><name>host</name><operator>-&gt;</operator><name>nfd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>host</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>nfd</name></name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name><name>host</name><operator>-&gt;</operator><name>nfd</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>client_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>p_tls</name></name> <operator>=</operator> <name>p_tls</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>httpd_HostThread</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot spawn http host thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>hosts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>host</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tls_ServerDelete</name><argument_list>(<argument><expr><name>p_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>httpd_HostDelete</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"httpd_HostDelete: host still in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"HTTP host removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>client</argument>, <argument>&amp;host-&gt;clients</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"client still connected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_ClientDestroy</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tls_ServerDelete</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>p_tls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>httpd</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>httpd_UrlNew</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>url</argument>, <argument>&amp;host-&gt;urls</argument>, <argument>node</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cannot add '%s' (url already defined)"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>url</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>psz_user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>psz_user</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>psz_user</name></expr> ?</condition><then> <expr><name>psz_user</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>-&gt;</operator><name>psz_user</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>psz_password</name></expr> ?</condition><then> <expr><name>psz_password</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HTTPD_MSG_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>url</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>httpd_UrlCatch</name><parameter_list>(<parameter><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_msg</name></decl></parameter>, <parameter><decl><type><name>httpd_callback_t</name></type> <name>cb</name></decl></parameter>,
<parameter><decl><type><name>httpd_callback_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><name>cb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><name>p_sys</name><operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>httpd_UrlDelete</name><parameter_list>(<parameter><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name><name>url</name><operator>-&gt;</operator><name>host</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>client</argument>, <argument>&amp;host-&gt;clients</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>url</name></name> <operator>!=</operator> <name>url</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"force closing connections"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>client_count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_ClientDestroy</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_MsgInit</name><parameter_list>(<parameter><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_body_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_MsgClean</name><parameter_list>(<parameter><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>i_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>p_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgInit</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>httpd_MsgGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>httpd_message_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>i_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>httpd_MsgAdd</name><parameter_list>(<parameter><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_header</name> <modifier>*</modifier></type><name>p_tmp</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>httpd_header</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>i_headers</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name></name> <operator>=</operator> <name>p_tmp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>httpd_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>p_headers</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>i_headers</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>us_vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>i_headers</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_ClientInit</name><parameter_list>(<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_RECEIVING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_activity_date</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_activity_timeout</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name>HTTPD_CL_BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_keyframe_wait_to_pass</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_stream_mode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_MsgInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>httpd_ClientIP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>net_GetPeerAddress</name><argument_list>(<argument><expr><call><name>vlc_tls_GetFD</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>ip</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>httpd_ServerIP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>net_GetSockAddress</name><argument_list>(<argument><expr><call><name>vlc_tls_GetFD</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>ip</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_ClientDestroy</name><parameter_list>(<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>httpd_client_t</name> <modifier>*</modifier></type><name>httpd_ClientNew</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>httpd_client_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cl</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_ClientInit</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>ssize_t</name></type> <name>httpd_NetRecv</name> <parameter_list>(<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name> <init>= <expr><block>{ <expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>p</name></expr>, <expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>i_len</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readv</name></name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>ssize_t</name></type> <name>httpd_NetSend</name> <parameter_list>(<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name></type> <name>iov</name> <init>= <expr><block>{ <expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr>, <expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>i_len</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>writev</name></name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_proto</name></decl>;</decl_stmt>
}</block>
<decl><name><name>msg_type</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"OPTIONS"</literal></expr>, <expr><name>HTTPD_MSG_OPTIONS</name></expr>, <expr><name>HTTPD_PROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DESCRIBE"</literal></expr>, <expr><name>HTTPD_MSG_DESCRIBE</name></expr>, <expr><name>HTTPD_PROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SETUP"</literal></expr>, <expr><name>HTTPD_MSG_SETUP</name></expr>, <expr><name>HTTPD_PROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PLAY"</literal></expr>, <expr><name>HTTPD_MSG_PLAY</name></expr>, <expr><name>HTTPD_PROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PAUSE"</literal></expr>, <expr><name>HTTPD_MSG_PAUSE</name></expr>, <expr><name>HTTPD_PROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GET_PARAMETER"</literal></expr>, <expr><name>HTTPD_MSG_GETPARAMETER</name></expr>, <expr><name>HTTPD_PROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TEARDOWN"</literal></expr>, <expr><name>HTTPD_MSG_TEARDOWN</name></expr>, <expr><name>HTTPD_PROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GET"</literal></expr>, <expr><name>HTTPD_MSG_GET</name></expr>, <expr><name>HTTPD_PROTO_HTTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"HEAD"</literal></expr>, <expr><name>HTTPD_MSG_HEAD</name></expr>, <expr><name>HTTPD_PROTO_HTTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"POST"</literal></expr>, <expr><name>HTTPD_MSG_POST</name></expr>, <expr><name>HTTPD_PROTO_HTTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>HTTPD_MSG_NONE</name></expr>, <expr><name>HTTPD_PROTO_NONE</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_ClientRecv</name><parameter_list>(<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_NONE</name> <operator>&amp;&amp;</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>httpd_NetRecv</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"\r\n\t "</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>httpd_NetRecv</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">7</literal> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/1."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"RTSP/1."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_RTSP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>p_body</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>httpd_NetRecv</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>p_body</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_RECEIVE_DONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>newbuf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>+</operator> <literal type="number">1025</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newbuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>httpd_NetRecv</name> <argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_HTTP0</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>HTTPD_MSG_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block> 
while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>+</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block> 
while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>+</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_version</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"RTSP/1."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_RTSP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_version</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"HTTP/"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>sorry</name><index>[]</index></name> <init>=
<expr><literal type="string">"HTTP/1.1 505 Unknown HTTP version\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>httpd_NetSend</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>sorry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sorry</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"RTSP/"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>sorry</name><index>[]</index></name> <init>=
<expr><literal type="string">"RTSP/1.0 505 Unknown RTSP version\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>httpd_NetSend</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>sorry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sorry</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>||</operator>
<operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>HTTPD_MSG_ANSWER</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_status</name></name> <operator>=</operator>
<call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_NONE</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>msg_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>msg_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>msg_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name><name>msg_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>!=</operator> <name><name>msg_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_proto</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/1."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_HTTP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"RTSP/1."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>=</operator> <name>HTTPD_PROTO_RTSP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p3</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_HTTP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"http:"</literal></expr> </then><else>: <expr><literal type="string">"rtsp:"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"/?#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_HTTP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"https:"</literal></expr> </then><else>: <expr><literal type="string">"rtsps:"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"/?#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>psz_url</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>psz_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p3</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p3</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>psz_args</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>strdup</name><argument_list>(<argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colon</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>eol</name> <operator>&amp;&amp;</operator> <name>eol</name> <operator>&gt;=</operator> <name>line</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>eol</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>eol</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>eol</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colon</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>colon</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>colon</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colon</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>p_body</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>p_body</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>p_body</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPD_PROTO_HTTP</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>sorry</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 413 Request Entity Too Large\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>httpd_NetSend</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>sorry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sorry</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HTTPD_PROTO_RTSP</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>sorry</name><index>[]</index></name> <init>= <expr><literal type="string">"RTSP/1.0 413 Request Entity Too Large\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>httpd_NetSend</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>sorry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sorry</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_RECEIVE_DONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>!=</operator> <name>HTTPD_PROTO_NONE</name> <operator>&amp;&amp;</operator> <name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <name>HTTPD_MSG_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_body</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_RECEIVE_DONE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_DEAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_RTSP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_activity_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_ClientSend</name><parameter_list>(<parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_status</name> <init>= <expr><call><name>httpd_ReasonFromCode</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"HTTP/1."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_status</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>&lt;</operator> <name>i_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s.%"</literal> <name>PRIu8</name> <literal type="string">" %d %s\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_HTTP</name></expr> ?</condition><then> <expr><literal type="string">"HTTP/1"</literal></expr> </then><else>: <expr><literal type="string">"RTSP/1"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_version</name></name></expr></argument>,
<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_status</name></name></expr></argument>, <argument><expr><name>psz_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>httpd_NetSend</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_msg</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_offset</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>httpd_MsgClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><call><name>cb</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_body</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_SEND_DONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_DEAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpd_ClientTlsHandshake</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>vlc_tls_SessionHandshake</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>p_tls</name></name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_DEAD</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_RECEIVING</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_TLS_HS_IN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_TLS_HS_OUT</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>httpdAuthOk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>user</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>pass</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>b64</name></expr></argument>, <argument><expr><literal type="string">"BASIC"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b64</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>b64</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b64</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>given_user</name> <init>= <expr><call><name>vlc_b64_decode</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>given_user</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>given_pass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>given_pass</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>given_user</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>given_pass</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>auth_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>given_pass</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>given_user</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>auth_failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>given_pass</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>auth_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>given_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>

<label><name>auth_failed</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>given_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpdLoop</name><parameter_list>(<parameter><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>nfd</name></name> <operator>+</operator> <name><name>host</name><operator>-&gt;</operator><name>client_count</name></name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nfd</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>nfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nfd</name> <operator>&lt;</operator> <name><name>host</name><operator>-&gt;</operator><name>nfd</name></name></expr>;</condition> <incr><expr><name>nfd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>nfd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mutex_cleanup_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_low_delay</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_client_t</name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>cl</argument>, <argument>&amp;host-&gt;clients</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>==</operator> <name>HTTPD_CLIENT_DEAD</name>
<operator>||</operator> <operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>i_activity_timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_activity_date</name></name> <operator>+</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_activity_timeout</name></name> <operator>&lt;</operator> <name>now</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>client_count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_ClientDestroy</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pufd</name> <init>= <expr><name>ufd</name> <operator>+</operator> <name>nfd</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>pufd</name> <operator>&lt;</operator> <name>ufd</name> <operator>+</operator> <call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>ufd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pufd</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name><name>pufd</name><operator>-&gt;</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPD_CLIENT_RECEIVING</name></expr>:</case>
<case>case <expr><name>HTTPD_CLIENT_TLS_HS_IN</name></expr>:</case>
<expr_stmt><expr><name><name>pufd</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HTTPD_CLIENT_SENDING</name></expr>:</case>
<case>case <expr><name>HTTPD_CLIENT_TLS_HS_OUT</name></expr>:</case>
<expr_stmt><expr><name><name>pufd</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HTTPD_CLIENT_RECEIVE_DONE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>answer</name> <init>= <expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_message_t</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>httpd_MsgInit</name><argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPD_MSG_ANSWER</name></expr>:</case>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_DEAD</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HTTPD_MSG_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>i_proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Server"</literal></expr></argument>, <argument><expr><literal type="string">"VLC/%s"</literal></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_proto</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPD_PROTO_HTTP</name></expr>:</case>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Allow"</literal></expr></argument>, <argument><expr><literal type="string">"GET,HEAD,POST,OPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HTTPD_PROTO_RTSP</name></expr>:</case>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>httpd_MsgGet</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"Cseq"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Cseq"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>httpd_MsgGet</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"Timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Timestamp"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>httpd_MsgGet</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"Require"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">551</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"Unsupported"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Public"</literal></expr></argument>, <argument><expr><literal type="string">"DESCRIBE,SETUP,"</literal>
<literal type="string">"TEARDOWN,PLAY,PAUSE,GET_PARAMETER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>httpd_MsgGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_SENDING</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HTTPD_MSG_NONE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_DEAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>i_proto</name></name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">501</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <call><name>httpd_HtmlError</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">501</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_SENDING</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default> <block>{<block_content>
<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_msg</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>i_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_auth_failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<macro><name>vlc_list_foreach</name><argument_list>(<argument>url</argument>, <argument>&amp;host-&gt;urls</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>answer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b_auth_failed</name> <operator>=</operator> <operator>!</operator><call><name>httpdAuthOk</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_user</name></name></expr></argument>,
<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_password</name></name></expr></argument>,
<argument><expr><call><name>httpd_MsgGet</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>b_auth_failed</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><call><name>cb</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>answer</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>==</operator> <name>HTTPD_PROTO_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>answer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>answer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>i_proto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>HTTPD_MSG_ANSWER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_version</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_auth_failed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"WWW-Authenticate"</literal></expr></argument>,
<argument><expr><literal type="string">"Basic realm=\"VLC stream\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">401</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name> <operator>=</operator> <literal type="number">404</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name> <operator>=</operator> <call><name>httpd_HtmlError</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>answer</name><operator>-&gt;</operator><name>i_status</name></name></expr></argument>,
<argument><expr><name><name>query</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>answer</name><operator>-&gt;</operator><name>p_body</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>answer</name><operator>-&gt;</operator><name>i_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>httpd_MsgGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_MsgAdd</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_SENDING</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>HTTPD_CLIENT_SEND_DONE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>b_stream_mode</name></name> <operator>||</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>do_close</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_proto</name></name> <operator>!=</operator> <name>HTTPD_PROTO_HTTP</name>
<operator>||</operator> <name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_connection</name> <init>= <expr><call><name>httpd_MsgGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>,
<argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_connection</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_close</name> <operator>=</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>psz_connection</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>do_close</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_close</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>httpd_MsgClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_RECEIVING</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_DEAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>httpd_MsgClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>httpd_MsgClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_WAITING</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>HTTPD_CLIENT_WAITING</name></expr>:</case>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_msg</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>i_type</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>httpd_MsgInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body_offset</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><call><name>cb</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>url</name><operator>-&gt;</operator><name>catch</name><index>[<expr><name>i_msg</name></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <name>HTTPD_MSG_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>p_body</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_body</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_SENDING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>pufd</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>vlc_tls_GetPollFD</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pufd</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pufd</name><operator>-&gt;</operator><name>events</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nfd</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b_low_delay</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_low_delay</name></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"polling error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nfd</name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>nfd</name></name></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>cl</argument>, <argument>&amp;host-&gt;clients</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pufd</name> <init>= <expr><operator>&amp;</operator><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pufd</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>ufd</name><index>[<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ufd</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_tls_GetFD</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>pufd</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<expr_stmt><expr><operator>++</operator><name>nfd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pufd</name><operator>-&gt;</operator><name>revents</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_activity_date</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPD_CLIENT_RECEIVING</name></expr>:</case> <expr_stmt><expr><call><name>httpd_ClientRecv</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>HTTPD_CLIENT_SENDING</name></expr>:</case> <expr_stmt><expr><call><name>httpd_ClientSend</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>HTTPD_CLIENT_TLS_HS_IN</name></expr>:</case>
<case>case <expr><name>HTTPD_CLIENT_TLS_HS_OUT</name></expr>:</case>
<expr_stmt><expr><call><name>httpd_ClientTlsHandshake</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>


<for>for <control>(<init><expr><name>nfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nfd</name> <operator>&lt;</operator> <name><name>host</name><operator>-&gt;</operator><name>nfd</name></name></expr>;</condition> <incr><expr><name>nfd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>fd</name> <operator>==</operator> <name><name>host</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>nfd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>vlc_accept</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<macro><name>setsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_REUSEADDR</argument>,
<argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof(int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sk</name> <init>= <expr><call><name>vlc_tls_SocketOpen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sk</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>p_tls</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>alpn</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"http/1.1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tls</name> <operator>=</operator> <call><name>vlc_tls_ServerSessionCreate</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>p_tls</name></name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tls</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tls_SessionDelete</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sk</name> <operator>=</operator> <name>tls</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>httpd_ClientNew</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>p_tls</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>HTTPD_CLIENT_TLS_HS_OUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>client_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>httpd_HostThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpdLoop</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>httpd_StreamSetHTTPHeaders</name><parameter_list>(<parameter><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type> <name>p_stream</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>httpd_header</name> <modifier>*</modifier></type><name>p_headers</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_stream</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_http_headers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_http_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_headers</name> <operator>||</operator> <operator>!</operator><name>i_headers</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name>i_headers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>httpd_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_headers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>||</operator> <operator>!</operator><name><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>p_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>||</operator>
<operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_http_headers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_http_headers</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
