<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\network\stream.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_TCP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_TCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_TCP</name></cpp:macro> <cpp:value>IPPROTO_TCP</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<function><type><name>ssize_t</name></type> <name>vlc_tls_Read</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>waitall</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>ufd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>vlc_tls_GetPollFD</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ufd</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>rcvd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name><name>session</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readv</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>waitall</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>-=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rcvd</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rcvd</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>rcvd</name></expr> ?</condition><then> <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>rcvd</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>vlc_tls_Write</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>ufd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>vlc_tls_GetPollFD</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ufd</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>sent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name><name>session</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>writev</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_base</name></name><operator>)</operator> <operator>+</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>-=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sent</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sent</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>sent</name></expr> ?</condition><then> <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>sent</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_tls_GetLine</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>linesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>==</operator> <name>linesize</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>linesize</name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newline</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newline</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_tls_Read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>linelen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><name><name>line</name><index>[<expr><name>linelen</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>linelen</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>linelen</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>line</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>vlc_tls_socket</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_tls</name></name></type> <name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>peerlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name><name>peer</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_tls_socket_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_tls_SocketGetFD</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator>struct <name>vlc_tls_socket</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>events</name></expr>;</expr_stmt>
<return>return <expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_tls_SocketRead</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator>struct <name>vlc_tls_socket</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>msg_iov</name> <operator>=</operator> <name>iov</name></expr>,
<expr><operator>.</operator><name>msg_iovlen</name> <operator>=</operator> <name>count</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>recvmsg</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_tls_SocketWrite</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator>struct <name>vlc_tls_socket</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>msg_iov</name> <operator>=</operator> <operator>(</operator>struct <name>iovec</name> <operator>*</operator><operator>)</operator><name>iov</name></expr>,
<expr><operator>.</operator><name>msg_iovlen</name> <operator>=</operator> <name>count</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_sendmsg</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_tls_SocketShutdown</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>duplex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator>struct <name>vlc_tls_socket</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>duplex</name></expr> ?</condition><then> <expr><name>SHUT_RDWR</name></expr> </then><else>: <expr><name>SHUT_WR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_tls_SocketClose</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator>struct <name>vlc_tls_socket</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_operations</name></name></type> <name>vlc_tls_socket_ops</name> <init>=
<expr><block>{
<expr><name>vlc_tls_SocketGetFD</name></expr>,
<expr><name>vlc_tls_SocketRead</name></expr>,
<expr><name>vlc_tls_SocketWrite</name></expr>,
<expr><name>vlc_tls_SocketShutdown</name></expr>,
<expr><name>vlc_tls_SocketClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>vlc_tls_t</name> <modifier>*</modifier></type><name>vlc_tls_SocketAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>peer</name></decl></parameter>,
<parameter><decl><type><name>socklen_t</name></type> <name>peerlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sock</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>peerlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><operator>&amp;</operator><name><name>sock</name><operator>-&gt;</operator><name>tls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_tls_socket_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>peerlen</name></name> <operator>=</operator> <name>peerlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peerlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>peerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>tls</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>vlc_tls_SocketOpen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_tls_SocketAlloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_tls_SocketPair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_socketpair</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<macro><name>setsockopt</name><argument_list>(<argument>fds[i]</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_REUSEADDR</argument>,
<argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>pair</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_tls_SocketAlloc</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tls_SessionDelete</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>vlc_tls_t</name> <modifier>*</modifier></type><name>vlc_tls_SocketAddrInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_socket</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>,
<argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>setsockopt</name><argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_REUSEADDR</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>==</operator> <name>IPPROTO_TCP</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>setsockopt</name><argument_list>(<argument>fd</argument>, <argument>SOL_TCP</argument>, <argument>TCP_NODELAY</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sk</name> <init>= <expr><call><name>vlc_tls_SocketAlloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sk</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>sk</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_tls_WaitConnect</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_tls_GetFD</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>ufd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_tls_Connect</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator><name>vlc_tls_socket_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>peerlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>vlc_tls_WaitConnect</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_tls_ConnectWrite</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_tls_socket_ops</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSG_FASTOPEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vlc_tls_socket_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator><name>vlc_tls_socket_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>msg_name</name> <operator>=</operator> <name><name>sock</name><operator>-&gt;</operator><name>peer</name></name></expr>,
<expr><operator>.</operator><name>msg_namelen</name> <operator>=</operator> <name><name>sock</name><operator>-&gt;</operator><name>peerlen</name></name></expr>,
<expr><operator>.</operator><name>msg_iov</name> <operator>=</operator> <operator>(</operator>struct <name>iovec</name> <operator>*</operator><operator>)</operator><name>iov</name></expr>,
<expr><operator>.</operator><name>msg_iovlen</name> <operator>=</operator> <name>count</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_sendmsg</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>MSG_FASTOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_tls_WaitConnect</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EOPNOTSUPP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vlc_tls_Connect</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_tls_SocketWrite</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_operations</name></name></type> <name>vlc_tls_socket_fastopen_ops</name> <init>=
<expr><block>{
<expr><name>vlc_tls_SocketGetFD</name></expr>,
<expr><name>vlc_tls_SocketRead</name></expr>,
<expr><name>vlc_tls_ConnectWrite</name></expr>,
<expr><name>vlc_tls_SocketShutdown</name></expr>,
<expr><name>vlc_tls_SocketClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>vlc_tls_SocketOpenAddrInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>info</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>defer_connect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>vlc_tls_SocketAddrInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>defer_connect</name></expr>)</condition>
<block>{<block_content> 

<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_tls_socket_fastopen_ops</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_tls_Connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tls_SessionDelete</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>vlc_tls_SocketOpenTCP</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>,
<expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>,
}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"resolving %s ..."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>vlc_getaddrinfo_i11e</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot resolve %s port %u: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"connecting to %s port %u ..."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><name>p</name></type> <init>= <expr><name>res</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><call><name>vlc_tls_SocketOpenAddrInfo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tls</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"connection error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tls</name></expr>;</return>
</block_content>}</block></for>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
