<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\playlist\playlist.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_PLAYLIST_NEW_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_PLAYLIST_NEW_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../player/player.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"randomizer.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>input_item_t</name></name></type> <name>input_item_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_PLAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_New</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VLC_UNUSED(a), VLC_UNUSED(b), VLC_UNUSED(c), malloc(1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_Delete</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_Lock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_UNUSED(p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_Unlock</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_UNUSED(p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_AddListener</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VLC_UNUSED(b), malloc(1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_RemoveListener</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_SetCurrentMedia</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VLC_UNUSED(b), VLC_SUCCESS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_InvalidateNextMedia</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_UNUSED(p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_osd_Message</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>fmt</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_UNUSED(p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr><name>vlc_playlist_item_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>playlist_item_vector_t</name>;</typedef>

<struct>struct <name>vlc_playlist</name>
<block>{
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>auto_preparse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_listener_id</name></name> <modifier>*</modifier></type><name>player_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>playlist_item_vector_t</name></type> <name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>listeners</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>idgen</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEST_PLAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vlc_playlist_AssertLocked</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_playlist_AssertLocked</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) (0))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
