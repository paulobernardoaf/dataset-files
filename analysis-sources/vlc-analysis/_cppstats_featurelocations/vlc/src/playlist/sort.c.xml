<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\playlist\sort.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sort.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"notify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>





<struct>struct <name>vlc_playlist_item_meta</name> <block>{
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title_or_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>artist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>album</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>album_artist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>genre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>track_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>disc_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>rating</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_track_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_disc_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_rating</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_playlist_item_meta_CopyString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>to</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_playlist_item_meta_InitField</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_sort_key</name></name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><name><name>meta</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>media</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_TITLE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>media</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_playlist_item_meta_CopyString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>title_or_name</name></name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_DURATION</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>media</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>==</operator> <name>INPUT_DURATION_INDEFINITE</name>
<operator>||</operator> <name><name>media</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>==</operator> <name>INPUT_DURATION_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>media</name><operator>-&gt;</operator><name>i_duration</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_ARTIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>,
<argument><expr><name>vlc_meta_Artist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_playlist_item_meta_CopyString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>artist</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_ALBUM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>vlc_meta_Album</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_playlist_item_meta_CopyString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>album</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_ALBUM_ARTIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>,
<argument><expr><name>vlc_meta_AlbumArtist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_playlist_item_meta_CopyString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>album_artist</name></name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_GENRE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>vlc_meta_Genre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_playlist_item_meta_CopyString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>genre</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_DATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>vlc_meta_Date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>has_date</name></name> <operator>=</operator> <operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>has_date</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_TRACK_NUMBER</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>,
<argument><expr><name>vlc_meta_TrackNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>has_track_number</name></name> <operator>=</operator> <operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>has_track_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>track_number</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_DISC_NUMBER</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>,
<argument><expr><name>vlc_meta_DiscNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>has_disc_number</name></name> <operator>=</operator> <operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>has_disc_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>disc_number</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_URL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>vlc_meta_URL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_playlist_item_meta_CopyString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_RATING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>input_item_GetMetaLocked</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>vlc_meta_Rating</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>has_rating</name></name> <operator>=</operator> <operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>has_rating</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>rating</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Unknown sort key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_playlist_item_meta_DestroyFields</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>meta</name><operator>-&gt;</operator><name>title_or_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>meta</name><operator>-&gt;</operator><name>artist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>meta</name><operator>-&gt;</operator><name>album</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>meta</name><operator>-&gt;</operator><name>album_artist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>meta</name><operator>-&gt;</operator><name>genre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>meta</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_playlist_item_meta_InitFields</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name></type> <name><name>criteria</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name> <modifier>*</modifier></type><name>criterion</name> <init>= <expr><operator>&amp;</operator><name><name>criteria</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_item_meta_InitField</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>criterion</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_playlist_item_meta_DestroyFields</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type>
<name>vlc_playlist_item_meta_New</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name></type> <name><name>criteria</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>meta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>media</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_item_meta_InitFields</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name>criteria</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>media</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>meta</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_playlist_item_meta_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_playlist_item_meta_DestroyFields</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>CompareStrings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>CompareIntegers</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>CompareOptionalIntegers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>has_a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_b</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_a</name> <operator>&amp;&amp;</operator> <name>has_b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CompareIntegers</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>CompareMetaByKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_sort_key</name></name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_TITLE</name></expr>:</case>
<return>return <expr><call><name>CompareStrings</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>title_or_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>title_or_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_DURATION</name></expr>:</case>
<return>return <expr><call><name>CompareIntegers</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_ARTIST</name></expr>:</case>
<return>return <expr><call><name>CompareStrings</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>artist</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>artist</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_ALBUM</name></expr>:</case>
<return>return <expr><call><name>CompareStrings</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>album</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>album</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_ALBUM_ARTIST</name></expr>:</case>
<return>return <expr><call><name>CompareStrings</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>album_artist</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>album_artist</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_GENRE</name></expr>:</case>
<return>return <expr><call><name>CompareStrings</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>genre</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>genre</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_DATE</name></expr>:</case>
<return>return <expr><call><name>CompareOptionalIntegers</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>has_date</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>date</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>has_date</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_TRACK_NUMBER</name></expr>:</case>
<return>return <expr><call><name>CompareOptionalIntegers</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>has_track_number</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>track_number</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>has_track_number</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>track_number</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_DISC_NUMBER</name></expr>:</case>
<return>return <expr><call><name>CompareOptionalIntegers</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>has_disc_number</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>disc_number</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>has_disc_number</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>disc_number</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_URL</name></expr>:</case>
<return>return <expr><call><name>CompareStrings</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PLAYLIST_SORT_KEY_RATING</name></expr>:</case>
<return>return <expr><call><name>CompareOptionalIntegers</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>has_rating</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>rating</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>has_rating</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>rating</name></name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Unknown sort key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>


<struct>struct <name>sort_request</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name> <modifier>*</modifier></type><name>criteria</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_meta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sort_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>a</name> <init>=
<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> struct <name>vlc_playlist_item_meta</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>lhs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name>b</name> <init>=
<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> struct <name>vlc_playlist_item_meta</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>rhs</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name> <modifier>*</modifier></type><name>criterion</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>criteria</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CompareMetaByKey</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>criterion</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>criterion</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_SORT_ORDER_DESCENDING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_playlist_DeleteMetaArray</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier></type><name><name>array</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_playlist_item_meta_Delete</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier><modifier>*</modifier></type>
<name>vlc_playlist_NewMetaArray</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name></type> <name><name>criteria</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>=
<expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>array</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_playlist_item_meta_New</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>criteria</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_DeleteMetaArray</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_playlist_Sort</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name></type> <name><name>criteria</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><ternary><condition><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>
?</condition><then> <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_item_meta</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>=
<expr><call><name>vlc_playlist_NewMetaArray</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>criteria</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sort_request</name></name></type> <name>req</name> <init>= <expr><block>{ <expr><name>criteria</name></expr>, <expr><name>count</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_qsort</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>array</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_meta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>item</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_playlist_DeleteMetaArray</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>vlc_playlist_IndexOf</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_items_reset</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
