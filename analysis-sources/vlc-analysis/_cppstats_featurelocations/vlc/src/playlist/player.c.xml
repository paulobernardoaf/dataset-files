<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\playlist\player.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../player/player.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"notify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preparse.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>player_on_current_media_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>new_media</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><ternary><condition><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>
?</condition><then> <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name><operator>-&gt;</operator><name>media</name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_media</name> <operator>==</operator> <name>media</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_media</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>vlc_playlist_IndexOfMedia</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>new_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>randomizer_Select</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_player_media_meta_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_NotifyMediaUpdated</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_player_media_length_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>new_length</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>new_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_NotifyMediaUpdated</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_player_media_subitems_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,
<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>subitems</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_ExpandItemFromNode</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>subitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type>
<name>player_get_next_media</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_playlist_GetNextMedia</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_media_provider</name></name></type> <name>player_media_provider</name> <init>= <expr><block>{
<expr><operator>.</operator><name>get_next</name> <operator>=</operator> <name>player_get_next_media</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name></type> <name>player_callbacks</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_current_media_changed</name> <operator>=</operator> <name>player_on_current_media_changed</name></expr>,
<expr><operator>.</operator><name>on_media_meta_changed</name> <operator>=</operator> <name>on_player_media_meta_changed</name></expr>,
<expr><operator>.</operator><name>on_length_changed</name> <operator>=</operator> <name>on_player_media_length_changed</name></expr>,
<expr><operator>.</operator><name>on_media_subitems_changed</name> <operator>=</operator> <name>on_player_media_subitems_changed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>vlc_playlist_PlayerInit</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <call><name>vlc_player_New</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>VLC_PLAYER_LOCK_NORMAL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>player_media_provider</name></expr></argument>, <argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>player_listener</name></name> <operator>=</operator> <call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>player_callbacks</name></expr></argument>,
<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>playlist</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_playlist_PlayerDestroy</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_player_t</name> <modifier>*</modifier></type>
<name>vlc_playlist_GetPlayer</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_playlist_Start</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_player_Start</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_playlist_Stop</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_playlist_Pause</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_playlist_Resume</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
