<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\playlist\randomizer.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_RANDOMIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"randomizer.h"</cpp:file></cpp:include>































































































































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_SAME_BEFORE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>randomizer_Init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>xsubi</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>xsubi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>randomizer_Destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>randomizer_SetLoop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>randomizer_IndexOf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_vector_index_of</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>randomizer_Count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>randomizer_Reshuffle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>swap_items</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>randomizer_DetermineOne_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>avoid_last_n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>&gt;</operator> <name>avoid_last_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>range_len</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>-</operator> <name>avoid_last_n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>selected</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <operator>(</operator><call><name>nrand48</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>xsubi</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>range_len</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>swap_items</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>randomizer_DetermineOne</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>randomizer_DetermineOne_</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>randomizer_AutoReshuffle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>avoid_last_n</name> <init>= <expr><name>NOT_SAME_BEFORE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>avoid_last_n</name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>avoid_last_n</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>avoid_last_n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>randomizer_DetermineOne_</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>avoid_last_n</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>randomizer_HasPrev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>loop</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name><operator>)</operator> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>randomizer_HasNext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>loop</name></name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type>
<name>randomizer_PeekPrev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type>
<name>randomizer_PeekNext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_AutoReshuffle</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>randomizer_DetermineOne</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type>
<name>randomizer_Prev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_PeekPrev</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type>
<name>randomizer_Next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_PeekNext</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>randomizer_Add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_vector_insert_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>randomizer_SelectIndex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>selected</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>index</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>]</index></name> <operator>=</operator> <name>selected</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>selected</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>randomizer_Select</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>randomizer_IndexOf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>randomizer_SelectIndex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>randomizer_RemoveAt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>randomizer_RemoveOne</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>randomizer_IndexOf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>randomizer_RemoveAt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>randomizer_Remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>items</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>randomizer_RemoveOne</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_vector_autoshrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>randomizer_Clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randomizer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_RANDOMIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>


<struct>struct <name>vlc_playlist_item</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ArrayInit</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ArrayDestroy</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_all_items_selected_exactly_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>selected</name><index>[<expr><name>SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_all_items_selected_exactly_once_per_cycle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cycle</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cycle</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name><name>selected</name><index>[<expr><name>SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
</block_content>}</block></for>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_all_items_selected_exactly_once_with_additions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><literal type="number">75</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>selected</name><index>[<expr><name>SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><literal type="number">75</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_all_items_selected_exactly_once_with_removals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>selected</name><index>[<expr><name>SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>to_remove</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>to_remove</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>to_remove</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_remove</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">70</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>to_remove</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomizer_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name> <operator>-</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <name>SIZE</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_cycle_after_manual_selection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>randomizer_Select</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_cycle_with_additions_and_removals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>to_remove</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>to_remove</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>to_remove</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_remove</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>to_remove</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomizer_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_PeekNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>history</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>history</name><index>[<expr><literal type="number">59</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>history</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">59</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>history</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>history</name></name> <operator>==</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">59</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">21</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>to_remove</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>to_remove</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>history</name></name> <operator>==</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">21</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">19</literal></expr>]</index></name> <operator>==</operator> <name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">30</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_force_select_new_item</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>selected</name><index>[<expr><name>SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">50</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">62</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Select</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>randomizer</name><operator>.</operator><name>next</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_force_select_item_already_selected</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>selected</name><index>[<expr><name>SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">50</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Select</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>randomizer</name><operator>.</operator><name>next</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>!=</operator> <literal type="number">50</literal><operator>)</operator> <operator>^</operator> <name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prev</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>actual</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prev_with_select</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>actual</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>randomizer_Select</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name><name>actual</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name><name>actual</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name><name>actual</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name><name>actual</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name><name>actual</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prev_across_reshuffle_loops</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>actual</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>actualnew</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actualnew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actualnew</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actualnew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actualnew</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actualnew</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>randomizer</name><operator>.</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>index_in_actual</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name><name>actualnew</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<decl_stmt><decl><type><name>bool</name></type> <name>in_actualnew</name> <init>= <expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_actualnew</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>index_in_actual</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name><name>actual</name><index>[<expr><name>index_in_actual</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_loop_respect_not_same_before</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>(NOT_SAME_BEFORE + 2)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>actual</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cycle</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>cycle</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NOT_SAME_BEFORE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <name>SIZE</name> <operator>-</operator> <name>NOT_SAME_BEFORE</name><operator>)</operator> <operator>%</operator> <name>SIZE</name></expr></init></decl>;</init>
<condition><expr><name>j</name> <operator>!=</operator> <name>i</name></expr>;</condition>
<incr><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SIZE</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>actual</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>NOT_SAME_BEFORE</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_loop_respect_not_same_before_impossible</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>NOT_SAME_BEFORE</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ArrayInit</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>*</operator> <name>SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ArrayDestroy</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_has_prev_next_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>randomizer</name></name></type> <name>randomizer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>randomizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomizer_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>randomizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_all_items_selected_exactly_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_all_items_selected_exactly_once_per_cycle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_all_items_selected_exactly_once_with_additions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_all_items_selected_exactly_once_with_removals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cycle_after_manual_selection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cycle_with_additions_and_removals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_force_select_new_item</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_force_select_item_already_selected</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_prev</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_prev_with_select</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_prev_across_reshuffle_loops</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_loop_respect_not_same_before</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_loop_respect_not_same_before_impossible</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_has_prev_next_empty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
