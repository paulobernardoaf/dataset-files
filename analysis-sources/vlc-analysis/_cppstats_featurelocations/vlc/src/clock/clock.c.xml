<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\clock\clock.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clock_internal.h"</cpp:file></cpp:include>

<struct>struct <name>vlc_clock_main_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rc</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>clock_point_t</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>average_t</name></type> <name>coeff_avg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>coeff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pause_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>wait_sync_ref_priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clock_point_t</name></type> <name>wait_sync_ref</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>clock_point_t</name></type> <name>first_pcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>output_dejitter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>input_dejitter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>abort</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_clock_t</name>
<block>{
<function_decl><type><name>vlc_tick_t</name></type> (<modifier>*</modifier><name>update</name>)<parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>reset</name>)<parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>vlc_tick_t</name></type> (<modifier>*</modifier><name>set_delay</name>)<parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>vlc_tick_t</name></type> (<modifier>*</modifier><name>to_system_locked</name>)<parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_clock_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>main_stream_to_system</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator>
<operator>(</operator><name>ts</name> <operator>*</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>coeff</name></name> <operator>/</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>rate</name></name> <operator>+</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_clock_main_reset</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AvgReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>coeff_avg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref_priority</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name></name> <operator>=</operator>
<name><name>main_clock</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_clock_on_update</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>clock</name><operator>-&gt;</operator><name>cbs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>clock</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_update</name></name><argument_list>(<argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name>frame_rate_base</name></expr></argument>,
<argument><expr><name><name>clock</name><operator>-&gt;</operator><name>cbs_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>vlc_clock_master_update</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>original_ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>original_ts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name>
<operator>||</operator> <name>system_now</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>ts</name> <init>= <expr><name>original_ts</name> <operator>+</operator> <name><name>clock</name><operator>-&gt;</operator><name>delay</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>system_now</name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name>
<operator>&amp;&amp;</operator> <name>ts</name> <operator>!=</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>instant_coeff</name> <init>= <expr><operator>(</operator><name>system_now</name> <operator>-</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>system</name></name><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>-</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>rate</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>instant_coeff</name> <operator>*=</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AvgUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>coeff_avg</name></name></expr></argument>, <argument><expr><name>instant_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <call><name>AvgGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>coeff_avg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref_priority</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name></name> <operator>=</operator>
<call><name>clock_point_Create</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>system_now</name> <operator>-</operator> <name>ts</name> <operator>*</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>coeff</name></name> <operator>/</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>(<argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_on_update</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>original_ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>,
<argument><expr><name>frame_rate_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_clock_master_reset</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_main_reset</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delta</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>+</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_on_update</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>vlc_clock_master_set_delay</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delta</name> <init>= <expr><name>delay</name> <operator>-</operator> <name><name>clock</name><operator>-&gt;</operator><name>delay</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>delta</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type>
<name>vlc_clock_monotonic_to_system_locked</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clock</name><operator>-&gt;</operator><name>priority</name></name> <operator>&lt;</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref_priority</name></name></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>pcr_delay</name> <init>=
<expr><ternary><condition><expr><name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name><operator>.</operator><name>system</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><operator>(</operator><name>ts</name> <operator>-</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name><operator>.</operator><name>stream</name></name><operator>)</operator> <operator>/</operator> <name>rate</name> <operator>+</operator>
<name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name><operator>.</operator><name>system</name></name> <operator>-</operator> <name>now</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>input_delay</name> <init>= <expr><name><name>main_clock</name><operator>-&gt;</operator><name>input_dejitter</name></name> <operator>+</operator> <name>pcr_delay</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>delay</name> <init>=
<expr><call><name>__MAX</name><argument_list>(<argument><expr><name>input_delay</name></expr></argument>, <argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>output_dejitter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref_priority</name></name> <operator>=</operator> <name><name>clock</name><operator>-&gt;</operator><name>priority</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>(<argument><expr><name>now</name> <operator>+</operator> <name>delay</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ts</name> <operator>-</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name><operator>.</operator><name>stream</name></name><operator>)</operator> <operator>/</operator> <name>rate</name>
<operator>+</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name><operator>.</operator><name>system</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>vlc_clock_slave_to_system_locked</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>INT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system</name> <init>= <expr><call><name>main_stream_to_system</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>system</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>system</name> <operator>=</operator> <call><name>vlc_clock_monotonic_to_system_locked</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>system</name> <operator>+</operator> <operator>(</operator><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>-</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name><operator>)</operator> <operator>*</operator> <name>rate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>vlc_clock_master_to_system_locked</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system</name> <init>= <expr><call><name>main_stream_to_system</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>system</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>system</name> <operator>=</operator> <call><name>vlc_clock_monotonic_to_system_locked</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>system</name> <operator>+</operator> <name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>*</operator> <name>rate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>vlc_clock_slave_update</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>computed</name> <init>= <expr><ternary><condition><expr><name>system_now</name> <operator>==</operator> <name>INT64_MAX</name></expr> ?</condition><then> <expr><name>INT64_MAX</name></expr>
</then><else>: <expr><call><name><name>clock</name><operator>-&gt;</operator><name>to_system_locked</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_on_update</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>computed</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name>frame_rate_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>computed</name> <operator>!=</operator> <name>INT64_MAX</name></expr> ?</condition><then> <expr><name>computed</name> <operator>-</operator> <name>system_now</name></expr> </then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_clock_slave_reset</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref_priority</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name></name> <operator>=</operator>
<call><name>clock_point_Create</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_on_update</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>vlc_clock_slave_set_delay</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_clock_Wait</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>max_duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>max_deadline</name> <init>=
<expr><ternary><condition><expr><name>max_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>system_now</name> <operator>+</operator> <name>max_duration</name></expr> </then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>main_clock</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <call><name><name>clock</name><operator>-&gt;</operator><name>to_system_locked</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>, <argument><expr><name>max_deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>vlc_clock_main_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_clock_main_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>main_clock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name></name> <operator>=</operator>
<call><name>clock_point_Create</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref_priority</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name></name> <operator>=</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator>
<call><name>clock_point_Create</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>input_dejitter</name></name> <operator>=</operator> <name>DEFAULT_PTS_DELAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>output_dejitter</name></name> <operator>=</operator> <name>AOUT_MAX_PTS_ADVANCE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AvgInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>coeff_avg</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>main_clock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_Abort</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_Reset</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_main_reset</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name></name> <operator>=</operator>
<call><name>clock_point_Create</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_SetFirstPcr</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name><operator>.</operator><name>system</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>(<argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref_priority</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name></name> <operator>=</operator>
<call><name>clock_point_Create</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_SetInputDejitter</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>input_dejitter</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_SetDejitter</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>dejitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>output_dejitter</name></name> <operator>=</operator> <name>dejitter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_ChangePause</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>now</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>paused</name> <operator>==</operator> <operator>(</operator><name><name>main_clock</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>paused</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>pause_date</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>system</name></name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name><operator>.</operator><name>system</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>first_pcr</name><operator>.</operator><name>system</name></name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name><operator>.</operator><name>system</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>wait_sync_ref</name><operator>.</operator><name>system</name></name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_Delete</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>vlc_clock_Update</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>clock</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>vlc_clock_UpdateVideo</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>clock</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name>frame_rate_base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_Reset</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>clock</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>vlc_clock_SetDelay</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>clock</name><operator>-&gt;</operator><name>set_delay</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>vlc_clock_ConvertToSystem</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system</name> <init>= <expr><call><name><name>clock</name><operator>-&gt;</operator><name>to_system_locked</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>system</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_ConvertArrayToSystem</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>ts_array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ts_count</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ts_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ts_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>clock</name><operator>-&gt;</operator><name>to_system_locked</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name><name>ts_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_clock_set_master_callbacks</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>vlc_clock_master_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>vlc_clock_master_reset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>set_delay</name></name> <operator>=</operator> <name>vlc_clock_master_set_delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>to_system_locked</name></name> <operator>=</operator> <name>vlc_clock_master_to_system_locked</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_clock_set_slave_callbacks</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>vlc_clock_slave_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>vlc_clock_slave_reset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>set_delay</name></name> <operator>=</operator> <name>vlc_clock_slave_set_delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>to_system_locked</name></name> <operator>=</operator> <name>vlc_clock_slave_to_system_locked</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_clock_t</name> <modifier>*</modifier></type><name>vlc_clock_main_Create</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_clock_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_clock_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>clock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>main_clock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>cbs_data</name></name> <operator>=</operator> <name>cbs_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clock</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>cbs</name> <operator>||</operator> <name><name>cbs</name><operator>-&gt;</operator><name>on_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>clock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>vlc_clock_main_CreateMaster</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_clock_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name> <init>= <expr><call><name>vlc_clock_main_Create</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>cbs_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_clock_master_reset</name><argument_list>(<argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_set_slave_callbacks</name><argument_list>(<argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_clock_set_master_callbacks</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rc</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>clock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>vlc_clock_main_CreateSlave</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_clock_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>unsigned</name></type> <name>priority</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>cat</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name>priority</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>priority</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name> <init>= <expr><call><name>vlc_clock_main_Create</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>,
<argument><expr><name>cbs_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_set_slave_callbacks</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rc</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>clock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>vlc_clock_CreateSlave</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_clock_main_CreateSlave</name><argument_list>(<argument><expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_clock_main_SetMaster</name><parameter_list>(<parameter><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name></decl></parameter>, <parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_clock_master_reset</name><argument_list>(<argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clock_set_slave_callbacks</name><argument_list>(<argument><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_clock_set_master_callbacks</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>vlc_clock_Delete</name><parameter_list>(<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_clock_main_t</name> <modifier>*</modifier></type><name>main_clock</name> <init>= <expr><name><name>clock</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clock</name> <operator>==</operator> <name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_clock_main_reset</name><argument_list>(<argument><expr><name>main_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>main_clock</name><operator>-&gt;</operator><name>rc</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_clock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
