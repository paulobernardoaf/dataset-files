<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\interface\dialog.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_extensions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<struct>struct <name>vlc_dialog_provider</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>dialog_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dialog_cbs</name></type> <name>cbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_cbs_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dialog_ext_update_cb</name></type> <name>pf_ext_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_ext_data</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>dialog_type</name>
<block>{
<decl><name>VLC_DIALOG_ERROR</name></decl>,
<decl><name>VLC_DIALOG_LOGIN</name></decl>,
<decl><name>VLC_DIALOG_QUESTION</name></decl>,
<decl><name>VLC_DIALOG_PROGRESS</name></decl>,
}</block>;</enum>

<struct>struct <name>dialog_answer</name>
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>dialog_type</name></name></type> <name>i_type</name></decl>;</decl_stmt>
<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_store</name></decl>;</decl_stmt>
}</block> <decl><name>login</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_action</name></decl>;</decl_stmt>
}</block> <decl><name>question</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>dialog</name>
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>dialog_type</name></name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ask_store</name></decl>;</decl_stmt>
}</block> <decl><name>login</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_dialog_question_type</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action2</name></decl>;</decl_stmt>
}</block> <decl><name>question</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_indeterminate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl>;</decl_stmt>
}</block> <decl><name>progress</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>vlc_dialog_id</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>dialog_type</name></name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_cancelled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_answered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_progress_indeterminate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_progress_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dialog_answer</name></name></type> <name>answer</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dialog_i11e_context</name>
<block>{
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type> <name>p_provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type> <name>p_id</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_dialog_provider</name> <modifier>*</modifier></type>
<name>get_dialog_provider</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_check_interact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b_check_interact</name> <operator>&amp;&amp;</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>no_interact</name></name><operator>)</operator> <operator>||</operator> <call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>=
<expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_dialog_provider</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_provider</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_provider</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialog_id_release</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_id</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>VLC_DIALOG_LOGIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_id</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_id</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_id</name><operator>-&gt;</operator><name>psz_progress_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libvlc_InternalDialogInit</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_provider</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_provider</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>dialog_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>pf_ext_update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_ext_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_dialog_provider</name> <operator>=</operator> <name>p_provider</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialog_cancel_locked</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_id</name><operator>-&gt;</operator><name>b_cancelled</name></name> <operator>||</operator> <name><name>p_id</name><operator>-&gt;</operator><name>b_answered</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>b_cancelled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_cancel</name></name><argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_dialog_id</name> <modifier>*</modifier></type>
<name>dialog_add_locked</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dialog_type</name></name></type> <name>i_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>dialog_array</name></name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<return>return <expr><name>p_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialog_remove_locked</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_idx</name> <init>= <expr><call><name>vlc_array_index_of_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>dialog_array</name></name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>dialog_array</name></name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_id</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_id_release</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialog_clear_all_locked</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>dialog_array</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name> <init>=
<expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>dialog_array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dialog_cancel_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>libvlc_InternalDialogClean</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_dialog_provider</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_provider</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_clear_all_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_dialog_provider</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_provider_set_callbacks</name></cpp:undef>
<function><type><name>void</name></type>
<name>vlc_dialog_provider_set_callbacks</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_dialog_cbs</name> <modifier>*</modifier></type><name>p_cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_clear_all_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_cbs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>*</operator><name>p_cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialog_wait_interrupted</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dialog_i11e_context</name></name> <modifier>*</modifier></type><name>p_context</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>p_provider</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>p_id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_cancel_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialog_wait</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dialog_type</name></name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dialog_answer</name></name> <modifier>*</modifier></type><name>p_answer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dialog_i11e_context</name></name></type> <name>context</name> <init>= <expr><block>{
<expr><operator>.</operator><name>p_provider</name> <operator>=</operator> <name>p_provider</name></expr>,
<expr><operator>.</operator><name>p_id</name> <operator>=</operator> <name>p_id</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_interrupt_register</name><argument_list>(<argument><expr><name>dialog_wait_interrupted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>p_id</name><operator>-&gt;</operator><name>b_cancelled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_id</name><operator>-&gt;</operator><name>b_answered</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_id</name><operator>-&gt;</operator><name>b_cancelled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_id</name><operator>-&gt;</operator><name>answer</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <name>i_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_answer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_id</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_id</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_interrupt_unregister</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_remove_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialog_display_error_va</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_error</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_error</name></name><argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_dialog_display_error_va</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_title</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_provider</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>dialog_display_error_va</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_GenericVa</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>VLC_MSG_ERR</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_display_error</name></cpp:undef>
<function><type><name>int</name></type>
<name>vlc_dialog_display_error</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_display_error_va</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialog_display_login_va</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_username</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_ask_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_login</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_cancel</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name> <init>= <expr><call><name>dialog_add_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>VLC_DIALOG_LOGIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_login</name></name><argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>,
<argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>psz_default_username</name></expr></argument>, <argument><expr><name>b_ask_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_id</name> <operator>=</operator> <name>p_id</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_dialog_wait_login_va</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_username</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_password</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_username</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ppsz_username</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ppsz_password</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>psz_fmt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_title</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_provider</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>dialog_display_login_va</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_id</name></expr></argument>, <argument><expr><name>psz_default_username</name></expr></argument>,
<argument><expr><name>p_store</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>p_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dialog_answer</name></name></type> <name>answer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>dialog_wait</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>VLC_DIALOG_LOGIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_username</name> <operator>=</operator> <name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_username</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_password</name> <operator>=</operator> <name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_password</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_store</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_store</name> <operator>=</operator> <name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>b_store</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_wait_login</name></cpp:undef>
<function><type><name>int</name></type>
<name>vlc_dialog_wait_login</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_username</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_password</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_username</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_wait_login_va</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>ppsz_username</name></expr></argument>, <argument><expr><name>ppsz_password</name></expr></argument>,
<argument><expr><name>p_store</name></expr></argument>,<argument><expr><name>psz_default_username</name></expr></argument>,
<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialog_display_question_va</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_id</name></decl></parameter>,
<parameter><decl><type><name>vlc_dialog_question_type</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_question</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_cancel</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name> <init>= <expr><call><name>dialog_add_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>VLC_DIALOG_QUESTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_question</name></name><argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>,
<argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>psz_cancel</name></expr></argument>, <argument><expr><name>psz_action1</name></expr></argument>,
<argument><expr><name>psz_action2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_id</name> <operator>=</operator> <name>p_id</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_dialog_wait_question_va</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>vlc_dialog_question_type</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_fmt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_title</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>psz_cancel</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_provider</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>dialog_display_question_va</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_id</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>,
<argument><expr><name>psz_cancel</name></expr></argument>, <argument><expr><name>psz_action1</name></expr></argument>,
<argument><expr><name>psz_action2</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>p_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dialog_answer</name></name></type> <name>answer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>dialog_wait</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>VLC_DIALOG_QUESTION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>question</name><operator>.</operator><name>i_action</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>question</name><operator>.</operator><name>i_action</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>question</name><operator>.</operator><name>i_action</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_wait_question</name></cpp:undef>
<function><type><name>int</name></type>
<name>vlc_dialog_wait_question</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>vlc_dialog_question_type</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_wait_question_va</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>psz_cancel</name></expr></argument>,
<argument><expr><name>psz_action1</name></expr></argument>, <argument><expr><name>psz_action2</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>,
<argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>display_progress_va</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_indeterminate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_progress</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_update_progress</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_cancel</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name> <init>= <expr><call><name>dialog_add_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>VLC_DIALOG_PROGRESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>b_progress_indeterminate</name></name> <operator>=</operator> <name>b_indeterminate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>psz_progress_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_display_progress</name></name><argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>,
<argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>b_indeterminate</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>,
<argument><expr><name>psz_cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_id</name> <operator>=</operator> <name>p_id</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_dialog_id</name> <modifier>*</modifier></type>
<name>vlc_dialog_display_progress_va</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_indeterminate</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_title</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_provider</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>display_progress_va</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_id</name></expr></argument>, <argument><expr><name>b_indeterminate</name></expr></argument>,
<argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>psz_cancel</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>,
<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><name>p_id</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_display_progress</name></cpp:undef>
<function><type><name>vlc_dialog_id</name> <modifier>*</modifier></type>
<name>vlc_dialog_display_progress</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_indeterminate</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name> <init>=
<expr><call><name>vlc_dialog_display_progress_va</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>b_indeterminate</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>,
<argument><expr><name>psz_cancel</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialog_update_progress</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_update_progress</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>vlc_dialog_is_cancelled</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_id</name><operator>-&gt;</operator><name>b_progress_indeterminate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_value</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_id</name><operator>-&gt;</operator><name>psz_progress_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>psz_progress_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>p_provider</name><operator>-&gt;</operator><name>cbs</name><operator>.</operator><name>pf_update_progress</name></name><argument_list>(<argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_cbs_data</name></name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>f_value</name></expr></argument>,
<argument><expr><name><name>p_id</name><operator>-&gt;</operator><name>psz_progress_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_update_progress</name></cpp:undef>
<function><type><name>int</name></type>
<name>vlc_dialog_update_progress</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dialog_update_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>f_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_dialog_update_progress_text_va</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>dialog_update_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>f_value</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_update_progress_text</name></cpp:undef>
<function><type><name>int</name></type>
<name>vlc_dialog_update_progress_text</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_update_progress_text_va</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>f_value</name></expr></argument>,
<argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_release</name></cpp:undef>
<function><type><name>void</name></type>
<name>vlc_dialog_release</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_cancel_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_remove_locked</name><argument_list>(<argument><expr><name>p_provider</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_is_cancelled</name></cpp:undef>
<function><type><name>bool</name></type>
<name>vlc_dialog_is_cancelled</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_cancelled</name> <init>= <expr><name><name>p_id</name><operator>-&gt;</operator><name>b_cancelled</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b_cancelled</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_dialog_id_set_context</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>p_context</name></name> <operator>=</operator> <name>p_context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>vlc_dialog_id_get_context</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_context</name> <init>= <expr><name><name>p_id</name><operator>-&gt;</operator><name>p_context</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_context</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialog_id_post</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dialog_answer</name></name> <modifier>*</modifier></type><name>p_answer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_answer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>b_cancelled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>answer</name></name> <operator>=</operator> <operator>*</operator><name>p_answer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>b_answered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_id</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_id</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_id</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_id_release</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_dialog_id_post_login</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_username</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_password</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dialog_answer</name></name></type> <name>answer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>i_type</name> <operator>=</operator> <name>VLC_DIALOG_LOGIN</name></expr>,
<expr><operator>.</operator><name><name>u</name><operator>.</operator><name>login</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>b_store</name> <operator>=</operator> <name>b_store</name></expr>,
<expr><operator>.</operator><name>psz_username</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_username</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>psz_password</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_username</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_password</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>answer</name><operator>.</operator><name>u</name><operator>.</operator><name>login</name><operator>.</operator><name>psz_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_id_post</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dialog_id_post</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>answer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_dialog_id_post_action</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dialog_answer</name></name></type> <name>answer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>i_type</name> <operator>=</operator> <name>VLC_DIALOG_QUESTION</name></expr>,
<expr><operator>.</operator><name><name>u</name><operator>.</operator><name>question</name></name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>i_action</name> <operator>=</operator> <name>i_action</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dialog_id_post</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>answer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_dialog_id_dismiss</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dialog_id_post</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_dialog_provider_set_ext_callback</name></cpp:undef>
<function><type><name>void</name></type>
<name>vlc_dialog_provider_set_ext_callback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>vlc_dialog_ext_update_cb</name></type> <name>pf_update</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>pf_ext_update</name></name> <operator>=</operator> <name>pf_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_ext_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_ext_dialog_update</name></cpp:undef>
<function><type><name>int</name></type>
<name>vlc_ext_dialog_update</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_ext_dialog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_dialog_provider</name> <modifier>*</modifier></type><name>p_provider</name> <init>= <expr><call><name>get_dialog_provider</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_provider</name><operator>-&gt;</operator><name>pf_ext_update</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>p_provider</name><operator>-&gt;</operator><name>pf_ext_update</name></name><argument_list>(<argument><expr><name>p_ext_dialog</name></expr></argument>, <argument><expr><name><name>p_provider</name><operator>-&gt;</operator><name>p_ext_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_provider</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
