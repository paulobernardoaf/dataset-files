<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\os2\thread.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/builtin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_threadvar_t</name></type> <name>thread_key</name></decl>;</decl_stmt>

<struct>struct <name>vlc_thread</name>
<block>{
<decl_stmt><decl><type><name>TID</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEV</name></type> <name>cancel_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEV</name></type> <name>done_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cancel_sock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>detached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>killable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>killed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type><name>cleaners</name></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cancel_self</name> <parameter_list>(<parameter><decl><type><name>PVOID</name></type> <name>dummy</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>ULONG</name></type> <name>vlc_DosWaitEventSemEx</name><parameter_list>( <parameter><decl><type><name>HEV</name></type> <name>hev</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>ulTimeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMUX</name></type> <name>hmux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SEMRECORD</name></type> <name><name>asr</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>ulUser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>vlc_threadvar_get</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>th</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>killable</name></name></expr> )</condition>
<block>{<block_content>




<if_stmt><if>if<condition>( <expr><name>hev</name> <operator>!=</operator> <name>NULLHANDLE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DosWaitEventSem</name><argument_list>( <argument><expr><name>hev</name></expr></argument>, <argument><expr><name>ulTimeout</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>DosSleep</name><argument_list>( <argument><expr><name>ulTimeout</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>hev</name> <operator>!=</operator> <name>NULLHANDLE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>asr</name><index>[ <expr><name>n</name></expr> ]</index></name><operator>.</operator><name>hsemCur</name> <operator>=</operator> <operator>(</operator> <name>HSEM</name> <operator>)</operator><name>hev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asr</name><index>[ <expr><name>n</name></expr> ]</index></name><operator>.</operator><name>ulUser</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asr</name><index>[ <expr><name>n</name></expr> ]</index></name><operator>.</operator><name>hsemCur</name> <operator>=</operator> <operator>(</operator> <name>HSEM</name> <operator>)</operator><name><name>th</name><operator>-&gt;</operator><name>cancel_event</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asr</name><index>[ <expr><name>n</name></expr> ]</index></name><operator>.</operator><name>ulUser</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosCreateMuxWaitSem</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmux</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>asr</name></expr></argument>, <argument><expr><name>DCMW_WAIT_ANY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosWaitMuxWaitSem</name><argument_list>( <argument><expr><name>hmux</name></expr></argument>, <argument><expr><name>ulTimeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulUser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosCloseMuxWaitSem</name><argument_list>( <argument><expr><name>hmux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ulUser</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cancel_self</name><argument_list>( <argument><expr><name>th</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERROR_INTERRUPT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NO_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ULONG</name></type> <name>vlc_WaitForSingleObject</name> <parameter_list>(<parameter><decl><type><name>HEV</name></type> <name>hev</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>ulTimeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_DosWaitEventSemEx</name><argument_list>( <argument><expr><name>hev</name></expr></argument>, <argument><expr><name>ulTimeout</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ULONG</name></type> <name>vlc_Sleep</name> <parameter_list>(<parameter><decl><type><name>ULONG</name></type> <name>ulTimeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name> <init>= <expr><call><name>vlc_DosWaitEventSemEx</name><argument_list>( <argument><expr><name>NULLHANDLE</name></expr></argument>, <argument><expr><name>ulTimeout</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name>rc</name> <operator>!=</operator> <name>ERROR_TIMEOUT</name> <operator>)</operator></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>super_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_cond_t</name></type> <name>super_variable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>vlc_rwlock_t</name></type> <name>config_lock</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>_CRT_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_CRT_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>_System</name></type> <name>_DLL_InitTerm</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>unsigned</name> <name>long</name> <name>_System</name></type> <name>_DLL_InitTerm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hmod</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name> <argument_list>(<argument><expr><name>hmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>flag</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr> :</case> 
<if_stmt><if>if<condition>(<expr><call><name>_CRT_init</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_threadvar_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>thread_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr> :</case> 
<expr_stmt><expr><call><name>vlc_rwlock_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_threadvar_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>thread_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_CRT_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>


<struct>struct <name>vlc_threadvar</name>
<block>{
<decl_stmt><decl><type><name>PULONG</name></type> <name>id</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>vlc_threadvar_last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>vlc_threadvar_create</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name> <modifier>*</modifier></type><name>p_tls</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destr</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>var</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosAllocThreadLocalMemory</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EAGAIN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>destr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_tls</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>vlc_threadvar_last</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vlc_threadvar_last</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_threadvar_delete</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name> <modifier>*</modifier></type><name>p_tls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>*</operator><name>p_tls</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>vlc_threadvar_last</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosFreeThreadLocalMemory</name><argument_list>( <argument><expr><name><name>var</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_threadvar_set</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>key</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator> <name>ULONG</name> <operator>)</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vlc_threadvar_get</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator> <name>void</name> <operator>*</operator> <operator>)</operator><operator>*</operator><name><name>key</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>vlc_threads_setup</name> <parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_libvlc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_thread_cleanup</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_threadvar_t</name></type> <name>key</name></decl>;</decl_stmt>

<label><name>retry</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <name>vlc_threadvar_last</name></expr>;</init> <condition><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>key</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>vlc_threadvar_get</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>destroy</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_threadvar_set</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>key</name><operator>-&gt;</operator><name>destroy</name></name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>detached</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DosCloseEventSem</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosCloseEventSem</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>done_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>soclose</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_entry</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_threadvar_set</name> <argument_list>(<argument><expr><name>thread_key</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name><name>th</name><operator>-&gt;</operator><name>entry</name></name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>done_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_thread_cleanup</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_clone_attr</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>detached</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>th</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>th</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>detached</name></name> <operator>=</operator> <name>detached</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DosCreateEventSem</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>DosCreateEventSem</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>done_event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_sock</name></name> <operator>=</operator> <call><name>socket</name> <argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>th</name><operator>-&gt;</operator><name>cancel_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>_beginthread</name> <argument_list>(<argument><expr><name>vlc_entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>th</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_handle</name> <operator>=</operator> <name>th</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>priority</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DosSetPriority</name><argument_list>(<argument><expr><name>PRTYS_THREAD</name></expr></argument>,
<argument><expr><call><name>HIBYTE</name><argument_list>(<argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>soclose</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosCloseEventSem</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosCloseEventSem</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>done_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ENOMEM</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_clone</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_clone_attr</name> <argument_list>(<argument><expr><name>p_handle</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_join</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vlc_WaitForSingleObject</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>done_event</name></name></expr></argument>, <argument><expr><name>SEM_INDEFINITE_WAIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>( <expr><name>rc</name> <operator>==</operator> <name>ERROR_INTERRUPT</name></expr> )</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>done_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>soclose</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>th</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_clone_detach</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_handle</name> <operator>=</operator> <operator>&amp;</operator><name>th</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_clone_attr</name> <argument_list>(<argument><expr><name>p_handle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_set_priority</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>DosSetPriority</name><argument_list>(<argument><expr><name>PRTYS_THREAD</name></expr></argument>,
<argument><expr><call><name>HIBYTE</name><argument_list>(<argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>vlc_thread_id</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_gettid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cancel_self</name> <parameter_list>(<parameter><decl><type><name>PVOID</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>th</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_cancel</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>( <argument><expr><name><name>thread_id</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>so_cancel</name><argument_list>( <argument><expr><name><name>thread_id</name><operator>-&gt;</operator><name>cancel_sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_savecancel</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>vlc_threadvar_get</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>killable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_restorecancel</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>vlc_threadvar_get</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name>false</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>killable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>state</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_testcancel</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>vlc_threadvar_get</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 



<if_stmt><if>if<condition>( <expr><call><name>DosWaitEventSem</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NO_ERROR</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cancel_self</name><argument_list>( <argument><expr><name>th</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>&amp;&amp;</operator> <name><name>th</name><operator>-&gt;</operator><name>killed</name></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>proc</name></name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>done_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>vlc_thread_cleanup</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_endthread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_control_cancel</name> <parameter_list>(<parameter><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type><name>cleaner</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>vlc_threadvar_get</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>cleaner</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>cleaner</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name> <operator>=</operator> <name>cleaner</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>cleaners</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_select</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rdset</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wrset</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>exset</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>vlc_threadvar_get</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>th</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_sock</name></name></expr></argument>, <argument><expr><name>rdset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nfds</name> <operator>=</operator> <call><name>MAX</name><argument_list>( <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>cancel_sock</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>( <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>rdset</name></expr></argument>, <argument><expr><name>wrset</name></expr></argument>, <argument><expr><name>exset</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>


<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<function_decl><type><name>int</name></type> <name>vlc_poll_os2</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<function><type><name>int</name></type> <name>vlc_poll_os2</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>rdset</name></decl>, <decl><type ref="prev"/><name>wrset</name></decl>, <decl><type ref="prev"/><name>exset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>non_sockets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>( <argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>( <argument><expr><operator>&amp;</operator><name>exset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fstat</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbuf</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>errno</name> <operator>=</operator> <literal type="number">0</literal><operator>,</operator> <operator>!</operator><call><name>S_ISSOCK</name><argument_list>( <argument><expr><name><name>stbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <operator>!</operator><name>errno</name> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>( <argument><expr><name><name>stbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator> <name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator>
<operator>(</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLPRI</name> <operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><name>POLLNVAL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>non_sockets</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>val</name> <operator>&lt;</operator> <name>fd</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator> <name>unsigned</name> <operator>)</operator><name>fd</name> <operator>&gt;=</operator> <name>FD_SETSIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLIN</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLPRI</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>non_sockets</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>( <expr><name>val</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>ptv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>div_t</name></type> <name>d</name> <init>= <expr><call><name>div</name><argument_list>( <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>quot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptv</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_select</name><argument_list>( <argument><expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exset</name></expr></argument>, <argument><expr><name>ptv</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>revents</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><call><name>FD_ISSET</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>POLLIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator>
<operator>|</operator> <operator>(</operator> <ternary><condition><expr><call><name>FD_ISSET</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>POLLOUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator>
<operator>|</operator> <operator>(</operator> <ternary><condition><expr><call><name>FD_ISSET</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exset</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>POLLPRI</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fds</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>revents</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q2LL</name><parameter_list>( <parameter><type><name>q</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( *( long long * )&amp;( q ))</cpp:value></cpp:define>


<function><type><name>vlc_tick_t</name></type> <name>vlc_tick_now</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>QWORD</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>freq</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DosTmrQueryTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>DosTmrQueryFreq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name> <init>= <expr><call><name>lldiv</name> <argument_list>(<argument><expr><call><name>Q2LL</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_tick_wait</name></cpp:undef>
<function><type><name>void</name></type> <name>vlc_tick_wait</name> <parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>delay</name> <operator>=</operator> <operator>(</operator><name>deadline</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>delay</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0x7fffffff</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_Sleep</name> <argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_tick_sleep</name></cpp:undef>
<function><type><name>void</name></type> <name>vlc_tick_sleep</name> <parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_wait</name> <argument_list>(<argument><expr><call><name>vlc_tick_now</name> <argument_list>()</argument_list></call> <operator>+</operator> <name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<struct>struct <name>vlc_timer</name>
<block>{
<decl_stmt><decl><type><name>TID</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEV</name></type> <name>hev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTIMER</name></type> <name>htimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>quit</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_timer_do</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_timer</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DosWaitEventSem</name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>hev</name></name></expr></argument>, <argument><expr><name>SEM_INDEFINITE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosResetEventSem</name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>hev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>timer</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>interval</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DosAsyncTimer</name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><operator>(</operator><name>HSEM</name><operator>)</operator><name><name>timer</name><operator>-&gt;</operator><name>hev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_timer_create</name> <parameter_list>(<parameter><decl><type><name>vlc_timer_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_timer</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>timer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosCreateEventSem</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>hev</name></name></expr></argument>, <argument><expr><name>DC_SEM_SHARED</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name> <operator>=</operator> <name>NULLHANDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>_beginthread</name> <argument_list>(<argument><expr><name>vlc_timer_do</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_timer_destroy</name> <parameter_list>(<parameter><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name> <operator>!=</operator> <name>NULLHANDLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DosStopTimer</name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosPostEventSem</name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>hev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosWaitThread</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>DCWW_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosCloseEventSem</name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>hev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_timer_schedule</name> <parameter_list>(<parameter><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name> <operator>!=</operator> <name>NULLHANDLE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DosStopTimer</name> <argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name> <operator>=</operator> <name>NULLHANDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>VLC_TIMER_DISARM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>absolute</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>-=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>interval</name> <operator>=</operator> <operator>(</operator><name>interval</name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DosAsyncTimer</name> <argument_list>(<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HSEM</name><operator>)</operator><name><name>timer</name><operator>-&gt;</operator><name>hev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>htimer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>vlc_timer_getoverrun</name> <parameter_list>(<parameter><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>timer</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name></type> <name>vlc_GetCPUCount</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>numprocs</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DosQuerySysInfo</name><argument_list>(<argument><expr><name>QSV_NUMPROCESSORS</name></expr></argument>, <argument><expr><name>QSV_NUMPROCESSORS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>numprocs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numprocs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>numprocs</name></expr>;</return>
</block_content>}</block></function>
</unit>
