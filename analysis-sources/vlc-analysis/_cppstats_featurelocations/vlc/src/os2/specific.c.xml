<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\os2\specific.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_IPC_PIPE</name></cpp:macro> <cpp:value>"\\PIPE\\VLC\\IPC\\"VERSION</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPC_CMD_GO</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPC_CMD_ENQUEUE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPC_CMD_QUIT</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_fmode_bin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HPIPE</name></type> <name>hpipeIPC</name> <init>= <expr><name>NULLHANDLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tidIPCFirst</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tidIPCHelper</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_to_playlist</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>play_now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>media</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_item_AddOptions</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>options_count</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_AppendOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>play_now</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_playlist_Start</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IPCHelperThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ulCmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>cbActual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_options</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>p_playlist</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>DosConnectNPipe</name><argument_list>( <argument><expr><name>hpipeIPC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DosRead</name><argument_list>( <argument><expr><name>hpipeIPC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulCmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ulCmd</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>ulCmd</name> <operator>==</operator> <name>IPC_CMD_QUIT</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>DosRead</name><argument_list>( <argument><expr><name>hpipeIPC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_argc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>i_argc</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppsz_argv</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_argc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>ppsz_argv</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_opt</name> <operator>&lt;</operator> <name>i_argc</name></expr>;</condition> <incr><expr><name>i_opt</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><call><name>DosRead</name><argument_list>( <argument><expr><name>hpipeIPC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DosRead</name><argument_list>( <argument><expr><name>hpipeIPC</name></expr></argument>, <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_playlist</name> <operator>=</operator> <call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>main_playlist</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_opt</name> <operator>&lt;</operator> <name>i_argc</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i_options</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while<condition>( <expr><name>i_opt</name> <operator>+</operator> <name>i_options</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>i_argc</name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name> <operator>+</operator> <name>i_options</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_options</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>( <expr><name>p_playlist</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_to_playlist</name><argument_list>( <argument><expr><name>p_playlist</name></expr></argument>, <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument>,
<argument><expr><name>i_opt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ulCmd</name> <operator>!=</operator> <name>IPC_CMD_ENQUEUE</name></expr></argument>,
<argument><expr><name>i_options</name></expr></argument>,
<argument><expr><operator>(</operator> <name>char</name> <specifier>const</specifier> <operator>*</operator><operator>*</operator> <operator>)</operator>
<operator>(</operator> <ternary><condition><expr><name>i_options</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr> </then><else>:
<expr><name>NULL</name></expr></else></ternary> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_options</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_options</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name><operator>++</operator></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_argv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>( <expr><operator>!</operator><call><name>DosDisConnectNPipe</name><argument_list>( <argument><expr><name>hpipeIPC</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>ulCmd</name> <operator>!=</operator> <name>IPC_CMD_QUIT</name></expr> )</condition>;</do>

<expr_stmt><expr><call><name>DosClose</name><argument_list>( <argument><expr><name>hpipeIPC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hpipeIPC</name> <operator>=</operator> <name>NULLHANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tidIPCFirst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tidIPCHelper</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>system_Init</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>_fmode_bin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmode</name><argument_list>( <argument><expr><call><name>fileno</name><argument_list>( <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><name>void</name></type> <name>system_Configure</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_argv</name><index>[]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"high-priority"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>DosSetPriority</name><argument_list>( <argument><expr><name>PRTYS_PROCESS</name></expr></argument>, <argument><expr><name>PRTYC_REGULAR</name></expr></argument>, <argument><expr><name>PRTYD_MAXIMUM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"raised process priority"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not raise process priority"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one-instance"</literal></expr></argument> )</argument_list></call>
<operator>||</operator> <operator>(</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one-instance-when-started-from-file"</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"started-from-file"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HPIPE</name></type> <name>hpipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>ulAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one instance mode ENABLED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosOpen</name><argument_list>( <argument><expr><name>VLC_IPC_PIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hpipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulAction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>OPEN_ACTION_OPEN_IF_EXISTS</name></expr></argument>,
<argument><expr><name>OPEN_ACCESS_READWRITE</name> <operator>|</operator> <name>OPEN_SHARE_DENYREADWRITE</name> <operator>|</operator>
<name>OPEN_FLAGS_FAIL_ON_ERROR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>ERROR_PIPE_BUSY</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DosWaitNPipe</name><argument_list>( <argument><expr><name>VLC_IPC_PIPE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosCreateNPipe</name><argument_list>( <argument><expr><name>VLC_IPC_PIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hpipeIPC</name></expr></argument>,
<argument><expr><name>NP_ACCESS_DUPLEX</name></expr></argument>,
<argument><expr><name>NP_WAIT</name> <operator>|</operator> <name>NP_TYPE_MESSAGE</name> <operator>|</operator>
<name>NP_READMODE_MESSAGE</name> <operator>|</operator> <literal type="number">0x01</literal></expr></argument>,
<argument><expr><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one instance mode DISABLED "</literal>
<literal type="string">"(a named pipe couldn't be created)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>tidIPCFirst</name> <operator>=</operator> <call><name>_gettid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>tidIPCHelper</name> <operator>=</operator> <call><name>_beginthread</name><argument_list>( <argument><expr><name>IPCHelperThread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>tidIPCHelper</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"one instance mode DISABLED "</literal>
<literal type="string">"(IPC helper thread couldn't be created)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tidIPCFirst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ulCmd</name> <init>= <expr><ternary><condition><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"playlist-enqueue"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>IPC_CMD_ENQUEUE</name></expr> </then><else>: <expr><name>IPC_CMD_GO</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>cbActual</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>DosWrite</name><argument_list>( <argument><expr><name>hpipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulCmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ulCmd</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>DosWrite</name><argument_list>( <argument><expr><name>hpipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_argc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>i_argc</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_opt</name> <operator>&lt;</operator> <name>i_argc</name></expr>;</condition> <incr><expr><name>i_opt</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mrl</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <call><name>vlc_path2uri</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>mrl</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <operator>(</operator> <name>char</name> <operator>*</operator> <operator>)</operator><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>DosWrite</name><argument_list>( <argument><expr><name>hpipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DosWrite</name><argument_list>( <argument><expr><name>hpipe</name></expr></argument>, <argument><expr><name>mrl</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>mrl</name> <operator>!=</operator> <name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name></expr> ]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>DosClose</name><argument_list>( <argument><expr><name>hpipe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>system_End</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>system_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>tidIPCFirst</name> <operator>==</operator> <call><name>_gettid</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HPIPE</name></type> <name>hpipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>ulAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>cbActual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosOpen</name><argument_list>( <argument><expr><name>VLC_IPC_PIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hpipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulAction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>OPEN_ACTION_OPEN_IF_EXISTS</name></expr></argument>,
<argument><expr><name>OPEN_ACCESS_READWRITE</name> <operator>|</operator> <name>OPEN_SHARE_DENYREADWRITE</name> <operator>|</operator>
<name>OPEN_FLAGS_FAIL_ON_ERROR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>ERROR_PIPE_BUSY</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DosWaitNPipe</name><argument_list>( <argument><expr><name>VLC_IPC_PIPE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DosSleep</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while<condition>( <expr><name>rc</name></expr> )</condition>;</do>


<decl_stmt><decl><type><name>ULONG</name></type> <name>ulCmd</name> <init>= <expr><name>IPC_CMD_QUIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DosWrite</name><argument_list>( <argument><expr><name>hpipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulCmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ulCmd</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbActual</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosClose</name><argument_list>( <argument><expr><name>hpipe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TID</name></type> <name>tid</name> <init>= <expr><name>tidIPCHelper</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DosWaitThread</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><name>DCWW_WAIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
