<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\preparser\preparser.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc/background_worker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/input_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/input_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preparser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fetcher.h"</cpp:file></cpp:include>

<struct>struct <name>input_preparser_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_bool</name></type> <name>deactivated</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>input_preparser_req_t</name>
<block>{
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_meta_request_option_t</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>input_preparser_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>
}</block></struct></type> <name>input_preparser_req_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>input_preparser_task_t</name>
<block>{
<decl_stmt><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_preparser_t</name><modifier>*</modifier></type> <name>preparser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>preparse_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_bool</name></type> <name>done</name></decl>;</decl_stmt>
}</block></struct></type> <name>input_preparser_task_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>input_preparser_req_t</name> <modifier>*</modifier></type><name>ReqCreate</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>input_item_meta_request_option_t</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>input_preparser_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>userdata</name></name> <operator>=</operator> <name>userdata</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReqHold</name><parameter_list>(<parameter><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReqRelease</name><parameter_list>(<parameter><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_atomic_rc_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OnParserEnded</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>task_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_preparser_task_t</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><name>task_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>done</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>background_worker_RequestProbe</name><argument_list>( <argument><expr><name><name>task</name><operator>-&gt;</operator><name>preparser</name><operator>-&gt;</operator><name>worker</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OnParserSubtreeAdded</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>subtree</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>task_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_preparser_task_t</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><name>task_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_subtree_added</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_subtree_added</name></name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>subtree</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PreparserOpenInput</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>preparser_</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>req_</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_preparser_t</name><modifier>*</modifier></type> <name>preparser</name> <init>= <expr><name>preparser_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>req_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_preparser_task_t</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <name/></sizeof>*<name>task</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>task</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>input_item_parser_cbs_t</name></type> <name>cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_ended</name> <operator>=</operator> <name>OnParserEnded</name></expr>,
<expr><operator>.</operator><name>on_subtree_added</name> <operator>=</operator> <name>OnParserSubtreeAdded</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>VLC_ETIMEOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>done</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>preparser</name></name> <operator>=</operator> <name>preparser_</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>preparse_status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <call><name>input_item_Parse</name><argument_list>( <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>,
<argument><expr><name>task</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>task</name><operator>-&gt;</operator><name>parser</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>task</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>ITEM_PREPARSE_FAILED</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PreparserProbeInput</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>preparser_</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>task_</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_preparser_task_t</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><name>task_</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>done</name></name></expr></argument> )</argument_list></call></expr>;</return>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>preparser_</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_art_fetch_ended</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fetched</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>fetched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_preparser_task_t</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_SetPreparsed</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>preparse_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ReqRelease</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>input_fetcher_callbacks_t</name></type> <name>input_fetcher_callbacks</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_art_fetch_ended</name> <operator>=</operator> <name>on_art_fetch_ended</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PreparserCloseInput</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>preparser_</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>task_</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_preparser_task_t</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><name>task_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_preparser_req_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_preparser_t</name><modifier>*</modifier></type> <name>preparser</name> <init>= <expr><name>preparser_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>state</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_SUCCESS</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ITEM_PREPARSE_DONE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_ETIMEOUT</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ITEM_PREPARSE_TIMEOUT</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ITEM_PREPARSE_FAILED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>input_item_parser_id_Release</name><argument_list>( <argument><expr><name><name>task</name><operator>-&gt;</operator><name>parser</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_FETCH_ANY</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>preparse_status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReqHold</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>input_fetcher_Push</name><argument_list>(<argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_FETCH_ANY</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>input_fetcher_callbacks</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ReqRelease</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetPreparsed</name><argument_list>( <argument><expr><name>item</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReqHoldVoid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>ReqHold</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ReqReleaseVoid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>ReqRelease</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>input_preparser_t</name><modifier>*</modifier></type> <name>input_preparser_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_preparser_t</name><modifier>*</modifier></type> <name>preparser</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <name/></sizeof>*<name>preparser</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker_config</name></name></type> <name>conf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>default_timeout</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"preparse-timeout"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>max_threads</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"preparse-threads"</literal></expr></argument> )</argument_list></call></expr>,
<expr><operator>.</operator><name>pf_start</name> <operator>=</operator> <name>PreparserOpenInput</name></expr>,
<expr><operator>.</operator><name>pf_probe</name> <operator>=</operator> <name>PreparserProbeInput</name></expr>,
<expr><operator>.</operator><name>pf_stop</name> <operator>=</operator> <name>PreparserCloseInput</name></expr>,
<expr><operator>.</operator><name>pf_release</name> <operator>=</operator> <name>ReqReleaseVoid</name></expr>,
<expr><operator>.</operator><name>pf_hold</name> <operator>=</operator> <name>ReqHoldVoid</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>preparser</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>preparser</name><operator>-&gt;</operator><name>worker</name></name> <operator>=</operator> <call><name>background_worker_New</name><argument_list>( <argument><expr><name>preparser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>preparser</name> <operator>||</operator> <operator>!</operator><name><name>preparser</name><operator>-&gt;</operator><name>worker</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>preparser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>preparser</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name> <operator>=</operator> <call><name>input_fetcher_New</name><argument_list>( <argument><expr><name>parent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>preparser</name><operator>-&gt;</operator><name>deactivated</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"unable to create art fetcher"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>preparser</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_preparser_Push</name><parameter_list>( <parameter><decl><type><name>input_preparser_t</name> <modifier>*</modifier></type><name>preparser</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>input_item_meta_request_option_t</name></type> <name>i_options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>input_preparser_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>preparser</name><operator>-&gt;</operator><name>deactivated</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>input_item_type_e</name></name></type> <name>i_type</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_net</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>b_net</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_options</name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_DO_INTERACT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>b_preparse_interact</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ITEM_TYPE_NODE</name></expr>:</case>
<case>case <expr><name>ITEM_TYPE_FILE</name></expr>:</case>
<case>case <expr><name>ITEM_TYPE_DIRECTORY</name></expr>:</case>
<case>case <expr><name>ITEM_TYPE_PLAYLIST</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_net</name> <operator>||</operator> <name>i_options</name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_SCOPE_NETWORK</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>cbs</name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ITEM_PREPARSE_SKIPPED</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name><name>struct</name> <name>input_preparser_req_t</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>ReqCreate</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>i_options</name></expr></argument>,
<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>background_worker_Push</name><argument_list>(<argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>worker</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>&amp;&amp;</operator> <name><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cbs</name><operator>-&gt;</operator><name>on_preparse_ended</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ITEM_PREPARSE_FAILED</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ReqRelease</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_preparser_fetcher_Push</name><parameter_list>( <parameter><decl><type><name>input_preparser_t</name> <modifier>*</modifier></type><name>preparser</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>input_item_meta_request_option_t</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>input_fetcher_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_fetcher_Push</name><argument_list>( <argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_preparser_Cancel</name><parameter_list>( <parameter><decl><type><name>input_preparser_t</name> <modifier>*</modifier></type><name>preparser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>background_worker_Cancel</name><argument_list>( <argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>worker</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_preparser_Deactivate</name><parameter_list>( <parameter><decl><type><name>input_preparser_t</name><modifier>*</modifier></type> <name>preparser</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>preparser</name><operator>-&gt;</operator><name>deactivated</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>background_worker_Cancel</name><argument_list>( <argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>worker</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_preparser_Delete</name><parameter_list>( <parameter><decl><type><name>input_preparser_t</name> <modifier>*</modifier></type><name>preparser</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>worker</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_fetcher_Delete</name><argument_list>( <argument><expr><name><name>preparser</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>preparser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
