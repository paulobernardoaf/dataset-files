<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\test\mrl_helpers.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../input/mrl_helpers.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RESULT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>results</name><index>[<expr><name>MAX_RESULT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
}</block> <decl><name><name>testcase</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"!/hello.zip!/goodbye.rar"</literal></expr>,
<expr><block>{ <expr><literal type="string">"hello.zip"</literal></expr>, <expr><literal type="string">"goodbye.rar"</literal></expr> }</block></expr>, <expr><name>NULL</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"!/hello.zip!/goodbye.rar?t=0&amp;s=0"</literal></expr>,
<expr><block>{ <expr><literal type="string">"hello.zip"</literal></expr>, <expr><literal type="string">"goodbye.rar"</literal></expr> }</block></expr>, <expr><literal type="string">"t=0&amp;s=0"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"!/hello.zip!/goodbye.rar?"</literal></expr>,
<expr><block>{ <expr><literal type="string">"hello.zip"</literal></expr>, <expr><literal type="string">"goodbye.rar"</literal></expr> }</block></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"!/he%20%25""</literal><name><name>llo</name><operator>.</operator><name>zip</name></name><operator>!</operator><operator>/</operator><name>good</name><operator>%</operator><literal type="number">2520bye</literal><operator>.</operator><name>rar</name><literal type="string">",
{ "</literal><name>he</name> <operator>%</operator><name><name>llo</name><operator>.</operator><name>zip</name></name><literal type="string">", "</literal><name>good</name><operator>%</operator><literal type="number">20bye</literal><operator>.</operator><name>rar</name><literal type="string">" }, NULL, true },

{ ""</literal></expr>,
<expr><block>{}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"?extra"</literal></expr>,
<expr><block>{}</block></expr>, <expr><literal type="string">"?extra"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,



<expr><block>{ <expr><literal type="string">"!/he!llo.zip!/goodbye.rar"</literal></expr>,
<expr><block>{}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"!/hello.zip!/!"</literal></expr>,
<expr><block>{}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>testcase</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mrl_FragmentSplit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><name><name>testcase</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>testcase</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><name><name>testcase</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extra</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>testcase</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extra</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>testcase</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>testcase</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>j</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>MAX_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>testcase</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res_escaped</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mrl_EscapeFragmentIdentifier</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_escaped</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <name>res_escaped</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>res_escaped</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>res_escaped</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>res_escaped</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
