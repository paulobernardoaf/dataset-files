<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\test\url.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>vlc_module_name</name><index>[]</index></name> <init>= <expr><literal type="string">"test_url"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exitcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" returned NULL, expected \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" returned \"%s\", expected NULL\n"</literal></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" returned \"%s\", expected \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>in</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>conv_t</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test</name> <parameter_list>(<parameter><decl><type><name>conv_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>test_decode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><name>vlc_uri_decode_duplicate</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>test_b64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>vlc_b64_encode</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>vlc_b64_decode</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>make_URI_def</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_path2uri</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>test_path</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><name>make_URI_def</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>test_current_directory_path</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cwd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expected_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>expected_result</name></expr></argument>, <argument><expr><literal type="string">"file://%s/%s"</literal></expr></argument>, <argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><name>make_URI_def</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>expected_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>expected_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_url_parse</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>protocol</name></type></parameter>, <parameter><type><name>user</name></type></parameter>, <parameter><type><name>pass</name></type></parameter>, <parameter><type><name>host</name></type></parameter>, <parameter><type><name>port</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>test_url_parse_internal(in, false, protocol, user, pass, host, port, path, option)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_url_parse_fixup</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>protocol</name></type></parameter>, <parameter><type><name>user</name></type></parameter>, <parameter><type><name>pass</name></type></parameter>, <parameter><type><name>host</name></type></parameter>, <parameter><type><name>port</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>test_url_parse_internal(in, true, protocol, user, pass, host, port, path, option)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_url_parse_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fixup</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protocol</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>fixup</name></expr> ?</condition><then> <expr><call><name>vlc_UrlParseFixup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>user</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pass</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>host</name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>port</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>path</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>option</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" accepted, expected rejection\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <literal type="number">77</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>!=</operator> <name>port</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" returned %u, expected %u\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>,
<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_compare</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_option</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_uri_resolve_rfc3986_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_uri_resolve</name><argument_list>(<argument><expr><literal type="string">"http://a/b/c/d;p?q"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_rfc3986</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reference</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>vlc_uri_resolve_rfc3986_test</name></expr></argument>, <argument><expr><name>reference</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_uri_resolve_separators_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_uri_resolve</name><argument_list>(<argument><expr><literal type="string">"file:///a/b/c//d.ext"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_separators</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reference</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>vlc_uri_resolve_separators_test</name></expr></argument>, <argument><expr><name>reference</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setvbuf</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"this_should_not_be_modified_1234"</literal></expr></argument>,
<argument><expr><literal type="string">"this_should_not_be_modified_1234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"This%20should%20be%20modified%201234!"</literal></expr></argument>,
<argument><expr><literal type="string">"This should be modified 1234!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"%7E"</literal></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"%"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"%2"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"%0000"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"T%C3%a9l%c3%A9vision %e2%82%Ac"</literal></expr></argument>, <argument><expr><literal type="string">"TÃ©lÃ©vision â¬"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decode</name> <argument_list>(<argument><expr><literal type="string">"T%E9l%E9vision"</literal></expr></argument>, <argument><expr><literal type="string">"T\xe9l\xe9vision"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_b64</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_b64</name> <argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"Zg=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_b64</name> <argument_list>(<argument><expr><literal type="string">"fo"</literal></expr></argument>, <argument><expr><literal type="string">"Zm8="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_b64</name> <argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"Zm9v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_b64</name> <argument_list>(<argument><expr><literal type="string">"foob"</literal></expr></argument>, <argument><expr><literal type="string">"Zm9vYg=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_b64</name> <argument_list>(<argument><expr><literal type="string">"fooba"</literal></expr></argument>, <argument><expr><literal type="string">"Zm9vYmE="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_b64</name> <argument_list>(<argument><expr><literal type="string">"foobar"</literal></expr></argument>, <argument><expr><literal type="string">"Zm9vYmFy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_path</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"file:///"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"/home/john/"</literal></expr></argument>, <argument><expr><literal type="string">"file:///home/john/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"/home/john//too///many//slashes"</literal></expr></argument>,
<argument><expr><literal type="string">"file:///home/john//too///many//slashes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"/home/john/music.ogg"</literal></expr></argument>, <argument><expr><literal type="string">"file:///home/john/music.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"C:\\"</literal></expr></argument>, <argument><expr><literal type="string">"file:///C:/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"C:\\Users\\john\\"</literal></expr></argument>, <argument><expr><literal type="string">"file:///C:/Users/john/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"C:\\Users\\john\\music.ogg"</literal></expr></argument>,
<argument><expr><literal type="string">"file:///C:/Users/john/music.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_path</name> <argument_list>(<argument><expr><literal type="string">"\\\\server\\share\\dir\\file.ext"</literal></expr></argument>,
<argument><expr><literal type="string">"file://server/share/dir/file.ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>chdir</name> <argument_list>(<argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpdir</name> <init>= <expr><call><name>getcwd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"getcwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_current_directory_path</name> <argument_list>(<argument><expr><literal type="string">"movie.ogg"</literal></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>, <argument><expr><literal type="string">"movie.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_current_directory_path</name> <argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>test (vlc_uri2path, a, b)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"mailto:john@example.com"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"http://www.example.com/file.html#ref"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://localhost/home/john/music%2Eogg"</literal></expr></argument>, <argument><expr><literal type="string">"/home/john/music.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://localhost/home/john/text#ref"</literal></expr></argument>, <argument><expr><literal type="string">"/home/john/text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://localhost/home/john/text?name=value"</literal></expr></argument>, <argument><expr><literal type="string">"/home/john/text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://localhost/home/john/text?name=value#ref"</literal></expr></argument>, <argument><expr><literal type="string">"/home/john/text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://?name=value"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///?name=value"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://0foobar"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://0#ref"</literal></expr></argument>, <argument><expr><literal type="string">"/dev/stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://1"</literal></expr></argument>, <argument><expr><literal type="string">"/dev/stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://12345"</literal></expr></argument>, <argument><expr><literal type="string">"/dev/fd/12345"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///C:"</literal></expr></argument>, <argument><expr><literal type="string">"C:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///C:/Users/john/music%2Eogg"</literal></expr></argument>, <argument><expr><literal type="string">"C:\\Users\\john\\music.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://server/share/dir/file%2Eext"</literal></expr></argument>,
<argument><expr><literal type="string">"\\\\server\\share\\dir\\file.ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///C:/Users/john/text#ref"</literal></expr></argument>, <argument><expr><literal type="string">"C:\\Users\\john\\text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///C:/Users/john/text?name=value"</literal></expr></argument>, <argument><expr><literal type="string">"C:\\Users\\john\\text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///C:/Users/john/text?name=value#ref"</literal></expr></argument>,
<argument><expr><literal type="string">"C:\\Users\\john\\text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file://?name=value"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"file:///C:?name=value"</literal></expr></argument>, <argument><expr><literal type="string">"C:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://0foobar"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://0#ref"</literal></expr></argument>, <argument><expr><literal type="string">"CON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://1"</literal></expr></argument>, <argument><expr><literal type="string">"CON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name> <argument_list>(<argument><expr><literal type="string">"fd://12345"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>

<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com/"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://[2001:db8::1]"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"2001:db8::1"</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com:"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"protocol://john:doe@1.2.3.4:567"</literal></expr></argument>, <argument><expr><literal type="string">"protocol"</literal></expr></argument>, <argument><expr><literal type="string">"john"</literal></expr></argument>, <argument><expr><literal type="string">"doe"</literal></expr></argument>, <argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>, <argument><expr><literal type="number">567</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://a.b/?opt=val"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"a.b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"opt=val"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://u:p@host:123/a/b/c?o=v"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"/a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"o=v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://?o=v"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"o=v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://h?o=v"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"o=v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://h:123?o=v"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"o=v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://u:p@h:123?o=v"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"o=v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://caf\xc3\xa9.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"xn--caf-dma.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://caf%C3%A9.example.com"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"xn--caf-dma.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://www.example.com/caf\xc3\xa9/"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"www.example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"/caf%C3%A9/"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://h/white%20spaced"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"/white%20spaced"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"//example.com"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"/file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"/file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"?opt=val"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"opt=val"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"?o1=v1&amp;o2=v2"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><literal type="string">"o1=v1&amp;o2=v2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"/f?o=v"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"/f"</literal></expr></argument>, <argument><expr><literal type="string">"o=v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"//example.com/file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"/file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"//example.com?opt=val"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"opt=val"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"//example.com/f?o=v"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"/f"</literal></expr></argument>, <argument><expr><literal type="string">"o=v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://G a r b a g e"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"p://h/G a r b a g e"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com:123xyz"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com: 123"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com:+123"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com:-123"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com:-4294967298"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://example.com:-18446744073709551615"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"http://user%/Oath"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"/Oath"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_url_parse</name><argument_list>(<argument><expr><literal type="string">"smb://SERVER:445/SHARE/My file.mp3"</literal></expr></argument>, <argument><expr><literal type="string">"smb"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>, <argument><expr><literal type="number">445</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_url_parse_fixup</name><argument_list>(<argument><expr><literal type="string">"smb://SERVER:445/SHARE/My file.mp3"</literal></expr></argument>, <argument><expr><literal type="string">"smb"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>, <argument><expr><literal type="number">445</literal></expr></argument>, <argument><expr><literal type="string">"/SHARE/My%20file.mp3"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rfc3986_cases</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"g:h"</literal></expr>, <expr><literal type="string">"g:h"</literal></expr>,
<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"http://a/b/c/g"</literal></expr>,
<expr><literal type="string">"./g"</literal></expr>, <expr><literal type="string">"http://a/b/c/g"</literal></expr>,
<expr><literal type="string">"g/"</literal></expr>, <expr><literal type="string">"http://a/b/c/g/"</literal></expr>,
<expr><literal type="string">"/g"</literal></expr>, <expr><literal type="string">"http://a/g"</literal></expr>,
<expr><literal type="string">"//g"</literal></expr>, <expr><literal type="string">"http://g"</literal></expr>,
<expr><literal type="string">"?y"</literal></expr>, <expr><literal type="string">"http://a/b/c/d;p?y"</literal></expr>,
<expr><literal type="string">"g?y"</literal></expr>, <expr><literal type="string">"http://a/b/c/g?y"</literal></expr>,



<expr><literal type="string">";x"</literal></expr>, <expr><literal type="string">"http://a/b/c/;x"</literal></expr>,
<expr><literal type="string">"g;x"</literal></expr>, <expr><literal type="string">"http://a/b/c/g;x"</literal></expr>,

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"http://a/b/c/d;p?q"</literal></expr>,
<expr><literal type="string">"."</literal></expr>, <expr><literal type="string">"http://a/b/c/"</literal></expr>,
<expr><literal type="string">"./"</literal></expr>, <expr><literal type="string">"http://a/b/c/"</literal></expr>,
<expr><literal type="string">".."</literal></expr>, <expr><literal type="string">"http://a/b/"</literal></expr>,
<expr><literal type="string">"../"</literal></expr>, <expr><literal type="string">"http://a/b/"</literal></expr>,
<expr><literal type="string">"../g"</literal></expr>, <expr><literal type="string">"http://a/b/g"</literal></expr>,
<expr><literal type="string">"../.."</literal></expr>, <expr><literal type="string">"http://a/"</literal></expr>,
<expr><literal type="string">"../../"</literal></expr>, <expr><literal type="string">"http://a/"</literal></expr>,
<expr><literal type="string">"../../g"</literal></expr>, <expr><literal type="string">"http://a/g"</literal></expr>,

<expr><literal type="string">"../../../g"</literal></expr>, <expr><literal type="string">"http://a/g"</literal></expr>,
<expr><literal type="string">"../../../../g"</literal></expr>, <expr><literal type="string">"http://a/g"</literal></expr>,

<expr><literal type="string">"/./g"</literal></expr>, <expr><literal type="string">"http://a/g"</literal></expr>,
<expr><literal type="string">"/../g"</literal></expr>, <expr><literal type="string">"http://a/g"</literal></expr>,
<expr><literal type="string">"g."</literal></expr>, <expr><literal type="string">"http://a/b/c/g."</literal></expr>,
<expr><literal type="string">".g"</literal></expr>, <expr><literal type="string">"http://a/b/c/.g"</literal></expr>,
<expr><literal type="string">"g.."</literal></expr>, <expr><literal type="string">"http://a/b/c/g.."</literal></expr>,
<expr><literal type="string">"..g"</literal></expr>, <expr><literal type="string">"http://a/b/c/..g"</literal></expr>,

<expr><literal type="string">"./../g"</literal></expr>, <expr><literal type="string">"http://a/b/g"</literal></expr>,
<expr><literal type="string">"./g/."</literal></expr>, <expr><literal type="string">"http://a/b/c/g/"</literal></expr>,
<expr><literal type="string">"g/./h"</literal></expr>, <expr><literal type="string">"http://a/b/c/g/h"</literal></expr>,
<expr><literal type="string">"g/../h"</literal></expr>, <expr><literal type="string">"http://a/b/c/h"</literal></expr>,
<expr><literal type="string">"g;x=1/./y"</literal></expr>, <expr><literal type="string">"http://a/b/c/g;x=1/y"</literal></expr>,
<expr><literal type="string">"g;x=1/../y"</literal></expr>, <expr><literal type="string">"http://a/b/c/y"</literal></expr>,

<expr><literal type="string">"g?y/./x"</literal></expr>, <expr><literal type="string">"http://a/b/c/g?y/./x"</literal></expr>,
<expr><literal type="string">"g?y/../x"</literal></expr>, <expr><literal type="string">"http://a/b/c/g?y/../x"</literal></expr>,


}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rfc3986_cases</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_rfc3986</name><argument_list>(<argument><expr><name><name>rfc3986_cases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rfc3986_cases</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>separators_patterns</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"../"</literal></expr>, <expr><literal type="string">"file:///a/b/"</literal></expr>,
<expr><literal type="string">"./"</literal></expr>, <expr><literal type="string">"file:///a/b/c/"</literal></expr>,
<expr><literal type="string">"../../../../../../../"</literal></expr>, <expr><literal type="string">"file:///"</literal></expr>,
<expr><literal type="string">"..///////////////"</literal></expr>, <expr><literal type="string">"file:///a/b/"</literal></expr>,
<expr><literal type="string">".///////////////"</literal></expr>, <expr><literal type="string">"file:///a/b/c/"</literal></expr>,
<expr><literal type="string">"..//..//"</literal></expr>, <expr><literal type="string">"file:///a/"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>separators_patterns</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_separators</name><argument_list>(<argument><expr><name><name>separators_patterns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>separators_patterns</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>valid_uris</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"#href"</literal></expr>, <expr><literal type="string">"?opt=val"</literal></expr>,
<expr><literal type="string">"."</literal></expr>, <expr><literal type="string">".."</literal></expr>, <expr><literal type="string">"/"</literal></expr>, <expr><literal type="string">"../../dir/subdir/subsubdir/file.ext"</literal></expr>,
<expr><literal type="string">"//example.com?q=info"</literal></expr>,
<expr><literal type="string">"//192.0.2.1/index.html"</literal></expr>,
<expr><literal type="string">"//[2001:db8::1]/index.html"</literal></expr>,
<expr><literal type="string">"https://www.example.com:8443/?opt1=val1&amp;opt2=val2"</literal></expr>,
<expr><literal type="string">"https://192.0.2.1:8443/#foobar"</literal></expr>,
<expr><literal type="string">"https://[2001:db8::1]:8443/file?opt=val#foobar"</literal></expr>,
<expr><literal type="string">"https://[v9.abcd:efgh]:8443/welcome?to=the#future"</literal></expr>,
<expr><literal type="string">"mailto:john@example.com"</literal></expr>,
<expr><literal type="string">"mailto:mailman@example.com?subject=help"</literal></expr>,
<expr><literal type="string">"mailto:mailman@example.com?body=subscribe%20news-flash"</literal></expr>,
<expr><literal type="string">"mailto:literal@[192.0.2.1],literal@[IPv6:2001:db8::1]"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>valid_uris</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>vlc_uri_fixup</name></expr></argument>, <argument><expr><name><name>valid_uris</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>valid_uris</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>invalid_uris</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"Hello world.txt"</literal></expr>, <expr><literal type="string">"Hello%20world.txt"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CafÃ©"</literal></expr>, <expr><literal type="string">"Caf%C3%A9"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"100%"</literal></expr>, <expr><literal type="string">"100%25"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"//[1.2.3.4]/[Foo]"</literal></expr>, <expr><literal type="string">"//[1.2.3.4]/%5BFoo%5D"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/[Bar]"</literal></expr>, <expr><literal type="string">"/%5BBar%5D"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"http://localhost/[Baz]"</literal></expr>, <expr><literal type="string">"http://localhost/%5BBaz%5D"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>invalid_uris</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>vlc_uri_fixup</name></expr></argument>, <argument><expr><name><name>invalid_uris</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>invalid_uris</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>exitcode</name></expr>;</return>
</block_content>}</block></function>
</unit>
