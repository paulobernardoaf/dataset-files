<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\test\arrays.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_insert_remove</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DECL_ARRAY</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><name>array</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>array</name><operator>.</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ARRAY_VAL</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_REMOVE</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>array</name><operator>.</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_REMOVE</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>array</name><operator>.</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ARRAY_VAL</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ARRAY_VAL</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INSERT</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>array</name><operator>.</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ARRAY_VAL</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ARRAY_VAL</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ARRAY_VAL</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_foreach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DECL_ARRAY</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><name>array</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item</name></decl>;</decl_stmt>
<macro><name>ARRAY_FOREACH</name><argument_list>(<argument>item</argument>, <argument>array</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_find</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DECL_ARRAY</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><name>array</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ARRAY_FIND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_FIND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_FIND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_FIND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_FIND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_FIND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_FIND</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_bsearch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>item</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>DECL_ARRAY</name><argument_list>(<argument>struct item</argument>)</argument_list></macro> <expr_stmt><expr><name>array</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ARRAY_APPEND</name><argument_list>(<argument>array</argument>, <argument>(struct item) { <literal type="number">1</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ARRAY_APPEND</name><argument_list>(<argument>array</argument>, <argument>(struct item) { <literal type="number">2</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ARRAY_APPEND</name><argument_list>(<argument>array</argument>, <argument>(struct item) { <literal type="number">3</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ARRAY_APPEND</name><argument_list>(<argument>array</argument>, <argument>(struct item) { <literal type="number">5</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ARRAY_APPEND</name><argument_list>(<argument>array</argument>, <argument>(struct item) { <literal type="number">8</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ARRAY_APPEND</name><argument_list>(<argument>array</argument>, <argument>(struct item) { <literal type="number">13</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ARRAY_APPEND</name><argument_list>(<argument>array</argument>, <argument>(struct item) { <literal type="number">21</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_array_insert_remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_array_foreach</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_array_find</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_array_bsearch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
