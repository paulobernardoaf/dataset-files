<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\text\iso_lang.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_iso_lang.h"</cpp:file></cpp:include>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso-639_def.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>iso639_lang_t</name></type> <name>unknown_language</name> <init>=
<expr><block>{ <expr><literal type="string">"Unknown"</literal></expr>, <expr><literal type="string">"??"</literal></expr>, <expr><literal type="string">"???"</literal></expr>, <expr><literal type="string">"???"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type> <name>GetLang_1</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_code</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>p_lang</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_lang</name> <operator>=</operator> <name>p_languages</name></expr>;</init> <condition><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_eng_name</name></name></expr>;</condition> <incr><expr><name>p_lang</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><name>psz_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_lang</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>&amp;</operator><name>unknown_language</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type> <name>GetLang_2T</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_code</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>p_lang</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_lang</name> <operator>=</operator> <name>p_languages</name></expr>;</init> <condition><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_eng_name</name></name></expr>;</condition> <incr><expr><name>p_lang</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_iso639_2T</name></name></expr></argument>, <argument><expr><name>psz_code</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_lang</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>&amp;</operator><name>unknown_language</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type> <name>GetLang_2B</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_code</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>p_lang</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_lang</name> <operator>=</operator> <name>p_languages</name></expr>;</init> <condition><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_eng_name</name></name></expr>;</condition> <incr><expr><name>p_lang</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_iso639_2B</name></name></expr></argument>, <argument><expr><name>psz_code</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_lang</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>&amp;</operator><name>unknown_language</name></expr>;</return>
</block_content>}</block></function>

</unit>
