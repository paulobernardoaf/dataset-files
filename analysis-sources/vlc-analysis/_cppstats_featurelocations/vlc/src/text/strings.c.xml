<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\text\strings.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRCOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcoll</name></cpp:macro> <cpp:value>strcasecmp</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>xml_entity_s</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_entity</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>xml_entities</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"AElig;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aacute;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Acirc;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Agrave;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aring;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Atilde;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Auml;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ccedil;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Dagger;"</literal></expr>, <expr><literal type="string">"â¡"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ETH;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Eacute;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ecirc;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Egrave;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Euml;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Iacute;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Icirc;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Igrave;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Iuml;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ntilde;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OElig;"</literal></expr>, <expr><literal type="string">"Å"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Oacute;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ocirc;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ograve;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Oslash;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Otilde;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ouml;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Scaron;"</literal></expr>, <expr><literal type="string">"Å "</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"THORN;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Uacute;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ucirc;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ugrave;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Uuml;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Yacute;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Yuml;"</literal></expr>, <expr><literal type="string">"Å¸"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aacute;"</literal></expr>, <expr><literal type="string">"Ã¡"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"acirc;"</literal></expr>, <expr><literal type="string">"Ã¢"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"acute;"</literal></expr>, <expr><literal type="string">"Â´"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aelig;"</literal></expr>, <expr><literal type="string">"Ã¦"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"agrave;"</literal></expr>, <expr><literal type="string">"Ã "</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"amp;"</literal></expr>, <expr><literal type="string">"&amp;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"apos;"</literal></expr>, <expr><literal type="string">"'"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aring;"</literal></expr>, <expr><literal type="string">"Ã¥"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"atilde;"</literal></expr>, <expr><literal type="string">"Ã£"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auml;"</literal></expr>, <expr><literal type="string">"Ã¤"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bdquo;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"brvbar;"</literal></expr>, <expr><literal type="string">"Â¦"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ccedil;"</literal></expr>, <expr><literal type="string">"Ã§"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cedil;"</literal></expr>, <expr><literal type="string">"Â¸"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cent;"</literal></expr>, <expr><literal type="string">"Â¢"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"circ;"</literal></expr>, <expr><literal type="string">"Ë"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copy;"</literal></expr>, <expr><literal type="string">"Â©"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"curren;"</literal></expr>, <expr><literal type="string">"Â¤"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dagger;"</literal></expr>, <expr><literal type="string">"â "</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"deg;"</literal></expr>, <expr><literal type="string">"Â°"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"divide;"</literal></expr>, <expr><literal type="string">"Ã·"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eacute;"</literal></expr>, <expr><literal type="string">"Ã©"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ecirc;"</literal></expr>, <expr><literal type="string">"Ãª"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"egrave;"</literal></expr>, <expr><literal type="string">"Ã¨"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eth;"</literal></expr>, <expr><literal type="string">"Ã°"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"euml;"</literal></expr>, <expr><literal type="string">"Ã«"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"euro;"</literal></expr>, <expr><literal type="string">"â¬"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frac12;"</literal></expr>, <expr><literal type="string">"Â½"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frac14;"</literal></expr>, <expr><literal type="string">"Â¼"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frac34;"</literal></expr>, <expr><literal type="string">"Â¾"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gt;"</literal></expr>, <expr><literal type="string">"&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hellip;"</literal></expr>, <expr><literal type="string">"â¦"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iacute;"</literal></expr>, <expr><literal type="string">"Ã­"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icirc;"</literal></expr>, <expr><literal type="string">"Ã®"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iexcl;"</literal></expr>, <expr><literal type="string">"Â¡"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"igrave;"</literal></expr>, <expr><literal type="string">"Ã¬"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iquest;"</literal></expr>, <expr><literal type="string">"Â¿"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iuml;"</literal></expr>, <expr><literal type="string">"Ã¯"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"laquo;"</literal></expr>, <expr><literal type="string">"Â«"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldquo;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lsaquo;"</literal></expr>, <expr><literal type="string">"â¹"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lsquo;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lt;"</literal></expr>, <expr><literal type="string">"&lt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"macr;"</literal></expr>, <expr><literal type="string">"Â¯"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mdash;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"micro;"</literal></expr>, <expr><literal type="string">"Âµ"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"middot;"</literal></expr>, <expr><literal type="string">"Â·"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nbsp;"</literal></expr>, <expr><literal type="string">"\xc2\xa0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ndash;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"not;"</literal></expr>, <expr><literal type="string">"Â¬"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ntilde;"</literal></expr>, <expr><literal type="string">"Ã±"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oacute;"</literal></expr>, <expr><literal type="string">"Ã³"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ocirc;"</literal></expr>, <expr><literal type="string">"Ã´"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oelig;"</literal></expr>, <expr><literal type="string">"Å"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ograve;"</literal></expr>, <expr><literal type="string">"Ã²"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ordf;"</literal></expr>, <expr><literal type="string">"Âª"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ordm;"</literal></expr>, <expr><literal type="string">"Âº"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oslash;"</literal></expr>, <expr><literal type="string">"Ã¸"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"otilde;"</literal></expr>, <expr><literal type="string">"Ãµ"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ouml;"</literal></expr>, <expr><literal type="string">"Ã¶"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"para;"</literal></expr>, <expr><literal type="string">"Â¶"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"permil;"</literal></expr>, <expr><literal type="string">"â°"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"plusmn;"</literal></expr>, <expr><literal type="string">"Â±"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pound;"</literal></expr>, <expr><literal type="string">"Â£"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quot;"</literal></expr>, <expr><literal type="string">"\""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"raquo;"</literal></expr>, <expr><literal type="string">"Â»"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rdquo;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reg;"</literal></expr>, <expr><literal type="string">"Â®"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rsaquo;"</literal></expr>, <expr><literal type="string">"âº"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rsquo;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sbquo;"</literal></expr>, <expr><literal type="string">"â"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scaron;"</literal></expr>, <expr><literal type="string">"Å¡"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sect;"</literal></expr>, <expr><literal type="string">"Â§"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shy;"</literal></expr>, <expr><literal type="string">"Â­"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sup1;"</literal></expr>, <expr><literal type="string">"Â¹"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sup2;"</literal></expr>, <expr><literal type="string">"Â²"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sup3;"</literal></expr>, <expr><literal type="string">"Â³"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"szlig;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"thorn;"</literal></expr>, <expr><literal type="string">"Ã¾"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tilde;"</literal></expr>, <expr><literal type="string">"Ë"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"times;"</literal></expr>, <expr><literal type="string">"Ã"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"trade;"</literal></expr>, <expr><literal type="string">"â¢"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uacute;"</literal></expr>, <expr><literal type="string">"Ãº"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucirc;"</literal></expr>, <expr><literal type="string">"Ã»"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ugrave;"</literal></expr>, <expr><literal type="string">"Ã¹"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uml;"</literal></expr>, <expr><literal type="string">"Â¨"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uuml;"</literal></expr>, <expr><literal type="string">"Ã¼"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yacute;"</literal></expr>, <expr><literal type="string">"Ã½"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yen;"</literal></expr>, <expr><literal type="string">"Â¥"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yuml;"</literal></expr>, <expr><literal type="string">"Ã¿"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_entity</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>xml_entity_s</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><name>elem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>psz_entity</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>psz_entity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_xml_decode</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_pos</name> <init>= <expr><name>psz_value</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><operator>*</operator><name>psz_value</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_value</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>psz_value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_value</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strtoul</name><argument_list>( <argument><expr><name>psz_value</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strtoul</name><argument_list>( <argument><expr><name>psz_value</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">';'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>psz_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>cp</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else
if<condition>( <expr><name>cp</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else


if<condition>( <expr><name>cp</name> <operator>&lt;=</operator> <literal type="number">0x7FF</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_pos</name><operator>++</operator> <operator>=</operator> <literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if<condition>( <expr><name>cp</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_pos</name><operator>++</operator> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_pos</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>cp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if<condition>( <expr><name>cp</name> <operator>&lt;=</operator> <literal type="number">0x1FFFFF</literal></expr> )</condition> 
<block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>p_pos</name><operator>++</operator> <operator>=</operator> <literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_pos</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>cp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_pos</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>cp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <operator>*</operator><name>psz_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>xml_entity_s</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>bsearch</name> <argument_list>(<argument><expr><name>psz_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>xml_entities</name></expr></argument>,
<argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>xml_entities</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ent</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>psz_char</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p_pos</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>psz_char</name></name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pos</name> <operator>+=</operator> <name>olen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>psz_entity</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <operator>*</operator><name>psz_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <operator>*</operator><name>psz_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p_pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_xml_encode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>vlc_towc</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EILSEQ</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>cp</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\"'</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"&amp;quot;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"&amp;amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"&amp;#39;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"&amp;lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"&amp;gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <literal type="number">160</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"&amp;#%"</literal><name>PRIu32</name><literal type="string">";"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">9</literal></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<case>case <expr><literal type="number">133</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_b64_encode_binary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>b64</name><index>[]</index></name> <init>=
<expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<switch>switch <condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>v</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_b64_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_b64_encode_binary</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>vlc_b64_decode_binary_to_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>b64</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">63</literal></expr>, 
<expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>, 
<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>, 
<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><name>CHAR_BIT</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Oops"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name></type> <name>cur</name> <init>= <expr><name><name>b64</name><index>[<expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>prev</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>cur</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>shift</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>shift</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>out</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vlc_b64_decode_binary</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dst</name> <operator>=</operator> <name>p_dst</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dst</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_b64_decode_binary_to_buffer</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_b64_decode</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_dst</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dst</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_dst</name> <operator>=</operator> <call><name>vlc_b64_decode_binary_to_buffer</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p_dst</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i_dst</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>p_dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_strftime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tformat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>curtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>loctime</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>tformat</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>time</name><argument_list>( <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>localtime_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loctime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tformat</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>buflen</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strftime</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>tformat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loctime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>str</name></expr></else></ternary></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_duration</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>duration</name> <operator>/=</operator> <name>CLOCK_FREQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lldiv</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lldiv</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%02lld:%02lld:%02lld"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_meta</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetMeta</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_strfplayer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name><name>stream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_is_format</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_empty_if_na</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name> <operator>&amp;&amp;</operator> <name>player</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_is_format</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_is_format</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_empty_if_na</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_is_format</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Artist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Album</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Copyright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_EncodedBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIi64</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_displayed_pictures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Genre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_TrackNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_TrackTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetNowPlayingFb</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Rating</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>player</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>vlc_player_GetCategoryLanguage</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>track</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>chapter</name> <init>= <expr><call><name>vlc_player_GetSelectedChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chapter</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%zd"</literal></expr></argument>, <argument><expr><name>chapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_duration</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>input_item_GetDuration</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"--:--:--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>title</name> <init>= <expr><call><name>vlc_player_GetSelectedTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%zd"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>length</name> <init>= <expr><call><name>vlc_player_GetLength</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name> <init>= <expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_duration</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"--:--:--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>input_item_GetName</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>player</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>vlc_player_GetCategoryLanguage</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%2.1f"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"--.-%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%.3f"</literal></expr></argument>,
<argument><expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>track</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>div_t</name></type> <name>dr</name> <init>= <expr><call><name>div</name><argument_list>(<argument><expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>+</operator> <literal type="number">50</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%d.%01d"</literal></expr></argument>, <argument><expr><name><name>dr</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><name><name>dr</name><operator>.</operator><name>rem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name> <init>= <expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>write_duration</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"--:--:--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Publisher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>vol</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>player</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>aout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vol</name> <operator>=</operator> <call><name>aout_VolumeGet</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vol</name> <operator>&gt;=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><call><name>lroundf</name><argument_list>(<argument><expr><name>vol</name> <operator>*</operator> <literal type="number">256.f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b_empty_if_na</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>input_item_GetNowPlayingFb</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>input_item_GetTitleFbName</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_meta</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>vlc_meta_Artist</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name>b_empty_if_na</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_is_format</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_filenamecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ca</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>;</decl_stmt>












<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>ca</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>cb</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>ca</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>ca</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">9</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>cb</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strcoll</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ua</name> <init>= <expr><call><name>strtoull</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ub</name> <init>= <expr><call><name>strtoull</name><argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>ua</name> <operator>==</operator> <name>ub</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strcoll</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ua</name> <operator>&gt;</operator> <name>ub</name><operator>)</operator></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>filename_sanitize</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><operator>*</operator><name>str</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if>



<if type="elseif">else if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><literal type="string">"/:\\*\"?|&lt;&gt;"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while<condition>( <expr><name>str</name> <operator>&gt;</operator> <name>start</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><operator>(</operator><operator>--</operator><name>str</name><operator>)</operator> <operator>!=</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
