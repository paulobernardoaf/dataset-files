<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\text\charset.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_WIN32</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xlocale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>





<function><type><name>double</name></type> <name>us_strtod</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>locale_t</name></type> <name>loc</name> <init>= <expr><call><name>newlocale</name> <argument_list>(<argument><expr><name>LC_NUMERIC_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>locale_t</name></type> <name>oldloc</name> <init>= <expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>res</name> <init>= <expr><call><name>strtod</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>oldloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freelocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>float</name></type> <name>us_strtof</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>locale_t</name></type> <name>loc</name> <init>= <expr><call><name>newlocale</name> <argument_list>(<argument><expr><name>LC_NUMERIC_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>locale_t</name></type> <name>oldloc</name> <init>= <expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>res</name> <init>= <expr><call><name>strtof</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>oldloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freelocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>double</name></type> <name>us_atof</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>us_strtod</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>us_vasprintf</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>locale_t</name></type> <name>loc</name> <init>= <expr><call><name>newlocale</name><argument_list>( <argument><expr><name>LC_NUMERIC_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>locale_t</name></type> <name>oldloc</name> <init>= <expr><call><name>uselocale</name><argument_list>( <argument><expr><name>loc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rc</name> <init>= <expr><call><name>vasprintf</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>loc</name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator><literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>uselocale</name><argument_list>( <argument><expr><name>oldloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freelocale</name><argument_list>( <argument><expr><name>loc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_rc</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>us_asprintf</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rc</name> <operator>=</operator> <call><name>us_vasprintf</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
