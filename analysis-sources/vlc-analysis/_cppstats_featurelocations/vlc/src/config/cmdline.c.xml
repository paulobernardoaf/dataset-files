<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\config\cmdline.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_getopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"configuration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>config_LoadCmdLine</name></cpp:undef>















<function><type><name>int</name></type> <name>config_LoadCmdLine</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pindex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_cmd</name></decl>, <decl><type ref="prev"/><name>i_index</name></decl>, <decl><type ref="prev"/><name>i_opts</name></decl>, <decl><type ref="prev"/><name>i_shortopts</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>, <decl><type ref="prev"/><name>i_verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_option</name></name> <modifier>*</modifier></type><name>p_longopts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b_ignore_errors</name></cpp:macro> <cpp:value>(pindex == NULL)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name><name>pp_shortopts</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_shortopts</name></decl>;</decl_stmt>





<expr_stmt><expr><name>i_opts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>vlc_plugins</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>



<expr_stmt><expr><name>i_opts</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>count</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>booleans</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p_longopts</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_opts</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_longopts</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_longopts</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_shortopts</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>i_opts</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_shortopts</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_longopts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><name>b_ignore_errors</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>argv_copy</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_argc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>argv_copy</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_shortopts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_longopts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>argv_copy</name></expr></argument>, <argument><expr><name>ppsz_argv</name></expr></argument>, <argument><expr><name>i_argc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ppsz_argv</name> <operator>=</operator> <name>argv_copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_shortopts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pp_shortopts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>vlc_plugins</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_item</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr></init></decl>;</init>
<condition><expr><name>p_item</name> <operator>&lt;</operator> <name>p_end</name></expr>;</condition>
<incr><expr><name>p_item</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>CONFIG_ITEM</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <operator>&amp;</operator><name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CONFIG_CLASS</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONFIG_ITEM_BOOL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"no%s"</literal></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <operator>&amp;</operator><name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"no-%s"</literal></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <operator>&amp;</operator><name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_item</name><operator>-&gt;</operator><name>i_short</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pp_shortopts</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_item</name><operator>-&gt;</operator><name>i_short</name></name></expr>]</index></name> <operator>=</operator> <name>p_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_shortopts</name><index>[<expr><name>i_shortopts</name></expr>]</index></name> <operator>=</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_short</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_shortopts</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_item</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>CONFIG_ITEM_BOOL</name>
<operator>&amp;&amp;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_short</name></name> <operator>!=</operator> <literal type="char">'v'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>psz_shortopts</name><index>[<expr><name>i_shortopts</name></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_shortopts</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_longopts</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_shortopts</name><index>[<expr><name>i_shortopts</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>vlc_getopt_t</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>ind</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> 
<while>while<condition>( <expr><operator>(</operator> <name>i_cmd</name> <operator>=</operator> <call><name>vlc_getopt_long</name><argument_list>( <argument><expr><name>i_argc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppsz_argv</name></expr></argument>,
<argument><expr><name>psz_shortopts</name></expr></argument>,
<argument><expr><name>p_longopts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_cmd</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>flag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_name</name> <operator>+=</operator> <ternary><condition><expr><name><name>psz_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_conf</name> <operator>=</operator> <call><name>config_FindConfig</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_conf</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_conf</name><operator>-&gt;</operator><name>b_removed</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Warning: option --%s no longer exists.\n"</literal></expr></argument>,
<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><call><name>CONFIG_CLASS</name><argument_list>(<argument><expr><name><name>p_conf</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CONFIG_ITEM_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>arg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ITEM_INTEGER</name></expr>:</case>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>var_Change</name><argument_list>( <argument>p_this</argument>, <argument>psz_name</argument>, <argument>VLC_VAR_SETMINMAX</argument>,
<argument>(vlc_value_t){ .i_int = p_conf-&gt;min.i }</argument>,
<argument>(vlc_value_t){ .i_int = p_conf-&gt;max.i }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><call><name>strtoll</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ITEM_FLOAT</name></expr>:</case>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>var_Change</name><argument_list>( <argument>p_this</argument>, <argument>psz_name</argument>, <argument>VLC_VAR_SETMINMAX</argument>,
<argument>(vlc_value_t){ .f_float = p_conf-&gt;min.f }</argument>,
<argument>(vlc_value_t){ .f_float = p_conf-&gt;max.f }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ITEM_BOOL</name></expr>:</case>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>!</operator><name>flag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>pp_shortopts</name><index>[<expr><name>i_cmd</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>pp_shortopts</name><index>[<expr><name>i_cmd</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><call><name>CONFIG_CLASS</name><argument_list>(<argument><expr><name><name>pp_shortopts</name><index>[<expr><name>i_cmd</name></expr>]</index></name><operator>-&gt;</operator><name>i_type</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CONFIG_ITEM_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>arg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ITEM_INTEGER</name></expr>:</case>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_cmd</name> <operator>==</operator> <literal type="char">'v'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_verbose</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i_verbose</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>strtoll</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ITEM_BOOL</name></expr>:</case>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ignore_errors</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"vlc: unknown option"</literal>
<literal type="string">" or missing mandatory argument "</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>state</name><operator>.</operator><name>opt</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"`-%c'\n"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>opt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"`%s'\n"</literal></expr></argument>, <argument><expr><name><name>ppsz_argv</name><index>[<expr><name><name>state</name><operator>.</operator><name>ind</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"Try `vlc --help' for more information.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>pindex</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pindex</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>ind</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p_longopts</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_longopts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_shortopts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>argv_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

</unit>
