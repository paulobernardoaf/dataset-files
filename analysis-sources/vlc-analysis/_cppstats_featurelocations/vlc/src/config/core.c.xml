<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\config\core.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_configuration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"configuration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>vlc_rwlock_t</name></type> <name>config_lock</name> <init>= <expr><name>VLC_STATIC_RWLOCK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>config_dirty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>strdupnull</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>src</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>config_GetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_config</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><call><name>CONFIG_CLASS</name><argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CONFIG_ITEM_FLOAT</name></expr>:</case>
<return>return <expr><name>VLC_VAR_FLOAT</name></expr>;</return>
<case>case <expr><name>CONFIG_ITEM_INTEGER</name></expr>:</case>
<return>return <expr><name>VLC_VAR_INTEGER</name></expr>;</return>
<case>case <expr><name>CONFIG_ITEM_BOOL</name></expr>:</case>
<return>return <expr><name>VLC_VAR_BOOL</name></expr>;</return>
<case>case <expr><name>CONFIG_ITEM_STRING</name></expr>:</case>
<return>return <expr><name>VLC_VAR_STRING</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>config_IsSafe</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>p_config</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_config</name><operator>-&gt;</operator><name>b_safe</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>config_GetInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_config</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsConfigIntegerType</name><argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_rdlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>config_GetFloat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_config</name> <operator>=</operator> <call><name>config_FindConfig</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_config</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsConfigFloatType</name><argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_rdlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetPsz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_config</name> <operator>=</operator> <call><name>config_FindConfig</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_config</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsConfigStringType</name> <argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_rwlock_rdlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>strdupnull</name> <argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>config_PutPsz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_config</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsConfigStringType</name><argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldstr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>psz_value</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_wrlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldstr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>psz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>psz</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>config_dirty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>config_PutInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_config</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsConfigIntegerType</name><argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_value</name> <operator>&lt;</operator> <name><name>p_config</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>i</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_value</name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i_value</name> <operator>&gt;</operator> <name><name>p_config</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>i</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_value</name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_wrlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>i_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>config_dirty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>config_PutFloat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_config</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsConfigFloatType</name><argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_config</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f</name></name> <operator>==</operator> <literal type="number">0.f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_config</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f</name></name> <operator>==</operator> <literal type="number">0.f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_value</name> <operator>&lt;</operator> <name><name>p_config</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_value</name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_value</name> <operator>&gt;</operator> <name><name>p_config</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_value</name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_wrlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>config_dirty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>config_GetIntChoices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>texts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>texts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cfg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>module_Symbol</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="string">"vlc_entry_cfg_int_enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>cb</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>texts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>vals</name> <init>= <expr><call><name>vlc_alloc</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>vals</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>txts</name> <init>= <expr><call><name>vlc_alloc</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>txts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vals</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>txts</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>vlc_gettext</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>txts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <name>vals</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>texts</name> <operator>=</operator> <name>txts</name></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>txts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>config_ListModules</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>values</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>texts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>module_list_cap</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <operator>*</operator><name>texts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vals</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>vals</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>txts</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>txts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vals</name> <operator>||</operator> <operator>!</operator><name>txts</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>txts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <operator>*</operator><name>texts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>module_get_object</name> <argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>module_gettext</name> <argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>module_get_name</name> <argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Disable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <name>vals</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>texts</name> <operator>=</operator> <name>txts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vals</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>txts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>txts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <operator>*</operator><name>texts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>config_GetPszChoices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>texts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <operator>*</operator><name>texts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>i_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CONFIG_ITEM_MODULE</name></expr>:</case>
<return>return <expr><call><name>config_ListModules</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_type</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>texts</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsConfigStringType</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>module_Symbol</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="string">"vlc_entry_cfg_str_enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>cb</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>texts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vals</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>vals</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>txts</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>txts</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vals</name> <operator>||</operator> <operator>!</operator><name>txts</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>txts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>vlc_gettext</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>txts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <name>vals</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>texts</name> <operator>=</operator> <name>txts</name></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>

<label><name>error</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vals</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>txts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>txts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>confcmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ca</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <modifier>*</modifier><name>cb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ca</name><operator>)</operator><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>cb</name><operator>)</operator><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>confnamecmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>conf</name> <init>= <expr><name>elem</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>conf</name><operator>)</operator><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block> <decl><name>config</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</struct>




<function><type><name>int</name></type> <name>config_SortConfig</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nconf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>vlc_plugins</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nconf</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>clist</name> <init>= <expr><call><name>vlc_alloc</name> <argument_list>(<argument><expr><name>nconf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>clist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>clist</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nconf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>vlc_plugins</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>item</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr>;</init>
<condition><expr><name>item</name> <operator>&lt;</operator> <name>end</name></expr>;</condition>
<incr><expr><name>item</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CONFIG_ITEM</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>clist</name><index>[<expr><name>nconf</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name> <argument_list>(<argument><expr><name>clist</name></expr></argument>, <argument><expr><name>nconf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>clist</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>confcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>clist</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>nconf</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>config_UnsortConfig</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>clist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>module_config_t</name> <modifier>*</modifier></type><name>config_FindConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bsearch</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>confnamecmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>*</operator><name>p</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>config_Free</name> <parameter_list>(<parameter><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>confsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>confsize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>&amp;</operator><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsConfigStringType</name> <argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_item</name><operator>-&gt;</operator><name>list_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>list_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>config_ResetAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_rwlock_wrlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>vlc_plugins</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_config</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsConfigIntegerType</name> <argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>orig</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>IsConfigFloatType</name> <argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>p_config</name><operator>-&gt;</operator><name>orig</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>IsConfigStringType</name> <argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_config</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>psz</name></name> <operator>=</operator>
<call><name>strdupnull</name> <argument_list>(<argument><expr><name><name>p_config</name><operator>-&gt;</operator><name>orig</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
