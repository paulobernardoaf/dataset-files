<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\config\chain.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"configuration.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsEscapeNeeded</name><parameter_list>( <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsEscape</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>psz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <call><name>IsEscapeNeeded</name><argument_list>( <argument><expr><name><name>psz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsSpace</name><parameter_list>( <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPSPACE</name><parameter_list>( <parameter><type><name>p</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>p += strspn( p, " \t" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPTRAILINGSPACE</name><parameter_list>( <parameter><type><name>p</name></type></parameter>, <parameter><type><name>e</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { while( e &gt; p &amp;&amp; IsSpace( *(e-1) ) ) e--; } while(0)</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ChainGetEnd</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz_string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>


<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IsEscape</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>c</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>++</operator><name>p</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ChainGetEnd</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ChainGetValue</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_string</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>ppsz_string</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_keep_brackets</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>ChainGetEnd</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;=</operator> <name>p</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;=</operator> <name>p</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>(</operator> <operator>!</operator><name>b_keep_brackets</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><operator>(</operator><name>end</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>end</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'"'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SKIPTRAILINGSPACE</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>p</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>SKIPTRAILINGSPACE</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;=</operator> <name>p</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_StringUnescape</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>ppsz_string</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<return>return <expr><name>psz_value</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_ChainParseOptions</name><parameter_list>( <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_opts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_next</name> <init>= <expr><name>pp_cfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_opts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument>, <argument><expr><literal type="string">"=,{} \t"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 


<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cfg</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_opts</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_next</name> <operator>=</operator> <name>p_cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_next</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><literal type="string">"={"</literal></expr></argument>, <argument><expr><operator>*</operator><name>psz_opts</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>=</operator> <call><name>ChainGetValue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_opts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while<condition>( <expr><operator>!</operator><call><name>memchr</name><argument_list>( <argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><operator>*</operator><name>psz_opts</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_opts</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_opts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_opts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_ChainCreate</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter>, <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_cfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_chain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_cfg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_chain</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument>, <argument><expr><literal type="string">"{: \t"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_chain</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_chain</name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_chain</name> <operator>=</operator> <call><name>config_ChainParseOptions</name><argument_list>( <argument><expr><name>pp_cfg</name></expr></argument>, <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_chain</name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_chain</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>config_ChainDestroy</name><parameter_list>( <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>p_cfg</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cfg</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>config_ChainParse</name></cpp:undef>
<function><type><name>void</name></type> <name>config_ChainParse</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>psz_prefix</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_prefix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_prefix</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optname</name> <init>= <expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>optname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optname</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>plen</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>optname</name></expr></argument> )</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_prefix</name></expr></argument>, <argument><expr><name>optname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>config_GetType</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return ;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>module_config_t</name><modifier>*</modifier></type> <name>p_conf</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_conf</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><call><name>CONFIG_CLASS</name><argument_list>( <argument><expr><name><name>p_conf</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CONFIG_ITEM_INTEGER</name></expr>:</case>
<macro><name>var_Change</name><argument_list>( <argument>p_this</argument>, <argument>name</argument>, <argument>VLC_VAR_SETMINMAX</argument>,
<argument>(vlc_value_t){ .i_int = p_conf-&gt;min.i }</argument>,
<argument>(vlc_value_t){ .i_int = p_conf-&gt;max.i }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ITEM_FLOAT</name></expr>:</case>
<macro><name>var_Change</name><argument_list>( <argument>p_this</argument>, <argument>name</argument>, <argument>VLC_VAR_SETMINMAX</argument>,
<argument>(vlc_value_t){ .f_float = p_conf-&gt;min.f }</argument>,
<argument>(vlc_value_t){ .f_float = p_conf-&gt;max.f }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>(<init>;</init> <condition><expr><name>cfg</name></expr>;</condition> <incr><expr><name>cfg</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_yes</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_once</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>p_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_yes</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_once</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"option %s is unknown"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>plen</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_prefix</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>b_once</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_conf</name> <operator>=</operator> <call><name>config_FindConfig</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name>p_conf</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_conf</name><operator>-&gt;</operator><name>b_removed</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Option %s is not supported anymore."</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>config_GetType</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_type</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"unknown option %s (value=%s)"</literal></expr></argument>,
<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <name>VLC_VAR_BOOL</name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"missing value for option %s"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <name>VLC_VAR_STRING</name> <operator>&amp;&amp;</operator> <name>b_once</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"*option_name need to be a string option"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_BOOL</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>b_yes</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><ternary><condition><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr> ?</condition><then> <expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><ternary><condition><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr> ?</condition><then> <expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_STRING</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"unhandled config var type (%d)"</literal></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vlc_value_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if<condition>( <expr><name>b_once</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name><name>val2</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val2</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"ignoring option %s (not first occurrence)"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val2</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>var_Set</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"set config option: %s to %s"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr> ?</condition><then> <expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>config_chain_t</name> <modifier>*</modifier></type><name>config_ChainDuplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>config_chain_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name> <init>= <expr><operator>&amp;</operator><name>p_dst</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_src</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_src</name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_value</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>p_dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_StringUnescape</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_src</name> <init>= <expr><name>psz_string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dst</name> <init>= <expr><name>psz_string</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_src</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_src</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>IsEscape</name><argument_list>( <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>psz_src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>psz_dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>psz_string</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_StringEscape</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>str</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <ternary><condition><expr><call><name>IsEscapeNeeded</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>ret</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>IsEscapeNeeded</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
