<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\config\intf.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<function><type><name>void</name></type> <name>config_AddIntf</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_intf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_config</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_config</name> <operator>=</operator> <name>psz_parser</name> <operator>=</operator> <call><name>config_GetPsz</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_config</name> <operator>=</operator> <name>psz_parser</name> <operator>=</operator> <call><name>config_GetPsz</name><argument_list>( <argument><expr><literal type="string">"extraintf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>


<if_stmt><if>if<condition>( <expr><name>psz_config</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_newconfig</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_newconfig</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>psz_config</name></expr></argument>, <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>config_PutPsz</name><argument_list>( <argument><expr><literal type="string">"extraintf"</literal></expr></argument>, <argument><expr><name>psz_newconfig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_newconfig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_PutPsz</name><argument_list>( <argument><expr><literal type="string">"extraintf"</literal></expr></argument>, <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>config_RemoveIntf</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_intf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_config</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_config</name> <operator>=</operator> <name>psz_parser</name> <operator>=</operator> <call><name>config_GetPsz</name><argument_list>( <argument><expr><literal type="string">"extraintf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_newconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><name>psz_parser</name> <operator>+</operator> <name>i_len</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_parser</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_newconfig</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_config</name></expr></argument>, <argument><expr><name>psz_end</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>config_PutPsz</name><argument_list>( <argument><expr><literal type="string">"extraintf"</literal></expr></argument>, <argument><expr><name>psz_newconfig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_newconfig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_config</name> <operator>=</operator> <name>psz_parser</name> <operator>=</operator> <call><name>config_GetPsz</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_newconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><name>psz_parser</name> <operator>+</operator> <name>i_len</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_parser</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_newconfig</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_config</name></expr></argument>, <argument><expr><name>psz_end</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>config_PutPsz</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument>, <argument><expr><name>psz_newconfig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_newconfig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>config_ExistIntf</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_intf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_config</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_intf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_config</name> <operator>=</operator> <name>psz_parser</name> <operator>=</operator> <call><name>config_GetPsz</name><argument_list>( <argument><expr><literal type="string">"extraintf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>psz_intf</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_config</name> <operator>=</operator> <name>psz_parser</name> <operator>=</operator> <call><name>config_GetPsz</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>psz_intf</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

</unit>
