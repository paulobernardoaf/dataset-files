<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\config\help.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wcwidth</name><parameter_list>(<parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(cp), 1)</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ShowConsole</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PauseConsole</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ShowConsole</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PauseConsole</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Help</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Usage</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Version</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ListModules</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>ConsoleWidth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIOCGETD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>uwdata</name></name></type> <name>uw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>WIOCGETD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uw</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>uw</name><operator>.</operator><name>uw_height</name></name> <operator>/</operator> <name><name>uw</name><operator>.</operator><name>uw_vs</name></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>buf</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">80</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>config_PrintHelp</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Help</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Help</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"full-help"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"help-verbose"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"help-verbose"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Help</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"full-help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"longhelp"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Help</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"longhelp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ListModules</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"list-verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ListModules</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>print_help_on_full_help</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"To get exhaustive help, use '-H'."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>vlc_usage</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(
<argument><expr><literal type="string">"Usage: %s [options] [stream] ...\n"</literal>
<literal type="string">"You can specify multiple streams on the commandline.\n"</literal>
<literal type="string">"They will be enqueued in the playlist.\n"</literal>
<literal type="string">"The first item specified will be played first.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Options-styles:\n"</literal>
<literal type="string">" --option A global option that is set for the duration of the program.\n"</literal>
<literal type="string">" -option A single letter version of a global --option.\n"</literal>
<literal type="string">" :option An option that only applies to the stream directly before it\n"</literal>
<literal type="string">" and that overrides previous settings.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Stream MRL syntax:\n"</literal>
<literal type="string">" [[access][/demux]://]URL[#[title][:chapter][-[title][:chapter]]]\n"</literal>
<literal type="string">" [:option=value ...]\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">" Many of the global --options can also be used as MRL specific :options.\n"</literal>
<literal type="string">" Multiple :option=value pairs can be specified.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"URL syntax:\n"</literal>
<literal type="string">" file:///path/file Plain media file\n"</literal>
<literal type="string">" http://host[:port]/file HTTP URL\n"</literal>
<literal type="string">" ftp://host[:port]/file FTP URL\n"</literal>
<literal type="string">" mms://host[:port]/file MMS URL\n"</literal>
<literal type="string">" screen:// Screen capture\n"</literal>
<literal type="string">" dvd://[device] DVD device\n"</literal>
<literal type="string">" vcd://[device] VCD device\n"</literal>
<literal type="string">" cdda://[device] Audio CD device\n"</literal>
<literal type="string">" udp://[[&lt;source address&gt;]@[&lt;bind address&gt;][:&lt;bind port&gt;]]\n"</literal>
<literal type="string">" UDP stream sent by a streaming server\n"</literal>
<literal type="string">" vlc://pause:&lt;seconds&gt; Pause the playlist for a certain time\n"</literal>
<literal type="string">" vlc://quit Special item to quit VLC\n"</literal>
<literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Help</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_help_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShowConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_help_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_help_name</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>vlc_usage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"=core"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_help_on_full_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>psz_help_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_help_name</name></expr></argument>, <argument><expr><literal type="string">"longhelp"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>vlc_usage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_help_on_full_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>psz_help_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_help_name</name></expr></argument>, <argument><expr><literal type="string">"full-help"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>vlc_usage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>psz_help_name</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Usage</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_help_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PauseConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"\033[" #x ";1m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED</name></cpp:macro> <cpp:value>COL(31)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN</name></cpp:macro> <cpp:value>COL(32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YELLOW</name></cpp:macro> <cpp:value>COL(33)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUE</name></cpp:macro> <cpp:value>COL(34)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGENTA</name></cpp:macro> <cpp:value>COL(35)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CYAN</name></cpp:macro> <cpp:value>COL(36)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHITE</name></cpp:macro> <cpp:value>COL(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAY</name></cpp:macro> <cpp:value>"\033[0m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_START</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDING_SPACES</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sect</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>*</operator><name>sect</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>sect</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>RED</name><literal type="string">" %s:\n"</literal><name>GRAY</name></expr> </then><else>: <expr><literal type="string">" %s:\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>psz_longtext</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>MAGENTA</name><literal type="string">" %s\n"</literal><name>GRAY</name></expr> </then><else>: <expr><literal type="string">" %s\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_longtext</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_desc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>margin</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name> <init>= <expr><call><name>ConsoleWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name>margin</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>BLUE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wordlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wordwidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>newline</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>charlen</name> <init>= <expr><call><name>vlc_towc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>charlen</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charwidth</name> <init>= <expr><call><name>wcwidth</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>charwidth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>charwidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iswspace</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newline</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>charwidth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wordlen</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>word</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wordlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wordwidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>wordlen</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wordwidth</name> <operator>+=</operator> <name>charwidth</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>charwidth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>newline</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wordlen</name> <operator>-</operator> <name>charlen</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>=</operator> <name>str</name> <operator>-</operator> <name>charlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wordlen</name> <operator>=</operator> <name>charlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wordwidth</name> <operator>=</operator> <name>charwidth</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%*s"</literal></expr></argument>, <argument><expr><name>margin</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>wordwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><literal type="string">"%s\n"</literal><name>GRAY</name></expr> </then><else>: <expr><literal type="string">"%s\n"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_swidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>charlen</name> <init>= <expr><call><name>vlc_towc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>total</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>wcwidth</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTION_VALUE_SEP</name></cpp:macro> <cpp:value>" "</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTION_VALUE_SEP</name></cpp:macro> <cpp:value>"="</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bra</name> <init>= <expr><name>OPTION_VALUE_SEP</name> <literal type="string">"&lt;"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ket</name> <init>= <expr><literal type="string">"&gt;"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>suffix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>typebuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>CONFIG_CLASS</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CONFIG_HINT_CATEGORY</name></expr>:</case>
<case>case <expr><name>CONFIG_HINT_USAGE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>GREEN</name> <literal type="string">"\n %s\n"</literal> <name>GRAY</name></expr> </then><else>: <expr><literal type="string">"\n %s\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>psz_longtext</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>CYAN</name> <literal type="string">" %s\n"</literal> <name>GRAY</name></expr> </then><else>: <expr><literal type="string">" %s\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_longtext</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CONFIG_SECTION</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>section</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return;</return>

<case>case <expr><name>CONFIG_ITEM_STRING</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_values</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ppsz_texts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_count</name> <init>= <expr><call><name>config_GetPszChoices</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_texts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ppsz_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>typebuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end_string</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bra</name> <operator>=</operator> <name>OPTION_VALUE_SEP</name> <literal type="string">"{"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ket</name> <operator>=</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>typebuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>typebuf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>typebuf</name></expr></argument>, <argument><expr><name><name>ppsz_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>end_string</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ppsz_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ppsz_texts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_texts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CONFIG_ITEM_INTEGER</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pi_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_texts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_count</name> <init>= <expr><call><name>config_GetIntChoices</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_texts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ppsz_texts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>typebuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end_integer</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bra</name> <operator>=</operator> <name>OPTION_VALUE_SEP</name> <literal type="string">"{"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ket</name> <operator>=</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>typebuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>typebuf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>typebuf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>typebuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIi64</name><literal type="string">" (%s)"</literal></expr></argument>,
<argument><expr><name><name>pi_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ppsz_texts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>end_integer</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ppsz_texts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pi_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_texts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <name>INT64_MIN</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typebuf</name></expr></argument>, <argument><expr><literal type="string">"%s [%"</literal><name>PRId64</name><literal type="string">" .. %"</literal><name>PRId64</name><literal type="string">"]"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CONFIG_ITEM_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f</name></name> <operator>!=</operator> <name>FLT_MIN</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f</name></name> <operator>!=</operator> <name>FLT_MAX</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typebuf</name></expr></argument>, <argument><expr><literal type="string">"%s [%f .. %f]"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CONFIG_ITEM_BOOL</name></expr>:</case>
<expr_stmt><expr><name>bra</name> <operator>=</operator> <name>type</name> <operator>=</operator> <name>ket</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">", --no-"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>suffix</name> <operator>=</operator> <ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>i</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(default enabled)"</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(default disabled)"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>print_section</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>shortopt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>i_short</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>shortopt</name></expr></argument>, <argument><expr><literal type="string">"-%c,"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_short</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>shortopt</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CONFIG_CLASS</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONFIG_ITEM_BOOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>WHITE</name><literal type="string">" %s --%s"</literal> <literal type="string">"%s%s%s%s%s "</literal><name>GRAY</name></expr>
</then><else>: <expr><literal type="string">" %s --%s%s%s%s%s%s "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>shortopt</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>bra</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>WHITE</name><literal type="string">" %s --%s"</literal><name>YELLOW</name><literal type="string">"%s%s%s%s%s "</literal><name>GRAY</name></expr>
</then><else>: <expr><literal type="string">" %s --%s%s%s%s%s%s "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>shortopt</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>bra</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>PADDING_SPACES</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call>
<operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bra</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>vlc_swidth</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ket</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CONFIG_CLASS</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONFIG_ITEM_BOOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>vlc_swidth</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>PADDING_SPACES</name> <operator>+</operator> <name>LINE_START</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_desc</name><argument_list>(<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PADDING_SPACES</name> <operator>+</operator> <name>LINE_START</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>suffix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>PADDING_SPACES</name> <operator>+</operator> <name>LINE_START</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_desc</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>PADDING_SPACES</name> <operator>+</operator> <name>LINE_START</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>psz_longtext</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>psz_longtext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>LINE_START</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_desc</name><argument_list>(<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_longtext</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>LINE_START</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>typebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>module_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>objname</name> <init>= <expr><call><name>module_get_object</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>strict</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>objname</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>objname</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortcut</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>pp_shortcuts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>strict</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>shortcut</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>shortcut</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>plugin_show</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CONFIG_ITEM</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>b_removed</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Usage</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_search</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>strict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_search</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>psz_search</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>strict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_search</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>color</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>desc</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"help-verbose"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>vlc_plugins</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>module</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>objname</name> <init>= <expr><call><name>module_get_object</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>module_match</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>psz_search</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>plugin_show</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><literal type="string">"\n "</literal> <name>GREEN</name> <literal type="string">"%s"</literal> <name>GRAY</name> <literal type="string">" (%s)\n"</literal></expr> </then><else>: <expr><literal type="string">"\n %s (%s)\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>psz_longname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>psz_help</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>CYAN</name><literal type="string">" %s\n"</literal><name>GRAY</name></expr> </then><else>: <expr><literal type="string">" %s\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>psz_help</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>b_removed</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>section</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><literal type="string">"\n"</literal> <name>WHITE</name> <literal type="string">"%s"</literal> <name>GRAY</name> <literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">"\n%s\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No matching module found. Use --list or "</literal>
<literal type="string">"--list-verbose to list available modules."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>ListModules</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>color</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ShowConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_this</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>module_list_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_parser</name> <init>= <expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>objname</name> <init>= <expr><call><name>module_get_object</name> <argument_list>(<argument><expr><name>p_parser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>GREEN</name><literal type="string">" %-22s "</literal><name>WHITE</name><literal type="string">"%s\n"</literal><name>GRAY</name></expr> </then><else>: <expr><literal type="string">" %-22s %s\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>objname</name></expr></argument>, <argument><expr><call><name>module_gettext</name><argument_list>(<argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name><name>p_parser</name><operator>-&gt;</operator><name>psz_longname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_verbose</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>pp_shortcuts</name> <init>= <expr><name><name>p_parser</name><operator>-&gt;</operator><name>pp_shortcuts</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_parser</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>pp_shortcuts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>objname</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>CYAN</name><literal type="string">" s %s\n"</literal><name>GRAY</name></expr> </then><else>: <expr><literal type="string">" s %s\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>pp_shortcuts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>p_parser</name><operator>-&gt;</operator><name>psz_capability</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>color</name></expr> ?</condition><then> <expr><name>MAGENTA</name><literal type="string">" c %s (%d)\n"</literal><name>GRAY</name></expr> </then><else>: <expr><literal type="string">" c %s (%d)\n"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_parser</name><operator>-&gt;</operator><name>psz_capability</name></name></expr></argument>, <argument><expr><name><name>p_parser</name><operator>-&gt;</operator><name>i_score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PauseConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Version</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShowConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC version %s (%s)\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VERSION_MESSAGE</name></expr></argument>, <argument><expr><name>psz_vlc_changeset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Compiled by %s on %s (%s)\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VLC_CompileBy</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>VLC_CompileHost</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__DATE__</name><literal type="string">" "</literal><name>__TIME__</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Compiler: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VLC_Compiler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>LICENSE_MSG</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PauseConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>





<function><type><specifier>static</specifier> <name>void</name></type> <name>ShowConsole</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>getenv</name><argument_list>( <argument><expr><literal type="string">"PWD"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AllocConsole</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>SetConsoleOutputCP</name> <argument_list>(<argument><expr><call><name>GetACP</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleTitle</name> <argument_list>(<argument><expr><macro><name>TEXT</name><argument_list>(<argument><literal type="string">"VLC media player version "</literal></argument>)</argument_list></macro> <call><name>TEXT</name><argument_list>(<argument><expr><name>PACKAGE_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"CONOUT$"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"CONIN$"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"vlc-help.txt"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\xEF\xBB\xBF"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nDumped content to vlc-help.txt file.\n"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"CONOUT$"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>PauseConsole</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>getenv</name><argument_list>( <argument><expr><literal type="string">"PWD"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>utf8_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nPress the RETURN key to continue...\n"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
