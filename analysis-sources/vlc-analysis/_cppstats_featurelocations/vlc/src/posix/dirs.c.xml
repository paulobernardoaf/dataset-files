<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\posix\dirs.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>






<function><type><name>VLC_WEAK</name> <name>char</name> <modifier>*</modifier></type><name>config_GetLibDir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>LIBDIR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetSysPath</name><parameter_list>(<parameter><decl><type><name>vlc_sysdir_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>env_vars</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VLC_PKG_DATA_DIR</name></expr>]</index> <operator>=</operator> <literal type="string">"VLC_DATA_PATH"</literal></expr>,
<expr><index>[<expr><name>VLC_PKG_LIB_DIR</name></expr>]</index> <operator>=</operator> <literal type="string">"VLC_LIB_PATH"</literal></expr>,
<expr><index>[<expr><name>VLC_PKG_LIBEXEC_DIR</name></expr>]</index> <operator>=</operator> <literal type="string">"VLC_LIB_PATH"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>env_vars</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>env_vars</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>filename</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"%s/%s"</literal></expr> </then><else>: <expr><literal type="string">"%s"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filepath</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filepath</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filepath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>filepath</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libdir</name> <init>= <expr><call><name>config_GetLibDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>libdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>dirs</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VLC_PKG_DATA_DIR</name></expr>]</index> <operator>=</operator> <name>PKGDATADIR</name></expr>,
<expr><index>[<expr><name>VLC_PKG_LIB_DIR</name></expr>]</index> <operator>=</operator> <name>PKGLIBDIR</name></expr>,
<expr><index>[<expr><name>VLC_PKG_LIBEXEC_DIR</name></expr>]</index> <operator>=</operator> <name>PKGLIBEXECDIR</name></expr>,
<expr><index>[<expr><name>VLC_SYSDATA_DIR</name></expr>]</index> <operator>=</operator> <name>SYSDATADIR</name></expr>,
<expr><index>[<expr><name>VLC_LIB_DIR</name></expr>]</index> <operator>=</operator> <name>LIBDIR</name></expr>,
<expr><index>[<expr><name>VLC_LIBEXEC_DIR</name></expr>]</index> <operator>=</operator> <name>LIBEXECDIR</name></expr>,
<expr><index>[<expr><name>VLC_LOCALE_DIR</name></expr>]</index> <operator>=</operator> <name>LOCALEDIR</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir_static</name> <init>= <expr><name><name>dirs</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>dir_static</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>prefix_len</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>LIBDIR</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>LIBDIR</name><index>[<expr><name>prefix_len</name></expr>]</index></name> <operator>==</operator> <name><name>dir_static</name><index>[<expr><name>prefix_len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>suffix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>LIBDIR</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>prefix_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>libdir_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>suffix_len</name> <operator>&gt;</operator> <name>libdir_len</name>
<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LIBDIR</name><index>[<expr><name>prefix_len</name></expr>]</index></name></expr></argument>, <argument><expr><name>libdir</name> <operator>+</operator> <operator>(</operator><name>libdir_len</name> <operator>-</operator> <name>suffix_len</name><operator>)</operator></expr></argument>,
<argument><expr><name>suffix_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>suffix_len</name> <operator>=</operator> <name>libdir_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>filename</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"%.*s%s/%s"</literal></expr> </then><else>: <expr><literal type="string">"%.*s%s"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filepath</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>libdir_len</name> <operator>-</operator> <name>suffix_len</name><operator>)</operator></expr></argument>,
<argument><expr><name>libdir</name></expr></argument>, <argument><expr><name>dir_static</name> <operator>+</operator> <name>prefix_len</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filepath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filepath</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetHomeDir</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>home</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPWUID_R</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><call><name>sysconf</name> <argument_list>(<argument><expr><name>_SC_GETPW_R_SIZE_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>max</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name></type> <name>pwbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getpwuid_r</name> <argument_list>(<argument><expr><call><name>getuid</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pwbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pw</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>pw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>pw_dir</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetAppDir</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdg_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdg_default</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>var</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><literal type="string">"XDG__HOME"</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>xdg_name</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"XDG_%s_HOME"</literal></expr></argument>, <argument><expr><name>xdg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>home</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>psz_dir</name></expr></argument>, <argument><expr><literal type="string">"%s/vlc"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>psz_dir</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_home</name> <init>= <expr><call><name>config_GetHomeDir</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_home</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_dir</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/vlc"</literal></expr></argument>, <argument><expr><name>psz_home</name></expr></argument>, <argument><expr><name>xdg_default</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetTypeDir</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdg_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>xdg_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><literal type="string">"XDG_CONFIG_HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><literal type="string">"user-dirs.dirs"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>home</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>home</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="string">".config/user-dirs.dirs"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rte"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linebuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>getline</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>linebuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linelen</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>linebuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>strspn</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"XDG_"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>xdg_name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>namelen</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"_DIR"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>strspn</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>strspn</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>linelen</name> <operator>-=</operator> <name>ptr</name> <operator>-</operator> <name>linebuf</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"$HOME"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>homelen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>homelen</name> <operator>+</operator> <name>linelen</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>homelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>path</name> <operator>+</operator> <name>homelen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>xdg_name</name></expr></argument>, <argument><expr><literal type="string">"DESKTOP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/Desktop"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetUserDir</name> <parameter_list>(<parameter><decl><type><name>vlc_userdir_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_HOME_DIR</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>VLC_CONFIG_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetAppDir</name> <argument_list>(<argument><expr><literal type="string">"CONFIG"</literal></expr></argument>, <argument><expr><literal type="string">".config"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_USERDATA_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetAppDir</name> <argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">".local/share"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_CACHE_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetAppDir</name> <argument_list>(<argument><expr><literal type="string">"CACHE"</literal></expr></argument>, <argument><expr><literal type="string">".cache"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_DESKTOP_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"DESKTOP"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_DOWNLOAD_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"DOWNLOAD"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_TEMPLATES_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"TEMPLATES"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PUBLICSHARE_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"PUBLICSHARE"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_DOCUMENTS_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"DOCUMENTS"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_MUSIC_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"MUSIC"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_PICTURES_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"PICTURES"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_VIDEOS_DIR</name></expr>:</case>
<return>return <expr><call><name>config_GetTypeDir</name> <argument_list>(<argument><expr><literal type="string">"VIDEOS"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>config_GetHomeDir</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
