<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\posix\wait.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdalign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>clockid_t</name></type> <name>vlc_clock_id</name> <init>= <expr><name>CLOCK_REALTIME</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_BUCKET_INIT</name></cpp:macro> <cpp:value>{ PTHREAD_MUTEX_INITIALIZER, PTHREAD_COND_INITIALIZER, 0 }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_BUCKET_INIT_2</name></cpp:macro> <cpp:value>WAIT_BUCKET_INIT, WAIT_BUCKET_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_BUCKET_INIT_4</name></cpp:macro> <cpp:value>WAIT_BUCKET_INIT_2, WAIT_BUCKET_INIT_2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_BUCKET_INIT_8</name></cpp:macro> <cpp:value>WAIT_BUCKET_INIT_4, WAIT_BUCKET_INIT_4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_BUCKET_INIT_16</name></cpp:macro> <cpp:value>WAIT_BUCKET_INIT_8, WAIT_BUCKET_INIT_8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_BUCKET_INIT_32</name></cpp:macro> <cpp:value>WAIT_BUCKET_INIT_16, WAIT_BUCKET_INIT_16</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <name>wait_bucket</name>
<block>{
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>waiters</name></decl>;</decl_stmt>
}</block> <decl><name><name>wait_buckets</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>WAIT_BUCKET_INIT_32</name></expr> }</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>wait_bucket</name></name> <modifier>*</modifier></type><name>wait_bucket_get</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>u</name> <operator>/</operator> <call><name>alignof</name> <argument_list>(<argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wait_buckets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>wait_buckets</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>wait_bucket</name></name> <modifier>*</modifier></type><name>wait_bucket_enter</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wait_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>wait_bucket_get</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>waiters</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>bucket</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wait_bucket_leave</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wait_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>waiters</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_atomic_wait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>futex</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wait_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>wait_bucket_enter</name><argument_list>(<argument><expr><name>futex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_cleanup_push</name><argument_list>(<argument><expr><name>wait_bucket_leave</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><name>futex</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>pthread_cleanup_pop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_atomic_timedwait_timespec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>futex</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wait_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>wait_bucket_enter</name><argument_list>(<argument><expr><name>futex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_cleanup_push</name><argument_list>(<argument><expr><name>wait_bucket_leave</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><name>futex</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>pthread_cleanup_pop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_timespec_adjust</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>now_from</name></decl>, <decl><type ref="prev"/><name>now_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc_clock_id</name> <operator>==</operator> <name>cid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>vlc_clock_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lldiv</name><argument_list>(<argument><expr><operator>(</operator><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>now_from</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>now_to</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000000LL</literal>
<operator>+</operator> <name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>now_from</name><operator>.</operator><name>tv_nsec</name></name> <operator>+</operator> <name><name>now_to</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>, <argument><expr><literal type="number">1000000000LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>quot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_atomic_timedwait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name> <init>= <expr><call><name>timespec_from_vlc_tick</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_timespec_adjust</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_atomic_timedwait_timespec</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_atomic_timedwait_daytime</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name> <init>= <expr><block>{ <expr><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>deadline</name></expr>, <expr><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_timespec_adjust</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_atomic_timedwait_timespec</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_atomic_notify_one</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_notify_all</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_atomic_notify_all</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wait_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>wait_bucket_get</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bucket</name><operator>-&gt;</operator><name>waiters</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(constructor)</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_atomic_clock_select</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_condattr_t</name></type> <name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_condattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_condattr_setclock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wait_buckets</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wait_buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wait</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pthread_condattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc_clock_id</name> <operator>=</operator> <name>CLOCK_MONOTONIC</name></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>__attribute__</name><argument_list>(<argument>(destructor)</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_atomic_clock_deselect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wait_buckets</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wait_buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
