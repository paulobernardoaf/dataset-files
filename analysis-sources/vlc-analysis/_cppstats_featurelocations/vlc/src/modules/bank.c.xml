<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\modules\bank.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>vlc_modcap</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>modv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>modc</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_modcap_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_modcap_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_modcap_t</name> <modifier>*</modifier></type><name>capa</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>capb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>capa</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>capb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_modcap_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_modcap_t</name> <modifier>*</modifier></type><name>cap</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>modv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_module_cmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ma</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <modifier>*</modifier><name>mb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>


<return>return <expr><name><operator>(</operator><operator>*</operator><name>mb</name><operator>)</operator><operator>-&gt;</operator><name>i_score</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>ma</name><operator>)</operator><operator>-&gt;</operator><name>i_score</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_modcap_sort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VISIT</name></type> <name>which</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_modcap_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>node</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cap</name> <init>= <expr><operator>*</operator><name>cp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>!=</operator> <name>postorder</name> <operator>&amp;&amp;</operator> <name>which</name> <operator>!=</operator> <name>leaf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>modv</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>modc</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>cap</name><operator>-&gt;</operator><name>modv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vlc_module_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>depth</name></expr>;</expr_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>caches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>caps_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>usage</name></decl>;</decl_stmt>
}</block> <decl><name>modules</name> <init>= <expr><block>{ <expr><name>VLC_STATIC_MUTEX</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>vlc_plugins</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_module_store</name><parameter_list>(<parameter><decl><type><name>module_t</name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>module_get_capability</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_modcap_t</name> <modifier>*</modifier></type><name>cap</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>cap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>cap</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>modv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>modc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>tsearch</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>caps_tree</name></name></expr></argument>, <argument><expr><name>vlc_modcap_cmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <name>cap</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_modcap_free</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cap</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>modv</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>modv</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>modv</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>modc</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>modv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>modv</name></name> <operator>=</operator> <name>modv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>modv</name><index>[<expr><name><name>cap</name><operator>-&gt;</operator><name>modc</name></name></expr>]</index></name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>modc</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_modcap_free</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_plugin_store</name><parameter_list>(<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lib</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>vlc_plugins</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc_plugins</name> <operator>=</operator> <name>lib</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>module_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>lib</name><operator>-&gt;</operator><name>module</name></name></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_module_store</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>module_InitStatic</name><parameter_list>(<parameter><decl><type><name>vlc_plugin_cb</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>vlc_plugin_describe</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>lib</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DYNAMIC_PLUGINS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lib</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lib</name><operator>-&gt;</operator><name>unloadable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>lib</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>HAVE_DYNAMIC_PLUGINS</name></expr></cpp:if>
<decl_stmt><decl><type><name>VLC_WEAK</name>
<specifier>extern</specifier> <name>vlc_plugin_cb</name></type> <name><name>vlc_static_modules</name><index>[]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>module_InitStaticModules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vlc_static_modules</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>vlc_static_modules</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>module_InitStatic</name><argument_list>(<argument><expr><name><name>vlc_static_modules</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>lib</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_plugin_store</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>module_InitStaticModules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DYNAMIC_PLUGINS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_GetVersion</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_api_version</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>get_api_version</name> <operator>=</operator> <call><name>vlc_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"vlc_entry_api_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>get_api_version</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_api_version</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>module_Open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>vlc_dlopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>vlc_dlerror</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_error</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"cannot load plug-in %s: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>errmsg</name></expr> ?</condition><then> <expr><name>errmsg</name></expr> </then><else>: <expr><literal type="string">"unknown error"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>module_GetVersion</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_error</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"cannot load plug-in %s: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><literal type="string">"unknown version or not a plug-in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>VLC_API_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_error</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"cannot load plug-in %s: unsupported version %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>module_InitDynamic</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>fast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>module_Open</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>vlc_plugin_cb</name></type> <name>entry</name> <init>= <expr><call><name>vlc_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"vlc_entry"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot find plug-in entry point in %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>vlc_plugin_describe</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>plugin</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize plug-in %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>plugin</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>CACHE_READ_FILE</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>CACHE_SCAN_DIR</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>CACHE_WRITE_FILE</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
}</block></enum></type> <name>cache_mode_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>module_bank</name>
<block>{
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>plugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
}</block></struct></type> <name>module_bank_t</name>;</typedef>




<function><type><specifier>static</specifier> <name>int</name></type> <name>AllocatePluginFile</name> <parameter_list>(<parameter><decl><type><name>module_bank_t</name> <modifier>*</modifier></type><name>bank</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abspath</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bank</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CACHE_READ_FILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>plugin</name> <operator>=</operator> <call><name>vlc_cache_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bank</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>plugin</name><operator>-&gt;</operator><name>mtime</name></name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>st_mtime</name></name>
<operator>||</operator> <name><name>plugin</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>bank</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"stale plugins cache: modified %s"</literal></expr></argument>,
<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_plugin_destroy</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>plugin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plugin</name> <operator>=</operator> <call><name>module_InitDynamic</name><argument_list>(<argument><expr><name><name>bank</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_plugin_store</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bank</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CACHE_WRITE_FILE</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>bank</name><operator>-&gt;</operator><name>plugins</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>bank</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>bank</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>vlc_plugin_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bank</name><operator>-&gt;</operator><name>plugins</name><index>[<expr><name><name>bank</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>plugin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bank</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>AllocatePluginDir</name> <parameter_list>(<parameter><decl><type><name>module_bank_t</name> <modifier>*</modifier></type><name>bank</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxdepth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>absdir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reldir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maxdepth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>maxdepth</name><operator>--</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dh</name> <init>= <expr><call><name>vlc_opendir</name> <argument_list>(<argument><expr><name>absdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>relpath</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>abspath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>vlc_readdir</name> <argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reldir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>relpath</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>reldir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>relpath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>relpath</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>relpath</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>abspath</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>bank</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>abspath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stat</name> <argument_list>(<argument><expr><name>abspath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"lib"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>suffix</name><index>[]</index></name> <init>= <expr><literal type="string">"_plugin"</literal><name>LIBEXT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>file</name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>LIBEXT</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>file</name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>LIBEXT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LIBEXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>AllocatePluginFile</name> <argument_list>(<argument><expr><name>bank</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AllocatePluginDir</name> <argument_list>(<argument><expr><name>bank</name></expr></argument>, <argument><expr><name>maxdepth</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>skip</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>closedir</name> <argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>AllocatePluginPath</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>cache_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_bank_t</name></type> <name>bank</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>obj</name> <operator>=</operator> <name>obj</name></expr>,
<expr><operator>.</operator><name>base</name> <operator>=</operator> <name>path</name></expr>,
<expr><operator>.</operator><name>mode</name> <operator>=</operator> <name>mode</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CACHE_READ_FILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bank</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <call><name>vlc_cache_load</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>caches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>bank</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"ignoring plugins cache file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CACHE_SCAN_DIR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"recursively browsing `%s'"</literal></expr></argument>, <argument><expr><name><name>bank</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AllocatePluginDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bank</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>bank</name><operator>.</operator><name>cache</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name><name>bank</name><operator>.</operator><name>cache</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bank</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CACHE_SCAN_DIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_plugin_destroy</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_plugin_store</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CACHE_WRITE_FILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CacheSave</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>bank</name><operator>.</operator><name>plugins</name></name></expr></argument>, <argument><expr><name><name>bank</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bank</name><operator>.</operator><name>plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>AllocateAllPlugins</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_mode_t</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"plugins-cache"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CACHE_READ_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"plugins-scan"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CACHE_SCAN_DIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"reset-plugins-cache"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>|</operator> <name>CACHE_WRITE_FILE</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>CACHE_READ_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><call><name>AllocatePluginPath</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"plugins"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vlcpath</name> <init>= <expr><call><name>config_GetSysPath</name><argument_list>(<argument><expr><name>VLC_PKG_LIB_DIR</name></expr></argument>, <argument><expr><literal type="string">"plugins"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>vlcpath</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AllocatePluginPath</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>vlcpath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vlcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>getenv</name><argument_list>( <argument><expr><literal type="string">"VLC_PLUGIN_PATH"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>paths</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>realpath</name><argument_list>( <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>paths</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>paths</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>PATH_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>path</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PATH_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AllocatePluginPath</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>paths</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>module_Map</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>module_Open</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_plugin_cb</name></type> <name>entry</name> <init>= <expr><call><name>vlc_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"vlc_entry"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_error</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"cannot find plug-in entry point in %s"</literal></expr></argument>,
<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>vlc_plugin_resolve</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>handle</name></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>vlc_dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>module_Unmap</name><parameter_list>(<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plugin</name><operator>-&gt;</operator><name>unloadable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>atomic_exchange_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>module_Symbol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>,
<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>module_Map</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>module_Map</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>log</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plugin</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>module_Unmap</name><parameter_list>(<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plugin</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>module_Symbol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>,
<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>log</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plugin</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<function><type><name>void</name></type> <name>module_InitBank</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modules</name><operator>.</operator><name>usage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>module_InitStatic</name><argument_list>(<argument><expr><name>vlc_entry__core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>plugin</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_plugin_store</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>config_SortConfig</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>modules</name><operator>.</operator><name>usage</name></name><operator>++</operator></expr>;</expr_stmt>









</block_content>}</block></function>





<function><type><name>void</name></type> <name>module_EndBank</name> <parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b_plugins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>libs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>caches</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>caps_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name>b_plugins</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>modules</name><operator>.</operator><name>usage</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>modules</name><operator>.</operator><name>usage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>config_UnsortConfig</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libs</name> <operator>=</operator> <name>vlc_plugins</name></expr>;</expr_stmt>
<expr_stmt><expr><name>caches</name> <operator>=</operator> <name><name>modules</name><operator>.</operator><name>caches</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>caps_tree</name> <operator>=</operator> <name><name>modules</name><operator>.</operator><name>caps_tree</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc_plugins</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modules</name><operator>.</operator><name>caches</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modules</name><operator>.</operator><name>caps_tree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tdestroy</name><argument_list>(<argument><expr><name>caps_tree</name></expr></argument>, <argument><expr><name>vlc_modcap_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>libs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><name>libs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>libs</name> <operator>=</operator> <name><name>lib</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>module_Unmap</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_plugin_destroy</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>caches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>module_LoadPlugins</name></cpp:undef>






<function><type><name>void</name></type> <name>module_LoadPlugins</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>modules</name><operator>.</operator><name>usage</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_InitStaticModules</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DYNAMIC_PLUGINS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"searching plug-in modules"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AllocateAllPlugins</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>config_UnsortConfig</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_SortConfig</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twalk</name><argument_list>(<argument><expr><name><name>modules</name><operator>.</operator><name>caps_tree</name></name></expr></argument>, <argument><expr><name>vlc_modcap_sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>module_list_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"plug-ins loaded: %zu modules"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>module_list_free</name> <parameter_list>(<parameter><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>module_list_get</name> <parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><name>vlc_plugins</name></expr></init></decl>;</init> <condition><expr><name>lib</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>lib</name> <operator>=</operator> <name><name>lib</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>nt</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name><name>lib</name><operator>-&gt;</operator><name>modules_count</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nt</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>nt</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>module_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>lib</name><operator>-&gt;</operator><name>module</name></name></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>tab</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>ssize_t</name></type> <name>module_list_cap</name> <parameter_list>(<parameter><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>tfind</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>modules</name><operator>.</operator><name>caps_tree</name></name></expr></argument>, <argument><expr><name>vlc_modcap_cmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_modcap_t</name> <modifier>*</modifier></type><name>cap</name> <init>= <expr><operator>*</operator><name>cp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>modc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>vlc_alloc</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tab</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>modv</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
