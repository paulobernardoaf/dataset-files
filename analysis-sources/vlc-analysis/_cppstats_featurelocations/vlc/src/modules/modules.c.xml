<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\modules\modules.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_arrays.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>module_provides</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>module_get_capability</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_get_object</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_shortcuts</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"unnamed"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>pp_shortcuts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_get_name</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>long_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>long_name</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>m</name><operator>-&gt;</operator><name>psz_longname</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>psz_longname</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>psz_shortname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>psz_shortname</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>module_get_object</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_get_help</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>psz_help</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_get_capability</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>psz_capability</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>psz_capability</name></name></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>module_get_score</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>i_score</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_gettext</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>textdomain</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dgettext</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>domain</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>domain</name></expr> </then><else>: <expr><name>PACKAGE_NAME</name></expr></else></ternary></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m</name></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>module_match_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"any"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>i_score</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pp_shortcuts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>pp_shortcuts</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>module_load</name><parameter_list>(<parameter><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><name>vlc_activate_t</name></type> <name>init</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>module_Map</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>plugin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pf_activate</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pf_activate</name></name></expr></argument>, <argument><expr><name>forced</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





















<function><type><name>module_t</name> <modifier>*</modifier></type>(<name>vlc_module_load</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>capability</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>,
<parameter><decl><type><name>vlc_activate_t</name></type> <name>probe</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"any"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>mods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>total</name> <init>= <expr><call><name>module_list_cap</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mods</name></expr></argument>, <argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_debug</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"looking for %s module matching \"%s\": %zd candidates"</literal></expr></argument>,
<argument><expr><name>capability</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_debug</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"no %s modules"</literal></expr></argument>, <argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortcut</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name> <init>= <expr><call><name>strcspn</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>+=</operator> <call><name>strspn</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>shortcut</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force</name> <init>= <expr><name>strict</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><literal type="string">"any"</literal></expr></argument>, <argument><expr><name>shortcut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>cand</name> <init>= <expr><name><name>mods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cand</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>module_match_name</name><argument_list>(<argument><expr><name>cand</name></expr></argument>, <argument><expr><name>shortcut</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mods</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>module_load</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>cand</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_SUCCESS</name></expr>:</case>
<expr_stmt><expr><name>module</name> <operator>=</operator> <name>cand</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_ETIMEOUT</name></expr>:</case>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>cand</name> <init>= <expr><name><name>mods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cand</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>module_get_score</name> <argument_list>(<argument><expr><name>cand</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>module_load</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>cand</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_SUCCESS</name></expr>:</case>
<expr_stmt><expr><name>module</name> <operator>=</operator> <name>cand</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_ETIMEOUT</name></expr>:</case>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>module</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_debug</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"using %s module \"%s\""</literal></expr></argument>, <argument><expr><name>capability</name></expr></argument>,
<argument><expr><call><name>module_get_object</name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_debug</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="string">"no %s modules matched"</literal></expr></argument>, <argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>module</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generic_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>activate</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>func</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>force</name></name> <operator>=</operator> <name>forced</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>activate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_objres_clear</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>module_need</name></cpp:undef>
<function><type><name>module_t</name> <modifier>*</modifier></type><name>module_need</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_force_backup</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>force</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>vlc_module_load</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>, <argument><expr><name>cap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>,
<argument><expr><name>generic_start</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>module</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"module-name"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"module-name"</literal></expr></argument>, <argument><expr><call><name>module_get_object</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>force</name></name> <operator>=</operator> <name>b_force_backup</name></expr>;</expr_stmt>
<return>return <expr><name>module</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>module_unneed</name></cpp:undef>
<function><type><name>void</name></type> <name>module_unneed</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"removing module \"%s\""</literal></expr></argument>, <argument><expr><call><name>module_get_object</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"module-name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>module</name><operator>-&gt;</operator><name>deactivate</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_objres_clear</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>module_t</name> <modifier>*</modifier></type><name>module_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>module_list_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>i_shortcuts</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>pp_shortcuts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>module</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>module_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>module_exists</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>module_find</name> <argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>module_config_t</name> <modifier>*</modifier></type><name>module_config_get</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>psize</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name><name>module</name><operator>-&gt;</operator><name>plugin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name>module</name></expr>)</condition>
<block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>psize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>config</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psize</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>config</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>item</name><operator>-&gt;</operator><name>b_internal</name></name> 
<operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>b_removed</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>config</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>config</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>psize</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>module_config_free</name><parameter_list>( <parameter><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>config</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
