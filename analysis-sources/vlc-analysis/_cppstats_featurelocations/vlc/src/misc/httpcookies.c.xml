<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\httpcookies.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_messages.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_http.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>http_cookie_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_host_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_secure</name></decl>;</decl_stmt>
}</block></struct></type> <name>http_cookie_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie_get_attribute_value</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>attrlen</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>cookie</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>str</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>strspn</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_ascii_strncasecmp</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>attrlen</name></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><name>attrlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>attrlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>value_length</name> <init>= <expr><call><name>strcspn</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strndup</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>value_length</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cookie_has_attribute</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>attrlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>str</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>strspn</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_ascii_strncasecmp</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>attrlen</name></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><name>attrlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>attrlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>attrlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie_get_domain</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><call><name>cookie_get_attribute_value</name><argument_list>( <argument><expr><name>cookie</name></expr></argument>, <argument><expr><literal type="string">"domain"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>domain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_domain</name> <init>= <expr><name>domain</name> <operator>+</operator> <call><name>strspn</name><argument_list>( <argument><expr><name>domain</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>real_domain</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>real_domain</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>domain</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cookie_domain_matches</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>http_cookie_t</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>cookie</name><operator>-&gt;</operator><name>b_host_only</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>host_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cookie_domain_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_suffix</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>has_dot_before_suffix</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>host_len</name> <operator>&gt;</operator> <name>cookie_domain_len</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>host_len</name> <operator>-</operator> <name>cookie_domain_len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>is_suffix</name> <operator>=</operator> <call><name>vlc_ascii_strcasecmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>host</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>has_dot_before_suffix</name> <operator>=</operator> <name><name>host</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>host_is_ipv4</name> <init>= <expr><call><name>strspn</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"0123456789."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>host_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>host_is_ipv6</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>is_suffix</name> <operator>&amp;&amp;</operator> <name>has_dot_before_suffix</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator> <name>host_is_ipv4</name> <operator>||</operator> <name>host_is_ipv6</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie_get_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cookie_get_attribute_value</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cookie_path_matches</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>http_cookie_t</name> <modifier>*</modifier></type> <name>cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uripath</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>uripath</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name>uripath</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>uripath</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator> <name>path_len</name> <operator>&gt;</operator> <name>prefix_len</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>uripath</name></expr></argument>, <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>uripath</name><index>[<expr><name>prefix_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>uripath</name><index>[<expr><name>prefix_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cookie_should_be_sent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>http_cookie_t</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>secure</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>protocol_ok</name> <init>= <expr><name>secure</name> <operator>||</operator> <operator>!</operator><name><name>cookie</name><operator>-&gt;</operator><name>b_secure</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>domain_ok</name> <init>= <expr><call><name>cookie_domain_matches</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>path_ok</name> <init>= <expr><call><name>cookie_path_matches</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>protocol_ok</name> <operator>&amp;&amp;</operator> <name>domain_ok</name> <operator>&amp;&amp;</operator> <name>path_ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie_default_path</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request_path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>request_path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>request_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_start</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>request_path</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>query_start</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>request_path</name></expr></argument>, <argument><expr><name>query_start</name> <operator>-</operator> <name>request_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>request_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>path</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last_slash</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last_slash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>last_slash</name> <operator>==</operator> <name>path</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>last_slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cookie_destroy</name><parameter_list>(<parameter><decl><type><name>http_cookie_t</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cookie</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VLC_MALLOC</name> <name>VLC_USED</name>
<specifier>static</specifier> <name>http_cookie_t</name> <modifier>*</modifier></type><name>cookie_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>http_cookie_t</name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>cookie</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>value_length</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><name>value_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value_length</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>value</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name> <operator>=</operator> <call><name>cookie_get_domain</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>b_host_only</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>b_host_only</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>=</operator> <call><name>cookie_get_path</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>=</operator> <call><name>cookie_default_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>b_secure</name></name> <operator>=</operator> <call><name>cookie_has_attribute</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"secure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cookie</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>cookie_destroy</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>vlc_http_cookie_jar_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>cookies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>vlc_http_cookie_jar_t</name> <modifier>*</modifier></type> <name>vlc_http_cookies_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_http_cookie_jar_t</name> <modifier>*</modifier></type> <name>jar</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vlc_http_cookie_jar_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>jar</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>jar</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>jar</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_http_cookies_destroy</name><parameter_list>( <parameter><decl><type><name>vlc_http_cookie_jar_t</name> <modifier>*</modifier></type> <name>p_jar</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_jar</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cookie_destroy</name><argument_list>( <argument><expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_jar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_http_cookies_store</name><parameter_list>(<parameter><decl><type><name>vlc_http_cookie_jar_t</name> <modifier>*</modifier></type><name>p_jar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cookies</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>http_cookie_t</name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><call><name>cookie_parse</name><argument_list>(<argument><expr><name>cookies</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cookie</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>!</operator><call><name>cookie_domain_matches</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cookie_destroy</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>http_cookie_t</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>domains_match</name> <init>=
<expr><call><name>vlc_ascii_strcasecmp</name><argument_list>( <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>paths_match</name> <init>= <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>names_match</name> <init>= <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>domains_match</name> <operator>&amp;&amp;</operator> <name>paths_match</name> <operator>&amp;&amp;</operator> <name>names_match</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cookie_destroy</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><operator>(</operator><call><name>vlc_array_append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>cookie</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ret</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cookie_destroy</name><argument_list>( <argument><expr><name>cookie</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_http_cookies_fetch</name><parameter_list>(<parameter><decl><type><name>vlc_http_cookie_jar_t</name> <modifier>*</modifier></type><name>p_jar</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>secure</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cookiebuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>http_cookie_t</name> <modifier>*</modifier></type> <name>cookie</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cookie_should_be_sent</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>secure</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_updated_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_updated_buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_cookiebuf</name></expr> ?</condition><then> <expr><name>psz_cookiebuf</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_cookiebuf</name></expr> ?</condition><then> <expr><literal type="string">"; "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_value</name></name></expr> ?</condition><then> <expr><name><name>cookie</name><operator>-&gt;</operator><name>psz_value</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cookiebuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cookiebuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_cookiebuf</name> <operator>=</operator> <name>psz_updated_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_jar</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_cookiebuf</name></expr>;</return>
</block_content>}</block></function>
</unit>
