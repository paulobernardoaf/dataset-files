<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\background_worker.c">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"background_worker.h"</cpp:file></cpp:include>

<struct>struct <name>task</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>entity</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>timeout</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct_decl>struct <name>background_worker</name>;</struct_decl>

<struct>struct <name>background_thread</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>probe_cancel_wait</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>probe</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>cancel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>background_worker</name> <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>background_worker_config</name></name></type> <name>conf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uncompleted</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>threads</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>queue</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>queue_wait</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>nothreads_wait</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>closing</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task_Create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>entity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>task</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>entity</name></name> <operator>=</operator> <name>entity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <ternary><condition><expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>worker</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>default_timeout</name></name></expr> </then><else>: <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>worker</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>pf_hold</name></name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>entity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>task_Destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>worker</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>pf_release</name></name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>entity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>QueueTake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>timeout_ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>timeout</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><name>timeout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>worker</name><operator>-&gt;</operator><name>closing</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue_wait</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>closing</name></name> <operator>||</operator> <name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>vlc_list_first_entry_or_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>,
<argument><expr>struct <name>task</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>QueuePush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>QueueRemoveAll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>task</argument>, <argument>&amp;worker-&gt;queue</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name> <operator>||</operator> <name><name>task</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>task_Destroy</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type>
<name>background_thread_Create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>thread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>probe_cancel_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>probe</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>cancel</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>owner</name></expr>;</expr_stmt>
<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>background_thread_Destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>background_worker_Create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>background_worker_config</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>conf</name></name> <operator>=</operator> <operator>*</operator><name>conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>owner</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>uncompleted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>nothreads_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>worker</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>background_worker_Destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TerminateTask</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>thread</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>uncompleted</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>uncompleted</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>task_Destroy</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RemoveThread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>thread</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>nothreads_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>background_thread_Destroy</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name><name>thread</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>QueueTake</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>task</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>cancel</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>probe</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>task</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>worker</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>pf_start</name></name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>entity</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TerminateTask</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>timeout</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><name>timeout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>thread</name><operator>-&gt;</operator><name>probe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>thread</name><operator>-&gt;</operator><name>cancel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>probe_cancel_wait</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>bool</name></type> <name>cancel</name> <init>= <expr><name><name>thread</name><operator>-&gt;</operator><name>cancel</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>cancel</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>probe</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>||</operator> <name>cancel</name>
<operator>||</operator> <call><name><name>worker</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>pf_probe</name></name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>worker</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>pf_stop</name></name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TerminateTask</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RemoveThread</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>SpawnThread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><call><name>background_thread_Create</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone_detach</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>background_worker_New</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>background_worker_config</name></name><modifier>*</modifier></type> <name>conf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>background_worker_Create</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>background_worker_Push</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>entity</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>task_Create</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>entity</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>task</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QueuePush</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>worker</name><operator>-&gt;</operator><name>uncompleted</name></name> <operator>&gt;</operator> <name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name>
<operator>&amp;&amp;</operator> <name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name> <operator>&lt;</operator> <name><name>worker</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>max_threads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SpawnThread</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BackgroundWorkerCancelLocked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name> <modifier>*</modifier></type><name>worker</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QueueRemoveAll</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>thread</argument>, <argument>&amp;worker-&gt;threads</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name> <operator>||</operator> <operator>(</operator><name><name>thread</name><operator>-&gt;</operator><name>task</name></name> <operator>&amp;&amp;</operator> <name><name>thread</name><operator>-&gt;</operator><name>task</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>thread</name><operator>-&gt;</operator><name>cancel</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>cancel</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>probe_cancel_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>background_worker_Cancel</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BackgroundWorkerCancelLocked</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>background_worker_RequestProbe</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_thread</name></name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
<macro><name>vlc_list_foreach</name><argument_list>(<argument>thread</argument>, <argument>&amp;worker-&gt;threads</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>probe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>probe_cancel_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>background_worker_Delete</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>closing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BackgroundWorkerCancelLocked</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>queue_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>nthreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>nothreads_wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>background_worker_Destroy</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
