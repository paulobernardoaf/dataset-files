<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\image.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<struct>struct <name>decoder_owner</name>
<block>{
<decl_stmt><decl><type><name>decoder_t</name></type> <name>dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>dec_get_owner</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>container_of</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr>struct <name>decoder_owner</name></expr></argument>, <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ImageRead</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ImageReadUrl</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ImageWrite</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ImageWriteUrl</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ImageConvert</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>decoder_t</name> <modifier>*</modifier></type><name>CreateDecoder</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>encoder_t</name> <modifier>*</modifier></type><name>CreateEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeleteEncoder</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>CreateConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeleteConverter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>vlc_fourcc_t</name></type> <name>image_Type2Fourcc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vlc_fourcc_t</name></type> <name>image_Ext2Fourcc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>image_HandlerCreate</name></cpp:undef>




<function><type><name>image_handler_t</name> <modifier>*</modifier></type><name>image_HandlerCreate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>image_handler_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_image</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <name>p_this</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>ImageRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>pf_read_url</name></name> <operator>=</operator> <name>ImageReadUrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>ImageWrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>pf_write_url</name></name> <operator>=</operator> <name>ImageWriteUrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>pf_convert</name></name> <operator>=</operator> <name>ImageConvert</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>outfifo</name></name> <operator>=</operator> <call><name>picture_fifo_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_image</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>image_HandlerDelete</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_image</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DeleteEncoder</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DeleteConverter</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_fifo_Delete</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>outfifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_image</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>ImageQueueVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>picture_fifo_Push</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_image</name><operator>-&gt;</operator><name>outfifo</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ImageRead</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_es_in</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_es_in</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>&amp;&amp;</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name><name>p_es_in</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <call><name>CreateDecoder</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_es_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>VLCDEC_SUCCESS</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>picture_fifo_Pop</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>outfifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>lostcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>lostpic</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator> <name>lostpic</name> <operator>=</operator> <call><name>picture_fifo_Pop</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>outfifo</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>lostpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lostcount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><name>lostcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"Image decoder output more than one "</literal>
<literal type="string">"picture (%u)"</literal></expr></argument>, <argument><expr><name>lostcount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"no image decoded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&amp;&amp;</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>*</operator>
<name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>/</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&amp;&amp;</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>*</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>*</operator>
<name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>/</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>transfer</name></name> <operator>==</operator> <name>TRANSFER_FUNC_UNDEF</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>space</name></name> <operator>==</operator> <name>COLOR_SPACE_UNDEF</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>DeleteConverter</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>=</operator>
<call><name>CreateConverter</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>,
<argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_fmt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><name>p_fmt_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ImageReadUrl</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"could not open %s for reading"</literal></expr></argument>,
<argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>||</operator> <name>i_size</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"could not read %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mime</name> <init>= <expr><call><name>stream_MimeType</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_mime</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <call><name>image_Mime2Fourcc</name><argument_list>( <argument><expr><name>psz_mime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_chroma</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <call><name>image_Ext2Fourcc</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmtin</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmtin</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>ImageRead</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmtin</name></expr></argument>, <argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmtin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>BitMapFormatIsSimilar</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>f2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB15</name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB16</name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB24</name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB32</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>v1</name> <init>= <expr><operator>*</operator><name>f1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>v2</name> <init>= <expr><operator>*</operator><name>f2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>v1</name><operator>.</operator><name>i_rmask</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>i_rmask</name></name> <operator>||</operator>
<name><name>v1</name><operator>.</operator><name>i_gmask</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>i_gmask</name></name> <operator>||</operator>
<name><name>v1</name><operator>.</operator><name>i_bmask</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>i_bmask</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ImageWrite</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteEncoder</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name> <operator>=</operator> <call><name>CreateEncoder</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>,
<argument><expr><name>p_fmt_in</name></expr></argument>, <argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator>
<operator>!</operator><call><name>BitMapFormatIsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_tmp_pic</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>||</operator>
<operator>!</operator><call><name>BitMapFormatIsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>DeleteConverter</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>video</name></name> <operator>=</operator> <operator>*</operator><name>p_fmt_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>=</operator>
<call><name>CreateConverter</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp_pic</name> <operator>=</operator>
<call><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_tmp_pic</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name></expr></argument>,
<argument><expr><name>p_tmp_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_tmp_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_enc</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"no image encoded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ImageWriteUrl</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name> <init>= <expr><operator>*</operator><name>p_fmt_out</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <call><name>image_Ext2Fourcc</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>file</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>ImageWrite</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>err</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>err</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ImageConvert</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&amp;&amp;</operator>
<name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>&amp;&amp;</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>&amp;&amp;</operator>
<name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>!=</operator>
<name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator>
<name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator>
<name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>/</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator>
<name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator>
<name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>/</operator>
<name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>||</operator>
<name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>DeleteConverter</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>video</name></name> <operator>=</operator> <operator>*</operator><name>p_fmt_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name> <operator>=</operator>
<call><name>CreateConverter</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_converter</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz_ext</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>ext_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_JPEG</name></expr>, <expr><literal type="string">"jpeg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_JPEG</name></expr>, <expr><literal type="string">"jpg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_JPEGLS</name></expr>, <expr><literal type="string">"ljpg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_BPG</name></expr>, <expr><literal type="string">"bpg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PNG</name></expr>, <expr><literal type="string">"png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PGM</name></expr>, <expr><literal type="string">"pgm"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PGMYUV</name></expr>, <expr><literal type="string">"pgmyuv"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'b'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"pbm"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"pam"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_TARGA</name></expr>, <expr><literal type="string">"tga"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_BMP</name></expr>, <expr><literal type="string">"bmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PNM</name></expr>, <expr><literal type="string">"pnm"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xpm"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xcf"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PCX</name></expr>, <expr><literal type="string">"pcx"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GIF</name></expr>, <expr><literal type="string">"gif"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_SVG</name></expr>, <expr><literal type="string">"svg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_TIFF</name></expr>, <expr><literal type="string">"tif"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_TIFF</name></expr>, <expr><literal type="string">"tiff"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'b'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"lbm"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PPM</name></expr>, <expr><literal type="string">"ppm"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>vlc_fourcc_t</name></type> <name>image_Type2Fourcc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ext_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ext_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_ext</name></expr></argument>, <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ext_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_fourcc_t</name></type> <name>image_Ext2Fourcc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_name</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><call><name>image_Type2Fourcc</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl>;</decl_stmt>
}</block> <decl><name><name>mime_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_BMP</name></expr>, <expr><literal type="string">"image/bmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_BMP</name></expr>, <expr><literal type="string">"image/x-bmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_BMP</name></expr>, <expr><literal type="string">"image/x-bitmap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_BMP</name></expr>, <expr><literal type="string">"image/x-ms-bmp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PNM</name></expr>, <expr><literal type="string">"image/x-portable-anymap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PNM</name></expr>, <expr><literal type="string">"image/x-portable-bitmap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PNM</name></expr>, <expr><literal type="string">"image/x-portable-graymap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PNM</name></expr>, <expr><literal type="string">"image/x-portable-pixmap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GIF</name></expr>, <expr><literal type="string">"image/gif"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_JPEG</name></expr>, <expr><literal type="string">"image/jpeg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_BPG</name></expr>, <expr><literal type="string">"image/bpg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PCX</name></expr>, <expr><literal type="string">"image/pcx"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_PNG</name></expr>, <expr><literal type="string">"image/png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_SVG</name></expr>, <expr><literal type="string">"image/svg+xml"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_TIFF</name></expr>, <expr><literal type="string">"image/tiff"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_TARGA</name></expr>, <expr><literal type="string">"image/x-tga"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"image/x-xpixmap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>vlc_fourcc_t</name></type> <name>image_Mime2Fourcc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>mime_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_mime</name></expr></argument>, <argument><expr><name><name>mime_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_mime</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>mime_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>image_get_device</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>decoder_t</name> <modifier>*</modifier></type><name>CreateDecoder</name><parameter_list>( <parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_owner</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name><name>p_image</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_owner</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"image decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_owner</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_dec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <name>p_image</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_Init</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>video</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>get_device</name> <operator>=</operator> <name>image_get_device</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>ImageQueueVideo</name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_cbs</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need_var</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"video decoder"</literal></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"no suitable decoder module for fourcc `%4.4s'. "</literal>
<literal type="string">"VLC probably does not support this image format."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_dec</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>encoder_t</name> <modifier>*</modifier></type><name>CreateEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_enc</name> <operator>=</operator> <call><name>sout_EncoderCreate</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_enc</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>fmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt_out</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>fmt_out</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>&amp;&amp;</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>&amp;&amp;</operator>
<name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>!=</operator>
<name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>
<name><name>fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator>
<name><name>fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>/</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>
<name><name>fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator>
<name><name>fmt_in</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>/</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"no suitable encoder module for fourcc `%4.4s'.\n"</literal>
<literal type="string">"VLC probably does not support this image format."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteEncoder</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_enc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteEncoder</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type> <name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>CreateConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_filter</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"video converter"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no video converter found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteConverter</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteConverter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
