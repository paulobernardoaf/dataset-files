<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\fifo.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>




<struct>struct <name>block_fifo_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>vlc_fifo_Lock</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_fifo_Unlock</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_fifo_Signal</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_fifo_Wait</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_WaitCond</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_fifo_WaitCond</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>condvar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><name>condvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_fifo_TimedWaitCond</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>condvar</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><name>condvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vlc_fifo_GetCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vlc_fifo_GetBytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>fifo</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_fifo_QueueUnlocked</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name><operator>)</operator> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_fifo_Signal</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>vlc_fifo_DequeueUnlocked</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>vlc_fifo_DequeueAllUnlocked</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>block_FifoNew</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>block_fifo_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_fifo</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_fifo</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>=</operator> <name><name>p_fifo</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>p_fifo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>block_FifoRelease</name><parameter_list>( <parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>block_FifoEmpty</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>vlc_fifo_DequeueAllUnlocked</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>block_FifoPut</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_QueueUnlocked</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_FifoGet</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>vlc_fifo_IsEmpty</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_CleanupPush</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Wait</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>vlc_fifo_DequeueUnlocked</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_FifoShow</name><parameter_list>( <parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>block_FifoSize</name> <parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>block_FifoCount</name> <parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>depth</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>depth</name></expr>;</return>
</block_content>}</block></function>
</unit>
