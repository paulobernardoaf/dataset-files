<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\messages.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogSpam</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"VLC media player - %s"</literal></expr></argument>, <argument><expr><name>VERSION_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>COPYRIGHT_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"revision %s"</literal></expr></argument>, <argument><expr><name>psz_vlc_changeset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"configured with %s"</literal></expr></argument>, <argument><expr><name>CONFIGURE_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>vlc_logger</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vaLogCallback</name><parameter_list>(<parameter><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>logger</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>logger</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>logger</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>log</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogCallback</name><parameter_list>(<parameter><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>logger</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vaLogCallback</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Win32DebugOutputMsg</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>vlc_vaLog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>loggerp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><operator>*</operator><name>loggerp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>module</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>modlen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>module</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>modulebuf</name><index>[<expr><name>modlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>modulebuf</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>modlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modulebuf</name><index>[<expr><name>modlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>module</name> <operator>=</operator> <name>modulebuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>vlc_log_t</name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>i_object_id</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>loggerp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>psz_object_type</name></name> <operator>=</operator> <name>typename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>psz_module</name></name> <operator>=</operator> <name>module</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>psz_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>tid</name></name> <operator>=</operator> <call><name>vlc_thread_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Win32DebugOutputMsg</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>logger</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_vaLogCallback</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_Log</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>logger</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vaLog</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>msg_type</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">" error"</literal></expr>, <expr><literal type="string">" warning"</literal></expr>, <expr><literal type="string">" debug"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Win32DebugOutputMsg</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>dol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>pverbose</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pverbose</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pverbose</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>pverbose</name> <operator>&lt;</operator> <operator>(</operator><name>type</name> <operator>-</operator> <name>VLC_MSG_ERR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>dol2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name>dol2</name></expr></argument>, <argument><expr><name>dol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msg_len</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>dol2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>dol2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>msg_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_len</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>dol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><index>[<expr><name>msg_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><index>[<expr><name>msg_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><index>[<expr><name>msg_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_msg</name></expr></argument>, <argument><expr><literal type="string">"%s %s%s: %s"</literal></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>,
<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_object_type</name></name></expr></argument>, <argument><expr><name><name>msg_type</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wmsg</name> <init>= <expr><call><name>ToWide</name><argument_list>(<argument><expr><name>psz_msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>wmsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>OutputDebugStringW</name><argument_list>(<argument><expr><name>wmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<typedef>typedef <type><struct>struct <name>vlc_log_early_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_log_early_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_log_t</name></type> <name>meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_log_early_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_logger_early</name> <block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_log_early_t</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_log_early_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tailp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>sink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name></type> <name>logger</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_logger_early_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vaLogEarly</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_early</name></name> <modifier>*</modifier></type><name>early</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_early</name></expr></argument>, <argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_log_early_t</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>log</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>log</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>i_object_id</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>i_object_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_object_type</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>psz_object_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_module</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>psz_module</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_header</name></name> <operator>=</operator> <ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>psz_header</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_header</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>func</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>log</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>log</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>early</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>early</name><operator>-&gt;</operator><name>tailp</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>early</name><operator>-&gt;</operator><name>tailp</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>early</name><operator>-&gt;</operator><name>tailp</name></name><operator>)</operator> <operator>=</operator> <name>log</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>early</name><operator>-&gt;</operator><name>tailp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>log</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>early</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogEarlyClose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_early</name></name> <modifier>*</modifier></type><name>early</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_early</name></expr></argument>, <argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>sink</name> <init>= <expr><name><name>early</name><operator>-&gt;</operator><name>sink</name></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>vlc_log_early_t</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><name><name>early</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</init> <condition><expr><name>log</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>log</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_LogCallback</name><argument_list>(<argument><expr><name>sink</name></expr></argument>, <argument><expr><name><name>log</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>log</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>log</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>log</name><operator>-&gt;</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"message lost"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>log</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>log</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>early</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>early_ops</name> <init>= <expr><block>{
<expr><name>vlc_vaLogEarly</name></expr>,
<expr><name>vlc_LogEarlyClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>vlc_LogEarlyOpen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_logger_early_t</name> <modifier>*</modifier></type><name>early</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>early</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>early</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>early</name><operator>-&gt;</operator><name>logger</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>early_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>early</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>early</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>early</name><operator>-&gt;</operator><name>tailp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>early</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>early</name><operator>-&gt;</operator><name>sink</name></name> <operator>=</operator> <name>logger</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>early</name><operator>-&gt;</operator><name>logger</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vaLogDiscard</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>type</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>item</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>format</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ap</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogDiscardClose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>discard_ops</name> <init>= <expr><block>{
<expr><name>vlc_vaLogDiscard</name></expr>,
<expr><name>vlc_LogDiscardClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_logger</name></name></type> <name>discard_log</name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>discard_ops</name></expr> }</block></expr></init></decl>;</decl_stmt>






<struct>struct <name>vlc_logger_switch</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>backend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name></type> <name>frontend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_rwlock_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vaLogSwitch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_switch</name></name> <modifier>*</modifier></type><name>logswitch</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_switch</name></expr></argument>, <argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>backend</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logswitch</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backend</name> <operator>=</operator> <name><name>logswitch</name><operator>-&gt;</operator><name>backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>backend</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>log</name></name><argument_list>(<argument><expr><name>backend</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logswitch</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogSwitchClose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_switch</name></name> <modifier>*</modifier></type><name>logswitch</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_switch</name></expr></argument>, <argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>logswitch</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>logswitch</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <operator>&amp;</operator><name>discard_log</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>backend</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logswitch</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>logswitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>switch_ops</name> <init>= <expr><block>{
<expr><name>vlc_vaLogSwitch</name></expr>,
<expr><name>vlc_LogSwitchClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogSwitch</name><parameter_list>(<parameter><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>logger</name></decl></parameter>, <parameter><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>new_logger</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_switch</name></name> <modifier>*</modifier></type><name>logswitch</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_switch</name></expr></argument>, <argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>old_logger</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>logger</name><operator>-&gt;</operator><name>ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>switch_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_logger</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_logger</name> <operator>=</operator> <operator>&amp;</operator><name>discard_log</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logswitch</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_logger</name> <operator>=</operator> <name><name>logswitch</name><operator>-&gt;</operator><name>backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>logswitch</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>new_logger</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logswitch</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>old_logger</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>old_logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>vlc_LogSwitchCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_switch</name></name> <modifier>*</modifier></type><name>logswitch</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>logswitch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>logswitch</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>logswitch</name><operator>-&gt;</operator><name>frontend</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>switch_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>logswitch</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <operator>&amp;</operator><name>discard_log</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logswitch</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>logswitch</name><operator>-&gt;</operator><name>frontend</name></name></expr>;</return>
</block_content>}</block></function>




<struct>struct <name>vlc_logger_module</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name></type> <name>frontend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_logger_load</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>activate</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>func</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_module</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>struct <name>vlc_logger_module</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>forced</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <call><name>activate</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>module</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>module</name><operator>-&gt;</operator><name>ops</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vaLogModule</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_module</name></name> <modifier>*</modifier></type><name>module</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_module</name></expr></argument>, <argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>module</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>log</name></name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogModuleClose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_module</name></name> <modifier>*</modifier></type><name>module</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_module</name></expr></argument>, <argument><expr><name>frontend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>module</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>module_ops</name> <init>= <expr><block>{
<expr><name>vlc_vaLogModule</name></expr>,
<expr><name>vlc_LogModuleClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>vlc_LogModuleCreate</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_module</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"logger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>module</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_module_load</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"logger"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>vlc_logger_load</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>frontend</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>module_ops</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>module</name><operator>-&gt;</operator><name>frontend</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>vlc_LogInit</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><call><name>vlc_LogModuleCreate</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>logger</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>logger</name> <operator>=</operator> <operator>&amp;</operator><name>discard_log</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_LogSwitch</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name></expr></argument>, <argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>vlc_LogPreinit</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><call><name>vlc_LogSwitchCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>logger</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vlc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>logger</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>early</name> <init>= <expr><call><name>vlc_LogEarlyOpen</name><argument_list>(<argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>early</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_LogSwitch</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name>early</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_LogSpam</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<struct>struct <name>vlc_logger_header</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name></type> <name>logger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>header</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vaLogHeader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_header</name></name> <modifier>*</modifier></type><name>header</name> <init>=
<expr><call><name>container_of</name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr>struct <name>vlc_logger_header</name></expr></argument>, <argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>header</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_log_t</name></type> <name>hitem</name> <init>= <expr><operator>*</operator><name>item</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hitem</name><operator>.</operator><name>psz_header</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>header</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>log</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hitem</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>header_ops</name> <init>= <expr><block>{
<expr><name>vlc_vaLogHeader</name></expr>,
<expr><name>free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>vlc_LogHeaderCreate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>header</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>logger</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>header_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>logger</name></name></expr>;</return>
</block_content>}</block></function>




<struct>struct <name>vlc_logger_external</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name></type> <name>logger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vaLogExternal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_external</name></name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ext</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>log</name></name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_LogExternalClose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_external</name></name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ext</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ext</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>external_ops</name> <init>= <expr><block>{
<expr><name>vlc_vaLogExternal</name></expr>,
<expr><name>vlc_LogExternalClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type>
<name>vlc_LogExternalCreate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger_external</name></name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ext</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>logger</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>external_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>logger</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>vlc_LogSet</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ops</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>logger</name> <operator>=</operator> <call><name>vlc_LogExternalCreate</name><argument_list>(<argument><expr><name>ops</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>logger</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>logger</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>logger</name> <operator>=</operator> <operator>&amp;</operator><name>discard_log</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_LogSwitch</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name></expr></argument>, <argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_LogSpam</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_LogDestroy</name><parameter_list>(<parameter><decl><type><name>vlc_logger_t</name> <modifier>*</modifier></type><name>logger</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>logger</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
