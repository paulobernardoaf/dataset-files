<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\subpicture.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subpicture.h"</cpp:file></cpp:include>

<struct>struct <name>subpicture_private_t</name>
<block>{
<decl_stmt><decl><type><name>video_format_t</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>dst</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>subpicture_updater_t</name> <modifier>*</modifier></type><name>p_upd</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_subpic</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpic</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_fade</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_upd</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_private_t</name> <modifier>*</modifier></type><name>p_private</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_private</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_private</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name></name> <operator>=</operator> <operator>*</operator><name>p_upd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name></name> <operator>=</operator> <name>p_private</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_validate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_destroy</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>subpicture_Delete</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>subpicture_region_ChainDelete</name><argument_list>( <argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_destroy</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_destroy</name></name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name><operator>-&gt;</operator><name>src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name><operator>-&gt;</operator><name>dst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture_NewFromPicture</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_in</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fmt_out</name> <operator>=</operator> <name>fmt_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_chroma</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_image</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pip</name> <init>= <expr><call><name>image_Convert</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pip</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name> <init>= <expr><call><name>subpicture_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator>
<name><name>fmt_out</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <name>p_pip</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>subpicture_Update</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpicture</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_updater_t</name> <modifier>*</modifier></type><name>p_upd</name> <init>= <expr><operator>&amp;</operator><name><name>p_subpicture</name><operator>-&gt;</operator><name>updater</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_private_t</name> <modifier>*</modifier></type><name>p_private</name> <init>= <expr><name><name>p_subpicture</name><operator>-&gt;</operator><name>p_private</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_upd</name><operator>-&gt;</operator><name>pf_validate</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name><name>p_upd</name><operator>-&gt;</operator><name>pf_validate</name></name><argument_list>( <argument><expr><name>p_subpicture</name></expr></argument>,
<argument><expr><operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>( <argument><expr><name>p_fmt_src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>src</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_fmt_src</name></expr></argument>,
<argument><expr><operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>( <argument><expr><name>p_fmt_dst</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>dst</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_fmt_dst</name></expr></argument>,
<argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>subpicture_region_ChainDelete</name><argument_list>( <argument><expr><name><name>p_subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpicture</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_upd</name><operator>-&gt;</operator><name>pf_update</name></name><argument_list>( <argument><expr><name>p_subpicture</name></expr></argument>, <argument><expr><name>p_fmt_src</name></expr></argument>, <argument><expr><name>p_fmt_dst</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>dst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>p_fmt_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>p_fmt_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>subpicture_region_private_t</name> <modifier>*</modifier></type><name>subpicture_region_private_New</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_region_private_t</name> <modifier>*</modifier></type><name>p_private</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_private</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_private</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_private</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_private</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>p_private</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>subpicture_region_private_Delete</name><parameter_list>( <parameter><decl><type><name>subpicture_region_private_t</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_private</name><operator>-&gt;</operator><name>p_picture</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_private</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_private</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_private</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>subpicture_region_t</name> <modifier>*</modifier></type> <name>subpicture_region_NewInternal</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_region</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <operator>*</operator><name>p_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>b_balanced_text</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>p_region</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>subpicture_region_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>=
<expr><call><name>subpicture_region_NewInternal</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_region</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_region</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>subpicture_region_Delete</name><parameter_list>( <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_private</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>subpicture_region_private_Delete</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>text_segment_ChainDelete</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>subpicture_region_ChainDelete</name><parameter_list>( <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_head</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>p_head</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_head</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>subpicture_region_Delete</name><argument_list>( <argument><expr><name>p_head</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_head</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<function><type><name>unsigned</name></type> <name>picture_BlendSubpicture</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>vlc_blender_t</name> <modifier>*</modifier></type><name>blend</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>b_fade</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>b_absolute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>i_align</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>filter_ConfigureBlend</name><argument_list>(<argument><expr><name>blend</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>filter_Blend</name><argument_list>(<argument><expr><name>blend</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>blend</name></expr></argument>, <argument><expr><literal type="string">"blending %4.4s to %4.4s failed"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>blend</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>blend</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>done</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>subpicture_region_t</name><modifier>*</modifier></type> <name>subpicture_region_Copy</name><parameter_list>( <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_region_src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region_dst</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_region_src</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_region_dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_region_dst</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_region_src</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region_dst</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_region_src</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region_dst</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_region_src</name><operator>-&gt;</operator><name>i_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region_dst</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <name><name>p_region_src</name><operator>-&gt;</operator><name>i_alpha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region_dst</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_Copy</name><argument_list>( <argument><expr><name><name>p_region_src</name><operator>-&gt;</operator><name>p_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_region_src</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_region_dst</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,
<argument><expr><name><name>p_region_src</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,
<argument><expr><name><name>p_region_src</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_region_src</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>p_region_dst</name></expr>;</return>
</block_content>}</block></function>
</unit>
