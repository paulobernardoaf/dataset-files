<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\es_format.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>


<function><type><name>void</name></type> <name>video_format_FixRgb</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>||</operator> <operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>||</operator> <operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bmask</name></name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x7c00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x03e0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x001f</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0xf800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x07e0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x001f</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0xff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x00ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x0000ff</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>video_format_Setup</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_visible_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_visible_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_sar_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sar_den</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name>i_visible_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>i_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name>i_visible_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,
<argument><expr><name>i_sar_num</name></expr></argument>, <argument><expr><name>i_sar_den</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_YUVA</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YUV420A</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YUV422A</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I444</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J444</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I422</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YUV2</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_VYUY</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J422</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I440</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J440</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_P016</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I411</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YV9</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_I410</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_Y211</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YUVP</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGBA</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ARGB</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB8</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_GREY</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGBP</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_GREY_10B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GREY_10L</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_GREY_12B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GREY_12L</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_XYZ12</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>video_format_CopyCrop</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_x_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>video_format_ScaleCropAr</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,
<argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,
<argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>transform_GetBasicOps</name><parameter_list>( <parameter><decl><type><name>video_transform_t</name></type> <name>transform</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>angle</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>hflip</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hflip</name> <operator>=</operator> <call><name>ORIENT_IS_MIRROR</name><argument_list>(<argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>( <expr><name>transform</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>TRANSFORM_R90</name></expr>:</case>
<case>case <expr><name>TRANSFORM_TRANSPOSE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>angle</name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFORM_R180</name></expr>:</case>
<case>case <expr><name>TRANSFORM_VFLIP</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>angle</name> <operator>=</operator> <literal type="number">180</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFORM_R270</name></expr>:</case>
<case>case <expr><name>TRANSFORM_ANTI_TRANSPOSE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>angle</name> <operator>=</operator> <literal type="number">270</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFORM_HFLIP</name></expr>:</case>
<case>case <expr><name>TRANSFORM_IDENTITY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>video_transform_t</name></type> <name>transform_FromBasicOps</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hflip</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch <condition>( <expr><name>angle</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">90</literal></expr>:</case>
<return>return <expr><ternary><condition><expr><name>hflip</name></expr> ?</condition><then> <expr><name>TRANSFORM_TRANSPOSE</name></expr> </then><else>: <expr><name>TRANSFORM_R90</name></expr></else></ternary></expr>;</return>
<case>case <expr><literal type="number">180</literal></expr>:</case>
<return>return <expr><ternary><condition><expr><name>hflip</name></expr> ?</condition><then> <expr><name>TRANSFORM_VFLIP</name></expr> </then><else>: <expr><name>TRANSFORM_R180</name></expr></else></ternary></expr>;</return>
<case>case <expr><literal type="number">270</literal></expr>:</case>
<return>return <expr><ternary><condition><expr><name>hflip</name></expr> ?</condition><then> <expr><name>TRANSFORM_ANTI_TRANSPOSE</name></expr> </then><else>: <expr><name>TRANSFORM_R270</name></expr></else></ternary></expr>;</return>
<default>default:</default>
<return>return <expr><ternary><condition><expr><name>hflip</name></expr> ?</condition><then> <expr><name>TRANSFORM_HFLIP</name></expr> </then><else>: <expr><name>TRANSFORM_IDENTITY</name></expr></else></ternary></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>video_transform_t</name></type> <name>video_format_GetTransform</name><parameter_list>( <parameter><decl><type><name>video_orientation_t</name></type> <name>src</name></decl></parameter>,
<parameter><decl><type><name>video_orientation_t</name></type> <name>dst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>angle1</name></decl>, <decl><type ref="prev"/><name>angle2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hflip1</name></decl>, <decl><type ref="prev"/><name>hflip2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>transform_GetBasicOps</name><argument_list>( <argument><expr><operator>(</operator><name>video_transform_t</name><operator>)</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>angle1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hflip1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transform_GetBasicOps</name><argument_list>( <argument><expr><call><name>transform_Inverse</name><argument_list>( <argument><expr><operator>(</operator><name>video_transform_t</name><operator>)</operator><name>dst</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>angle2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hflip2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>angle</name> <init>= <expr><operator>(</operator><name>angle1</name> <operator>+</operator> <name>angle2</name><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hflip</name> <init>= <expr><name>hflip1</name> <operator>^</operator> <name>hflip2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>transform_FromBasicOps</name><argument_list>(<argument><expr><name>angle</name></expr></argument>, <argument><expr><name>hflip</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>video_format_TransformBy</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>video_transform_t</name></type> <name>transform</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>angle1</name></decl>, <decl><type ref="prev"/><name>angle2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hflip1</name></decl>, <decl><type ref="prev"/><name>hflip2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>transform_GetBasicOps</name><argument_list>( <argument><expr><name>transform</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>angle1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hflip1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transform_GetBasicOps</name><argument_list>( <argument><expr><operator>(</operator><name>video_transform_t</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>orientation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>angle2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hflip2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>angle</name> <init>= <expr><operator>(</operator><name>angle2</name> <operator>-</operator> <name>angle1</name> <operator>+</operator> <literal type="number">360</literal><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hflip</name> <init>= <expr><name>hflip2</name> <operator>^</operator> <name>hflip1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_orientation_t</name></type> <name>dst_orient</name> <init>= <expr><name>ORIENT_NORMAL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>hflip</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>angle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_orient</name> <operator>=</operator> <name>ORIENT_HFLIPPED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>angle</name> <operator>==</operator> <literal type="number">90</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_orient</name> <operator>=</operator> <name>ORIENT_ANTI_TRANSPOSED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>angle</name> <operator>==</operator> <literal type="number">180</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_orient</name> <operator>=</operator> <name>ORIENT_VFLIPPED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>angle</name> <operator>==</operator> <literal type="number">270</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_orient</name> <operator>=</operator> <name>ORIENT_TRANSPOSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>angle</name> <operator>==</operator> <literal type="number">90</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_orient</name> <operator>=</operator> <name>ORIENT_ROTATED_90</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>angle</name> <operator>==</operator> <literal type="number">180</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_orient</name> <operator>=</operator> <name>ORIENT_ROTATED_180</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>angle</name> <operator>==</operator> <literal type="number">270</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_orient</name> <operator>=</operator> <name>ORIENT_ROTATED_270</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>ORIENT_IS_SWAP</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>orientation</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <call><name>ORIENT_IS_SWAP</name><argument_list>( <argument><expr><name>dst_orient</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>scratch</name> <init>= <expr><operator>*</operator><name>fmt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_y_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_x_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>scratch</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>orientation</name></name> <operator>=</operator> <name>dst_orient</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>video_format_TransformTo</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><name>video_orientation_t</name></type> <name>dst_orientation</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_transform_t</name></type> <name>transform</name> <init>= <expr><call><name>video_format_GetTransform</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>orientation</name></name></expr></argument>,
<argument><expr><name>dst_orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_TransformBy</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>video_format_ApplyRotation</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_TransformTo</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ORIENT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>video_format_IsSimilar</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>f2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>f1</name><operator>-&gt;</operator><name>i_width</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator> <name><name>f1</name><operator>-&gt;</operator><name>i_height</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>||</operator> <name><name>f1</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>f1</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>f2</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>!=</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>f2</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>f1</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>f1</name><operator>-&gt;</operator><name>orientation</name></name> <operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>f1</name><operator>-&gt;</operator><name>multiview_mode</name></name><operator>!=</operator> <name><name>f2</name><operator>-&gt;</operator><name>multiview_mode</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB15</name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB16</name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB24</name> <operator>||</operator>
<name><name>f1</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB32</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>v1</name> <init>= <expr><operator>*</operator><name>f1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>v2</name> <init>= <expr><operator>*</operator><name>f2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>v1</name><operator>.</operator><name>i_rmask</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>i_rmask</name></name> <operator>||</operator>
<name><name>v1</name><operator>.</operator><name>i_gmask</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>i_gmask</name></name> <operator>||</operator>
<name><name>v1</name><operator>.</operator><name>i_bmask</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>i_bmask</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>video_format_Print</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>,
<argument><expr><literal type="string">"%s sz %ux%u, of (%u,%u), vsz %ux%u, 4cc %4.4s, sar %u:%u, msk r0x%"</literal> <name>PRIx32</name> <literal type="string">" g0x%"</literal> <name>PRIx32</name> <literal type="string">" b0x%"</literal> <name>PRIx32</name></expr></argument>,
<argument><expr><name>psz_text</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rmask</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_gmask</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bmask</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>es_format_Init</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>=</operator> <name>i_cat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>i_codec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra_languages</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>es_format_InitFromVideo</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>es_format_Copy</name><parameter_list>(<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_extra_languages</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>p_extra_languages</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra_languages</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>i_extra_languages</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>p_extra_languages</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra_languages</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_extra_languages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_language</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_language</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_description</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_description</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_extra_languages</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_extra_languages</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_extra_languages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>es_format_Clean</name><parameter_list>(<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_extra_languages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra_languages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>es_format_IsSimilar</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name><name>p_fmt2</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>||</operator>
<call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call> <operator>!=</operator>
<call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name><name>p_fmt2</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_fmt2</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_format_t</name></type> <name>a1</name> <init>= <expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_format_t</name></type> <name>a2</name> <init>= <expr><name><name>p_fmt2</name><operator>-&gt;</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>a1</name><operator>.</operator><name>i_format</name></name> <operator>&amp;&amp;</operator> <name><name>a2</name><operator>.</operator><name>i_format</name></name> <operator>&amp;&amp;</operator> <name><name>a1</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>i_format</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>a1</name><operator>.</operator><name>channel_type</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>channel_type</name></name> <operator>||</operator>
<name><name>a1</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>i_rate</name></name> <operator>||</operator>
<name><name>a1</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>i_channels</name></name> <operator>||</operator>
<name><name>a1</name><operator>.</operator><name>i_physical_channels</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>i_physical_channels</name></name> <operator>||</operator>
<name><name>a1</name><operator>.</operator><name>i_chan_mode</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>i_chan_mode</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>!=</operator> <name><name>p_fmt2</name><operator>-&gt;</operator><name>i_profile</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>v1</name> <init>= <expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>v2</name> <init>= <expr><name><name>p_fmt2</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>v1</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v1</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_fmt1</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>v2</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v2</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name><name>p_fmt2</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_fmt2</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>video_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><name>SPU_ES</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

</unit>
