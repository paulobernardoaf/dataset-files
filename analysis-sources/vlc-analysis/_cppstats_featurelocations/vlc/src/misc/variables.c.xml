<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\variables.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>callback_entry_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>callback_entry_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<union>union
<block>{
<decl_stmt><decl><type><name>vlc_callback_t</name></type> <name>pf_value_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_list_callback_t</name></type> <name>pf_list_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_callback</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>callback_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>variable_ops_t</name>
<block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_cmp</name>) <parameter_list>( <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_dup</name>) <parameter_list>( <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_free</name>) <parameter_list>( <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
}</block></struct></type> <name>variable_ops_t</name>;</typedef>





<struct>struct <name>variable_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>variable_ops_t</name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_usage</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>choices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>choices_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>choices_count</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_incallback</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier></type><name>value_callbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier></type><name>list_callbacks</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmpBool</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>w</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>b_bool</name></name></expr> ?</condition><then> <expr><ternary><condition><expr><name><name>w</name><operator>.</operator><name>b_bool</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> </then><else>: <expr><ternary><condition><expr><name><name>w</name><operator>.</operator><name>b_bool</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmpInt</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>w</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name><name>w</name><operator>.</operator><name>i_int</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>i_int</name></name> <operator>&gt;</operator> <name><name>w</name><operator>.</operator><name>i_int</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmpString</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>w</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>v</name><operator>.</operator><name>psz_string</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>!</operator><name><name>w</name><operator>.</operator><name>psz_string</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>!</operator><name><name>w</name><operator>.</operator><name>psz_string</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>v</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>CmpFloat</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>w</name></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>f_float</name></name> <operator>==</operator> <name><name>w</name><operator>.</operator><name>f_float</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>f_float</name></name> <operator>&gt;</operator> <name><name>w</name><operator>.</operator><name>f_float</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>CmpAddress</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>w</name></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>p_address</name></name> <operator>==</operator> <name><name>w</name><operator>.</operator><name>p_address</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>p_address</name></name> <operator>&gt;</operator> <name><name>w</name><operator>.</operator><name>p_address</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DupDummy</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_val</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DupString</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_val</name><operator>-&gt;</operator><name>psz_string</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><ternary><condition><expr><name><name>p_val</name><operator>-&gt;</operator><name>psz_string</name></name></expr> ?</condition><then> <expr><name><name>p_val</name><operator>-&gt;</operator><name>psz_string</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeDummy</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_val</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeString</name><parameter_list>( <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_val</name><operator>-&gt;</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>variable_ops_t</name></name></type>
<name>void_ops</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>DupDummy</name></expr>, <expr><name>FreeDummy</name></expr>, }</block></expr></init></decl>,
<decl><type ref="prev"/><name>addr_ops</name> <init>= <expr><block>{ <expr><name>CmpAddress</name></expr>, <expr><name>DupDummy</name></expr>, <expr><name>FreeDummy</name></expr>, }</block></expr></init></decl>,
<decl><type ref="prev"/><name>bool_ops</name> <init>= <expr><block>{ <expr><name>CmpBool</name></expr>, <expr><name>DupDummy</name></expr>, <expr><name>FreeDummy</name></expr>, }</block></expr></init></decl>,
<decl><type ref="prev"/><name>float_ops</name> <init>= <expr><block>{ <expr><name>CmpFloat</name></expr>, <expr><name>DupDummy</name></expr>, <expr><name>FreeDummy</name></expr>, }</block></expr></init></decl>,
<decl><type ref="prev"/><name>int_ops</name> <init>= <expr><block>{ <expr><name>CmpInt</name></expr>, <expr><name>DupDummy</name></expr>, <expr><name>FreeDummy</name></expr>, }</block></expr></init></decl>,
<decl><type ref="prev"/><name>string_ops</name> <init>= <expr><block>{ <expr><name>CmpString</name></expr>, <expr><name>DupString</name></expr>, <expr><name>FreeString</name></expr>, }</block></expr></init></decl>,
<decl><type ref="prev"/><name>coords_ops</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>DupDummy</name></expr>, <expr><name>FreeDummy</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>varcmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>variable_t</name> <modifier>*</modifier></type><name>va</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>va</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>va</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>va</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>vb</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>variable_t</name> <modifier>*</modifier></type><name>Lookup</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>obj</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_var</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_var</name> <operator>=</operator> <call><name>tfind</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_root</name></name></expr></argument>, <argument><expr><name>varcmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>pp_var</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>pp_var</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>value_callbacks</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>p_var</name><operator>-&gt;</operator><name>value_callbacks</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>value_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>value_callbacks</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>list_callbacks</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckValue</name><parameter_list>(<parameter><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_TYPE</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>&lt;</operator> <name><name>var</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>i_int</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>&gt;</operator> <name><name>var</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>i_int</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>%</operator> <name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>+</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>/</operator> <name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name> <operator>*</operator> <name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>-</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>/</operator> <name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name> <operator>*</operator> <name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isless</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>f_float</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f_float</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>f_float</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isgreater</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>f_float</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f_float</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>f_float</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>f_float</name></name> <operator>!=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>f_float</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>f_float</name></name>
<operator>*</operator> <call><name>roundf</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>f_float</name></name> <operator>/</operator> <name><name>var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>f_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>WaitUnused</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mutex_cleanup_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>b_incallback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TriggerCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>var</name><operator>-&gt;</operator><name>value_callbacks</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>b_incallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>b_incallback</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>pf_value_callback</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>b_incallback</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TriggerListCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>var</name><operator>-&gt;</operator><name>list_callbacks</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>b_incallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>b_incallback</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>pf_list_callback</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>b_incallback</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_Create</name>)<parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_var</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>i_type</name> <operator>&amp;</operator> <operator>~</operator><name>VLC_VAR_DOINHERIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>i_usage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>b_incallback</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>value_callbacks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>




<switch>switch<condition>( <expr><name>i_type</name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_BOOL</name></expr>:</case>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>bool_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>int_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_STRING</name></expr>:</case>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>string_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>float_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <operator>-</operator><name>FLT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <name>FLT_MAX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_COORDS</name></expr>:</case>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>coords_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>coords</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>coords</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_ADDRESS</name></expr>:</case>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>addr_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p_address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_VOID</name></expr>:</case>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>void_ops</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>&amp;</operator> <name>VLC_VAR_DOINHERIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Inherit</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_oldvar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_var</name> <operator>=</operator> <call><name>tsearch</name><argument_list>( <argument><expr><name>p_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_root</name></name></expr></argument>, <argument><expr><name>varcmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pp_var</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>p_oldvar</name> <operator>=</operator> <operator>*</operator><name>pp_var</name><operator>)</operator> <operator>==</operator> <name>p_var</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p_var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if> 
<else>else 
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>i_type</name> <operator>^</operator> <name><name>p_oldvar</name><operator>-&gt;</operator><name>i_type</name></name><operator>)</operator> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_oldvar</name><operator>-&gt;</operator><name>i_usage</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_oldvar</name><operator>-&gt;</operator><name>i_type</name></name> <operator>|=</operator> <name>i_type</name> <operator>&amp;</operator> <name>VLC_VAR_ISCOMMAND</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Destroy</name><argument_list>( <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> (<name>var_Destroy</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"attempt to destroy nonexistent variable \"%s\""</literal></expr></argument>,
<argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>--</operator><name><name>p_var</name><operator>-&gt;</operator><name>i_usage</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_var</name><operator>-&gt;</operator><name>b_incallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdelete</name><argument_list>( <argument><expr><name>p_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_root</name></name></expr></argument>, <argument><expr><name>varcmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>i_usage</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Destroy</name><argument_list>( <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CleanupVar</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>var</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Destroy</name><argument_list>( <argument><expr><name>var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_DestroyAll</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>obj</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tdestroy</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>var_root</name></name></expr></argument>, <argument><expr><name>CleanupVar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>var_root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_Change</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_action</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOVAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>i_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name>i_action</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_GETMIN</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_GETMAX</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_SETMINMAX</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name> <operator>==</operator> <name>FreeDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_SETSTEP</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name> <operator>==</operator> <name>FreeDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CheckValue</name><argument_list>( <argument><expr><name>p_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_GETSTEP</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_TYPE</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_var</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>f_float</name></name> <operator>==</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_ADDCHOICE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></argument>, <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_dup</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>choices</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TriggerListCallback</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VLC_VAR_DELCHOICE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_cmp</name></name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>count</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_ERASE</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></argument>, <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_ERASE</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TriggerListCallback</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_DELCHOICE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VLC_VAR_CHOICESCOUNT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_CLEARCHOICES</name></expr>:</case>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr></argument>, <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TriggerListCallback</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_CLEARCHOICES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_SETVALUE</name></expr>:</case>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_dup</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name>newval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckValue</name><argument_list>( <argument><expr><name>p_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name>oldval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_GETCHOICES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_value_t</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>texts</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator><operator>*</operator><name>values</name><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_dup</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>texts</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>texts</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VLC_VAR_SETTEXT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VLC_VAR_GETTEXT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_var</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_GetAndSet</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_action</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOVAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WaitUnused</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>


<switch>switch<condition>( <expr><name>i_action</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_BOOL_TOGGLE</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_BOOL</name> <operator>)</operator> <operator>==</operator> <name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <operator>!</operator><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_INTEGER_ADD</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_INTEGER</name> <operator>)</operator> <operator>==</operator> <name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>i_int</name></name> <operator>+=</operator> <name><name>p_val</name><operator>-&gt;</operator><name>i_int</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_INTEGER_OR</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_INTEGER</name> <operator>)</operator> <operator>==</operator> <name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>i_int</name></name> <operator>|=</operator> <name><name>p_val</name><operator>-&gt;</operator><name>i_int</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_INTEGER_NAND</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_INTEGER</name> <operator>)</operator> <operator>==</operator> <name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>p_val</name><operator>-&gt;</operator><name>i_int</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>CheckValue</name><argument_list>( <argument><expr><name>p_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_val</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TriggerCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_Type</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_var</name><operator>-&gt;</operator><name>choices_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_type</name> <operator>|=</operator> <name>VLC_VAR_HASCHOICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_SetChecked</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>expected_type</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOVAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>expected_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name><operator>)</operator> <operator>==</operator> <name>expected_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name><operator>)</operator> <operator>!=</operator> <name>VLC_VAR_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WaitUnused</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_dup</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CheckValue</name><argument_list>( <argument><expr><name>p_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TriggerCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name>oldval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_Set</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_GetChecked</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>expected_type</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>expected_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name><operator>)</operator> <operator>==</operator> <name>expected_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><name><name>p_var</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name><operator>)</operator> <operator>!=</operator> <name>VLC_VAR_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>p_val</name> <operator>=</operator> <name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>p_var</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>pf_dup</name></name><argument_list>( <argument><expr><name>p_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>VLC_ENOVAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_Get</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_val</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>vlc_value_callback</name></decl>,
<decl><name>vlc_list_callback</name></decl>
}</block></enum></type> <name>vlc_callback_type_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>callback_entry_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>entry</name></decl></parameter>,
<parameter><decl><type><name>vlc_callback_type_t</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot add callback %p to nonexistent variable '%s'"</literal></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>p_callback</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WaitUnused</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>==</operator> <name>vlc_value_callback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>value_callbacks</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>list_callbacks</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> (<name>var_AddCallback</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>vlc_callback_t</name></type> <name>pf_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>pf_value_callback</name></name> <operator>=</operator> <name>pf_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddCallback</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>vlc_value_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DelCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>callback_entry_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>match</name></decl></parameter>,
<parameter><decl><type><name>vlc_callback_type_t</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_var</name> <operator>=</operator> <call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot delete callback %p from nonexistent "</literal>
<literal type="string">"variable '%s'"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>p_callback</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WaitUnused</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>==</operator> <name>vlc_value_callback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>value_callbacks</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_var</name><operator>-&gt;</operator><name>list_callbacks</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>p_callback</name></name> <operator>!=</operator> <name><name>match</name><operator>-&gt;</operator><name>p_callback</name></name>
<operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>p_data</name></name> <operator>!=</operator> <name><name>match</name><operator>-&gt;</operator><name>p_data</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> (<name>var_DelCallback</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>vlc_callback_t</name></type> <name>pf_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>pf_value_callback</name></name> <operator>=</operator> <name>pf_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DelCallback</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>vlc_value_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> (<name>var_TriggerCallback</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>variable_t</name> <modifier>*</modifier></type><name>p_var</name> <init>= <expr><call><name>Lookup</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_var</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WaitUnused</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>TriggerCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_var</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>p_var</name><operator>-&gt;</operator><name>val</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> (<name>var_AddListCallback</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>vlc_list_callback_t</name></type> <name>pf_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>pf_list_callback</name></name> <operator>=</operator> <name>pf_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddCallback</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>vlc_list_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> (<name>var_DelListCallback</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>vlc_list_callback_t</name></type> <name>pf_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>pf_list_callback</name></name> <operator>=</operator> <name>pf_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelCallback</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>vlc_list_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>var_OptionParse</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_option</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>trusted</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_isno</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name><name>psz_option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_option</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>psz_option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_name</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_value</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>config_GetType</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_type</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>psz_value</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_name</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>b_isno</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>config_GetType</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_type</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>!=</operator> <name>VLC_VAR_BOOL</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>!</operator><name>psz_value</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_value</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>trusted</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>config_IsSafe</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"unsafe option \"%s\" has been ignored for "</literal>
<literal type="string">"security reasons"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_BOOL</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>value</name> <init>= <expr><call><name>strtoll</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>endptr</name> <operator>==</operator> <name>psz_value</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>value</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <operator>!</operator><name>b_isno</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_VAR_STRING</name></expr>:</case>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name>psz_value</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>var_Set</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_LocationParse</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>preflen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pref</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mrl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>mrl</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mrl</name> <operator>+=</operator> <call><name>strspn</name> <argument_list>(<argument><expr><name>mrl</name></expr></argument>, <argument><expr><literal type="string">":;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name> <argument_list>(<argument><expr><name>mrl</name></expr></argument>, <argument><expr><literal type="string">":;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>preflen</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>preflen</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>pref</name></expr></argument>, <argument><expr><name>mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_OptionParse</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>mrl</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>var_Inherit</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i_type</name> <operator>&amp;=</operator> <name>VLC_VAR_CLASS</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>p_this</name></expr></init></decl>;</init> <condition><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>obj</name> <operator>=</operator> <call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>p_val</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<switch>switch<condition>( <expr><name>i_type</name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_VAR_STRING</name></expr>:</case>
<expr_stmt><expr><name><name>p_val</name><operator>-&gt;</operator><name>psz_string</name></name> <operator>=</operator> <call><name>config_GetPsz</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_val</name><operator>-&gt;</operator><name>psz_string</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_val</name><operator>-&gt;</operator><name>psz_string</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>p_val</name><operator>-&gt;</operator><name>f_float</name></name> <operator>=</operator> <call><name>config_GetFloat</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<expr_stmt><expr><name><name>p_val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <call><name>config_GetInt</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_VAR_BOOL</name></expr>:</case>
<expr_stmt><expr><name><name>p_val</name><operator>-&gt;</operator><name>b_bool</name></name> <operator>=</operator> <call><name>config_GetInt</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>VLC_VAR_ADDRESS</name></expr>:</case>
<return>return <expr><name>VLC_ENOOBJ</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> (<name>var_InheritURational</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>den</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>d</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>sep</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sep</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>sep</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <ternary><condition><expr><name>d</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>thread_local</name> <name>void</name> <modifier>*</modifier></type><name>twalk_ctx</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TwalkGetNames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VISIT</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>which</name> <operator>!=</operator> <name>postorder</name> <operator>&amp;&amp;</operator> <name>which</name> <operator>!=</operator> <name>leaf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>depth</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>variable_t</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>variable_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECL_ARRAY</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>*</operator><name>names</name> <operator>=</operator> <name>twalk_ctx</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><operator>*</operator><name>names</name></expr></argument>, <argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>var_GetAllNames</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_internals_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_internals</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>DECL_ARRAY</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>names</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>twalk_ctx</name> <operator>=</operator> <operator>&amp;</operator><name>names</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>twalk</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>var_root</name></name></expr></argument>, <argument><expr><name>TwalkGetNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>var_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>names</name><operator>.</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>names</name><operator>.</operator><name>p_elems</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
