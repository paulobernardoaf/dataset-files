<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\update.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_update.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_pgpkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_gcrypt.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"update.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN64</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_OS_SUFFIX</name></cpp:macro> <cpp:value>"-win-x64"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_OS_SUFFIX</name></cpp:macro> <cpp:value>"-win-x86"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_OS_SUFFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_VLC_STATUS_URL</name></cpp:macro> <cpp:value>"http://update-test.videolan.org/vlc/status-win-x86"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_VLC_STATUS_URL</name></cpp:macro> <cpp:value>"http://update.videolan.org/vlc/status" UPDATE_OS_SUFFIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dialog_FatalWait</name><parameter_list>( <parameter><type><name>p_obj</name></type></parameter>, <parameter><type><name>psz_title</name></type></parameter>, <parameter><type><name>psz_fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_dialog_wait_question( p_obj, VLC_DIALOG_QUESTION_CRITICAL, "OK", NULL, NULL, psz_title, psz_fmt, ##__VA_ARGS__ );</cpp:value></cpp:define>







<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>update_New</name></cpp:undef>






<function><type><name>update_t</name> <modifier>*</modifier></type><name>update_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_update</name> <operator>=</operator> <operator>(</operator><name>update_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>update_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_update</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name> <operator>=</operator> <call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_desc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_gcrypt_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_update</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>update_Delete</name><parameter_list>( <parameter><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name><operator>-&gt;</operator><name>aborted</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_desc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>EmptyRelease</name><parameter_list>( <parameter><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_minor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_revision</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_desc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetUpdateFile</name><parameter_list>( <parameter><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_version_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_update_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><name>UPDATE_VLC_STATUS_URL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for reading"</literal></expr></argument>,
<argument><expr><name>UPDATE_VLC_STATUS_URL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_read</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call> <operator>||</operator> <name>i_read</name> <operator>&gt;=</operator> <name>UINT16_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Status file too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_update_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_update_data</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz_update_data</name></expr></argument>,
<argument><expr><name>i_read</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>i_read</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Couldn't download update file %s"</literal></expr></argument>,
<argument><expr><name>UPDATE_VLC_STATUS_URL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>psz_update_data</name><index>[<expr><name>i_read</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_update_data_parser</name> <init>= <expr><name>psz_update_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strcspn</name><argument_list>( <argument><expr><name>psz_update_data</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_update_data_parser</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>*</operator><name>psz_update_data_parser</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>psz_update_data_parser</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_update_data_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_version_line</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>psz_version_line</name></expr></argument>, <argument><expr><name>psz_update_data</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_version_line</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_version_line</name></expr></argument>, <argument><expr><literal type="string">"%i.%i.%i.%i"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_major</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_minor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_revision</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Update version false formatted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_update_data_parser</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Update file %s is corrupted: URL missing"</literal></expr></argument>,
<argument><expr><name>UPDATE_VLC_STATUS_URL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument>, <argument><expr><name>psz_update_data_parser</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_update_data_parser</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>*</operator><name>psz_update_data_parser</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>psz_update_data_parser</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_update_data_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_update_data_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>,
<argument><expr><literal type="string">"Update file %s is corrupted: description missing"</literal></expr></argument>,
<argument><expr><name>UPDATE_VLC_STATUS_URL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_desc</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_desc</name></name></expr></argument>, <argument><expr><name>psz_update_data_parser</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_desc</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>signature_packet_t</name></type> <name>sign</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>download_signature</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>,
<argument><expr><name>UPDATE_VLC_STATUS_URL</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Couldn't download signature of status file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sign</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINARY_SIGNATURE</name> <operator>&amp;&amp;</operator> <name><name>sign</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TEXT_SIGNATURE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid signature type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name> <operator>=</operator> <operator>(</operator><name>public_key_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>public_key_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>parse_public_key</name><argument_list>( <argument><expr><name>videolan_public_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>videolan_public_key</name></expr></argument> )</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Couldn't parse embedded public key, something went really wrong..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name><operator>-&gt;</operator><name>longid</name></name></expr></argument>, <argument><expr><name>videolan_public_key_longid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>sign</name><operator>.</operator><name>issuer_longid</name></name></expr></argument>, <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name><operator>-&gt;</operator><name>longid</name></name></expr></argument> , <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Need to download the GPG key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>p_new_pkey</name> <init>= <expr><call><name>download_key</name><argument_list>(
<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sign</name><operator>.</operator><name>issuer_longid</name></name></expr></argument>, <argument><expr><name>videolan_public_key_longid</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_new_pkey</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Couldn't download GPG key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>hash_from_public_key</name><argument_list>( <argument><expr><name>p_new_pkey</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hash</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to hash signature"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_new_pkey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>verify_signature</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_new_pkey</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Key authenticated"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name></name> <operator>=</operator> <name>p_new_pkey</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Key signature invalid !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>hash_from_text</name><argument_list>( <argument><expr><name>psz_update_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hash</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Can't compute hash for status file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>sign</name><operator>.</operator><name>hash_verification</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>
<name><name>p_hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>sign</name><operator>.</operator><name>hash_verification</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Bad hash for status file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>verify_signature</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"BAD SIGNATURE for status file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>

<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><literal type="string">"Status file authenticated"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_version_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_update_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_version_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_update_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>update_CheckReal</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>









<function><type><name>void</name></type> <name>update_Check</name><parameter_list>( <parameter><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_callback</name>)<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>update_check_thread_t</name> <modifier>*</modifier></type><name>p_uct</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_uct</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_uct</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_uct</name><operator>-&gt;</operator><name>p_update</name></name> <operator>=</operator> <name>p_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_check</name></name> <operator>=</operator> <name>p_uct</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_uct</name><operator>-&gt;</operator><name>pf_callback</name></name> <operator>=</operator> <name>pf_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_uct</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_uct</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>update_CheckReal</name></expr></argument>, <argument><expr><name>p_uct</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>update_CheckReal</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>update_check_thread_t</name> <modifier>*</modifier></type><name>p_uct</name> <init>= <expr><operator>(</operator><name>update_check_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_uct</name><operator>-&gt;</operator><name>p_update</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EmptyRelease</name><argument_list>( <argument><expr><name><name>p_uct</name><operator>-&gt;</operator><name>p_update</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <call><name>GetUpdateFile</name><argument_list>( <argument><expr><name><name>p_uct</name><operator>-&gt;</operator><name>p_update</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_uct</name><operator>-&gt;</operator><name>p_update</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_uct</name><operator>-&gt;</operator><name>pf_callback</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>p_uct</name><operator>-&gt;</operator><name>pf_callback</name></name><operator>)</operator><operator>(</operator> <name><name>p_uct</name><operator>-&gt;</operator><name>p_data</name></name><operator>,</operator> <name>b_ret</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>update_NeedUpgrade</name><parameter_list>( <parameter><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>current</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>PACKAGE_VERSION_MAJOR</name></expr>,
<expr><name>PACKAGE_VERSION_MINOR</name></expr>,
<expr><name>PACKAGE_VERSION_REVISION</name></expr>,
<expr><name>PACKAGE_VERSION_EXTRA</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>latest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_major</name></name></expr>,
<expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_minor</name></name></expr>,
<expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_revision</name></name></expr>,
<expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>i_extra</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>latest</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>latest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>current</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>latest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>current</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>PACKAGE_VERSION_DEV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>size_str</name><parameter_list>( <parameter><decl><type><name>uint64_t</name></type> <name>l_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>l_size</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_retval</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%.1f GiB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>l_size</name><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>l_size</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_retval</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%.1f MiB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>l_size</name><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>l_size</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_retval</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%.1f KiB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>l_size</name><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_retval</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" B"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><ternary><condition><expr><name>i_retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>psz_tmp</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>update_DownloadReal</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>








<function><type><name>void</name></type> <name>update_Download</name><parameter_list>( <parameter><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_destdir</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name><operator>-&gt;</operator><name>aborted</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>update_download_thread_t</name> <modifier>*</modifier></type><name>p_udt</name> <init>=
<expr><call><name>vlc_custom_create</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_libvlc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_udt</name></expr></argument> )</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"update download"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_udt</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_udt</name><operator>-&gt;</operator><name>p_update</name></name> <operator>=</operator> <name>p_update</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_download</name></name> <operator>=</operator> <name>p_udt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_udt</name><operator>-&gt;</operator><name>psz_destdir</name></name> <operator>=</operator> <ternary><condition><expr><name>psz_destdir</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_destdir</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_udt</name><operator>-&gt;</operator><name>aborted</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_udt</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>update_DownloadReal</name></expr></argument>, <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>update_DownloadReal</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>update_download_thread_t</name> <modifier>*</modifier></type><name>p_udt</name> <init>= <expr><operator>(</operator><name>update_download_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_downloaded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_downloaded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_destfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmpdestfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_dialog_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name> <init>= <expr><name><name>p_udt</name><operator>-&gt;</operator><name>p_update</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_destdir</name> <init>= <expr><name><name>p_udt</name><operator>-&gt;</operator><name>psz_destdir</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Opening Stream '%s'"</literal></expr></argument>, <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for reading"</literal></expr></argument>, <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l_size</name></expr></argument> )</argument_list></call> <operator>||</operator> <name>l_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>psz_tmpdestfile</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_tmpdestfile</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"The URL %s is badly formatted"</literal></expr></argument>,
<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_tmpdestfile</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_destfile</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_destdir</name></expr></argument>, <argument><expr><name>psz_tmpdestfile</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_file</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_file</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for writing"</literal></expr></argument>, <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_FatalWait</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Saving file failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed to open \"%s\" for writing"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_buffer</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Downloading Stream '%s'"</literal></expr></argument>, <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_size</name> <operator>=</operator> <call><name>size_str</name><argument_list>( <argument><expr><name>l_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dialog_id</name> <operator>=</operator>
<call><name>vlc_dialog_display_progress</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator> <literal type="string">"Downloading..."</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s\nDownloading... %s/%s %.1f%% done"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">"0.0"</literal></expr></argument>, <argument><expr><name>psz_size</name></expr></argument>,
<argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dialog_id</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_udt</name><operator>-&gt;</operator><name>aborted</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_read</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>vlc_dialog_is_cancelled</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Failed to write into %s"</literal></expr></argument>, <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l_downloaded</name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_downloaded</name> <operator>=</operator> <call><name>size_str</name><argument_list>( <argument><expr><name>l_downloaded</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f_progress</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>l_downloaded</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>l_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_update_progress_text</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument>, <argument><expr><name>f_progress</name></expr></argument>,
<argument><expr><literal type="string">"%s\nDownloading... %s/%s - %.1f%% done"</literal></expr></argument>,
<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument>,
<argument><expr><name>psz_downloaded</name></expr></argument>, <argument><expr><name>psz_size</name></expr></argument>,
<argument><expr><name>f_progress</name><operator>*</operator><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_downloaded</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_udt</name><operator>-&gt;</operator><name>aborted</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>vlc_dialog_is_cancelled</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dialog_id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>signature_packet_t</name></type> <name>sign</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>download_signature</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>,
<argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>release</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dialog_FatalWait</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"File could not be verified"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"It was not possible to download a cryptographic signature for "</literal>
<literal type="string">"the downloaded file \"%s\". Thus, it was deleted."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Couldn't download signature of downloaded file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>sign</name><operator>.</operator><name>issuer_longid</name></name></expr></argument>, <argument><expr><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name><operator>-&gt;</operator><name>longid</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Invalid signature issuer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_FatalWait</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid signature"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The cryptographic signature for the downloaded file \"%s\" was "</literal>
<literal type="string">"invalid and could not be used to securely verify it. Thus, the "</literal>
<literal type="string">"file was deleted."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sign</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINARY_SIGNATURE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Invalid signature type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_FatalWait</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid signature"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The cryptographic signature for the downloaded file \"%s\" was "</literal>
<literal type="string">"invalid and could not be used to securely verify it. Thus, the "</literal>
<literal type="string">"file was deleted."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>hash_from_file</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hash</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Unable to hash %s"</literal></expr></argument>, <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_FatalWait</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"File not verifiable"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"It was not possible to securely verify the downloaded file"</literal>
<literal type="string">" \"%s\". Thus, it was deleted."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>sign</name><operator>.</operator><name>hash_verification</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>
<name><name>p_hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>sign</name><operator>.</operator><name>hash_verification</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_FatalWait</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"File corrupted"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Downloaded file \"%s\" was corrupted. Thus, it was deleted."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"Bad hash for %s"</literal></expr></argument>, <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>verify_signature</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>p_pkey</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_FatalWait</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"File corrupted"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Downloaded file \"%s\" was corrupted. Thus, it was deleted."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"BAD SIGNATURE for %s"</literal></expr></argument>, <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><literal type="string">"%s authenticated"</literal></expr></argument>, <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_msg</name> <init>=
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The new version was successfully downloaded. "</literal>
<literal type="string">"Do you want to close VLC and install it now?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>answer</name> <init>= <expr><call><name>vlc_dialog_wait_question</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Install"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Update VLC media player"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name>psz_msg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>psz_wdestfile</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>( <argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psz_destfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>psz_wdestfile</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>answer</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ShellExecuteW</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">L"open"</literal></expr></argument>, <argument><expr><name>psz_wdestfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>answer</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_udt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>end</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_dialog_id</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_udt</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_file</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_destdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>update_release_t</name> <modifier>*</modifier></type><name>update_GetRelease</name><parameter_list>( <parameter><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_update</name><operator>-&gt;</operator><name>release</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
