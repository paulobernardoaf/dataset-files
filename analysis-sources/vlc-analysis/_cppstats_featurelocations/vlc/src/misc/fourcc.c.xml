<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\fourcc.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fourcc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fourcc_tables.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fourcc_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>Lookup</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>dsc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fourcc_mapping</name></name> <modifier>*</modifier></type><name>mapv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mapc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fourcc_desc</name></name> <modifier>*</modifier></type><name>dscv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dscc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fourcc_mapping</name></name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fourcc_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fourcc</name></expr></argument>, <argument><expr><name>mapv</name></expr></argument>, <argument><expr><name>mapc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mapv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fourcc_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mapping</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dsc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fourcc</name></expr></argument>, <argument><expr><name>dscv</name></expr></argument>, <argument><expr><name>dscc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>dscv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fourcc_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dsc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>desc</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>mapping</name><operator>-&gt;</operator><name>fourcc</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fourcc</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>fourcc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fourcc</name></expr></argument>, <argument><expr><name>dscv</name></expr></argument>, <argument><expr><name>dscc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>dscv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fourcc_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>dsc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dsc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>desc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>fourcc</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>LookupVideo</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Lookup</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>mapping_video</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>mapping_video</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>desc_video</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>desc_video</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>LookupAudio</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Lookup</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>mapping_audio</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>mapping_audio</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>desc_audio</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>desc_audio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>LookupSpu</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Lookup</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>, <argument><expr><name>mapping_spu</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>mapping_spu</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>desc_spu</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>desc_spu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>LookupCat</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>dsc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>cat</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><call><name>LookupVideo</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<return>return <expr><call><name>LookupAudio</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<return>return <expr><call><name>LookupSpu</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>ret</name> <init>= <expr><call><name>LookupVideo</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>LookupAudio</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>LookupSpu</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_fourcc_t</name></type> <name>vlc_fourcc_GetCodec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name> <init>= <expr><call><name>LookupCat</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>codec</name></expr> ?</condition><then> <expr><name>codec</name></expr> </then><else>: <expr><name>fourcc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_fourcc_t</name></type> <name>vlc_fourcc_GetCodecFromString</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_fourcc</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_fourcc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>i_cat</name></expr></argument>,
<argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>psz_fourcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>psz_fourcc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>psz_fourcc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>psz_fourcc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_fourcc_t</name></type> <name>vlc_fourcc_GetCodecAudio</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_bits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_bytes</name> <init>= <expr><operator>(</operator> <name>i_bits</name> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fourcc</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_bytes</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_FL32</name></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_FL64</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_fourcc</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_bytes</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_U8</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S16L</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S24L</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S32L</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_fourcc</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_bytes</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S8</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S16B</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S24B</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S32B</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_fourcc</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_bytes</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S8</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S16L</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S24L</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>VLC_CODEC_S32L</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_fourcc_GetDescription</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>LookupCat</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_410</name></cpp:macro> <cpp:value>VLC_CODEC_I410, VLC_CODEC_YV9</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_420</name></cpp:macro> <cpp:value>VLC_CODEC_I420, VLC_CODEC_YV12, VLC_CODEC_J420</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_SEMIPLANAR_420</name></cpp:macro> <cpp:value>VLC_CODEC_NV12, VLC_CODEC_NV21</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_420_16</name></cpp:macro> <cpp:value>VLC_CODEC_I420_16L, VLC_CODEC_I420_16B, VLC_CODEC_I420_12L, VLC_CODEC_I420_12B, VLC_CODEC_I420_10L, VLC_CODEC_I420_10B, VLC_CODEC_I420_9L, VLC_CODEC_I420_9B</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_SEMIPLANAR_420_16</name></cpp:macro> <cpp:value>VLC_CODEC_P010, VLC_CODEC_P016</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_422</name></cpp:macro> <cpp:value>VLC_CODEC_I422, VLC_CODEC_J422</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_SEMIPLANAR_422</name></cpp:macro> <cpp:value>VLC_CODEC_NV16, VLC_CODEC_NV61</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_422_16</name></cpp:macro> <cpp:value>VLC_CODEC_I422_12L, VLC_CODEC_I422_12B, VLC_CODEC_I422_10L, VLC_CODEC_I422_10B, VLC_CODEC_I422_9L, VLC_CODEC_I422_9B</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_440</name></cpp:macro> <cpp:value>VLC_CODEC_I440, VLC_CODEC_J440</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_444</name></cpp:macro> <cpp:value>VLC_CODEC_I444, VLC_CODEC_J444</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_444_ALPHA</name></cpp:macro> <cpp:value>VLC_CODEC_YUVA, VLC_CODEC_YUVA_444_10L, VLC_CODEC_YUVA_444_10B</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_SEMIPLANAR_444</name></cpp:macro> <cpp:value>VLC_CODEC_NV24, VLC_CODEC_NV42</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PLANAR_444_16</name></cpp:macro> <cpp:value>VLC_CODEC_I444_10L, VLC_CODEC_I444_10B, VLC_CODEC_I444_9L, VLC_CODEC_I444_9B, VLC_CODEC_I444_16L, VLC_CODEC_I444_16B, VLC_CODEC_I444_12L, VLC_CODEC_I444_12B</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_YUV_PACKED</name></cpp:macro> <cpp:value>VLC_CODEC_YUYV, VLC_CODEC_YVYU, VLC_CODEC_UYVY, VLC_CODEC_VYUY, VLC_CODEC_VUYA, VLC_CODEC_Y210, VLC_CODEC_Y410</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_FALLBACK_420</name></cpp:macro> <cpp:value>VLC_CODEC_YUV_PLANAR_422, VLC_CODEC_YUV_PACKED, VLC_CODEC_YUV_PLANAR_444, VLC_CODEC_YUV_PLANAR_440, VLC_CODEC_I411, VLC_CODEC_YUV_PLANAR_410, VLC_CODEC_Y211</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420</name></expr>, <expr><name>VLC_CODEC_YV12</name></expr>, <expr><name>VLC_CODEC_J420</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_J420_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_J420</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>VLC_CODEC_YV12</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_YV12_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_YV12</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>VLC_CODEC_J420</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_NV12_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>VLC_CODEC_J420</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_FALLBACK_420_16</name></cpp:macro> <cpp:value>VLC_CODEC_I420, VLC_CODEC_YV12, VLC_CODEC_J420, VLC_CODEC_FALLBACK_420</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_9L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_9L</name></expr>, <expr><name>VLC_CODEC_I420_9B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_9B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_9B</name></expr>, <expr><name>VLC_CODEC_I420_9L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_10L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><name>VLC_CODEC_I420_10B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_10B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_10B</name></expr>, <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_12L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_12L</name></expr>, <expr><name>VLC_CODEC_I420_12B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_12B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_12B</name></expr>, <expr><name>VLC_CODEC_I420_12L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_16L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_16L</name></expr>, <expr><name>VLC_CODEC_I420_16B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I420_16B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I420_16B</name></expr>, <expr><name>VLC_CODEC_I420_16L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_P010_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_P010</name></expr>, <expr><name>VLC_CODEC_FALLBACK_420_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_FALLBACK_422</name></cpp:macro> <cpp:value>VLC_CODEC_YUV_PACKED, VLC_CODEC_YUV_PLANAR_420, VLC_CODEC_YUV_PLANAR_444, VLC_CODEC_YUV_PLANAR_440, VLC_CODEC_I411, VLC_CODEC_YUV_PLANAR_410, VLC_CODEC_Y211</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I422_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I422</name></expr>, <expr><name>VLC_CODEC_J422</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_J422_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_J422</name></expr>, <expr><name>VLC_CODEC_I422</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_FALLBACK_422_16</name></cpp:macro> <cpp:value>VLC_CODEC_I422, VLC_CODEC_J422, VLC_CODEC_FALLBACK_422</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I422_9L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I422_9L</name></expr>, <expr><name>VLC_CODEC_I422_9B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I422_9B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I422_9B</name></expr>, <expr><name>VLC_CODEC_I422_9L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I422_10L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I422_10L</name></expr>, <expr><name>VLC_CODEC_I422_10B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I422_10B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I422_10B</name></expr>, <expr><name>VLC_CODEC_I422_10L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I422_12L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I422_12L</name></expr>, <expr><name>VLC_CODEC_I422_12B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I422_12B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I422_12B</name></expr>, <expr><name>VLC_CODEC_I422_12L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_422_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_FALLBACK_444</name></cpp:macro> <cpp:value>VLC_CODEC_YUV_PLANAR_422, VLC_CODEC_YUV_PACKED, VLC_CODEC_YUV_PLANAR_420, VLC_CODEC_YUV_PLANAR_440, VLC_CODEC_I411, VLC_CODEC_YUV_PLANAR_410, VLC_CODEC_Y211</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444</name></expr>, <expr><name>VLC_CODEC_J444</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_J444_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_J444</name></expr>, <expr><name>VLC_CODEC_I444</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_FALLBACK_444_16</name></cpp:macro> <cpp:value>VLC_CODEC_I444, VLC_CODEC_J444, VLC_CODEC_FALLBACK_444</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_9L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_9L</name></expr>, <expr><name>VLC_CODEC_I444_9B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_9B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_9B</name></expr>, <expr><name>VLC_CODEC_I444_9L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_10L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_10L</name></expr>, <expr><name>VLC_CODEC_I444_10B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_10B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_10B</name></expr>, <expr><name>VLC_CODEC_I444_10L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_12L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_12L</name></expr>, <expr><name>VLC_CODEC_I444_12B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_12B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_12B</name></expr>, <expr><name>VLC_CODEC_I444_12L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_16L_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_16L</name></expr>, <expr><name>VLC_CODEC_I444_16B</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I444_16B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I444_16B</name></expr>, <expr><name>VLC_CODEC_I444_16L</name></expr>, <expr><name>VLC_CODEC_FALLBACK_444_16</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_CVPX_VIDEO_NV12_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_CVPX_NV12</name></expr>, <expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_CVPX_VIDEO_UYVY_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_CVPX_UYVY</name></expr>, <expr><name>VLC_CODEC_UYVY</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_CVPX_VIDEO_I420_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_CVPX_I420</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_CVPX_VIDEO_BGRA_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_CVPX_BGRA</name></expr>, <expr><name>VLC_CODEC_BGRA</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_CVPX_VIDEO_P010_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_CVPX_P010</name></expr>, <expr><name>VLC_CODEC_P010</name></expr>, <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_VAAPI_420_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_VAAPI_420</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_VAAPI_420_10BPP_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_VAAPI_420_10BPP</name></expr>, <expr><name>VLC_CODEC_P010</name></expr>, <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_D3D9_OPAQUE_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_D3D9_OPAQUE_10B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>, <expr><name>VLC_CODEC_P010</name></expr>, <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_D3D11_OPAQUE_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_D3D11_OPAQUE</name></expr>, <expr><name>VLC_CODEC_NV12</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_D3D11_OPAQUE_10B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_D3D11_OPAQUE_10B</name></expr>, <expr><name>VLC_CODEC_P010</name></expr>, <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_D3D11_OPAQUE_RGBA_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_D3D11_OPAQUE_RGBA</name></expr>, <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_NVDEC_OPAQUE_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_NVDEC_OPAQUE</name></expr>, <expr><name>VLC_CODEC_NV12</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_NVDEC_OPAQUE_10B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_NVDEC_OPAQUE_10B</name></expr>,
<expr><name>VLC_CODEC_P010</name></expr>,
<expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_NVDEC_OPAQUE_16B_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_NVDEC_OPAQUE_16B</name></expr>,
<expr><name>VLC_CODEC_P016</name></expr>, <expr><name>VLC_CODEC_P010</name></expr>,
<expr><name>VLC_CODEC_I420_16L</name></expr>, <expr><name>VLC_CODEC_I420_12L</name></expr>, <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_I440_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_I440</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_420</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_422</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_444</name></expr>,
<expr><name>VLC_CODEC_YUV_PACKED</name></expr>,
<expr><name>VLC_CODEC_I411</name></expr>, <expr><name>VLC_CODEC_YUV_PLANAR_410</name></expr>, <expr><name>VLC_CODEC_Y211</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_FALLBACK_PACKED</name></cpp:macro> <cpp:value>VLC_CODEC_YUV_PLANAR_422, VLC_CODEC_YUV_PLANAR_420, VLC_CODEC_YUV_PLANAR_444, VLC_CODEC_YUV_PLANAR_440, VLC_CODEC_I411, VLC_CODEC_YUV_PLANAR_410, VLC_CODEC_Y211</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_YUYV_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_YUYV</name></expr>,
<expr><name>VLC_CODEC_YVYU</name></expr>,
<expr><name>VLC_CODEC_UYVY</name></expr>,
<expr><name>VLC_CODEC_VYUY</name></expr>,
<expr><name>VLC_CODEC_FALLBACK_PACKED</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_YVYU_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_YVYU</name></expr>,
<expr><name>VLC_CODEC_YUYV</name></expr>,
<expr><name>VLC_CODEC_UYVY</name></expr>,
<expr><name>VLC_CODEC_VYUY</name></expr>,
<expr><name>VLC_CODEC_FALLBACK_PACKED</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_UYVY_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_UYVY</name></expr>,
<expr><name>VLC_CODEC_VYUY</name></expr>,
<expr><name>VLC_CODEC_YUYV</name></expr>,
<expr><name>VLC_CODEC_YVYU</name></expr>,
<expr><name>VLC_CODEC_FALLBACK_PACKED</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_VYUY_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_VYUY</name></expr>,
<expr><name>VLC_CODEC_UYVY</name></expr>,
<expr><name>VLC_CODEC_YUYV</name></expr>,
<expr><name>VLC_CODEC_YVYU</name></expr>,
<expr><name>VLC_CODEC_FALLBACK_PACKED</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name><name>pp_YUV_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>p_YV12_fallback</name></expr>,
<expr><name>p_I420_fallback</name></expr>,
<expr><name>p_I420_9L_fallback</name></expr>,
<expr><name>p_I420_9B_fallback</name></expr>,
<expr><name>p_I420_10L_fallback</name></expr>,
<expr><name>p_I420_10B_fallback</name></expr>,
<expr><name>p_I420_12L_fallback</name></expr>,
<expr><name>p_I420_12B_fallback</name></expr>,
<expr><name>p_I420_16L_fallback</name></expr>,
<expr><name>p_I420_16B_fallback</name></expr>,
<expr><name>p_J420_fallback</name></expr>,
<expr><name>p_I422_fallback</name></expr>,
<expr><name>p_I422_9L_fallback</name></expr>,
<expr><name>p_I422_9B_fallback</name></expr>,
<expr><name>p_I422_10L_fallback</name></expr>,
<expr><name>p_I422_10B_fallback</name></expr>,
<expr><name>p_I422_12L_fallback</name></expr>,
<expr><name>p_I422_12B_fallback</name></expr>,
<expr><name>p_J422_fallback</name></expr>,
<expr><name>p_I444_fallback</name></expr>,
<expr><name>p_J444_fallback</name></expr>,
<expr><name>p_I444_9L_fallback</name></expr>,
<expr><name>p_I444_9B_fallback</name></expr>,
<expr><name>p_I444_10L_fallback</name></expr>,
<expr><name>p_I444_10B_fallback</name></expr>,
<expr><name>p_I444_12L_fallback</name></expr>,
<expr><name>p_I444_12B_fallback</name></expr>,
<expr><name>p_I444_16L_fallback</name></expr>,
<expr><name>p_I444_16B_fallback</name></expr>,
<expr><name>p_I440_fallback</name></expr>,
<expr><name>p_YUYV_fallback</name></expr>,
<expr><name>p_YVYU_fallback</name></expr>,
<expr><name>p_UYVY_fallback</name></expr>,
<expr><name>p_VYUY_fallback</name></expr>,
<expr><name>p_NV12_fallback</name></expr>,
<expr><name>p_P010_fallback</name></expr>,
<expr><name>p_CVPX_VIDEO_NV12_fallback</name></expr>,
<expr><name>p_CVPX_VIDEO_UYVY_fallback</name></expr>,
<expr><name>p_CVPX_VIDEO_I420_fallback</name></expr>,
<expr><name>p_CVPX_VIDEO_P010_fallback</name></expr>,
<expr><name>p_VAAPI_420_fallback</name></expr>,
<expr><name>p_VAAPI_420_10BPP_fallback</name></expr>,
<expr><name>p_D3D9_OPAQUE_fallback</name></expr>,
<expr><name>p_D3D9_OPAQUE_10B_fallback</name></expr>,
<expr><name>p_D3D11_OPAQUE_fallback</name></expr>,
<expr><name>p_D3D11_OPAQUE_10B_fallback</name></expr>,
<expr><name>p_NVDEC_OPAQUE_fallback</name></expr>,
<expr><name>p_NVDEC_OPAQUE_10B_fallback</name></expr>,
<expr><name>p_NVDEC_OPAQUE_16B_fallback</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_list_YUV</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_YUV_PLANAR_420</name></expr>,
<expr><name>VLC_CODEC_YUV_SEMIPLANAR_420</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_422</name></expr>,
<expr><name>VLC_CODEC_YUV_SEMIPLANAR_422</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_440</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_444</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_444_ALPHA</name></expr>,
<expr><name>VLC_CODEC_YUV_SEMIPLANAR_444</name></expr>,
<expr><name>VLC_CODEC_YUV_PACKED</name></expr>,
<expr><name>VLC_CODEC_I411</name></expr>, <expr><name>VLC_CODEC_YUV_PLANAR_410</name></expr>, <expr><name>VLC_CODEC_Y211</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_420_16</name></expr>,
<expr><name>VLC_CODEC_YUV_SEMIPLANAR_420_16</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_422_16</name></expr>,
<expr><name>VLC_CODEC_YUV_PLANAR_444_16</name></expr>,
<expr><name>VLC_CODEC_VDPAU_VIDEO_420</name></expr>,
<expr><name>VLC_CODEC_VDPAU_VIDEO_422</name></expr>,
<expr><name>VLC_CODEC_VDPAU_VIDEO_444</name></expr>,
<expr><name>VLC_CODEC_CVPX_NV12</name></expr>,
<expr><name>VLC_CODEC_CVPX_UYVY</name></expr>,
<expr><name>VLC_CODEC_CVPX_I420</name></expr>,
<expr><name>VLC_CODEC_CVPX_P010</name></expr>,
<expr><name>VLC_CODEC_VAAPI_420</name></expr>,
<expr><name>VLC_CODEC_VAAPI_420_10BPP</name></expr>,
<expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>,
<expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>,
<expr><name>VLC_CODEC_D3D11_OPAQUE</name></expr>,
<expr><name>VLC_CODEC_D3D11_OPAQUE_10B</name></expr>,
<expr><name>VLC_CODEC_NVDEC_OPAQUE</name></expr>,
<expr><name>VLC_CODEC_NVDEC_OPAQUE_10B</name></expr>,
<expr><name>VLC_CODEC_NVDEC_OPAQUE_16B</name></expr>,
<expr><name>VLC_CODEC_NVDEC_OPAQUE_444</name></expr>,
<expr><name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_RGB32_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_RGB32</name></expr>,
<expr><name>VLC_CODEC_RGB24</name></expr>,
<expr><name>VLC_CODEC_RGB16</name></expr>,
<expr><name>VLC_CODEC_RGB15</name></expr>,
<expr><name>VLC_CODEC_RGB8</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_RGB24_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_RGB24</name></expr>,
<expr><name>VLC_CODEC_RGB32</name></expr>,
<expr><name>VLC_CODEC_RGB16</name></expr>,
<expr><name>VLC_CODEC_RGB15</name></expr>,
<expr><name>VLC_CODEC_RGB8</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_RGB16_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_RGB16</name></expr>,
<expr><name>VLC_CODEC_RGB24</name></expr>,
<expr><name>VLC_CODEC_RGB32</name></expr>,
<expr><name>VLC_CODEC_RGB15</name></expr>,
<expr><name>VLC_CODEC_RGB8</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_RGB15_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_RGB15</name></expr>,
<expr><name>VLC_CODEC_RGB16</name></expr>,
<expr><name>VLC_CODEC_RGB24</name></expr>,
<expr><name>VLC_CODEC_RGB32</name></expr>,
<expr><name>VLC_CODEC_RGB8</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_RGB8_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_RGB8</name></expr>,
<expr><name>VLC_CODEC_RGB15</name></expr>,
<expr><name>VLC_CODEC_RGB16</name></expr>,
<expr><name>VLC_CODEC_RGB24</name></expr>,
<expr><name>VLC_CODEC_RGB32</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name><name>pp_RGB_fallback</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>p_RGB32_fallback</name></expr>,
<expr><name>p_RGB24_fallback</name></expr>,
<expr><name>p_RGB16_fallback</name></expr>,
<expr><name>p_RGB15_fallback</name></expr>,
<expr><name>p_RGB8_fallback</name></expr>,
<expr><name>p_CVPX_VIDEO_BGRA_fallback</name></expr>,
<expr><name>p_D3D11_OPAQUE_RGBA_fallback</name></expr>,

<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>GetFallback</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name><name>pp_fallback</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_list</name><index>[]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pp_fallback</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pp_fallback</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pp_fallback</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>p_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>vlc_fourcc_GetYUVFallback</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetFallback</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument>, <argument><expr><name>pp_YUV_fallback</name></expr></argument>, <argument><expr><name>p_list_YUV</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>vlc_fourcc_GetRGBFallback</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetFallback</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument>, <argument><expr><name>pp_RGB_fallback</name></expr></argument>, <argument><expr><name>p_RGB32_fallback</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>vlc_fourcc_GetFallback</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>vlc_fourcc_IsYUV</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>vlc_fourcc_GetYUVFallback</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>
</then><else>: <expr><call><name>vlc_fourcc_GetRGBFallback</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_fourcc_AreUVPlanesSwapped</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>pp_swapped</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_YV12</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>VLC_CODEC_J420</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_YV9</name></expr>, <expr><name>VLC_CODEC_I410</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pp_swapped</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pp_swapped</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>b</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>t</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pp_swapped</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>a</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name><name>pp_swapped</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pp_swapped</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>b</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_fourcc_IsYUV</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_list_YUV</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_list_YUV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fcc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>w_den</name></type></parameter>, <parameter><type><name>h_den</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .plane_count = n, .p = { {.w = {1, 1}, .h = {1, 1}}, {.w = {1,w_den}, .h = {1,h_den}}, {.w = {1,w_den}, .h = {1,h_den}}, {.w = {1, 1}, .h = {1, 1}} }, .pixel_size = size, .pixel_bits = bits }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR_8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>w_den</name></type></parameter>, <parameter><type><name>h_den</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLANAR(n, w_den, h_den, 1, 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR_16</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>w_den</name></type></parameter>, <parameter><type><name>h_den</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLANAR(n, w_den, h_den, 2, bits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEMIPLANAR</name><parameter_list>(<parameter><type><name>w_den</name></type></parameter>, <parameter><type><name>h_den</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .plane_count = 2, .p = { {.w = {1, 1}, .h = {1, 1}}, {.w = {2,w_den}, .h = {1,h_den}} }, .pixel_size = size, .pixel_bits = bits }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKED_FMT</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .plane_count = 1, .p = { {.w = {1,1}, .h = {1,1}} }, .pixel_size = size, .pixel_bits = bits }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAKE_FMT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ .plane_count = 0, .p = { {.w = {1,1}, .h = {1,1}} }, .pixel_size = 0, .pixel_bits = 0 }</cpp:value></cpp:define>





<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name><name>p_fourcc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_chroma_description_t</name></type> <name>description</name></decl>;</decl_stmt>
}</block> <decl><name><name>p_list_chroma_description</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I411</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV_PLANAR_410</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV_PLANAR_420</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>VLC_CODEC_NV21</name></expr> }</block></expr>, <macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV_PLANAR_422</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_NV16</name></expr>, <expr><name>VLC_CODEC_NV61</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV_PLANAR_440</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV_PLANAR_444</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUVA</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV420A</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV422A</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_9L</name></expr>,
<expr><name>VLC_CODEC_GBR_PLANAR_9B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_10L</name></expr>,
<expr><name>VLC_CODEC_GBR_PLANAR_10B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_12L</name></expr>,
<expr><name>VLC_CODEC_GBR_PLANAR_12B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_14L</name></expr>,
<expr><name>VLC_CODEC_GBR_PLANAR_14B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">14</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_16L</name></expr>,
<expr><name>VLC_CODEC_GBR_PLANAR_16B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBRA_PLANAR</name></expr> }</block></expr>, <macro><name>PLANAR_8</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBRA_PLANAR_10L</name></expr>,
<expr><name>VLC_CODEC_GBRA_PLANAR_10B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBRA_PLANAR_12L</name></expr>,
<expr><name>VLC_CODEC_GBRA_PLANAR_12B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GBRA_PLANAR_16L</name></expr>,
<expr><name>VLC_CODEC_GBRA_PLANAR_16B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I420_16L</name></expr>,
<expr><name>VLC_CODEC_I420_16B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I420_12L</name></expr>,
<expr><name>VLC_CODEC_I420_12B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I420_10L</name></expr>,
<expr><name>VLC_CODEC_I420_10B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I420_9L</name></expr>,
<expr><name>VLC_CODEC_I420_9B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I422_16L</name></expr>,
<expr><name>VLC_CODEC_I422_16B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I422_12L</name></expr>,
<expr><name>VLC_CODEC_I422_12B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I422_10L</name></expr>,
<expr><name>VLC_CODEC_I422_10B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I422_9L</name></expr>,
<expr><name>VLC_CODEC_I422_9B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I444_12L</name></expr>,
<expr><name>VLC_CODEC_I444_12B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I444_10L</name></expr>,
<expr><name>VLC_CODEC_I444_10B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I444_9L</name></expr>,
<expr><name>VLC_CODEC_I444_9B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_I444_16L</name></expr>,
<expr><name>VLC_CODEC_I444_16B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUVA_444_10L</name></expr>,
<expr><name>VLC_CODEC_YUVA_444_10B</name></expr> }</block></expr>, <macro><name>PLANAR_16</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_P010</name></expr> }</block></expr>, <macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_P016</name></expr> }</block></expr>, <macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUYV</name></expr>, <expr><name>VLC_CODEC_YVYU</name></expr>,
<expr><name>VLC_CODEC_UYVY</name></expr>, <expr><name>VLC_CODEC_VYUY</name></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_YUV2</name></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGB8</name></expr>, <expr><name>VLC_CODEC_GREY</name></expr>,
<expr><name>VLC_CODEC_YUVP</name></expr>, <expr><name>VLC_CODEC_RGBP</name></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GREY_10L</name></expr>,
<expr><name>VLC_CODEC_GREY_10B</name></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GREY_12L</name></expr>,
<expr><name>VLC_CODEC_GREY_12B</name></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_GREY_16L</name></expr>,
<expr><name>VLC_CODEC_GREY_16B</name></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGB15</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGB12</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGB16</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">24</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">24</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><name>VLC_CODEC_ARGB</name></expr>,
<expr><name>VLC_CODEC_BGRA</name></expr>, <expr><name>VLC_CODEC_RGBA10</name></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_RGBA64</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">64</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_VUYA</name></expr>, <expr><name>VLC_CODEC_Y210</name></expr>,
<expr><name>VLC_CODEC_Y410</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_Y211</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><block>{<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr> }</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_XYZ12</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>PACKED_FMT</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">48</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_VDPAU_VIDEO_420</name></expr>, <expr><name>VLC_CODEC_VDPAU_VIDEO_422</name></expr>,
<expr><name>VLC_CODEC_VDPAU_VIDEO_444</name></expr>, <expr><name>VLC_CODEC_VDPAU_OUTPUT</name></expr> }</block></expr>,
<macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_ANDROID_OPAQUE</name></expr>, <expr><name>VLC_CODEC_MMAL_OPAQUE</name></expr>,
<expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>, <expr><name>VLC_CODEC_D3D11_OPAQUE</name></expr> }</block></expr>,
<macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_D3D11_OPAQUE_10B</name></expr>, <expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>,
<expr><name>VLC_CODEC_D3D11_OPAQUE_RGBA</name></expr>, <expr><name>VLC_CODEC_D3D11_OPAQUE_BGRA</name></expr> }</block></expr>,
<macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_NVDEC_OPAQUE_16B</name></expr>,
<expr><name>VLC_CODEC_NVDEC_OPAQUE_10B</name></expr>, <expr><name>VLC_CODEC_NVDEC_OPAQUE</name></expr> }</block></expr>,
<macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_NVDEC_OPAQUE_444</name></expr>, <expr><name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr> }</block></expr>,
<macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_CVPX_NV12</name></expr>, <expr><name>VLC_CODEC_CVPX_UYVY</name></expr>,
<expr><name>VLC_CODEC_CVPX_I420</name></expr>, <expr><name>VLC_CODEC_CVPX_BGRA</name></expr> }</block></expr>,
<macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_CVPX_P010</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>VLC_CODEC_VAAPI_420</name></expr>, <expr><name>VLC_CODEC_VAAPI_420_10BPP</name></expr> }</block></expr>,
<macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <macro><name>FAKE_FMT</name><argument_list>()</argument_list></macro> }</block></expr>
}</block></expr></init></decl>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKED_FMT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLANAR_16</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLANAR_8</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLANAR</name></cpp:undef>

<function><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>vlc_fourcc_GetChromaDescription</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_list_chroma_description</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_fourcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>p_fourcc</name> <init>= <expr><name><name>p_list_chroma_description</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_fourcc</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>p_fourcc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_fourcc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_list_chroma_description</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>description</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
