<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\threads.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>


<struct>struct <name>vlc_suuint</name> <block>{ <union>union <block>{ <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt> }</block>;</union> }</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>atomic_uint</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>vlc_suuint</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Size mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><call><name>alignof</name> <argument_list>(<argument><expr><name>atomic_uint</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>alignof</name> <argument_list>(<argument><expr>struct <name>vlc_suuint</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Alignment mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<function><type><name>void</name></type> <name>vlc_global_mutex</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>acquire</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name><name>locks</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_STATIC_MUTEX</name></expr>,
<expr><name>VLC_STATIC_MUTEX</name></expr>,
<expr><name>VLC_STATIC_MUTEX</name></expr>,
<expr><name>VLC_STATIC_MUTEX</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>VLC_STATIC_MUTEX</name></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><name>VLC_MAX_MUTEX</name> <operator>==</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>locks</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Wrong number of global mutexes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>locks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>locks</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>acquire</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIBVLC_NEED_SLEEP</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_vlc_cancel_addr_clear</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cancel_addr_clear</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cancel_addr_prepare</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_cancel_addr_set</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>do_vlc_cancel_addr_clear</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cancel_addr_finish</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cancel_addr_clear</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cancel_addr_prepare</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cancel_addr_finish</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBVLC_NEED_SLEEP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> (<name>vlc_tick_wait</name>)<parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atomic_uint</name></type> <name>value</name> <init>= <expr><call><name>ATOMIC_VAR_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel_addr_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vlc_atomic_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_cancel_addr_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> (<name>vlc_tick_sleep</name>)<parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>(<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_mutex_init_common</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recursive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>recursion</name></name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_mutex_init</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_init_common</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_mutex_init_recursive</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_init_common</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>_Thread_local</specifier> <name>char</name></type> <name><name>thread_self</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SELF</name></cpp:macro> <cpp:value>((const void *)thread_self)</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>vlc_mutex_held</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__apple_build_version__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__clang_major__</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></cpp:if>






<decl_stmt><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>tmp_mtx</name> <init>= <expr><operator>(</operator><name>vlc_mutex_t</name> <operator>*</operator><operator>)</operator><name>mtx</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_mutex_t</name> <modifier>*</modifier></type><name>tmp_mtx</name> <init>= <expr><name>mtx</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<return>return <expr><name>THREAD_SELF</name> <operator>==</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp_mtx</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_mutex_lock</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>value</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><call><name>vlc_mutex_trylock</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>atomic_exchange_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_atomic_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>THREAD_SELF</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_mutex_trylock</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>unsigned</name></type> <name>recursion</name> <init>= <expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>recursion</name></name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>recursion</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vlc_mutex_held</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>recursion</name></name></expr></argument>, <argument><expr><name>recursion</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_mutex_held</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_compare_exchange_strong_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>THREAD_SELF</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>EBUSY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_mutex_held</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>recursion</name> <init>= <expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>recursion</name></name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>recursion</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>recursion</name></name></expr></argument>, <argument><expr><name>recursion</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>atomic_exchange_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>vlc_atomic_notify_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtx</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_cond_init</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>vlc_cond_waiter</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pprev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cond_signal_waiter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>waiter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_atomic_notify_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_cond_signal</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>waiter</name></decl>;</decl_stmt>






<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>waiter</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>waiter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>waiter</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pprev</name> <init>= <expr><name><name>waiter</name><operator>-&gt;</operator><name>pprev</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pprev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <name>pprev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal_waiter</name><argument_list>(<argument><expr><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_cond_broadcast</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>waiter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>waiter</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>waiter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>waiter</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal_waiter</name><argument_list>(<argument><expr><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>waiter</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cond_wait_prepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>waiter</name></decl></parameter>,
<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>cond</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>waiter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cancel_addr_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cond_wait_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>waiter</name></decl></parameter>,
<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>waiter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>waiter</name><operator>-&gt;</operator><name>pprev</name></name><operator>)</operator> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <name><name>waiter</name><operator>-&gt;</operator><name>pprev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cancel_addr_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_cond_wait_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>waiter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait_finish</name><argument_list>(<argument><expr><name>waiter</name></expr></argument>, <argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_cond_wait</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name></type> <name>waiter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>vlc_cond_wait_cleanup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_atomic_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name></type> <name>waiter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>vlc_cond_wait_cleanup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_atomic_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_cond_timedwait_daytime</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name></type> <name>waiter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>vlc_cond_wait_cleanup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_atomic_timedwait_daytime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBVLC_NEED_RWLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READER_MASK</name></cpp:macro> <cpp:value>LONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITER_BIT</name></cpp:macro> <cpp:value>LONG_MIN</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>vlc_rwlock_init</name> <parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_rwlock_destroy</name> <parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>lock</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_rwlock_rdlock</name> <parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>WRITER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutex_cleanup_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;=</operator> <name>READER_MASK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_rwlock_wrlock</name> <parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mutex_cleanup_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>WRITER_BIT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_rwlock_unlock</name> <parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>WRITER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cond_signal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function><type><name>void</name></type> <name>vlc_sem_init</name> <parameter_list>(<parameter><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_sem_post</name> <parameter_list>(<parameter><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>exp</name> <init>= <expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>exp</name> <operator>==</operator> <name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOVERFLOW</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_weak_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>vlc_atomic_notify_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_sem_wait</name> <parameter_list>(<parameter><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>exp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_weak_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>exp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_sem_timedwait</name><parameter_list>(<parameter><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>exp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_weak_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>exp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_atomic_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{ <decl><name>VLC_ONCE_UNDONE</name></decl>, <decl><name>VLC_ONCE_DOING</name></decl>, <decl><name>VLC_ONCE_CONTEND</name></decl>, <decl><name>VLC_ONCE_DONE</name></decl> }</block>;</enum>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><name>VLC_ONCE_DONE</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Check vlc_once in header file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> (<name>vlc_once</name>)<parameter_list>(<parameter><decl><type><name>vlc_once_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>once</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name> <init>= <expr><name>VLC_ONCE_UNDONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_compare_exchange_strong_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>,
<argument><expr><name>VLC_ONCE_DOING</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_exchange_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>VLC_ONCE_DONE</name></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_ONCE_CONTEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_atomic_notify_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>&gt;=</operator> <name>VLC_ONCE_DOING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>value</name> <operator>==</operator> <name>VLC_ONCE_DOING</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>atomic_compare_exchange_strong_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>,
<argument><expr><name>VLC_ONCE_CONTEND</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>VLC_ONCE_CONTEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>&gt;=</operator> <name>VLC_ONCE_CONTEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>VLC_ONCE_DONE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>VLC_ONCE_CONTEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
