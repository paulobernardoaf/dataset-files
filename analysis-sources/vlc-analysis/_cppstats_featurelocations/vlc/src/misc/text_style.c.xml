<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\text_style.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_value</name></decl>;</decl_stmt>
}</block> <decl><name><name>p_html_colors</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"Aqua"</literal></expr>, <expr><literal type="number">0x00FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Black"</literal></expr>, <expr><literal type="number">0x000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Blue"</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Fuchsia"</literal></expr>, <expr><literal type="number">0xFF00FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gray"</literal></expr>, <expr><literal type="number">0x808080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Green"</literal></expr>, <expr><literal type="number">0x008000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lime"</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Maroon"</literal></expr>, <expr><literal type="number">0x800000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Navy"</literal></expr>, <expr><literal type="number">0x000080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Olive"</literal></expr>, <expr><literal type="number">0x808000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Purple"</literal></expr>, <expr><literal type="number">0x800080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Red"</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Silver"</literal></expr>, <expr><literal type="number">0xC0C0C0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Teal"</literal></expr>, <expr><literal type="number">0x008080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"White"</literal></expr>, <expr><literal type="number">0xFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Yellow"</literal></expr>, <expr><literal type="number">0xFFFF00</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="string">"AliceBlue"</literal></expr>, <expr><literal type="number">0xF0F8FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AntiqueWhite"</literal></expr>, <expr><literal type="number">0xFAEBD7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aqua"</literal></expr>, <expr><literal type="number">0x00FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aquamarine"</literal></expr>, <expr><literal type="number">0x7FFFD4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Azure"</literal></expr>, <expr><literal type="number">0xF0FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Beige"</literal></expr>, <expr><literal type="number">0xF5F5DC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Bisque"</literal></expr>, <expr><literal type="number">0xFFE4C4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Black"</literal></expr>, <expr><literal type="number">0x000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BlanchedAlmond"</literal></expr>, <expr><literal type="number">0xFFEBCD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Blue"</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BlueViolet"</literal></expr>, <expr><literal type="number">0x8A2BE2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Brown"</literal></expr>, <expr><literal type="number">0xA52A2A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BurlyWood"</literal></expr>, <expr><literal type="number">0xDEB887</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CadetBlue"</literal></expr>, <expr><literal type="number">0x5F9EA0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Chartreuse"</literal></expr>, <expr><literal type="number">0x7FFF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Chocolate"</literal></expr>, <expr><literal type="number">0xD2691E</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Coral"</literal></expr>, <expr><literal type="number">0xFF7F50</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CornflowerBlue"</literal></expr>, <expr><literal type="number">0x6495ED</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Cornsilk"</literal></expr>, <expr><literal type="number">0xFFF8DC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Crimson"</literal></expr>, <expr><literal type="number">0xDC143C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Cyan"</literal></expr>, <expr><literal type="number">0x00FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkBlue"</literal></expr>, <expr><literal type="number">0x00008B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkCyan"</literal></expr>, <expr><literal type="number">0x008B8B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkGoldenRod"</literal></expr>, <expr><literal type="number">0xB8860B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkGray"</literal></expr>, <expr><literal type="number">0xA9A9A9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkGrey"</literal></expr>, <expr><literal type="number">0xA9A9A9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkGreen"</literal></expr>, <expr><literal type="number">0x006400</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkKhaki"</literal></expr>, <expr><literal type="number">0xBDB76B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkMagenta"</literal></expr>, <expr><literal type="number">0x8B008B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkOliveGreen"</literal></expr>, <expr><literal type="number">0x556B2F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Darkorange"</literal></expr>, <expr><literal type="number">0xFF8C00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkOrchid"</literal></expr>, <expr><literal type="number">0x9932CC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkRed"</literal></expr>, <expr><literal type="number">0x8B0000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSalmon"</literal></expr>, <expr><literal type="number">0xE9967A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSeaGreen"</literal></expr>, <expr><literal type="number">0x8FBC8F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSlateBlue"</literal></expr>, <expr><literal type="number">0x483D8B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSlateGray"</literal></expr>, <expr><literal type="number">0x2F4F4F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSlateGrey"</literal></expr>, <expr><literal type="number">0x2F4F4F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkTurquoise"</literal></expr>, <expr><literal type="number">0x00CED1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkViolet"</literal></expr>, <expr><literal type="number">0x9400D3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DeepPink"</literal></expr>, <expr><literal type="number">0xFF1493</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DeepSkyBlue"</literal></expr>, <expr><literal type="number">0x00BFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DimGray"</literal></expr>, <expr><literal type="number">0x696969</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DimGrey"</literal></expr>, <expr><literal type="number">0x696969</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DodgerBlue"</literal></expr>, <expr><literal type="number">0x1E90FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FireBrick"</literal></expr>, <expr><literal type="number">0xB22222</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FloralWhite"</literal></expr>, <expr><literal type="number">0xFFFAF0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ForestGreen"</literal></expr>, <expr><literal type="number">0x228B22</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Fuchsia"</literal></expr>, <expr><literal type="number">0xFF00FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gainsboro"</literal></expr>, <expr><literal type="number">0xDCDCDC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GhostWhite"</literal></expr>, <expr><literal type="number">0xF8F8FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gold"</literal></expr>, <expr><literal type="number">0xFFD700</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GoldenRod"</literal></expr>, <expr><literal type="number">0xDAA520</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gray"</literal></expr>, <expr><literal type="number">0x808080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Grey"</literal></expr>, <expr><literal type="number">0x808080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Green"</literal></expr>, <expr><literal type="number">0x008000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GreenYellow"</literal></expr>, <expr><literal type="number">0xADFF2F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"HoneyDew"</literal></expr>, <expr><literal type="number">0xF0FFF0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"HotPink"</literal></expr>, <expr><literal type="number">0xFF69B4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IndianRed"</literal></expr>, <expr><literal type="number">0xCD5C5C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Indigo"</literal></expr>, <expr><literal type="number">0x4B0082</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ivory"</literal></expr>, <expr><literal type="number">0xFFFFF0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Khaki"</literal></expr>, <expr><literal type="number">0xF0E68C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lavender"</literal></expr>, <expr><literal type="number">0xE6E6FA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LavenderBlush"</literal></expr>, <expr><literal type="number">0xFFF0F5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LawnGreen"</literal></expr>, <expr><literal type="number">0x7CFC00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LemonChiffon"</literal></expr>, <expr><literal type="number">0xFFFACD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightBlue"</literal></expr>, <expr><literal type="number">0xADD8E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightCoral"</literal></expr>, <expr><literal type="number">0xF08080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightCyan"</literal></expr>, <expr><literal type="number">0xE0FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightGoldenRodYellow"</literal></expr>, <expr><literal type="number">0xFAFAD2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightGray"</literal></expr>, <expr><literal type="number">0xD3D3D3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightGrey"</literal></expr>, <expr><literal type="number">0xD3D3D3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightGreen"</literal></expr>, <expr><literal type="number">0x90EE90</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightPink"</literal></expr>, <expr><literal type="number">0xFFB6C1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSalmon"</literal></expr>, <expr><literal type="number">0xFFA07A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSeaGreen"</literal></expr>, <expr><literal type="number">0x20B2AA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSkyBlue"</literal></expr>, <expr><literal type="number">0x87CEFA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSlateGray"</literal></expr>, <expr><literal type="number">0x778899</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSlateGrey"</literal></expr>, <expr><literal type="number">0x778899</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSteelBlue"</literal></expr>, <expr><literal type="number">0xB0C4DE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightYellow"</literal></expr>, <expr><literal type="number">0xFFFFE0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lime"</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LimeGreen"</literal></expr>, <expr><literal type="number">0x32CD32</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Linen"</literal></expr>, <expr><literal type="number">0xFAF0E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Magenta"</literal></expr>, <expr><literal type="number">0xFF00FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Maroon"</literal></expr>, <expr><literal type="number">0x800000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumAquaMarine"</literal></expr>, <expr><literal type="number">0x66CDAA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumBlue"</literal></expr>, <expr><literal type="number">0x0000CD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumOrchid"</literal></expr>, <expr><literal type="number">0xBA55D3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumPurple"</literal></expr>, <expr><literal type="number">0x9370D8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumSeaGreen"</literal></expr>, <expr><literal type="number">0x3CB371</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumSlateBlue"</literal></expr>, <expr><literal type="number">0x7B68EE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumSpringGreen"</literal></expr>, <expr><literal type="number">0x00FA9A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumTurquoise"</literal></expr>, <expr><literal type="number">0x48D1CC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumVioletRed"</literal></expr>, <expr><literal type="number">0xC71585</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MidnightBlue"</literal></expr>, <expr><literal type="number">0x191970</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MintCream"</literal></expr>, <expr><literal type="number">0xF5FFFA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MistyRose"</literal></expr>, <expr><literal type="number">0xFFE4E1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Moccasin"</literal></expr>, <expr><literal type="number">0xFFE4B5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NavajoWhite"</literal></expr>, <expr><literal type="number">0xFFDEAD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Navy"</literal></expr>, <expr><literal type="number">0x000080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OldLace"</literal></expr>, <expr><literal type="number">0xFDF5E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Olive"</literal></expr>, <expr><literal type="number">0x808000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OliveDrab"</literal></expr>, <expr><literal type="number">0x6B8E23</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Orange"</literal></expr>, <expr><literal type="number">0xFFA500</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OrangeRed"</literal></expr>, <expr><literal type="number">0xFF4500</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Orchid"</literal></expr>, <expr><literal type="number">0xDA70D6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleGoldenRod"</literal></expr>, <expr><literal type="number">0xEEE8AA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleGreen"</literal></expr>, <expr><literal type="number">0x98FB98</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleTurquoise"</literal></expr>, <expr><literal type="number">0xAFEEEE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleVioletRed"</literal></expr>, <expr><literal type="number">0xD87093</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PapayaWhip"</literal></expr>, <expr><literal type="number">0xFFEFD5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PeachPuff"</literal></expr>, <expr><literal type="number">0xFFDAB9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Peru"</literal></expr>, <expr><literal type="number">0xCD853F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Pink"</literal></expr>, <expr><literal type="number">0xFFC0CB</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Plum"</literal></expr>, <expr><literal type="number">0xDDA0DD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PowderBlue"</literal></expr>, <expr><literal type="number">0xB0E0E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Purple"</literal></expr>, <expr><literal type="number">0x800080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RebeccaPurple"</literal></expr>, <expr><literal type="number">0x663399</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Red"</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RosyBrown"</literal></expr>, <expr><literal type="number">0xBC8F8F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RoyalBlue"</literal></expr>, <expr><literal type="number">0x4169E1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SaddleBrown"</literal></expr>, <expr><literal type="number">0x8B4513</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Salmon"</literal></expr>, <expr><literal type="number">0xFA8072</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SandyBrown"</literal></expr>, <expr><literal type="number">0xF4A460</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SeaGreen"</literal></expr>, <expr><literal type="number">0x2E8B57</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SeaShell"</literal></expr>, <expr><literal type="number">0xFFF5EE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Sienna"</literal></expr>, <expr><literal type="number">0xA0522D</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Silver"</literal></expr>, <expr><literal type="number">0xC0C0C0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SkyBlue"</literal></expr>, <expr><literal type="number">0x87CEEB</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SlateBlue"</literal></expr>, <expr><literal type="number">0x6A5ACD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SlateGray"</literal></expr>, <expr><literal type="number">0x708090</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SlateGrey"</literal></expr>, <expr><literal type="number">0x708090</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Snow"</literal></expr>, <expr><literal type="number">0xFFFAFA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SpringGreen"</literal></expr>, <expr><literal type="number">0x00FF7F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SteelBlue"</literal></expr>, <expr><literal type="number">0x4682B4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Tan"</literal></expr>, <expr><literal type="number">0xD2B48C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Teal"</literal></expr>, <expr><literal type="number">0x008080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Thistle"</literal></expr>, <expr><literal type="number">0xD8BFD8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Tomato"</literal></expr>, <expr><literal type="number">0xFF6347</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Turquoise"</literal></expr>, <expr><literal type="number">0x40E0D0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Violet"</literal></expr>, <expr><literal type="number">0xEE82EE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Wheat"</literal></expr>, <expr><literal type="number">0xF5DEB3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"White"</literal></expr>, <expr><literal type="number">0xFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"WhiteSmoke"</literal></expr>, <expr><literal type="number">0xF5F5F5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Yellow"</literal></expr>, <expr><literal type="number">0xFFFF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"YellowGreen"</literal></expr>, <expr><literal type="number">0x9ACD32</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>


<function><type><name>text_style_t</name> <modifier>*</modifier></type><name>text_style_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_FULLY_SET</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>text_style_t</name> <modifier>*</modifier></type><name>text_style_Create</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_defaults</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_style</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_defaults</name> <operator>==</operator> <name>STYLE_NO_DEFAULTS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_style</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>=</operator> <name>STYLE_FULLY_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>=</operator> <name>STYLE_OUTLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name>STYLE_DEFAULT_FONT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <literal type="number">0xffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_color</name></name> <operator>=</operator> <literal type="number">0x000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_color</name></name> <operator>=</operator> <literal type="number">0x808080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <literal type="number">0x000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_spacing</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>e_wrapinfo</name></name> <operator>=</operator> <name>STYLE_WRAP_DEFAULT</name></expr>;</expr_stmt>

<return>return <expr><name>p_style</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>text_style_t</name> <modifier>*</modifier></type><name>text_style_Copy</name><parameter_list>( <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_src</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_dst</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <operator>*</operator><name>p_src</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_dst</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>fflag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( (p_src-&gt;i_features &amp; fflag) &amp;&amp; (b_override || !(p_dst-&gt;i_features &amp; fflag)) )p_dst-&gt;var = p_src-&gt;var</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_SIZE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( p_src-&gt;var &gt; 0 &amp;&amp; (b_override || p_dst-&gt;var &lt;= 0) )p_dst-&gt;var = p_src-&gt;var</cpp:value></cpp:define>



<function><type><name>void</name></type> <name>text_style_Merge</name><parameter_list>( <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_override</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>p_dst</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>||</operator> <name>b_override</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>p_dst</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>||</operator> <name>b_override</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_features</name></name> <operator>!=</operator> <name>STYLE_NO_DEFAULTS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_font_color</name></expr></argument>, <argument><expr><name>STYLE_HAS_FONT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_font_alpha</name></expr></argument>, <argument><expr><name>STYLE_HAS_FONT_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_outline_color</name></expr></argument>, <argument><expr><name>STYLE_HAS_OUTLINE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_outline_alpha</name></expr></argument>, <argument><expr><name>STYLE_HAS_OUTLINE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_shadow_color</name></expr></argument>, <argument><expr><name>STYLE_HAS_SHADOW_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_shadow_alpha</name></expr></argument>, <argument><expr><name>STYLE_HAS_SHADOW_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_background_color</name></expr></argument>, <argument><expr><name>STYLE_HAS_BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_background_alpha</name></expr></argument>, <argument><expr><name>STYLE_HAS_BACKGROUND_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>e_wrapinfo</name></expr></argument>, <argument><expr><name>STYLE_HAS_WRAP_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_features</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_style_flags</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MERGE_SIZE</name><argument_list>(<argument><expr><name>f_font_relsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_SIZE</name><argument_list>(<argument><expr><name>i_font_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_SIZE</name><argument_list>(<argument><expr><name>i_outline_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_SIZE</name><argument_list>(<argument><expr><name>i_shadow_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_SIZE</name><argument_list>(<argument><expr><name>i_spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MERGE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MERGE_SIZE</name></cpp:undef>

<function><type><name>text_style_t</name> <modifier>*</modifier></type><name>text_style_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_src</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_dst</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_dst</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>text_style_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>text_style_Delete</name><parameter_list>( <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>text_segment_ruby_ChainDelete</name><parameter_list>( <parameter><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>p_ruby</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_ruby</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ruby</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ruby</name><operator>-&gt;</operator><name>psz_rt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ruby</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ruby</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>text_segment_ruby_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_rt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_rb</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_rb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_rb</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_rb</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rb</name><operator>-&gt;</operator><name>psz_base</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_base</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rb</name><operator>-&gt;</operator><name>psz_rt</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_rt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_rb</name><operator>-&gt;</operator><name>psz_base</name></name> <operator>||</operator> <operator>!</operator><name><name>p_rb</name><operator>-&gt;</operator><name>psz_rt</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>text_segment_ruby_ChainDelete</name><argument_list>( <argument><expr><name>p_rb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_rb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>text_segment_ruby_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name>p_dup</name></expr></init></decl>;</decl_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>p_src</name></expr> ;</condition> <incr><expr><name>p_src</name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>text_segment_ruby_New</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_rt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>p_dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>text_segment_t</name> <modifier>*</modifier></type><name>text_segment_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>segment</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>segment</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>segment</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>segment</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>text_segment_t</name> <modifier>*</modifier></type><name>text_segment_NewInheritStyle</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name><modifier>*</modifier></type> <name>p_style</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
<decl_stmt><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_segment</name> <init>= <expr><call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_segment</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_segment</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>text_segment_t</name> <modifier>*</modifier></type><name>text_segment_FromRuby</name><parameter_list>( <parameter><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_segment</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>p_ruby</name></name> <operator>=</operator> <name>p_ruby</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_base</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_ruby</name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_base</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_base</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_ruby</name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_segment</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>text_segment_Delete</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>segment</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>segment</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>text_segment_ruby_ChainDelete</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>p_ruby</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>text_segment_ChainDelete</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>segment</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>segment</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>segment</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>text_segment_t</name> <modifier>*</modifier></type><name>text_segment_Copy</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_dst0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_src</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>text_segment_New</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_new</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>p_ruby</name></name> <operator>=</operator> <call><name>text_segment_ruby_Duplicate</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>p_ruby</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dst</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name>p_dst0</name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_src</name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>p_dst0</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>vlc_html_color</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>ok</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_hex</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>psz_value</name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>psz_value</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>psz_value</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_hex</name> <operator>!=</operator> <name>psz_value</name> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>psz_hex</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_hex</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>psz_hex</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_hex</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_value</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtoul</name><argument_list>( <argument><expr><name>psz_hex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isspace</name><argument_list>( <argument><expr><operator>*</operator><name>psz_end</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>psz_end</name> <operator>-</operator> <name>psz_hex</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>color</name> <operator>=</operator> <operator>(</operator><name>i_value</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i_value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>i_value</name> <operator>|</operator> <literal type="number">0xFF000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ret</name> <operator>&amp;&amp;</operator> <name>psz_hex</name> <operator>==</operator> <name>psz_value</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"rgb"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>a</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>psz_value</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <operator>(</operator><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"rgba(%3u,%3u,%3u,%3u)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <operator>(</operator><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"rgb(%3u,%3u,%3u)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>color</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ret</name> <operator>&amp;&amp;</operator> <name>psz_hex</name> <operator>==</operator> <name>psz_value</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_html_colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name><name>p_html_colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>p_html_colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_value</name> <operator>|</operator> <literal type="number">0xFF000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>ok</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>b_ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>
</unit>
