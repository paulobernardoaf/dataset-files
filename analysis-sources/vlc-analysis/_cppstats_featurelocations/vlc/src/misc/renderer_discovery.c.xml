<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\renderer_discovery.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_renderer_discovery.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_probe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>

<struct>struct <name>vlc_renderer_item_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_icon_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_demux_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>item_free</name><parameter_list>(<parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_sout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_icon_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_demux_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type>
<name>vlc_renderer_item_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extra_sout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_demux_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_icon_uri</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_item</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_renderer_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_type</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_sout</name></name></expr></argument>, <argument><expr><literal type="string">"%s{ip=%s,port=%u%s%s}"</literal></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_extra_sout</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_extra_sout</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>psz_extra_sout</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_icon_uri</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_icon_uri</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_icon_uri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_demux_filter</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_demux_filter</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_demux_filter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>i_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_item</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>item_free</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_renderer_item_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_renderer_item_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_renderer_item_sout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_sout</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_renderer_item_icon_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_icon_uri</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_renderer_item_demux_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_demux_filter</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_renderer_item_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_item</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type>
<name>vlc_renderer_item_hold</name><parameter_list>(<parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_renderer_item_release</name><parameter_list>(<parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_atomic_rc_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>item_free</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>vlc_rd_probe</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_longname</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type>
<name>vlc_rd_probe_add</name><parameter_list>(<parameter><decl><type><name>vlc_probe_t</name> <modifier>*</modifier></type><name>probe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_longname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_rd_probe</name></name></type> <name>names</name> <init>= <expr><block>{ <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>, <macro><name>strdup</name><argument_list>(<argument>psz_longname</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>names</name><operator>.</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>names</name><operator>.</operator><name>psz_longname</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>vlc_probe_add</name><argument_list>(<argument><expr><name>probe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>names</name><operator>.</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>names</name><operator>.</operator><name>psz_longname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_PROBE_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_rd_get_names</name></cpp:undef>
<function><type><name>int</name></type>
<name>vlc_rd_get_names</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_names</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_longnames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_rd_probe</name></name> <modifier>*</modifier></type><name>p_tab</name> <init>= <expr><call><name>vlc_probe</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"renderer probe"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_names</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>i_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_longnames</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>i_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ppsz_names</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ppsz_longnames</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_longnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ppsz_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppsz_longnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_longname</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ppsz_names</name><index>[<expr><name>i_count</name></expr>]</index></name> <operator>=</operator> <name><name>ppsz_longnames</name><index>[<expr><name>i_count</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pppsz_names</name> <operator>=</operator> <name>ppsz_names</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pppsz_longnames</name> <operator>=</operator> <name>ppsz_longnames</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_rd_release</name><parameter_list>(<parameter><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>, <argument><expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_rd</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type>
<name>vlc_rd_new</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_renderer_discovery_owner</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_rd</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_rd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"renderer discovery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_rd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>config_ChainCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_rd</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_rd</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rd</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <operator>*</operator><name>owner</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>, <argument><expr><literal type="string">"renderer_discovery"</literal></expr></argument>,
<argument><expr><name><name>p_rd</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>, <argument><expr><literal type="string">"no suitable renderer discovery module for '%s'"</literal></expr></argument>,
<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_rd</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_rd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_rd</name></expr>;</return>
</block_content>}</block></function>
</unit>
