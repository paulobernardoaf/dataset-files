<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\update.h">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_update.h&gt;</cpp:file></cpp:include>

<enum>enum 
<block>{
<decl><name>SIGNATURE_PACKET</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>PUBLIC_KEY_PACKET</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,
<decl><name>USER_ID_PACKET</name> <init>= <expr><literal type="number">0x0d</literal></expr></init></decl>
}</block>;</enum>

<enum>enum 
<block>{
<decl><name>BINARY_SIGNATURE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>TEXT_SIGNATURE</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,


<decl><name>GENERIC_KEY_SIGNATURE</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>, 
<decl><name>PERSONA_KEY_SIGNATURE</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>, 
<decl><name>CASUAL_KEY_SIGNATURE</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>, 
<decl><name>POSITIVE_KEY_SIGNATURE</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl> 
}</block>;</enum>

<enum>enum 
<block>{
<decl><name>ISSUER_SUBPACKET</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>public_key_packet_t</name>
<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>timestamp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>algo</name></decl>;</decl_stmt> 


<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3072</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>q</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">256</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>g</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3072</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>y</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3072</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>dsa</name></decl> ;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>n</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">4096</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>e</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">4096</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>rsa</name></decl>;</struct>
}</block> <decl><name>sig</name></decl>;</union>
}</block>;</struct>


<struct>struct <name>signature_packet_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>public_key_algo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>digest_algo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hash_verification</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>issuer_longid</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<union>union 
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hashed_data_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hashed_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>unhashed_data_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>unhashed_data</name></decl>;</decl_stmt> 
}</block> <decl><name>v4</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>hashed_data_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>timestamp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>v3</name></decl>;</struct>
}</block> <decl><name>specific</name></decl>;</union>




<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>r</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">256</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>s</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">256</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>dsa</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>s</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">4096</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>rsa</name></decl>;</struct>
}</block> <decl><name>algo_specific</name></decl>;</union>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>public_key_packet_t</name></name></type> <name>public_key_packet_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>signature_packet_t</name></name></type> <name>signature_packet_t</name>;</typedef>

<struct>struct <name>public_key_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>longid</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psz_username</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>public_key_packet_t</name></type> <name>key</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>signature_packet_t</name></type> <name>sig</name></decl>;</decl_stmt> 
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>public_key_t</name></name></type> <name>public_key_t</name>;</typedef>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_bool</name></type> <name>aborted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_destdir</name></decl>;</decl_stmt>
}</block></struct></type> <name>update_download_thread_t</name>;</typedef>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>update_t</name> <modifier>*</modifier></type><name>p_update</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_callback</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>update_check_thread_t</name>;</typedef>




<struct>struct <name>update_t</name>
<block>{
<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>update_release_t</name></name></type> <name>release</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>p_pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>update_download_thread_t</name> <modifier>*</modifier></type><name>p_download</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>update_check_thread_t</name> <modifier>*</modifier></type><name>p_check</name></decl>;</decl_stmt>
}</block>;</struct>




<function_decl><type><name>public_key_t</name> <modifier>*</modifier></type>
<name>download_key</name><parameter_list>(
<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_longid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_signature_issuer</name></decl></parameter> )</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type>
<name>parse_public_key</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_key_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_key_len</name></decl></parameter>, <parameter><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>p_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sig_issuer</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type>
<name>verify_signature</name><parameter_list>(<parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>public_key_packet_t</name> <modifier>*</modifier></type><name>p_key</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type>
<name>download_signature</name><parameter_list>(
<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>hash_from_text</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>hash_from_file</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter>, <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>hash_from_public_key</name><parameter_list>( <parameter><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>p_pkey</name></decl></parameter> )</parameter_list>;</function_decl>
</unit>
