<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\mtime.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type><name>secstotimestr</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buffer</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_seconds</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_seconds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>secstotimestr</name><argument_list>( <argument><expr><name>psz_buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>i_seconds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_buffer</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<return>return <expr><name>psz_buffer</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>div_t</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>( <argument><expr><name>i_seconds</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_seconds</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>( <argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>MSTRTIME_MAX_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%u:%02u:%02u"</literal></expr></argument>,
<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>, <argument><expr><name>i_seconds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>MSTRTIME_MAX_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%02u:%02u"</literal></expr></argument>,
<argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>, <argument><expr><name>i_seconds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>psz_buffer</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>date_Init</name><parameter_list>( <parameter><decl><type><name>date_t</name> <modifier>*</modifier></type><name>p_date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_divider_n</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_divider_d</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name> <operator>=</operator> <name>i_divider_n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_den</name></name> <operator>=</operator> <name>i_divider_d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>date_Change</name><parameter_list>( <parameter><decl><type><name>date_t</name> <modifier>*</modifier></type><name>p_date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_divider_n</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_divider_d</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>=</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>*</operator> <name>i_divider_n</name> <operator>/</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name> <operator>=</operator> <name>i_divider_n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_den</name></name> <operator>=</operator> <name>i_divider_d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>date_Increment</name><parameter_list>( <parameter><decl><type><name>date_t</name> <modifier>*</modifier></type><name>p_date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_nb_samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dividend</name> <init>= <expr><name>i_nb_samples</name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_den</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name> <init>= <expr><call><name>lldiv</name><argument_list>( <argument><expr><name>i_dividend</name></expr></argument>, <argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name> <operator>+=</operator> <name><name>d</name><operator>.</operator><name>quot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>&gt;=</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>-=</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>date_Decrement</name><parameter_list>( <parameter><decl><type><name>date_t</name> <modifier>*</modifier></type><name>p_date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_nb_samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dividend</name> <init>= <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><name>i_nb_samples</name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_den</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name> <operator>-=</operator> <name>i_dividend</name> <operator>/</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rem_adjust</name> <init>= <expr><name>i_dividend</name> <operator>%</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>&lt;</operator> <name>i_rem_adjust</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>&lt;</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>+=</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_divider_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>-=</operator> <name>i_rem_adjust</name></expr>;</expr_stmt>

<return>return <expr><name><name>p_date</name><operator>-&gt;</operator><name>date</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>NTPtime64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>timespec_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>TIME_UTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">70</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">365</literal> <operator>+</operator> <literal type="number">17</literal><operator>)</operator> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>ts</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>timespec</name></name></type> <name>timespec_from_vlc_tick</name> <parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name> <init>= <expr><call><name>lldiv</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name> <init>= <expr><block>{ <expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr>, <macro><name>NS_FROM_VLC_TICK</name><argument_list>( <argument>d.rem</argument> )</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>
</unit>
