<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\viewpoint.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_viewpoint.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>vlc_viewpoint_to_4x4</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>yaw</name> <init>= <expr><name><name>vp</name><operator>-&gt;</operator><name>yaw</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.f</literal> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>M_PI_2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pitch</name> <init>= <expr><name><name>vp</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>roll</name> <init>= <expr><name><name>vp</name><operator>-&gt;</operator><name>roll</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>x_rot</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.f</literal></expr>, <expr><name>c</name></expr>, <expr><operator>-</operator><name>s</name></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.f</literal></expr>, <expr><name>s</name></expr>, <expr><name>c</name></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>yaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>yaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>y_rot</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>c</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>s</name></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><name>s</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>c</name></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>roll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>roll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>z_rot</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>c</name></expr>, <expr><name>s</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><name>s</name></expr>, <expr><name>c</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><name>l</name></expr>]</index></name> <operator>+=</operator> <name><name>y_rot</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>x_rot</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>z_rot</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></function>
</unit>
