<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\update_crypto.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"update.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>packet_type</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ( c &amp; 0x3c ) &gt;&gt; 2 )</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>packet_header_len</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ( c &amp; 0x03 ) + 1 )</cpp:value></cpp:define> 


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>scalar_number</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>header_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>header_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>header_len</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>header_len</name> <operator>==</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>header_len</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>header_len</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>header_len</name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>mpi_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mpi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>scalar_number</name><argument_list>(<argument><expr><name>mpi</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>read_mpi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>mpi_len</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_MPI</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t n = read_mpi(d, p_buf, i_packet_len - i_read, bits); if (!n) goto error; p_buf += n; i_read += n; } while(0)</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_public_key_packet</name><parameter_list>( <parameter><decl><type><name>public_key_packet_t</name> <modifier>*</modifier></type><name>p_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_packet_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_packet_len</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_key</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_key</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>GCRY_PK_DSA</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">3072</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">3072</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">3072</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>p_key</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>GCRY_PK_RSA</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>==</operator> <name>i_packet_len</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>



<label><name>error</name>:</label>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>parse_signature_v3_packet</name><parameter_list>( <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_sig_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_sig_len</name> <operator>&lt;</operator> <literal type="number">19</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v3</name><operator>.</operator><name>hashed_data_len</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v3</name><operator>.</operator><name>hashed_data_len</name></name> <operator>!=</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v3</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>issuer_longid</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>digest_algo</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>hash_verification</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>hash_verification</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_read</name> <operator>==</operator> <literal type="number">19</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_read</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type> <name>parse_signature_v4_packet</name><parameter_list>( <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_sig_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_sig_len</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>!=</operator> <name>GCRY_PK_DSA</name> <operator>&amp;&amp;</operator> <name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>!=</operator> <name>GCRY_PK_RSA</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>digest_algo</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data_len</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_hashed_data_len</name> <init>=
<expr><call><name>scalar_number</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data_len</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_read</name> <operator>+=</operator> <name>i_hashed_data_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>i_sig_len</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_hashed_data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_hashed_data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_hashed_data_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data_len</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_unhashed_data_len</name> <init>=
<expr><call><name>scalar_number</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data_len</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_read</name> <operator>+=</operator> <name>i_unhashed_data_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>i_sig_len</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_unhashed_data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_unhashed_data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_unhashed_data_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>hash_verification</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>max_pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_pos</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>scalar_number</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data_len</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>&gt;</operator> <name>max_pos</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_subpacket_len</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">192</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>max_pos</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_subpacket_len</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">255</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>max_pos</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_subpacket_len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="number">192</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_subpacket_len</name> <operator>+=</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>+</operator> <literal type="number">192</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>++</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>max_pos</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_subpacket_len</name> <operator>=</operator> <call><name>U32_AT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>ISSUER_SUBPACKET</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <literal type="number">9</literal> <operator>&gt;</operator> <name>max_pos</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sig</name><operator>-&gt;</operator><name>issuer_longid</name></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_read</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_subpacket_len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_signature_packet</name><parameter_list>( <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_packet_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_packet_len</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>*</operator><name>p_buf</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>version</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>parse_signature_v3_packet</name><argument_list>( <argument><expr><name>p_sig</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_packet_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>parse_signature_v4_packet</name><argument_list>( <argument><expr><name>p_sig</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_packet_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>!=</operator> <name>GCRY_PK_DSA</name> <operator>&amp;&amp;</operator> <name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>!=</operator> <name>GCRY_PK_RSA</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>BINARY_SIGNATURE</name></expr>:</case>
<case>case <expr><name>TEXT_SIGNATURE</name></expr>:</case>
<case>case <expr><name>GENERIC_KEY_SIGNATURE</name></expr>:</case>
<case>case <expr><name>PERSONA_KEY_SIGNATURE</name></expr>:</case>
<case>case <expr><name>CASUAL_KEY_SIGNATURE</name></expr>:</case>
<case>case <expr><name>POSITIVE_KEY_SIGNATURE</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name>p_buf</name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>==</operator> <name>GCRY_PK_DSA</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>algo_specific</name><operator>.</operator><name>dsa</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>algo_specific</name><operator>.</operator><name>dsa</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>==</operator> <name>GCRY_PK_RSA</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>READ_MPI</name><argument_list>(<argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>algo_specific</name><operator>.</operator><name>rsa</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_read</name> <operator>==</operator> <name>i_packet_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <name>i_packet_len</name></expr> )</condition><block type="pseudo"><block_content> 
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC24_INIT</name></cpp:macro> <cpp:value>0xB704CEL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC24_POLY</name></cpp:macro> <cpp:value>0x1864CFBL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>long</name></type> <name>crc_octets</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>crc</name> <init>= <expr><name>CRC24_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>^=</operator> <operator>(</operator><operator>*</operator><name>octets</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>crc</name> <operator>&amp;</operator> <literal type="number">0x1000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>^=</operator> <name>CRC24_POLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<return>return <expr><name>crc</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFL</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>pgp_unarmor</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_ibuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_ibuf_len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_obuf_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_ipos</name> <init>= <expr><name>p_ibuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_opos</name> <init>= <expr><name>p_obuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_header_skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><name>i_end</name> <operator>&amp;&amp;</operator> <name>p_ipos</name> <operator>&lt;</operator> <name>p_ibuf</name> <operator>+</operator> <name>i_ibuf_len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_ipos</name> <operator>!=</operator> <literal type="char">'='</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_ipos</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>p_ipos</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_ipos</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_line_len</name> <init>= <expr><call><name>strcspn</name><argument_list>( <argument><expr><name>p_ipos</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_line_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_header_skipped</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>p_ipos</name></expr></argument>, <argument><expr><literal type="string">"-----BEGIN PGP"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_header_skipped</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_ipos</name> <operator>+=</operator> <name>i_line_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>p_ipos</name></expr></argument>, <argument><expr><literal type="string">"Version:"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_ipos</name> <operator>+=</operator> <name>i_line_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ipos</name><index>[<expr><name>i_line_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_opos</name> <operator>+=</operator> <call><name>vlc_b64_decode_binary_to_buffer</name><argument_list>( <argument><expr><name>p_opos</name></expr></argument>,
<argument><expr><name>p_obuf</name> <operator>-</operator> <name>p_opos</name> <operator>+</operator> <name>i_obuf_len</name></expr></argument>, <argument><expr><name>p_ipos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ipos</name> <operator>+=</operator> <name>i_line_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>( <expr><name>p_ipos</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <name>p_ibuf</name> <operator>+</operator> <name>i_ibuf_len</name> <operator>||</operator> <operator>*</operator><name>p_ipos</name><operator>++</operator> <operator>!=</operator> <literal type="char">'='</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_crc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_b64_decode_binary_to_buffer</name><argument_list>( <argument><expr><name>p_crc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>p_ipos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>l_crc</name> <init>= <expr><call><name>crc_octets</name><argument_list>( <argument><expr><name>p_obuf</name></expr></argument>, <argument><expr><name>p_opos</name> <operator>-</operator> <name>p_obuf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l_crc2</name> <init>= <expr><operator>(</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name><name>p_crc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name><name>p_crc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <name><name>p_crc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>l_crc2</name> <operator>==</operator> <name>l_crc</name></expr> ?</condition><then> <expr><name>p_opos</name> <operator>-</operator> <name>p_obuf</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_pkcs1_encode_sig</name><parameter_list>(<parameter><decl><type><name>gcry_mpi_t</name> <modifier>*</modifier></type><name>r_result</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>asn</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>frame</name><index>[<expr><literal type="number">4096</literal><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>asnlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>asn</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hashlen</name> <init>= <expr><call><name>gcry_md_get_algo_dlen</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gcry_md_algo_info</name><argument_list>(<argument><expr><name>algo</name></expr></argument>, <argument><expr><name>GCRYCTL_GET_ASNOID</name></expr></argument>, <argument><expr><name>asn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asnlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hashlen</name> <operator>||</operator> <name>hashlen</name> <operator>+</operator> <name>asnlen</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><name>size</name> <operator>-</operator> <name>hashlen</name> <operator>-</operator> <name>asnlen</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>pad</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>pad</name></expr>]</index></name></expr></argument>, <argument><expr><name>asn</name></expr></argument>, <argument><expr><name>asnlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>pad</name><operator>+</operator><name>asnlen</name></expr>]</index></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gcry_mpi_scan</name><argument_list>(<argument><expr><name>r_result</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_signature_rsa</name><parameter_list>( <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>public_key_packet_t</name> <modifier>*</modifier></type><name>p_key</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hash_sexp_s</name> <init>= <expr><literal type="string">"(data(flags raw)(value %m))"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_sexp_s</name> <init>= <expr><literal type="string">"(public-key(rsa(n %m)(e %m)))"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig_sexp_s</name> <init>= <expr><literal type="string">"(sig-val(rsa(s%m)))"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>erroff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gcry_mpi_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name>s</name> <operator>=</operator> <name>hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>gcry_sexp_t</name></type> <name>key_sexp</name></decl>, <decl><type ref="prev"/><name>hash_sexp</name></decl>, <decl><type ref="prev"/><name>sig_sexp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key_sexp</name> <operator>=</operator> <name>hash_sexp</name> <operator>=</operator> <name>sig_sexp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_n_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_e_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_n_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_e_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_sexp_build</name><argument_list>( <argument><expr><operator>&amp;</operator><name>key_sexp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroff</name></expr></argument>, <argument><expr><name>key_sexp_s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>e</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_s</name> <init>= <expr><name><name>sign</name><operator>-&gt;</operator><name>algo_specific</name><operator>.</operator><name>rsa</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_s_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name>p_s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name>p_s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_s_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_sexp_build</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_sexp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroff</name></expr></argument>, <argument><expr><name>sig_sexp_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>rsa_pkcs1_encode_sig</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><name>i_n_len</name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument>, <argument><expr><name><name>sign</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>gcry_sexp_build</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hash_sexp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroff</name></expr></argument>, <argument><expr><name>hash_sexp_s</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>gcry_pk_verify</name><argument_list>( <argument><expr><name>sig_sexp</name></expr></argument>, <argument><expr><name>hash_sexp</name></expr></argument>, <argument><expr><name>key_sexp</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if<condition>( <expr><name>n</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>e</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hash</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>key_sexp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_sexp_release</name><argument_list>( <argument><expr><name>key_sexp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>sig_sexp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_sexp_release</name><argument_list>( <argument><expr><name>sig_sexp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hash_sexp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_sexp_release</name><argument_list>( <argument><expr><name>hash_sexp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_signature_dsa</name><parameter_list>( <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>public_key_packet_t</name> <modifier>*</modifier></type><name>p_key</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hash_sexp_s</name> <init>= <expr><literal type="string">"(data(flags raw)(value %m))"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_sexp_s</name> <init>= <expr><literal type="string">"(public-key(dsa(p %m)(q %m)(g %m)(y %m)))"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig_sexp_s</name> <init>= <expr><literal type="string">"(sig-val(dsa(r %m )(s %m )))"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>erroff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gcry_mpi_t</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>y</name> <operator>=</operator> <name>r</name> <operator>=</operator> <name>s</name> <operator>=</operator> <name>hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>gcry_sexp_t</name></type> <name>key_sexp</name></decl>, <decl><type ref="prev"/><name>hash_sexp</name></decl>, <decl><type ref="prev"/><name>sig_sexp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key_sexp</name> <operator>=</operator> <name>hash_sexp</name> <operator>=</operator> <name>sig_sexp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_p_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_q_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_g_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_p_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_q_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_g_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_y_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_sexp_build</name><argument_list>( <argument><expr><operator>&amp;</operator><name>key_sexp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroff</name></expr></argument>, <argument><expr><name>key_sexp_s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_r</name> <init>= <expr><name><name>sign</name><operator>-&gt;</operator><name>algo_specific</name><operator>.</operator><name>dsa</name><operator>.</operator><name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_s</name> <init>= <expr><name><name>sign</name><operator>-&gt;</operator><name>algo_specific</name><operator>.</operator><name>dsa</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_r_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name>p_r</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_s_len</name> <init>= <expr><call><name>mpi_len</name><argument_list>( <argument><expr><name>p_s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name>p_r</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_r_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name>p_s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_s_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_sexp_build</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_sexp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroff</name></expr></argument>, <argument><expr><name>sig_sexp_s</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_hash_len</name> <init>= <expr><call><name>gcry_md_get_algo_dlen</name> <argument_list>(<argument><expr><name><name>sign</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_hash_len</name> <operator>&gt;</operator> <name>i_q_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_hash_len</name> <operator>=</operator> <name>i_q_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>gcry_mpi_scan</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><name>GCRYMPI_FMT_USG</name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument>, <argument><expr><name>i_hash_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>gcry_sexp_build</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hash_sexp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroff</name></expr></argument>, <argument><expr><name>hash_sexp_s</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>gcry_pk_verify</name><argument_list>( <argument><expr><name>sig_sexp</name></expr></argument>, <argument><expr><name>hash_sexp</name></expr></argument>, <argument><expr><name>key_sexp</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>q</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>g</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>g</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>y</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>r</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hash</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_mpi_release</name><argument_list>( <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>key_sexp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_sexp_release</name><argument_list>( <argument><expr><name>key_sexp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>sig_sexp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_sexp_release</name><argument_list>( <argument><expr><name>sig_sexp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hash_sexp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gcry_sexp_release</name><argument_list>( <argument><expr><name>hash_sexp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>verify_signature</name><parameter_list>( <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>public_key_packet_t</name> <modifier>*</modifier></type><name>p_key</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sign</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>==</operator> <name>GCRY_PK_DSA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>verify_signature_dsa</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>p_key</name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sign</name><operator>-&gt;</operator><name>public_key_algo</name></name> <operator>==</operator> <name>GCRY_PK_RSA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>verify_signature_rsa</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>p_key</name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>parse_public_key</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_key_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_key_len</name></decl></parameter>,
<parameter><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>p_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sig_issuer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>p_key_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>max_pos</name> <init>= <expr><name>pos</name> <operator>+</operator> <name>i_key_len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUBLIC_KEY_FOUND</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_ID_FOUND</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNATURE_FOUND</name></cpp:macro> <cpp:value>0X04</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_key_unarmored</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <operator>*</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><name>p_key_unarmored</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><name>i_key_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_key_unarmored</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><call><name>pgp_unarmor</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p_key_data</name></expr></argument>, <argument><expr><name>i_key_len</name></expr></argument>,
<argument><expr><name>p_key_unarmored</name></expr></argument>, <argument><expr><name>i_key_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>p_key_unarmored</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_pos</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>pos</name> <operator>&lt;</operator> <name>max_pos</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <operator>*</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>packet_type</name><argument_list>( <argument><expr><operator>*</operator><name>pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_header_len</name> <init>= <expr><call><name>packet_header_len</name><argument_list>( <argument><expr><operator>*</operator><name>pos</name><operator>++</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>pos</name> <operator>+</operator> <name>i_header_len</name> <operator>&gt;</operator> <name>max_pos</name> <operator>||</operator>
<operator>(</operator> <name>i_header_len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_header_len</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_header_len</name> <operator>!=</operator> <literal type="number">4</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_len</name> <init>= <expr><call><name>scalar_number</name><argument_list>( <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>i_header_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>i_header_len</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pos</name> <operator>+</operator> <name>i_packet_len</name> <operator>&gt;</operator> <name>max_pos</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>PUBLIC_KEY_PACKET</name></expr>:</case>
<expr_stmt><expr><name>i_status</name> <operator>|=</operator> <name>PUBLIC_KEY_FOUND</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>parse_public_key_packet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>i_packet_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SIGNATURE_PACKET</name></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&amp;</operator> <name>SIGNATURE_FOUND</name> <operator>||</operator> <operator>!</operator><name>p_sig_issuer</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>parse_signature_packet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_key</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
<argument><expr><name>i_packet_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>issuer_longid</name></name></expr></argument>, <argument><expr><name>p_sig_issuer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_status</name> <operator>|=</operator> <name>SIGNATURE_FOUND</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>USER_ID_PACKET</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_key</name><operator>-&gt;</operator><name>psz_username</name></name></expr> )</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_status</name> <operator>|=</operator> <name>USER_ID_FOUND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><name>i_packet_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_key</name><operator>-&gt;</operator><name>psz_username</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>i_packet_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>psz_username</name><index>[<expr><name>i_packet_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>i_packet_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_key_unarmored</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>i_status</name> <operator>&amp;</operator> <operator>(</operator> <name>PUBLIC_KEY_FOUND</name> <operator>|</operator> <name>USER_ID_FOUND</name> <operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sig_issuer</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name>i_status</name> <operator>&amp;</operator> <name>SIGNATURE_FOUND</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>version</name></name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_key</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_key_unarmored</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>hash_from_binary_file</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter>, <parameter><decl><type><name>gcry_md_hd_t</name></type> <name>hd</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>f</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>i_read</name> <operator>=</operator> <call><name>fread</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>hash_finish</name><parameter_list>( <parameter><decl><type><name>gcry_md_hd_t</name></type> <name>hd</name></decl></parameter>, <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v3</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>public_key_algo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data_len</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>scalar_number</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data_len</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gcry_md_final</name><argument_list>( <argument><expr><name>hd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_tmp</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <call><name>gcry_md_read</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash_len</name> <init>= <expr><call><name>gcry_md_get_algo_dlen</name> <argument_list>(<argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_hash</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>, <argument><expr><name>p_tmp</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>( <argument><expr><name>hd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_hash</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>hash_from_text</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>,
<parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gcry_md_hd_t</name></type> <name>hd</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>gcry_md_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TEXT_SIGNATURE</name></expr> )</condition><block type="pseudo"><block_content>
<while>while<condition>( <expr><operator>*</operator><name>psz_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strcspn</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_string</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_string</name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_string</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>hash_finish</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>p_sig</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>hash_from_file</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter>, <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gcry_md_hd_t</name></type> <name>hd</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>gcry_md_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>hash_from_binary_file</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><name>hd</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>( <argument><expr><name>hd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>hash_finish</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>p_sig</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>hash_from_public_key</name><parameter_list>( <parameter><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>p_pkey</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>pk_algo</name> <init>= <expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>algo</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_p_len</name></decl>, <decl><type ref="prev"/><name>i_g_len</name></decl>, <decl><type ref="prev"/><name>i_q_len</name></decl>, <decl><type ref="prev"/><name>i_y_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_n_len</name></decl>, <decl><type ref="prev"/><name>i_e_len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkey</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkey</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>type</name></name> <operator>&lt;</operator> <name>GENERIC_KEY_SIGNATURE</name> <operator>||</operator>
<name><name>p_pkey</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <name>POSITIVE_KEY_SIGNATURE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkey</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>gcry_error_t</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gcry_md_hd_t</name></type> <name>hd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pk_algo</name> <operator>==</operator> <name>GCRY_PK_DSA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_p_len</name> <operator>=</operator> <call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_g_len</name> <operator>=</operator> <call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_q_len</name> <operator>=</operator> <call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_y_len</name> <operator>=</operator> <call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>i_p_len</name> <operator>+</operator> <name>i_g_len</name> <operator>+</operator> <name>i_q_len</name> <operator>+</operator> <name>i_y_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pk_algo</name> <operator>==</operator> <name>GCRY_PK_RSA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_n_len</name> <operator>=</operator> <call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_e_len</name> <operator>=</operator> <call><name>mpi_len</name><argument_list>( <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name>i_n_len</name> <operator>+</operator> <name>i_e_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>gcry_md_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>digest_algo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>error</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_size</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>i_size</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>algo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pk_algo</name> <operator>==</operator> <name>GCRY_PK_DSA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>i_p_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>i_q_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>i_g_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>i_y_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pk_algo</name> <operator>==</operator> <name>GCRY_PK_RSA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>i_n_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>i_e_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_putc</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>(</operator><name>i_len</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>hash_finish</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pkey</name><operator>-&gt;</operator><name>sig</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hash</name> <operator>||</operator>
<name><name>p_hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>p_pkey</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>hash_verification</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>
<name><name>p_hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>p_pkey</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>hash_verification</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_hash</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>public_key_t</name> <modifier>*</modifier></type><name>download_key</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_longid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_signature_issuer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_url</name></expr></argument>, <argument><expr><literal type="string">"http://download.videolan.org/pub/keys/%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X.asc"</literal></expr></argument>,
<argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_longid</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>||</operator> <name>i_size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't read full GPG key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>p_pkey</name> <init>= <expr><operator>(</operator><name>public_key_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>public_key_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pkey</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pkey</name><operator>-&gt;</operator><name>longid</name></name></expr></argument>, <argument><expr><name>p_longid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_error</name> <init>= <expr><call><name>parse_public_key</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>, <argument><expr><name>p_pkey</name></expr></argument>, <argument><expr><name>p_signature_issuer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_error</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't parse GPG key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pkey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_pkey</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>download_signature</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>p_sig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sig</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_sig</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_sig</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_sig</name></expr></argument>, <argument><expr><literal type="string">".asc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_sig</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_sig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>||</operator> <name>i_size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Downloading signature (%"</literal><name>PRIu64</name><literal type="string">" bytes)"</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't download full signature (only %d bytes)"</literal></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>p_buf</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Unarmoring signature"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_unarmored</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><operator>(</operator> <name>i_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>)</operator> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_unarmored</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bytes</name> <init>= <expr><call><name>pgp_unarmor</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p_buf</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>p_unarmored</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <name>p_unarmored</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>i_bytes</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_bytes</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Unarmoring failed : corrupted signature ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>packet_type</name><argument_list>( <argument><expr><operator>*</operator><name>p_buf</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>SIGNATURE_PACKET</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not a signature: %d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_header_len</name> <init>= <expr><call><name>packet_header_len</name><argument_list>( <argument><expr><operator>*</operator><name>p_buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_header_len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_header_len</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_header_len</name> <operator>!=</operator> <literal type="number">4</literal> <operator>)</operator> <operator>||</operator>
<name>i_header_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Invalid signature packet header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>scalar_number</name><argument_list>( <argument><expr><name>p_buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_header_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>+</operator> <name>i_header_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Invalid signature packet"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>parse_signature_packet</name><argument_list>( <argument><expr><name>p_sig</name></expr></argument>, <argument><expr><name>p_buf</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>i_header_len</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't parse signature"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BINARY_SIGNATURE</name> <operator>&amp;&amp;</operator> <name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TEXT_SIGNATURE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Invalid signature type: %d"</literal></expr></argument>, <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sig</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>hashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sig</name><operator>-&gt;</operator><name>specific</name><operator>.</operator><name>v4</name><operator>.</operator><name>unhashed_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
