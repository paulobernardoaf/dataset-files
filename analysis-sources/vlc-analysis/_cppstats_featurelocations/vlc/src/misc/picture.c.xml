<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\picture.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"picture.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PictureDestroyContext</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>vctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>picture_DestroyDummy</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_picture</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>picture_DestroyFromFormat</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_buffer_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Deallocate</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>VLC_WEAK</name> <name>void</name> <modifier>*</modifier></type><name>picture_Allocate</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fdp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">64</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fdp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>aligned_alloc</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_WEAK</name> <name>void</name></type> <name>picture_Deallocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aligned_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">64</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>picture_Reset</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>b_force</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>b_still</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PictureDestroyContext</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>LCM</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name>a</name> <operator>*</operator> <name>b</name> <operator>/</operator> <call><name>GCD</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>picture_Setup</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_dsc</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_dsc</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>&lt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>&lt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&lt;=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&lt;=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_format_CopyCrop</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<decl_stmt><decl><type><name>unsigned</name></type> <name>i_modulo_w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_modulo_h</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_ratio_h</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_modulo_w</name> <operator>=</operator> <call><name>LCM</name><argument_list>( <argument><expr><name>i_modulo_w</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_modulo_h</name> <operator>=</operator> <call><name>LCM</name><argument_list>( <argument><expr><name>i_modulo_h</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ratio_h</name> <operator>&lt;</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ratio_h</name> <operator>=</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i_modulo_h</name> <operator>=</operator> <call><name>LCM</name><argument_list>( <argument><expr><name>i_modulo_h</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>add_overflow</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name>i_modulo_w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><call><name>add_overflow</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><name>i_modulo_h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>width</name> <operator>/</operator> <name>i_modulo_w</name> <operator>*</operator> <name>i_modulo_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>height</name> <operator>/</operator> <name>i_modulo_h</name> <operator>*</operator> <name>i_modulo_h</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>height</name> <operator>&gt;</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_rational_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name><name>p_dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_rational_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>p_dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>den</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>den</name></name> <operator>&gt;=</operator> <name><name>w</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <name>height</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>num</name></name> <operator>/</operator> <name><name>h</name><operator>-&gt;</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>+</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>den</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>h</name><operator>-&gt;</operator><name>den</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <name>width</name> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>num</name></name> <operator>/</operator> <name><name>w</name><operator>-&gt;</operator><name>den</name></name> <operator>*</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>+</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>den</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>w</name><operator>-&gt;</operator><name>den</name></name> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>num</name></name>
<operator>*</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name> <operator>=</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>picture_InitPrivate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>picture_priv_t</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>picture_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_picture</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>*</operator><name>p_fmt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>picture_Setup</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_resource</name><operator>-&gt;</operator><name>pf_destroy</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>pf_destroy</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>picture_DestroyDummy</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_NewFromResource</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_resource</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>picture_InitPrivate</name><argument_list>(<argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>, <argument><expr><name>p_resource</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>p_resource</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>p_picture</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICTURE_SW_SIZE_MAX</name></cpp:macro> <cpp:value>(UINT32_C(1) &lt;&lt; 28)</cpp:value></cpp:define> 

<struct>struct <name>picture_priv_buffer_t</name> <block>{
<decl_stmt><decl><type><name>picture_priv_t</name></type> <name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_buffer_t</name></type> <name>res</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_NewFromFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>picture_priv_buffer_t</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"misplaced picture_priv_t, destroy won't work"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>picture_priv_buffer_t</name></name> <modifier>*</modifier></type><name>privbuf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>privbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>privbuf</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_buffer_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>&amp;</operator><name><name>privbuf</name><operator>-&gt;</operator><name>res</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>pic_res</name> <init>= <expr><block>{
<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>res</name></expr>,
<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>picture_DestroyFromFormat</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>&amp;</operator><name><name>privbuf</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>picture_InitPrivate</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&lt;=</operator> <name>PICTURE_PLANE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>plane_sizes</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pic_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>mul_overflow</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>plane_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><call><name>add_overflow</name><argument_list>(<argument><expr><name>pic_size</name></expr></argument>, <argument><expr><name><name>plane_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_size</name> <operator>&gt;=</operator> <name>PICTURE_SW_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>picture_Allocate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pic_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pic_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>plane_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>pic</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>privbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_New</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sar_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sar_den</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument>,
<argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument>, <argument><expr><name>i_sar_num</name></expr></argument>, <argument><expr><name>i_sar_den</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>picture_Destroy</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PictureDestroyContext</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>picture_priv_t</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>destroy</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>plane_CopyPixels</name><parameter_list>( <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_width</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>,
<argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_height</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></argument>,
<argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>==</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>&amp;&amp;</operator>
<name><name>p_src</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>,
<argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name><name>p_src</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><name>i_height</name></expr></init></decl>;</init> <condition><expr><name>i_line</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_CopyProperties</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>b_force</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>b_force</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>b_still</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>b_still</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_nb_fields</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_CopyPixels</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p</name></name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>p</name></name><operator>+</operator><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name><name>p_src</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>copy</name></name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_Copy</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>picture_DestroyClone</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>clone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><operator>(</operator><operator>(</operator><name>picture_priv_t</name> <operator>*</operator><operator>)</operator><name>clone</name><operator>)</operator><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_InternalClone</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_destroy</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>res</name> <init>= <expr><block>{
<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p_sys</name></name></expr>,
<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>pf_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>picture_NewFromResource</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>clone</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>picture_priv_t</name> <operator>*</operator><operator>)</operator><name>clone</name><operator>)</operator><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Hold</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_Clone</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>picture_InternalClone</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>picture_DestroyClone</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>clone</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>picture</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name><name>picture</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>picture_Export</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_image</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_override_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_override_height</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_crop</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_in</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt_in</name><operator>.</operator><name>i_sar_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator>
<name><name>fmt_in</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_out</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator>
<name><name>fmt_out</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_format</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_width</name></decl>, <decl><type ref="prev"/><name>i_height</name></decl>, <decl><type ref="prev"/><name>i_original_width</name></decl>, <decl><type ref="prev"/><name>i_original_height</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt_in</name><operator>.</operator><name>i_visible_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt_in</name><operator>.</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name><name>fmt_in</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_height</name> <operator>=</operator> <name><name>fmt_in</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name><name>fmt_in</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_height</name> <operator>=</operator> <name><name>fmt_in</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt_in</name><operator>.</operator><name>i_sar_num</name></name> <operator>&gt;=</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_den</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_original_width</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i_width</name> <operator>*</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_original_height</name> <operator>=</operator> <name>i_height</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_original_width</name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_original_height</name> <operator>=</operator> <name>i_height</name> <operator>*</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_den</name></name> <operator>/</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name>b_crop</name> <operator>&amp;&amp;</operator> <name>i_override_width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_override_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_ar_dest</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>i_override_width</name> <operator>/</operator> <name>i_override_height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_ar_src</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>i_width</name> <operator>/</operator> <name>i_height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_crop_width</name></decl>, <decl><type ref="prev"/><name>i_crop_height</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>f_ar_dest</name> <operator>&gt;</operator> <name>f_ar_src</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_crop_width</name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_crop_height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_crop_width</name> <operator>/</operator> <name>f_ar_dest</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_crop_height</name> <operator>=</operator> <name>i_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_crop_width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_crop_height</name> <operator>*</operator> <name>f_ar_dest</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>i_override_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>i_override_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>i_crop_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>i_crop_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_x_offset</name></name> <operator>+=</operator> <operator>(</operator><name>i_width</name> <operator>-</operator> <name>i_crop_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_y_offset</name></name> <operator>+=</operator> <operator>(</operator><name>i_height</name> <operator>-</operator> <name>i_crop_height</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_override_width</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then>
<expr><name>i_original_width</name></expr> </then><else>: <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>i_override_width</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_override_height</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then>
<expr><name>i_original_height</name></expr> </then><else>: <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>i_override_height</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>i_height</name> <operator>*</operator> <name><name>fmt_out</name><operator>.</operator><name>i_width</name></name>
<operator>*</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_den</name></name> <operator>/</operator> <name><name>fmt_in</name><operator>.</operator><name>i_width</name></name> <operator>/</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>i_width</name> <operator>*</operator> <name><name>fmt_out</name><operator>.</operator><name>i_height</name></name>
<operator>*</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt_in</name><operator>.</operator><name>i_height</name></name> <operator>/</operator> <name><name>fmt_in</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_image</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>image_Write</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fmt</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_fmt</name> <operator>=</operator> <name>fmt_out</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_image</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
