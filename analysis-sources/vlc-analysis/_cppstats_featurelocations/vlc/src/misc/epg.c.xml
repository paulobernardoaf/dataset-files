<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\epg.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_epg.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_epg_event_Clean</name><parameter_list>(<parameter><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_event</name><operator>-&gt;</operator><name>i_description_items</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>description_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>psz_short_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_epg_event_Delete</name><parameter_list>(<parameter><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_epg_event_Clean</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_epg_event_Init</name><parameter_list>(<parameter><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_id</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>i_duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>i_description_items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>description_items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type> <name>vlc_epg_event_New</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>i_id</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_event</name> <init>= <expr><operator>(</operator><name>vlc_epg_event_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>p_event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_epg_event_Init</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_event</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type> <name>vlc_epg_event_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name> <init>= <expr><call><name>vlc_epg_event_New</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>,
<argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_evt</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_short_description</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_short_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_short_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_description_items</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name><name>p_src</name><operator>-&gt;</operator><name>i_description_items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_description_items</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_key</name> <operator>=</operator>
<call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name> <operator>=</operator>
<call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name> <operator>||</operator>
<operator>!</operator><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_key</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_rating</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_rating</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_evt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_epg_Init</name><parameter_list>( <parameter><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_source_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_source_id</name></name> <operator>=</operator> <name>i_source_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>b_present</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr></argument>, <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_epg_Clean</name><parameter_list>( <parameter><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr></argument>, <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_epg_AddEvent</name><parameter_list>( <parameter><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter>, <parameter><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>i_start</name> <operator>&gt;</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>i_start</name> <operator>&gt;=</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_lower</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_upper</name> <init>= <expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_lower</name> <operator>&lt;</operator> <name>i_upper</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_split</name> <init>= <expr><operator>(</operator> <name>i_lower</name> <operator>+</operator> <name>i_upper</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i_split</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_lower</name> <operator>=</operator> <name>i_split</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;=</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_upper</name> <operator>=</operator> <name>i_split</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name>i_lower</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i_pos</name></expr>]</index></name><operator>-&gt;</operator><name>i_start</name> <operator>==</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>==</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name>p_evt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i_pos</name></expr>]</index></name> <operator>=</operator> <name>p_evt</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_INSERT</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr></argument>, <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name></name></expr></argument>, <argument><expr><name>p_evt</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr></argument>, <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name></name></expr></argument>, <argument><expr><name>p_evt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>vlc_epg_New</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_source_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_epg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_epg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_epg_Init</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>i_source_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_epg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_epg_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_epg_Clean</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_epg_SetCurrent</name><parameter_list>( <parameter><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_start</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_start</name> <operator>==</operator> <name>i_start</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>vlc_epg_t</name> <modifier>*</modifier></type> <name>vlc_epg_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><call><name>vlc_epg_New</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_source_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_epg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>b_present</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>b_present</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>vlc_epg_event_Duplicate</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_dup</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>p_current</name></name> <operator>==</operator> <name><name>p_src</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr></argument>, <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name></name></expr></argument>, <argument><expr><name>p_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_epg</name></expr>;</return>
</block_content>}</block></function>
</unit>
