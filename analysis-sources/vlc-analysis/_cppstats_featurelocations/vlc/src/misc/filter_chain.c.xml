<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\filter_chain.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>chained_filter_t</name>
<block>{

<decl_stmt><decl><type><name>filter_t</name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>chained_filter_t</name></name> <modifier>*</modifier></type><name>prev</name></decl>, <modifier>*</modifier><name>next</name>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mouse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
}</block></struct></type> <name>chained_filter_t</name>;</typedef>


<struct>struct <name>filter_chain_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>parent_video_owner</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_in</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_allow_fmt_out_change</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter_cap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conv_cap</name></decl>;</decl_stmt> 
}</block>;</struct>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterDeletePictures</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>filter_chain_t</name> <modifier>*</modifier></type><name>filter_chain_NewInner</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conv_cap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fmt_out_change</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>cap</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>chain</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name> <operator>=</operator> <name>fmt_out_change</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>filter_cap</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>conv_cap</name></name> <operator>=</operator> <name>conv_cap</name></expr>;</expr_stmt>
<return>return <expr><name>chain</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_chain_NewSPU</name></cpp:undef>



<function><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>filter_chain_NewSPU</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>filter_chain_NewInner</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>filter_chain_VideoBufferNew</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>chained</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>chained_filter_t</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>chained</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>saved_owner</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <operator>(</operator><name>filter_owner_t</name><operator>)</operator> <block>{}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>saved_owner</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>saved_owner</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>parent_video_owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>saved_owner</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>filter_chain_HoldDecoderDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name>sys</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chain</name><operator>-&gt;</operator><name>parent_video_owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>hold_device</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>chain</name><operator>-&gt;</operator><name>parent_video_owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>hold_device</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>parent_video_owner</name><operator>.</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name></type> <name>filter_chain_video_cbs</name> <init>=
<expr><block>{
<expr><name>filter_chain_VideoBufferNew</name></expr>, <expr><name>filter_chain_HoldDecoderDevice</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_chain_NewVideo</name></cpp:undef>
<function><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>filter_chain_NewVideo</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allow_change</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>filter_owner_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>owner</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name> <init>=
<expr><call><name>filter_chain_NewInner</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video filter"</literal></expr></argument>,
<argument><expr><literal type="string">"video converter"</literal></expr></argument>, <argument><expr><name>allow_change</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>owner</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>owner</name><operator>-&gt;</operator><name>video</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>buffer_new</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>parent_video_owner</name></name> <operator>=</operator> <operator>*</operator><name>owner</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>parent_video_owner</name></name> <operator>=</operator> <operator>(</operator><name>filter_owner_t</name><operator>)</operator><block>{}</block></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>chain</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filter_chain_Clear</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name><name>p_chain</name><operator>-&gt;</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_chain_DeleteFilter</name><argument_list>( <argument><expr><name>p_chain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>filter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>filter_chain_Delete</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_chain_Clear</name><argument_list>( <argument><expr><name>p_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_chain</name><operator>-&gt;</operator><name>vctx_in</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>( <argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>filter_chain_Reset</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_chain_Clear</name><argument_list>( <argument><expr><name>p_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_fmt_in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_chain</name><operator>-&gt;</operator><name>vctx_in</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>( <argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_chain</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>=</operator> <ternary><condition><expr><name>vctx_in</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>vctx_in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_fmt_out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>p_fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>filter_chain_AppendInner</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>capability</name></decl></parameter>, <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>chained</name> <init>=
<expr><call><name>vlc_custom_create</name><argument_list>( <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>chained</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>chained</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>&amp;</operator><name><name>chained</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_in</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>chain</name><operator>-&gt;</operator><name>last</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>fmt_in</name> <operator>=</operator> <operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>fmt_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vctx_in</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>vctx_out</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>fmt_in</name> <operator>=</operator> <operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>fmt_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vctx_in</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>vctx_in</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>fmt_out</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmt_out</name> <operator>=</operator> <operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>fmt_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>=</operator> <name>vctx_in</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt_in</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name></name> <operator>=</operator> <operator>&amp;</operator><name>filter_chain_video_cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sub</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>capability</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>chain</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name></expr> )</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>char</name></type> <name><name>name_chained</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">",chain"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>name_chained</name></expr></argument>, <argument><expr><literal type="string">"%s,chain"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>capability</name></expr></argument>, <argument><expr><name>name_chained</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>capability</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>chain</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>chained</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>chained</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>chained</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>chained</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chained</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mouse</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mouse</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>mouse</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_mouse_Init</name><argument_list>( <argument><expr><name>mouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>chained</name><operator>-&gt;</operator><name>mouse</name></name> <operator>=</operator> <name>mouse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chained</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Filter '%s' (%p) appended to chain"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><call><name>module_get_name</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>filter</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to create %s '%s'"</literal></expr></argument>, <argument><expr><name>capability</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to create %s"</literal></expr></argument>, <argument><expr><name>capability</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>filter_t</name> <modifier>*</modifier></type><name>filter_chain_AppendFilter</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>filter_chain_AppendInner</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>filter_cap</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>,
<argument><expr><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>filter_chain_AppendConverter</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>filter_chain_AppendInner</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>conv_cap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>fmt_out</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filter_chain_DeleteFilter</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>chained</name> <init>= <expr><operator>(</operator><name>chained_filter_t</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>chained</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chained</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>chained</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>chained</name> <operator>==</operator> <name><name>chain</name><operator>-&gt;</operator><name>first</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>chained</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>chained</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chained</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>chained</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>chained</name> <operator>==</operator> <name><name>chain</name><operator>-&gt;</operator><name>last</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>chained</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Filter %p removed from chain"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FilterDeletePictures</name><argument_list>( <argument><expr><name><name>chained</name><operator>-&gt;</operator><name>pending</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>chained</name><operator>-&gt;</operator><name>mouse</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>filter_chain_AppendFromString</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>filter_chain_AppendFilter</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>cfg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name>cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>filter</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to append '%s' to chain"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>
<while>while<condition>( <expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>filter_chain_DeleteFilter</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>filter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>filter_chain_ForEach</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>chain</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>cb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>filter_chain_IsEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>chain</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>filter_chain_GetFmtOut</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_chain</name><operator>-&gt;</operator><name>last</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>fmt_out</name></name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>&amp;</operator><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_out</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>filter_chain_GetVideoCtxOut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_chain</name><operator>-&gt;</operator><name>last</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_chain</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>vctx_out</name></name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name><name>p_chain</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>p_chain</name><operator>-&gt;</operator><name>vctx_in</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterChainVideoFilter</name><parameter_list>( <parameter><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>f</name><operator>-&gt;</operator><name>pending</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"dropping pictures"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FilterDeletePictures</name><argument_list>( <argument><expr><name><name>f</name><operator>-&gt;</operator><name>pending</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>p_pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>filter_chain_VideoFilter</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>FilterChainVideoFilter</name><argument_list>( <argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_pic</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>p_chain</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>prev</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pending</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>FilterChainVideoFilter</name><argument_list>( <argument><expr><name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_pic</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filter_chain_VideoFlush</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>p_chain</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FilterDeletePictures</name><argument_list>( <argument><expr><name><name>f</name><operator>-&gt;</operator><name>pending</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_Flush</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filter_chain_SubSource</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>, <parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>display_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>p_chain</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name> <init>= <expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_sub_source</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>display_date</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_subpic</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>spu_PutSubpicture</name><argument_list>( <argument><expr><name>spu</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>subpicture_t</name> <modifier>*</modifier></type><name>filter_chain_SubFilter</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>p_chain</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_subpic</name> <operator>=</operator> <call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_sub_filter</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpic</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>filter_chain_MouseFilter</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_mouse_t</name></type> <name>current</name> <init>= <expr><operator>*</operator><name>p_src</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>chained_filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>p_chain</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>prev</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>mouse</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name> <operator>&amp;&amp;</operator> <name>p_mouse</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_mouse_t</name></type> <name>old</name> <init>= <expr><operator>*</operator><name>p_mouse</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mouse_t</name></type> <name>filtered</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name>filtered</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterDeletePictures</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>picture</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>picture</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
