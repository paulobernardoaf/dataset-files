<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\misc\background_worker.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKGROUND_WORKER_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKGROUND_WORKER_H__</name></cpp:macro></cpp:define>

<struct>struct <name>background_worker_config</name> <block>{







<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>default_timeout</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>max_threads</name></decl>;</decl_stmt>














<function_decl><type><name>void</name></type>( <modifier>*</modifier><name>pf_release</name> )<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>entity</name></decl></parameter> )</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type>( <modifier>*</modifier><name>pf_hold</name> )<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>entity</name></decl></parameter> )</parameter_list>;</function_decl>





















<function_decl><type><name>int</name></type>( <modifier>*</modifier><name>pf_start</name> )<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>entity</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter> )</parameter_list>;</function_decl>















<function_decl><type><name>int</name></type>( <modifier>*</modifier><name>pf_probe</name> )<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter> )</parameter_list>;</function_decl>


















<function_decl><type><name>void</name></type>( <modifier>*</modifier><name>pf_stop</name> )<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter> )</parameter_list>;</function_decl>
}</block>;</struct>















<function_decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>background_worker_New</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>background_worker_config</name></name><modifier>*</modifier></type> <name>config</name></decl></parameter> )</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>background_worker_RequestProbe</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter> )</parameter_list>;</function_decl>

















<function_decl><type><name>int</name></type> <name>background_worker_Push</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>entity</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter> )</parameter_list>;</function_decl>















<function_decl><type><name>void</name></type> <name>background_worker_Cancel</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>id</name></decl></parameter> )</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>background_worker_Delete</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
