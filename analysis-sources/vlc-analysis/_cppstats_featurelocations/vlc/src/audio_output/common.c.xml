<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\audio_output\common.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aout_internal.h"</cpp:file></cpp:include>








<function><type><name>unsigned</name> <name>int</name></type> <name>aout_BitsPerSample</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_format</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_format</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S8</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ALAW</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_MULAW</name></expr>:</case>
<return>return <expr><literal type="number">8</literal></expr>;</return>

<case>case <expr><name>VLC_CODEC_U16L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S16L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_U16B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S16B</name></expr>:</case>
<return>return <expr><literal type="number">16</literal></expr>;</return>

<case>case <expr><name>VLC_CODEC_U24L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S24L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_U24B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S24B</name></expr>:</case>
<return>return <expr><literal type="number">24</literal></expr>;</return>

<case>case <expr><name>VLC_CODEC_S24L32</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S24B32</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_U32L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_U32B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S32L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S32B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_F32L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_F32B</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>

<case>case <expr><name>VLC_CODEC_F64L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_F64B</name></expr>:</case>
<return>return <expr><literal type="number">64</literal></expr>;</return>

<default>default:</default>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>aout_FormatPrepare</name><parameter_list>( <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type> <name>p_format</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>p_format</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_channels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_bitspersample</name></name> <operator>=</operator> <call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_bitspersample</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_format</name><operator>-&gt;</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>)</operator>
<operator>*</operator> <name><name>p_format</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>aout_FormatPrintChannels</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type> <name>p_format</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_format</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>==</operator> <name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Ambisonics"</literal></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AOUT_CHAN_LEFT</name></expr>:</case>
<case>case <expr><name>AOUT_CHAN_RIGHT</name></expr>:</case>
<case>case <expr><name>AOUT_CHAN_CENTER</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_CENTER</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name>
<operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Mono"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LEFT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Left"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"Right"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <name>AOUT_CHANMODE_DOLBYSTEREO</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Dolby"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <name>AOUT_CHANMODE_DUALMONO</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Dual-mono"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>==</operator> <name>AOUT_CHAN_CENTER</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Stereo/Mono"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_RIGHT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Stereo/Left"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LEFT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Stereo/Right"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"Stereo"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name></expr>:</case>
<return>return <expr><literal type="string">"3F"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>:</case>
<return>return <expr><literal type="string">"2F1R"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>:</case>
<return>return <expr><literal type="string">"3F1R"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>:</case>
<return>return <expr><literal type="string">"2F2R"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>:</case>
<return>return <expr><literal type="string">"2F2M"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>:</case>
<return>return <expr><literal type="string">"3F2R"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>:</case>
<return>return <expr><literal type="string">"3F2M"</literal></expr>;</return>

<case>case <expr><name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_CENTER</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name>
<operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Mono/LFE"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LEFT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Left/LFE"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"Right/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <name>AOUT_CHANMODE_DOLBYSTEREO</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Dolby/LFE"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <name>AOUT_CHANMODE_DUALMONO</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Dual-mono/LFE"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>==</operator> <name>AOUT_CHAN_CENTER</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Mono/LFE"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_RIGHT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Stereo/Left/LFE"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LEFT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Stereo/Right/LFE"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"Stereo/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name>
<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"2F1R/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F1R/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"2F2R/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"2F2M/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F2R/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name>
<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F3R/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F2M/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>:</case>
<return>return <expr><literal type="string">"2F2M2R"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>:</case>
<return>return <expr><literal type="string">"3F2M2R"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F2M2R/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F2M1R/LFE"</literal></expr>;</return>
<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>:</case>
<return>return <expr><literal type="string">"3F2M3R/LFE"</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="string">"Unknown-chan-mask"</literal></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>aout_FormatPrint</name></cpp:undef>



<function><type><name>void</name></type> <name>aout_FormatPrint</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>p_format</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s '%4.4s' %d Hz %s frame=%u samples/%u bytes"</literal></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_format</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>, <argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>,
<argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><name>p_format</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr></argument>, <argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>aout_FormatsPrint</name></cpp:undef>



<function><type><name>void</name></type> <name>aout_FormatsPrint</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type> <name>p_format1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type> <name>p_format2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s '%4.4s'-&gt;'%4.4s' %u Hz-&gt;%u Hz %s-&gt;%s"</literal></expr></argument>,
<argument><expr><name>psz_text</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_format1</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_format2</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>,
<argument><expr><name><name>p_format1</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>p_format2</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>,
<argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><name>p_format1</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><name>p_format2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>unsigned</name></type> <name>aout_CheckChannelReorder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>chans_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>chans_out</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>table</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>AOUT_CHAN_MAX</name> <operator>&lt;=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Missing bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>chans_in</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chans_in</name> <operator>=</operator> <name>pi_vlc_chan_order_wg4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>chans_out</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chans_out</name> <operator>=</operator> <name>pi_vlc_chan_order_wg4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chans_in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>chan</name> <init>= <expr><name><name>chans_in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>chan</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chan</name> <operator>!=</operator> <name><name>chans_out</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name>mask</name> <operator>&amp;</operator> <name><name>chans_out</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>channels</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>channels</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>aout_ChannelReorder</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>chans_table</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>channels</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REORDER_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const size_t frames = (bytes / sizeof (type)) / channels; type *buf = ptr; for( size_t i = 0; i &lt; frames; i++ ) { type tmp[AOUT_CHAN_MAX]; for( size_t j = 0; j &lt; channels; j++ ) tmp[chans_table[j]] = buf[j]; memcpy( buf, tmp, sizeof (type) * channels ); buf += channels; } } while(0)</cpp:value></cpp:define>















<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>channels</name> <operator>&lt;=</operator> <name>AOUT_CHAN_MAX</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>fourcc</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case> <expr_stmt><expr><call><name>REORDER_TYPE</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case> <expr_stmt><expr><call><name>REORDER_TYPE</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case> <expr_stmt><expr><call><name>REORDER_TYPE</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case> <expr_stmt><expr><call><name>REORDER_TYPE</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case> <expr_stmt><expr><call><name>REORDER_TYPE</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> <init>= <expr><call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name>fourcc</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>frames</name> <init>= <expr><name>bytes</name> <operator>/</operator> <operator>(</operator><name>size</name> <operator>*</operator> <name>channels</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name> <operator>+</operator> <name>size</name> <operator>*</operator> <name><name>chans_table</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>size</name> <operator>*</operator> <name>j</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name>channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>size</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>aout_Interleave</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>srcv</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>chans</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLEAVE_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { type *d = dst; for( size_t i = 0; i &lt; chans; i++ ) { const type *s = srcv[i]; for( size_t j = 0, k = 0; j &lt; samples; j++, k += chans ) d[k] = *(s++); d++; } } while(0)</cpp:value></cpp:define>










<switch>switch<condition>( <expr><name>fourcc</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case> <expr_stmt><expr><call><name>INTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case> <expr_stmt><expr><call><name>INTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case> <expr_stmt><expr><call><name>INTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case> <expr_stmt><expr><call><name>INTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case> <expr_stmt><expr><call><name>INTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERLEAVE_TYPE</name></cpp:undef>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>aout_Deinterleave</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>src</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>chans</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINTERLEAVE_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { type *d = dst; const type *s = src; for( size_t i = 0; i &lt; chans; i++ ) { for( size_t j = 0, k = 0; j &lt; samples; j++, k += chans ) *(d++) = s[k]; s++; } } while(0)</cpp:value></cpp:define>










<switch>switch<condition>( <expr><name>fourcc</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case> <expr_stmt><expr><call><name>DEINTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case> <expr_stmt><expr><call><name>DEINTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case> <expr_stmt><expr><call><name>DEINTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case> <expr_stmt><expr><call><name>DEINTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case> <expr_stmt><expr><call><name>DEINTERLEAVE_TYPE</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEINTERLEAVE_TYPE</name></cpp:undef>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ExtractChannel</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst_channels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pi_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_sample_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>pi_selection</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sample_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_dst_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pi_dst</name><index>[<expr><name>j</name> <operator>*</operator> <name>i_bytes</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pi_src</name><index>[<expr><name><name>pi_selection</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>i_bytes</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pi_dst</name> <operator>+=</operator> <name>i_dst_channels</name> <operator>*</operator> <name>i_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pi_src</name> <operator>+=</operator> <name>i_src_channels</name> <operator>*</operator> <name>i_bytes</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_ChannelExtract</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst_channels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_sample_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>pi_selection</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_bits_per_sample</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_dst</name> <operator>!=</operator> <name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_bits_per_sample</name> <operator>==</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ExtractChannel</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_dst_channels</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src_channels</name></expr></argument>, <argument><expr><name>i_sample_count</name></expr></argument>, <argument><expr><name>pi_selection</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_bits_per_sample</name> <operator>==</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ExtractChannel</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_dst_channels</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src_channels</name></expr></argument>, <argument><expr><name>i_sample_count</name></expr></argument>, <argument><expr><name>pi_selection</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_bits_per_sample</name> <operator>==</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ExtractChannel</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_dst_channels</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src_channels</name></expr></argument>, <argument><expr><name>i_sample_count</name></expr></argument>, <argument><expr><name>pi_selection</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_bits_per_sample</name> <operator>==</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ExtractChannel</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_dst_channels</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src_channels</name></expr></argument>, <argument><expr><name>i_sample_count</name></expr></argument>, <argument><expr><name>pi_selection</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>aout_CheckChannelExtraction</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_selection</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_layout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_order_dst</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pi_order_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_channels</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>AOUT_CHAN_MAX</name> <operator>&lt;=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>pi_order_dst</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"Missing bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_layout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pi_index</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pi_order_dst</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pi_order_dst</name> <operator>=</operator> <name>pi_vlc_chan_order_wg4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pi_order_src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>i_layout</name> <operator>&amp;</operator> <name><name>pi_order_src</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>AOUT_CHAN_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pi_order_dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>pi_order_src</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_out</name> <operator>&lt;</operator> <name>AOUT_CHAN_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_index</name><index>[<expr><name>i_out</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_layout</name> <operator>|=</operator> <name><name>pi_order_src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AOUT_CHAN_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i_out</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pi_order_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pi_order_src</name><index>[<expr><name><name>pi_index</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pi_selection</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pi_index</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_layout</name> <operator>=</operator> <name>i_layout</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <name>i_out</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pi_selection</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_out</name> <operator>!=</operator> <name>i_channels</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>FilterOrder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz_name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_order</name></decl>;</decl_stmt>
}</block> <decl><name><name>filter</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"equalizer"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_order</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>INT_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aout_EnableFilter</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_add</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_name</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_variable</name> <init>= <expr><literal type="string">"audio-filter"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_list</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>psz_variable</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz_list</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_count</name> <operator>+=</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>i_count</name> <operator>+=</operator> <name>b_add</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_filter</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ppsz_filter</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ppsz_filter</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_present</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz_list</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_end</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_present</name> <operator>|=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppsz_filter</name><index>[<expr><name>i_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>psz_end</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>b_present</name> <operator>==</operator> <name>b_add</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_add</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_order</name> <init>= <expr><call><name>FilterOrder</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>FilterOrder</name><argument_list>( <argument><expr><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <name>i_order</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ppsz_filter</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>i_count</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ppsz_filter</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_length</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_new</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_new</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_new</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_new</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_new</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_new</name></expr></argument>, <argument><expr><name><name>ppsz_filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><name>psz_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
