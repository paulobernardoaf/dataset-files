<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\src\audio_output\volume.c">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout_volume.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aout_internal.h"</cpp:file></cpp:include>

<struct>struct <name>aout_volume</name>
<block>{
<decl_stmt><decl><type><name>audio_volume_t</name></type> <name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_replay_gain_t</name></type> <name>replay_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name></type> <name>gain_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>output_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReplayGainCallback</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>aout_volume_New</name></cpp:undef>



<function><type><name>aout_volume_t</name> <modifier>*</modifier></type><name>aout_volume_New</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_volume_t</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>aout_volume_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"volume"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vol</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>output_factor</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>replay_gain</name></name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>replay_gain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>replay_gain</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>replay_gain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"audio-replay-gain-mode"</literal></expr></argument>,
<argument><expr><name>ReplayGainCallback</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"audio-replay-gain-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vol</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>aout_volume_SetFormat</name><parameter_list>(<parameter><decl><type><name>aout_volume_t</name> <modifier>*</modifier></type><name>vol</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vol</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>audio_volume_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>format</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"retaining sample format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"changing sample format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio volume"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>aout_volume_Delete</name><parameter_list>(<parameter><decl><type><name>aout_volume_t</name> <modifier>*</modifier></type><name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vol</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>audio_volume_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"audio-replay-gain-mode"</literal></expr></argument>,
<argument><expr><name>ReplayGainCallback</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_volume_SetVolume</name><parameter_list>(<parameter><decl><type><name>aout_volume_t</name> <modifier>*</modifier></type><name>vol</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vol</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>output_factor</name></name> <operator>=</operator> <name>factor</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>aout_volume_Amplify</name><parameter_list>(<parameter><decl><type><name>aout_volume_t</name> <modifier>*</modifier></type><name>vol</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vol</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>vol</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>amp</name> <init>= <expr><name><name>vol</name><operator>-&gt;</operator><name>output_factor</name></name> <operator>*</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>gain_factor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vol</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>amplify</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>amp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>float</name></type> <name>aout_ReplayGainSelect</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>replay_gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name> <init>= <expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"track"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>AUDIO_REPLAY_GAIN_TRACK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"album"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>multiplier</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>AUDIO_REPLAY_GAIN_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>multiplier</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>replay_gain</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>mode</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>replay_gain</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><operator>!</operator><name>mode</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>!</operator><name>mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>replay_gain</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>mode</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>replay_gain</name><operator>-&gt;</operator><name>pf_gain</name><index>[<expr><name>mode</name></expr>]</index></name>
<operator>+</operator> <call><name>var_InheritFloat</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-replay-gain-preamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>var_InheritFloat</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-replay-gain-default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>multiplier</name> <operator>=</operator> <call><name>powf</name> <argument_list>(<argument><expr><literal type="number">10.f</literal></expr></argument>, <argument><expr><name>gain</name> <operator>/</operator> <literal type="number">20.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-replay-gain-peak-protection"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>multiplier</name> <operator>=</operator> <call><name>fminf</name> <argument_list>(<argument><expr><name>multiplier</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>replay_gain</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>mode</name></expr>]</index></name></expr>
?</condition><then> <expr><literal type="number">1.f</literal> <operator>/</operator> <name><name>replay_gain</name><operator>-&gt;</operator><name>pf_peak</name><index>[<expr><name>mode</name></expr>]</index></name></expr>
</then><else>: <expr><literal type="number">1.f</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>multiplier</name> <operator>*=</operator> <call><name>var_InheritFloat</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"gain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>multiplier</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReplayGainCallback</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_volume_t</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>multiplier</name> <init>= <expr><call><name>aout_ReplayGainSelect</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>replay_gain</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>gain_factor</name></name></expr></argument>, <argument><expr><name>multiplier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
