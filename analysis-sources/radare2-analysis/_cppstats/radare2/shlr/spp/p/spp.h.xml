<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\spp\p\spp.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>spp_var_get</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spp_var_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>outlen</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>popen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fread</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>+</operator> <literal type="number">1024</literal> <operator>&gt;</operator> <name>outlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outlen</name> <operator>+=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tout</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tout</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>tout</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_set</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>eq</name></expr>, <expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="string">""</literal></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<for>for <control>(<init><expr><name>eq</name><operator>=</operator><name>buf</name></expr>;</init> <condition><expr><name><name>eq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>eq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>eq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<expr_stmt><expr><name><name>eq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><name>eq</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>spp_var_set</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid variable name '%s' at line %d\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_get</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>spp_var_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_getrandom</argument>)</argument_list></macro> <block>{

<expr><name>int</name> <name>max</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block>

<call><name>srandom</name> <argument_list>(<argument><expr><call><name>r_sys_getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>max</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_add</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>res</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eq</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>spp_var_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_sub</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>eq</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>char</name> <operator>*</operator><name>var</name></expr>;

<expr><name>int</name> <name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>spp_var_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>var</name></expr>?</condition><then> <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>-=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_trace</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%.1000s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_echo</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_error</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s (line=%d)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_warning</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block>

<call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s (line=%d)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_system</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>cmd_to_str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_include</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>incdir</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block>

<name>incdir</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SPP_INCDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>incdir</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>incdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spp_file</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>spp_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_if</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>spp_var_get</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>var</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>var</name> <operator>!=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>var</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_ifeq</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>value</name> <operator>=</operator> <name>buf</name></expr>;

<expr><name>char</name> <operator>*</operator><name>eq</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>spp_var_get</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>eq</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

} else <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>spp_var_get</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <operator>*</operator><name>value</name><operator>==</operator><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">1</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_hex</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_grepline</argument>)</argument_list></macro> <block>{

<expr><name>FILE</name> <operator>*</operator><name>fd</name></expr>;

<expr><name>char</name> <name><name>b</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr>;

<expr><name>char</name> <operator>*</operator><name>ptr</name></expr>;

<expr><name>int</name> <name>line</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>line</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to open '%s'\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_else</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_ifnot</argument>)</argument_list></macro> <block>{

<expr><call><name>spp_if</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>spp_else</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><literal type="number">1</literal></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_ifin</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>var</name></expr>, <expr><operator>*</operator><name>ptr</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block>

<name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_endif</argument>)</argument_list></macro> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_default</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"WARNING: invalid command: '%s' at line %d\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>

static <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>spp_pipe_fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_pipe</argument>)</argument_list></macro> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>

<expr><name>spp_pipe_fd</name> <operator>=</operator> <call><name>popen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>spp_switch_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_switch</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>var</name> <operator>=</operator> <call><name>spp_var_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>spp_switch_str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><name>spp_switch_str</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

}

static <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_case</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>echo</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>ifl</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>spp_switch_str</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_endswitch</argument>)</argument_list></macro> <block>{

<expr><call><name>free</name> <argument_list>(<argument><expr><name>spp_switch_str</name></expr></argument>)</argument_list></call></expr>;

<expr><name>spp_switch_str</name> <operator>=</operator> <name>NULL</name></expr>;

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>spp_endpipe</argument>)</argument_list></macro> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>

<expr><name>int</name> <name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>int</name> <name>outlen</name> <operator>=</operator> <literal type="number">4096</literal></expr>;

<expr><name>char</name> <operator>*</operator><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>char</name> <operator>*</operator><name>tstr</name></expr>;

<do>do <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fread</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>spp_pipe_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>+</operator> <literal type="number">1024</literal> <operator>&gt;</operator> <name>outlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outlen</name> <operator>+=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></do>}</block>

<name>str</name> <operator>=</operator> <name>tstr</name></expr>;</expr_stmt>

}

} <while>while <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spp_pipe_fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pclose</name> <argument_list>(<argument><expr><name>spp_pipe_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spp_pipe_fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>PUT_CALLBACK</name><argument_list>(<argument>spp_fputs</argument>)</argument_list></macro> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>spp_pipe_fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>spp_pipe_fd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Tag</name></name></type> <name><name>spp_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"get"</literal></expr>, <expr><name>spp_get</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hex"</literal></expr>, <expr><name>spp_hex</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"getrandom"</literal></expr>, <expr><name>spp_getrandom</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"grepline"</literal></expr>, <expr><name>spp_grepline</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"set"</literal></expr>, <expr><name>spp_set</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><name>spp_add</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><name>spp_sub</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"switch"</literal></expr>, <expr><name>spp_switch</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"case"</literal></expr>, <expr><name>spp_case</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"endswitch"</literal></expr>, <expr><name>spp_endswitch</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"echo"</literal></expr>, <expr><name>spp_echo</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"error"</literal></expr>, <expr><name>spp_error</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"warning"</literal></expr>, <expr><name>spp_warning</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"trace"</literal></expr>, <expr><name>spp_trace</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ifin"</literal></expr>, <expr><name>spp_ifin</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ifnot"</literal></expr>, <expr><name>spp_ifnot</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ifeq"</literal></expr>, <expr><name>spp_ifeq</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"if"</literal></expr>, <expr><name>spp_if</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"else"</literal></expr>, <expr><name>spp_else</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"endif"</literal></expr>, <expr><name>spp_endif</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pipe"</literal></expr>, <expr><name>spp_pipe</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"endpipe"</literal></expr>, <expr><name>spp_endpipe</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"include"</literal></expr>, <expr><name>spp_include</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"system"</literal></expr>, <expr><name>spp_system</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>spp_default</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>ARG_CALLBACK</name><argument_list>(<argument>spp_arg_i</argument>)</argument_list></macro> <block>{

<expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><literal type="string">"SPP_INCDIR"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>ARG_CALLBACK</name><argument_list>(<argument>spp_arg_d</argument>)</argument_list></macro> <block>{

<expr><name>char</name> <operator>*</operator><name>eq</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spp_var_set</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>eq</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><call><name>spp_var_set</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <decl_stmt><decl><type><name><name>struct</name> <name>Arg</name></name></type> <name><name>spp_args</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"-I"</literal></expr>, <expr><literal type="string">"add include directory"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>spp_arg_i</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"-D"</literal></expr>, <expr><literal type="string">"define value of variable"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>spp_arg_d</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DLL_LOCAL</name> <name><name>struct</name> <name>Proc</name></name></type> <name>spp_proc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"spp"</literal></expr>,

<expr><operator>.</operator><name>tags</name> <operator>=</operator> <operator>(</operator>struct <name>Tag</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>spp_tags</name></expr>,

<expr><operator>.</operator><name>args</name> <operator>=</operator> <operator>(</operator>struct <name>Arg</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>spp_args</name></expr>,

<expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">" "</literal></expr>,

<expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>tag_pre</name> <operator>=</operator> <literal type="string">"&lt;{"</literal></expr>,

<expr><operator>.</operator><name>tag_post</name> <operator>=</operator> <literal type="string">"}&gt;"</literal></expr>,

<expr><operator>.</operator><name>chop</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>fputs</name> <operator>=</operator> <name>spp_fputs</name></expr>,

<expr><operator>.</operator><name>multiline</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>default_echo</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>tag_begin</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
