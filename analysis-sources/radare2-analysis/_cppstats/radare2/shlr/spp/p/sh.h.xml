<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\spp\p\sh.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static char *eof = NULL;

static char *input = NULL;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>sh_default</argument>)</argument_list></macro> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ptr = strstr(buf, "&lt;&lt;");

if (ptr) {

*ptr='\0';

for(ptr = ptr+2;*ptr==' ';ptr=ptr+1);

free(eof);

eof = strdup(ptr);

return;

}

if (eof)

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FORK</name></expr></cpp:if>

<expr><name>int</name> <name>r</name> <operator>=</operator> <call><name>system</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"system '%s' (%d) failed: %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <decl_stmt><decl><type><name>int</name></type> <name>sh_pipe_enabled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sh_pipe_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>sh_pipe</argument>)</argument_list></macro> <block>{

<expr><name>sh_pipe_enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;

<expr><call><name>free</name> <argument_list>(<argument><expr><name>sh_pipe_cmd</name></expr></argument>)</argument_list></call></expr>;

<expr><name>sh_pipe_cmd</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>TAG_CALLBACK</name><argument_list>(<argument>sh_endpipe</argument>)</argument_list></macro> <block>{

<expr><name>sh_pipe_enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><call><name>free</name> <argument_list>(<argument><expr><name>sh_pipe_cmd</name></expr></argument>)</argument_list></call></expr>;

<expr><name>sh_pipe_cmd</name> <operator>=</operator> <name>NULL</name></expr>;

<return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>PUT_CALLBACK</name><argument_list>(<argument>sh_fputs</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><name>sh_pipe_enabled</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"echo '%s' | %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sh_pipe_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FORK</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>system</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"system '%s' (%d) failed: %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

} else <block>{<block_content>

<expr_stmt><expr><call><name>out_printf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <decl_stmt><decl><type><name><name>struct</name> <name>Tag</name></name></type> <name><name>sh_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"pipe"</literal></expr>, <expr><name>sh_pipe</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"endpipe"</literal></expr>, <expr><name>sh_endpipe</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>sh_default</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Arg</name></name></type> <name><name>sh_args</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DLL_LOCAL</name> <name><name>struct</name> <name>Proc</name></name></type> <name>sh_proc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sh"</literal></expr>,

<expr><operator>.</operator><name>tags</name> <operator>=</operator> <operator>(</operator>struct <name>Tag</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>sh_tags</name></expr>,

<expr><operator>.</operator><name>args</name> <operator>=</operator> <operator>(</operator>struct <name>Arg</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>sh_args</name></expr>,

<expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>token</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>tag_pre</name> <operator>=</operator> <literal type="string">"{{"</literal></expr>,

<expr><operator>.</operator><name>tag_post</name> <operator>=</operator> <literal type="string">"}}"</literal></expr>,

<expr><operator>.</operator><name>fputs</name> <operator>=</operator> <name>sh_fputs</name></expr>,

<expr><operator>.</operator><name>multiline</name> <operator>=</operator> <literal type="string">"\\\n"</literal></expr>,

<expr><operator>.</operator><name>default_echo</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>chop</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>tag_begin</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
