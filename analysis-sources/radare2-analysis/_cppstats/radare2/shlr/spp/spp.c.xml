<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\spp\spp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<function><type><name>S_API</name> <name>int</name></type> <name>spp_run</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>Output</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SPP_RUN(%s)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>chop</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><call><name>IS_SPACE</name> <argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tok</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>buflen</name></expr>?</condition><then> <expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</init> <condition><expr><call><name>IS_SPACE</name> <argument_list>(<argument><expr><operator>*</operator><name>tok</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>tok</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tok</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>token</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tok</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>tok</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>callback</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>D</name></type> <name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NAME=(%s)\n"</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>fout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>fout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>callback</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ifl</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ifl</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ifl</name></name> <operator>&gt;=</operator> <name>MAXIFL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Nested conditionals parsing error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>spp_run_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Output</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>fout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>cout</name></name> <operator>=</operator> <call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>spp_run</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>cout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>cout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>lbuf_strcat</name><parameter_list>(<parameter><decl><type><name>SppBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nbuf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>lbuf</name></name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>lbuf_n</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>lbuf_s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nbuf</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>lbuf</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>lbuf_s</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>lbuf</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>lbuf</name></name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>lbuf_n</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>lbuf_n</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_fputs</name><parameter_list>(<parameter><decl><type><name>Output</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ifl</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>echo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>printed</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>fputs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>fputs</name></name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>fout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>fout</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>printed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>S_API</name> <name>void</name></type> <name>spp_eval</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>Output</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptrr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name></name> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>token</name></name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>delta</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>delta</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>spp_run</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ptr</name></expr>)</condition>;</do>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>tag_post</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_post</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <ternary><condition><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name></name></expr>?</condition><then> <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">"==&gt; 0.0 (%s)\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>tag_begin</name></name> <operator>||</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>tag_begin</name></name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>==</operator> <name>buf</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_fputs</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">"==&gt; 0 (%s)\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptrr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_fputs</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_post</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptrr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptrr</name> <operator>&lt;</operator> <name>ptr2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>ptr2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>spp_run_str</name> <argument_list>(<argument><expr><name>ptrr</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"strcpy(%s)(%s)\n"</literal></expr></argument>, <argument><expr><name>ptrr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ptrr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>tag_pre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>D</name></type> <name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"strcat(%s)(%s)\n"</literal></expr></argument>, <argument><expr><name>ptrr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>ptrr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"CONTINUE (%s)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptrr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name> <operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name><argument_list>(<argument><expr><literal type="string">"==&gt; 1 (%s)\n"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lbuf_strcat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_fputs</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>spp_run</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lbuf_strcat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">"=(1)=&gt; spp_run(%s)\n"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spp_run</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">"=(1)=&gt; spp_run(%s)\n"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">"==&gt; 2 (%s)\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">" ==&gt; 2.1: run(%s)\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spp_run</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>ptr2</name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>printed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">" ==&gt; 2.1: continue(%s)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_fputs</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_fputs</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">"==&gt; 3\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lbuf_strcat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>S_API</name> <name>void</name></type> <name>spp_io</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>Output</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf_s</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"#!"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>feof</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>multiline</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><name>buf</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>multiline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>eol</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>multiline</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D</name></type> <name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Multiline detected!\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>eol</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>spp_eval</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>lineno</name></name> <operator>+=</operator> <name>lines</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_fputs</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>lbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>S_API</name> <name>int</name></type> <name>spp_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>Output</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SPP-FILE(%s)\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>spp_io</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot find '%s'\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>S_API</name> <name>void</name></type> <name>spp_proc_list_kw</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>S_API</name> <name>void</name></type> <name>spp_proc_list</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>procs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>procs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>S_API</name> <name>void</name></type> <name>spp_proc_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Proc</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>procs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>procs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>proc</name> <operator>=</operator> <name><name>procs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>printf</name> <argument_list>(<argument><expr><literal type="string">"SET PROC:(%s)(%s)\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>procs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>fail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid preprocessor name '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>proc</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>proc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ifl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXIFL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>echo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>default_echo</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tags</name> <operator>=</operator> <operator>(</operator>struct <name>Tag</name><operator>*</operator><operator>)</operator><name><name>proc</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>out_printf</name><parameter_list>(<parameter><decl><type><name>Output</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>fout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>fout</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>cout</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
