<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\tcc\tccgen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCC_ERR</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { tcc_error (__VA_ARGS__); return; } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ST_DATA</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tcc_cb_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>rsym</name></decl>, <decl><type ref="prev"/><name>anon_sym</name> <init>= <expr><name>SYM_FIRST_ANOM</name></expr></init></decl>, <decl><type ref="prev"/><name>ind</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_free_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>sym_pools</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>nb_sym_pools</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>arraysize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_symname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>global_stack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>local_stack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>scope_stack_bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>define_stack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>global_label_stack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>Sym</name> <modifier>*</modifier></type><name>local_label_stack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>vla_sp_loc_tmp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>vla_sp_root_loc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name> <modifier>*</modifier></type><name>vla_sp_loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>vla_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>SValue</name></type> <name><name>__vstack</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>VSTACK_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vtop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>const_wanted</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>nocode_wanted</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>global_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>CType</name></type> <name>func_vt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>func_vc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>last_line_num</name></decl>, <decl><type ref="prev"/><name>last_ind</name></decl>, <decl><type ref="prev"/><name>func_ind</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>CType</name></type> <name>char_pointer_type</name></decl>, <decl><type ref="prev"/><name>func_old_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>CType</name></type> <name>int8_type</name></decl>, <decl><type ref="prev"/><name>int16_type</name></decl>, <decl><type ref="prev"/><name>int32_type</name></decl>, <decl><type ref="prev"/><name>int64_type</name></decl>, <decl><type ref="prev"/><name>size_type</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>CType</name> <modifier>*</modifier></type><name>pointed_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_compatible_types</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type1</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_btype</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>type_decl</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>td</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_expr_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decl_initializer</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_only</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decl_initializer_alloc</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_init</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decl0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_for_loop_init</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>expr_eq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unary_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_compatible_parameter_types</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type1</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>expr_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>ST_INLN</name> <name>bool</name></type> <name>is_structured</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_STRUCT</name> <operator>||</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_UNION</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>bool</name></type> <name>is_struct</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_STRUCT</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>bool</name></type> <name>is_union</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_UNION</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>bool</name></type> <name>is_enum</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_ENUM</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>bool</name></type> <name>is_float</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr>;</expr_stmt>

<return>return <expr><name>bt</name> <operator>==</operator> <name>VT_LDOUBLE</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_DOUBLE</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_FLOAT</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_QFLOAT</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>bool</name></type> <name>not_structured</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>!=</operator> <name>VT_STRUCT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>!=</operator> <name>VT_UNION</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>ieee_finite</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>d</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <literal type="number">0x800fffff</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>test_lvalue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <name>VT_LVAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"lvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sym</name> <modifier>*</modifier></type><name>__sym_malloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym_pool</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sym</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sym_pool_size</name> <init>= <expr><name>SYM_POOL_NB</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sym_pool</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sym_pool_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>sym_pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sym_pool_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dynarray_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sym_pools</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_sym_pools</name></expr></argument>, <argument><expr><name>sym_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_sym</name> <operator>=</operator> <name>sym_free_first</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <name>sym_pool</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SYM_POOL_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>last_sym</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_sym</name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sym</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sym_free_first</name> <operator>=</operator> <name>last_sym</name></expr>;</expr_stmt>

<return>return <expr><name>last_sym</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Sym</name> <modifier>*</modifier></type><name>sym_malloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <name>sym_free_first</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>__sym_malloc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sym_free_first</name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<return>return <expr><name>sym</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>void</name></type> <name>sym_free</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>sym_free_first</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>asm_label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_free_first</name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_push2</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <operator>&amp;</operator><name>local_stack</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>ps</name></expr>;</init> <condition><expr><name>s</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>scope_stack_bottom</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <name>SYM_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name><operator>)</operator> <operator>&lt;</operator> <name>SYM_FIRST_ANOM</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>v</name></name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"incompatible types for redefinition of '%s'"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_malloc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>asm_label</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <operator>*</operator><name>ps</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_find2</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>Sym</name> <modifier>*</modifier></type><name>struct_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>-=</operator> <name>TOK_IDENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>v</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>tok_ident</name> <operator>-</operator> <name>TOK_IDENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>table_ident</name><index>[<expr><name>v</name></expr>]</index></name><operator>-&gt;</operator><name>sym_struct</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>-=</operator> <name>TOK_IDENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>v</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>tok_ident</name> <operator>-</operator> <name>TOK_IDENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>table_ident</name><index>[<expr><name>v</name></expr>]</index></name><operator>-&gt;</operator><name>sym_identifier</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>tcc_sym_push</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>meta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>new_type</name> <init>= <expr><operator>(</operator><name>CType</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_type</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_type</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <call><name>sym_malloc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_type</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sym_push</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>new_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>new_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>dump_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bt</name> <init>= <expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"BTYPE = %d "</literal></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VT_UNION</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[UNION]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_STRUCT</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[STRUCT]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_PTR</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[PTR]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_ENUM</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[ENUM]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_INT64</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[INT64_T]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_INT32</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[INT32_T]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_INT16</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[INT16_T]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_INT8</name></expr>:</case> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[INT8_T]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"v = %d\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>varstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>varstr</name> <operator>=</operator> <call><name>get_tok_str</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"var = %s\n"</literal></expr></argument>, <argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>asm_label</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"asm_label = %s\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>asm_label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r = %d\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"associated type:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>sym_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenSym</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>local_stack</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name>local_stack</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name>global_stack</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push2</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <name>SYM_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name><operator>)</operator> <operator>&lt;</operator> <name>SYM_FIRST_ANOM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>table_ident</name><index>[<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name><operator>)</operator> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <name>SYM_STRUCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>sym_struct</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>sym_identifier</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_tok</name></name> <operator>=</operator> <operator>*</operator><name>ps</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>global_identifier_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>global_stack</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>SYM_FIRST_ANOM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>table_ident</name><index>[<expr><name>i</name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name><operator>-&gt;</operator><name>sym_identifier</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ps</name><operator>)</operator><operator>-&gt;</operator><name>prev_tok</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_tok</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>sym_pop</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptop</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ss</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenSym</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>ptop</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <name>SYM_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name><operator>)</operator> <operator>&lt;</operator> <name>SYM_FIRST_ANOM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>table_ident</name><index>[<expr><name>i</name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <name>SYM_STRUCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>sym_struct</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>sym_identifier</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_tok</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sym_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ptop</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>weaken_symbol</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_WEAK</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vsetc</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>CValue</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vtop</name> <operator>&gt;=</operator> <name>vstack</name> <operator>+</operator> <operator>(</operator><name>VSTACK_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"memory full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vtop</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>*</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r2</name></name> <operator>=</operator> <name>VT_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>*</operator><name>vc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vpush</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>vpushi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>int32_type</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vpushs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>PTR_SIZE</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>ull</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>size_type</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vpush64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ty</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name></type> <name>ctype</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctype</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>ty</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctype</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>ull</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>vpushll</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>int64_type</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>vset</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vseti</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CType</name></type> <name>type</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>vswap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SValue</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>vtop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vtop</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>vpushv</name><parameter_list>(<parameter><decl><type><name>SValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vtop</name> <operator>&gt;=</operator> <name>vstack</name> <operator>+</operator> <operator>(</operator><name>VSTACK_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"memory full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vtop</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vtop</name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vdup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>vpushv</name> <argument_list>(<argument><expr><name>vtop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gaddrof</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VT_LVAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <name>VT_VALMASK</name><operator>)</operator> <operator>==</operator> <name>VT_LLOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>VT_VALMASK</name> <operator>|</operator> <name>VT_LVAL_TYPE</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>VT_LOCAL</name> <operator>|</operator> <name>VT_LVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pointed_size</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>

<return>return <expr><call><name>type_size</name> <argument_list>(<argument><expr><call><name>pointed_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_integer_btype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>bt</name> <operator>==</operator> <name>VT_INT8</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_INT16</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_INT32</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_INT64</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>type_size</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_structured</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_PTR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>-</operator><name>ts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ts</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>PTR_SIZE</name></expr>;</expr_stmt>

<return>return <expr><name>PTR_SIZE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_LDOUBLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>LDOUBLE_ALIGN</name></expr>;</expr_stmt>

<return>return <expr><name>LDOUBLE_SIZE</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_DOUBLE</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_INT64</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>tcc_state</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_ENUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_INT32</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_INT16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_QLONG</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_QFLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CType</name> <modifier>*</modifier></type><name>pointed_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>mk_pointer</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>SYM_FIELD</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>VT_PTR</name> <operator>|</operator> <operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <operator>~</operator><name>VT_TYPE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_compatible_func</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type1</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>type1</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>type2</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_compatible_types</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s2</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FUNC_CALL</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>FUNC_CALL</name> <argument_list>(<argument><expr><name><name>s2</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>FUNC_OLD</name> <operator>||</operator> <name><name>s2</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>FUNC_OLD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name><name>s2</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>s1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_compatible_parameter_types</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s2</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>s2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>s2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_types</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type1</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unqualified</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><name><name>type1</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_TYPE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><name><name>type2</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_TYPE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unqualified</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VT_CONSTANT</name> <operator>|</operator> <name>VT_VOLATILE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VT_CONSTANT</name> <operator>|</operator> <name>VT_VOLATILE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>!=</operator> <name>t2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bt1</name> <init>= <expr><name>t1</name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bt1</name> <operator>==</operator> <name>VT_PTR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type1</name> <operator>=</operator> <call><name>pointed_type</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type2</name> <operator>=</operator> <call><name>pointed_type</name> <argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>is_compatible_types</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt1</name> <operator>==</operator> <name>VT_STRUCT</name> <operator>||</operator> <name>bt1</name> <operator>==</operator> <name>VT_UNION</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>type1</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name><name>type2</name><operator>-&gt;</operator><name>ref</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt1</name> <operator>==</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>is_compatible_func</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_compatible_types</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type1</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>compare_types</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_compatible_parameter_types</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type1</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>compare_types</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>type_to_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bt</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_TYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"const "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_VOLATILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"volatile "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>bt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VT_VOID</name></expr>:</case>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"void"</literal></expr>;</expr_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_BOOL</name></expr>:</case>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"bool"</literal></expr>;</expr_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_INT8</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"uint8_t"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_CHAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"char"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"int8_t"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_INT16</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"uint16_t"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"int16_t"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_INT32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"uint32_t"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"int32_t"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_LONG</name></expr>:</case>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"long"</literal></expr>;</expr_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_INT64</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"uint64_t"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"int64_t"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_FLOAT</name></expr>:</case>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"float"</literal></expr>;</expr_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_DOUBLE</name></expr>:</case>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"double"</literal></expr>;</expr_stmt>

<goto>goto <name>add_tstr</name>;</goto>

<case>case <expr><name>VT_LDOUBLE</name></expr>:</case>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"long double"</literal></expr>;</expr_stmt>

<label><name>add_tstr</name>:</label>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>VT_UNSIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bt</name> <operator>!=</operator> <name>VT_INT8</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>bt</name> <operator>!=</operator> <name>VT_INT16</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bt</name> <operator>!=</operator> <name>VT_INT32</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>bt</name> <operator>!=</operator> <name>VT_INT64</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"unsigned "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_ENUM</name></expr>:</case>

<case>case <expr><name>VT_STRUCT</name></expr>:</case>

<case>case <expr><name>VT_UNION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_STRUCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"struct "</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_UNION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"union "</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <literal type="string">"enum "</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>v</name></name> <operator>&amp;</operator> <operator>~</operator><name>SYM_STRUCT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>SYM_FIRST_ANOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat_printf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>v</name> <operator>-</operator> <name>SYM_FIRST_ANOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VT_FUNC</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>type_to_str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sa</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>type_to_str</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sa</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>no_var</name>;</goto>

<case>case <expr><name>VT_PTR</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_ARRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>type_to_str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pstrcpy</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>type_to_str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>no_var</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>varstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>no_var</name>:</label>

<empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_attribute</name><parameter_list>(<parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE1</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"attribute name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_ALIAS1</name></expr>:</case>

<case>case <expr><name>TOK_ALIAS2</name></expr>:</case>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"alias(\"target\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>alias_target</name></name> <operator>=</operator> 

<call><name>tok_alloc</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tokc</name><operator>.</operator><name>cstr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tokc</name><operator>.</operator><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_ALIGNED1</name></expr>:</case>

<case>case <expr><name>TOK_ALIGNED2</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>expr_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"alignment must be a positive power of two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>MAX_ALIGN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>aligned</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_PACKED1</name></expr>:</case>

<case>case <expr><name>TOK_PACKED2</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>packed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_WEAK1</name></expr>:</case>

<case>case <expr><name>TOK_WEAK2</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>weak</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_UNUSED1</name></expr>:</case>

<case>case <expr><name>TOK_UNUSED2</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>TOK_NORETURN1</name></expr>:</case>

<case>case <expr><name>TOK_NORETURN2</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>TOK_CDECL1</name></expr>:</case>

<case>case <expr><name>TOK_CDECL2</name></expr>:</case>

<case>case <expr><name>TOK_CDECL3</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_call</name></name> <operator>=</operator> <name>FUNC_CDECL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_STDCALL1</name></expr>:</case>

<case>case <expr><name>TOK_STDCALL2</name></expr>:</case>

<case>case <expr><name>TOK_STDCALL3</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_call</name></name> <operator>=</operator> <name>FUNC_STDCALL</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TOK_REGPARM1</name></expr>:</case>

<case>case <expr><name>TOK_REGPARM2</name></expr>:</case>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>expr_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_call</name></name> <operator>=</operator> <name>FUNC_FASTCALL1</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_FASTCALL1</name></expr>:</case>

<case>case <expr><name>TOK_FASTCALL2</name></expr>:</case>

<case>case <expr><name>TOK_FASTCALL3</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_call</name></name> <operator>=</operator> <name>FUNC_FASTCALLW</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>TOK_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_MODE_DI</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VT_INT64</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_MODE_HI</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VT_INT16</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_MODE_SI</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>VT_INT32</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"__mode__(%s) not supported\n"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_DLLEXPORT</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_export</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_DLLIMPORT</name></expr>:</case>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_import</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>tcc_state</name><operator>-&gt;</operator><name>warn_unsupported</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"'%s' attribute ignored"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>parenthesis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parenthesis</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parenthesis</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>parenthesis</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>struct_decl</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>align</name></decl>, <decl><type ref="prev"/><name>maxalign</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_size</name></decl>, <decl><type ref="prev"/><name>bit_pos</name></decl>, <decl><type ref="prev"/><name>bsize</name></decl>, <decl><type ref="prev"/><name>bt</name></decl>, <decl><type ref="prev"/><name>lbit_pos</name></decl>, <decl><type ref="prev"/><name>prevbt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>STRING_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ss</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ass</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STACK_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>, <argument><expr><name>btype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"struct/union/enum name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>struct_find</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>!=</operator> <name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"invalid type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>do_decl</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>anon_sym</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>v</name> <operator>-</operator> <name>SYM_FIRST_ANOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>v</name> <operator>|</operator> <name>SYM_STRUCT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<label><name>do_decl</name>:</label>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"struct/union/enum already defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>TOK_ENUM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"anonymous enums are ignored\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>TOK_UIDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>expr_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>varstr</name> <init>= <expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"%s=enum\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"[+]enum.%s=%s\n"</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"enum.%s.%s=0x%"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"enum.%s.0x%"</literal><name>PFMT64x</name> <literal type="string">"=%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int64_type</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_STATIC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>maxalign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevbt</name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>==</operator> <name>TOK_UNION</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"union"</literal></expr></then><else>: <expr><literal type="string">"struct"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"%s=%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_btype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"bracket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>type1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_DIRECT</name> <operator>|</operator> <name>TYPE_ABSTRACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>not_structured</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_FUNC</name> <operator>||</operator>

<operator>(</operator><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_TYPEDEF</name> <operator>|</operator> <name>VT_STATIC</name> <operator>|</operator> <name>VT_EXTERN</name> <operator>|</operator> <name>VT_INLINE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"invalid type for '%s'"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>expr_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"negative width in bit-field '%s'"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <name>bit_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"zero width for bit-field '%s'"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>.</operator><name>aligned</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&lt;</operator> <name><name>ad</name><operator>.</operator><name>aligned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>ad</name><operator>.</operator><name>aligned</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ad</name><operator>.</operator><name>packed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>align</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>tcc_state</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&gt;</operator> <operator>*</operator><name><name>tcc_state</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>align</name> <operator>=</operator> <operator>*</operator><name><name>tcc_state</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lbit_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bt</name> <operator>!=</operator> <name>VT_INT8</name> <operator>&amp;&amp;</operator>

<name>bt</name> <operator>!=</operator> <name>VT_INT16</name> <operator>&amp;&amp;</operator>

<name>bt</name> <operator>!=</operator> <name>VT_INT32</name> <operator>&amp;&amp;</operator>

<name>bt</name> <operator>!=</operator> <name>VT_INT64</name> <operator>&amp;&amp;</operator>

<name>bt</name> <operator>!=</operator> <name>VT_ENUM</name> <operator>&amp;&amp;</operator>

<name>bt</name> <operator>!=</operator> <name>VT_BOOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"bitfields must have scalar type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name>size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_size</name> <operator>&gt;</operator> <name>bsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"width of '%s' exceeds its type"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bit_size</name> <operator>==</operator> <name>bsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bit_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bit_pos</name> <operator>+</operator> <name>bit_size</name><operator>)</operator> <operator>&gt;</operator> <name>bsize</name> <operator>||</operator>

<name>bt</name> <operator>!=</operator> <name>prevbt</name> <operator>||</operator> <name>a</name> <operator>==</operator> <name>TOK_UNION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lbit_pos</name> <operator>=</operator> <name>bit_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_BITFIELD</name> <operator>|</operator>

<operator>(</operator><name>bit_pos</name> <operator>&lt;&lt;</operator> <name>VT_STRUCT_SHIFT</name><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>bit_size</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>VT_STRUCT_SHIFT</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_pos</name> <operator>+=</operator> <name>bit_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prevbt</name> <operator>=</operator> <name>bt</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>is_structured</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lbit_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>TOK_STRUCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator> <name>align</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&gt;</operator> <name>maxalign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxalign</name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>varstr</name> <init>= <expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>type_to_str</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type_bt</name> <init>= <expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"[+]%s.%s=%s\n"</literal></expr></argument>,

<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%s.meta=%d\n"</literal></expr></argument>,

<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>, <argument><expr><name>type_bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%s=%s,%d,%d\n"</literal></expr></argument>,

<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>arraysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

eprintf ("%s.%s.%s.type=%s\n", ctype, name, varstr, b);

eprintf ("%s.%s.%s.offset=%d\n", ctype, name, varstr, offset);

eprintf ("%s.%s.%s.array=%d\n", ctype, name, varstr, arraysize);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arraysize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BITFIELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%s.bitfield.pos=%d\n"</literal></expr></argument>,

<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>, <argument><expr><operator>(</operator><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&gt;&gt;</operator> <name>VT_STRUCT_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s.%s.bitfield.size=%d\n"</literal></expr></argument>,

<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>varstr</name></expr></argument>, <argument><expr><operator>(</operator><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>VT_STRUCT_SHIFT</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_structured</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ass</name> <operator>=</operator> <name><name>type1</name><operator>.</operator><name>ref</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ass</name> <operator>=</operator> <name><name>ass</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name><name>ass</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ass</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name><name>ass</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>v</name> <operator>|</operator> <name>SYM_FIELD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_EOF</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <name>maxalign</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator> <name>maxalign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>maxalign</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_btype</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>type_found</name></decl>, <decl><type ref="prev"/><name>typespec_found</name></decl>, <decl><type ref="prev"/><name>typedef_found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttributeDef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>typespec_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>typedef_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_EXTENSION</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><name>TOK_UINT8</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

<case>case <expr><name>TOK_INT8</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_INT8</name></expr>;</expr_stmt>

<goto>goto <name>basic_type</name>;</goto>

<case>case <expr><name>TOK_CHAR</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_INT8</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_CHAR</name></expr>;</expr_stmt>

<label><name>basic_type</name>:</label>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>basic_type1</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"too many basic types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>typespec_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_VOID</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_VOID</name></expr>;</expr_stmt>

<goto>goto <name>basic_type</name>;</goto>

<case>case <expr><name>TOK_UINT16</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

<case>case <expr><name>TOK_INT16</name></expr>:</case>

<case>case <expr><name>TOK_SHORT</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_INT16</name></expr>;</expr_stmt>

<goto>goto <name>basic_type</name>;</goto>

<case>case <expr><name>TOK_UINT32</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

<case>case <expr><name>TOK_INT32</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>

<goto>goto <name>basic_type</name>;</goto>

<case>case <expr><name>TOK_INT</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>typespec_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_UINT64</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

<case>case <expr><name>TOK_INT64</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_INT64</name></expr>;</expr_stmt>

<goto>goto <name>basic_type</name>;</goto>

<case>case <expr><name>TOK_LONG</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_DOUBLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BTYPE</name><operator>)</operator> <operator>|</operator> <name>VT_LDOUBLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BTYPE</name><operator>)</operator> <operator>|</operator> <name>VT_INT64</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_LONG</name></expr>;</expr_stmt>

<goto>goto <name>basic_type1</name>;</goto>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_BOOL</name></expr>:</case>

<case>case <expr><name>TOK_STDBOOL</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_BOOL</name></expr>;</expr_stmt>

<goto>goto <name>basic_type</name>;</goto>

<case>case <expr><name>TOK_FLOAT</name></expr>:</case>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_FLOAT</name></expr>;</expr_stmt>

<goto>goto <name>basic_type</name>;</goto>

<case>case <expr><name>TOK_DOUBLE</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_LONG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BTYPE</name><operator>)</operator> <operator>|</operator> <name>VT_DOUBLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BTYPE</name><operator>)</operator> <operator>|</operator> <name>VT_LDOUBLE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>VT_DOUBLE</name></expr>;</expr_stmt>

<goto>goto <name>basic_type1</name>;</goto>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_ENUM</name></expr>:</case>

<expr_stmt><expr><call><name>struct_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><name>VT_ENUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>basic_type2</name>:</label>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>type1</name><operator>.</operator><name>t</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name><name>type1</name><operator>.</operator><name>ref</name></name></expr>;</expr_stmt>

<goto>goto <name>basic_type1</name>;</goto>

<case>case <expr><name>TOK_STRUCT</name></expr>:</case>

<expr_stmt><expr><call><name>struct_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><name>VT_STRUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>basic_type2</name>;</goto>

<case>case <expr><name>TOK_UNION</name></expr>:</case>

<expr_stmt><expr><call><name>struct_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><name>VT_UNION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>basic_type2</name>;</goto>

<case>case <expr><name>TOK_CONST1</name></expr>:</case>

<case>case <expr><name>TOK_CONST2</name></expr>:</case>

<case>case <expr><name>TOK_CONST3</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_CONSTANT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_VOLATILE1</name></expr>:</case>

<case>case <expr><name>TOK_VOLATILE2</name></expr>:</case>

<case>case <expr><name>TOK_VOLATILE3</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_VOLATILE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_SIGNED1</name></expr>:</case>

<case>case <expr><name>TOK_SIGNED2</name></expr>:</case>

<case>case <expr><name>TOK_SIGNED3</name></expr>:</case>

<expr_stmt><expr><name>typespec_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_SIGNED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_REGISTER</name></expr>:</case>

<case>case <expr><name>TOK_AUTO</name></expr>:</case>

<case>case <expr><name>TOK_RESTRICT1</name></expr>:</case>

<case>case <expr><name>TOK_RESTRICT2</name></expr>:</case>

<case>case <expr><name>TOK_RESTRICT3</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_UNSIGNED</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>typespec_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_EXTERN</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_EXTERN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_STATIC</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_STATIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_TYPEDEF</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_TYPEDEF</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_INLINE1</name></expr>:</case>

<case>case <expr><name>TOK_INLINE2</name></expr>:</case>

<case>case <expr><name>TOK_INLINE3</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_INLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_ATTRIBUTE1</name></expr>:</case>

<case>case <expr><name>TOK_ATTRIBUTE2</name></expr>:</case>

<expr_stmt><expr><call><name>parse_attribute</name> <argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>ad</name><operator>-&gt;</operator><name>mode</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BTYPE</name><operator>)</operator> <operator>|</operator> <name>u</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_TYPEOF1</name></expr>:</case>

<case>case <expr><name>TOK_TYPEOF2</name></expr>:</case>

<case>case <expr><name>TOK_TYPEOF3</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_expr_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VT_STORAGE</name> <operator>&amp;</operator> <operator>~</operator><name>VT_TYPEDEF</name><operator>)</operator></expr>;</expr_stmt>

<goto>goto <name>basic_type2</name>;</goto>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>typespec_found</name> <operator>||</operator> <name>typedef_found</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_find</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_TYPEDEF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>typedef_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <operator>~</operator><name>VT_TYPEDEF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>ad</name><operator>-&gt;</operator><name>aligned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>aligned</name></name> <operator>=</operator> <call><name>FUNC_ALIGN</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>ad</name><operator>-&gt;</operator><name>func_call</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_call</name></name> <operator>=</operator> <call><name>FUNC_CALL</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>packed</name></name> <operator>|=</operator> <call><name>FUNC_PACKED</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>typespec_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>type_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>the_end</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>(</operator><name>VT_SIGNED</name> <operator>|</operator> <name>VT_UNSIGNED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>VT_SIGNED</name> <operator>|</operator> <name>VT_UNSIGNED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"signed and unsigned modifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tcc_state</name><operator>-&gt;</operator><name>char_is_unsigned</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>(</operator><name>VT_SIGNED</name> <operator>|</operator> <name>VT_UNSIGNED</name> <operator>|</operator> <name>VT_BTYPE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>VT_INT8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>&amp;=</operator> <operator>~</operator><name>VT_SIGNED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_LONG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>tcc_state</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BTYPE</name><operator>)</operator> <operator>|</operator> <name>VT_INT32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BTYPE</name><operator>)</operator> <operator>|</operator> <name>VT_INT64</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return <expr><name>type_found</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>convert_parameter_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VT_CONSTANT</name> <operator>|</operator> <name>VT_VOLATILE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VT_ARRAY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mk_pointer</name> <argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>post_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>arg_size</name></decl>, <decl><type ref="prev"/><name>align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>plast</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>narg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>plast</name> <operator>=</operator> <operator>&amp;</operator><name>first</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret_type</name> <init>= <expr><name>global_type</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>global_symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.ret=%s\n"</literal></expr></argument>, <argument><expr><name>symname</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.cc=%s\n"</literal></expr></argument>, <argument><expr><name>symname</name></expr></argument>, <argument><expr><literal type="string">"cdecl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"%s=func\n"</literal></expr></argument>, <argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>arg_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>FUNC_OLD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_btype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"invalid type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>FUNC_OLD</name></expr>;</expr_stmt>

<goto>goto <name>old_proto</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>FUNC_NEW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_VOID</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>TYPE_DIRECT</name> <operator>|</operator> <name>TYPE_ABSTRACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_VOID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"parameter declared as void"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg_size</name> <operator>+=</operator> <operator>(</operator><call><name>type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>PTR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>PTR_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>old_proto</name>:</label>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>TOK_UIDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>convert_parameter_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>n</name> <operator>|</operator> <name>SYM_FIELD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>kind</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>type_to_str</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.arg.%d=%s,%s\n"</literal></expr></argument>,

<argument><expr><name>symname</name></expr></argument>, <argument><expr><name>narg</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>global_symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>narg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>plast</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>plast</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>FUNC_NEW</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>==</operator> <name>TOK_DOTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>FUNC_ELLIPSIS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.args=%d\n"</literal></expr></argument>, <argument><expr><name>symname</name></expr></argument>, <argument><expr><name>narg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>FUNC_OLD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VT_CONSTANT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>|=</operator> <name>VT_PTR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>func_args</name></name> <operator>=</operator> <name>arg_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>SYM_FIELD</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>INT_ATTR</name> <argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>VT_FUNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_RESTRICT1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_stack</name> <operator>||</operator> <name>nocode_wanted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vpushll</name> <argument_list>(<argument><expr><call><name>expr_const</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>gexpr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_VALMASK</name> <operator>|</operator> <name>VT_LVAL</name> <operator>|</operator> <name>VT_SYM</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>VT_CONST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>vtop</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"invalid array size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_integer_btype</name> <argument_list>(<argument><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"size of variable length array should be an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>VT_VLA</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>post_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arraysize</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (n &lt; 0) {

printf ("array with no size []\n");

} else {

printf ("PUSH SIZE %d\n", n);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>SYM_FIELD</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name></expr>?</condition><then> <expr><name>VT_VLA</name></expr></then><else>: <expr><name>VT_ARRAY</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>VT_PTR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>type_decl</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>td</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qualifiers</name></decl>, <decl><type ref="prev"/><name>storage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>type1</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>type2</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type1</name> <operator>||</operator> <operator>!</operator><name>type2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qualifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>redo</name>:</label>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_CONST1</name></expr>:</case>

<case>case <expr><name>TOK_CONST2</name></expr>:</case>

<case>case <expr><name>TOK_CONST3</name></expr>:</case>

<expr_stmt><expr><name>qualifiers</name> <operator>|=</operator> <name>VT_CONSTANT</name></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

<case>case <expr><name>TOK_VOLATILE1</name></expr>:</case>

<case>case <expr><name>TOK_VOLATILE2</name></expr>:</case>

<case>case <expr><name>TOK_VOLATILE3</name></expr>:</case>

<expr_stmt><expr><name>qualifiers</name> <operator>|=</operator> <name>VT_VOLATILE</name></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

<case>case <expr><name>TOK_RESTRICT1</name></expr>:</case>

<case>case <expr><name>TOK_RESTRICT2</name></expr>:</case>

<case>case <expr><name>TOK_RESTRICT3</name></expr>:</case>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>mk_pointer</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>|=</operator> <name>qualifiers</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE1</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_attribute</name> <argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>type1</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE1</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_attribute</name> <argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>&gt;=</operator> <name>TOK_IDENT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>td</name> <operator>&amp;</operator> <name>TYPE_DIRECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>td</name> <operator>&amp;</operator> <name>TYPE_ABSTRACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>storage</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_STORAGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VT_STORAGE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>storage</name> <operator>&amp;</operator> <name>VT_STATIC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved_nocode_wanted</name> <init>= <expr><name>nocode_wanted</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>post_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <name>saved_nocode_wanted</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>kind</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>type_to_str</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>global_symname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>global_type</name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>post_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>|=</operator> <name>storage</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE1</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ATTRIBUTE2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_attribute</name> <argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>type1</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type2</name> <operator>=</operator> <name>type1</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type2</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>type2</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>type2</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type2</name> <operator>=</operator> <operator>*</operator><name>type</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>lvalue_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bt</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>VT_LVAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>VT_BTYPE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_INT8</name> <operator>||</operator> <name>bt</name> <operator>==</operator> <name>VT_BOOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>VT_LVAL_BYTE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bt</name> <operator>==</operator> <name>VT_INT16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>VT_LVAL_SHORT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>VT_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>VT_LVAL_UNSIGNED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>indir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>!=</operator> <name>VT_PTR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>*</operator><call><name>pointed_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_VLA</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>!=</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>|=</operator> <call><name>lvalue_type</name> <argument_list>(<argument><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_BCHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tcc_state</name><operator>-&gt;</operator><name>do_bounds_check</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>|=</operator> <name>VT_MUSTBOUND</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_expr_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_btype</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>TYPE_ABSTRACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>expr_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_btype</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>TYPE_ABSTRACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vpush_tokc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CType</name></type> <name>type</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>unary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>align</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>sizeof_caller</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name></type> <name>type</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_sizeof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sizeof_caller</name> <operator>=</operator> <name>in_sizeof</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_sizeof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>tok_next</name>:</label>

<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_EXTENSION</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>tok_next</name>;</goto>

<case>case <expr><name>TOK_CINT</name></expr>:</case>

<case>case <expr><name>TOK_CCHAR</name></expr>:</case>

<case>case <expr><name>TOK_LCHAR</name></expr>:</case>

<expr_stmt><expr><call><name>vpushi</name> <argument_list>(<argument><expr><name><name>tokc</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CUINT</name></expr>:</case>

<expr_stmt><expr><call><name>vpush_tokc</name> <argument_list>(<argument><expr><name>VT_INT32</name> <operator>|</operator> <name>VT_UNSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CLLONG</name></expr>:</case>

<expr_stmt><expr><call><name>vpush_tokc</name> <argument_list>(<argument><expr><name>VT_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CULLONG</name></expr>:</case>

<expr_stmt><expr><call><name>vpush_tokc</name> <argument_list>(<argument><expr><name>VT_INT64</name> <operator>|</operator> <name>VT_UNSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CFLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>vpush_tokc</name> <argument_list>(<argument><expr><name>VT_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CDOUBLE</name></expr>:</case>

<expr_stmt><expr><call><name>vpush_tokc</name> <argument_list>(<argument><expr><name>VT_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CLDOUBLE</name></expr>:</case>

<expr_stmt><expr><call><name>vpush_tokc</name> <argument_list>(<argument><expr><name>VT_LDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK___FUNCTION__</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gnu_ext</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>tok_identifier</name>;</goto>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>TOK___FUNC__</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mk_pointer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_ARRAY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>.</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TOK_LSTR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VT_INT16</name> <operator>|</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>str_init</name>;</goto>

<case>case <expr><name>TOK_STR</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VT_INT8</name></expr>;</expr_stmt>

<label><name>str_init</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>tcc_state</name><operator>-&gt;</operator><name>warn_write_strings</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <name>VT_CONSTANT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mk_pointer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_ARRAY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttributeDef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_initializer_alloc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><name>VT_CONST</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_btype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>TYPE_ABSTRACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>global_expr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>VT_CONST</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>VT_LOCAL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <call><name>lvalue_type</name> <argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttributeDef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_initializer_alloc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sizeof_caller</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vpush</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unary</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>gexpr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unary</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indir</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unary</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <name>VT_VALMASK</name><operator>)</operator> <operator>==</operator> <name>VT_CMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>vtop</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>i</name></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_SIZEOF</name></expr>:</case>

<case>case <expr><name>TOK_ALIGNOF1</name></expr>:</case>

<case>case <expr><name>TOK_ALIGNOF2</name></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_sizeof</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unary_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>TOK_SIZEOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_VLA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"sizeof applied to an incomplete type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vpushs</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vpushs</name> <argument_list>(<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_UNSIGNED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_builtin_types_compatible_p</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>STACK_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STACK_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VT_CONSTANT</name> <operator>|</operator> <name>VT_VOLATILE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type2</name><operator>.</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VT_CONSTANT</name> <operator>|</operator> <name>VT_VOLATILE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vpushi</name> <argument_list>(<argument><expr><call><name>is_compatible_types</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TOK_builtin_constant_p</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved_nocode_wanted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_nocode_wanted</name> <operator>=</operator> <name>nocode_wanted</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gexpr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_VALMASK</name> <operator>|</operator> <name>VT_LVAL</name> <operator>|</operator> <name>VT_SYM</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>VT_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <name>saved_nocode_wanted</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vpushll</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TOK_builtin_frame_address</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name></type> <name>type</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_CINT</name> <operator>||</operator> <name><name>tokc</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"__builtin_frame_address only takes positive integers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>tokc</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_VOID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mk_pointer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>VT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>level</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mk_pointer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indir</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></while>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TOK_builtin_va_start</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>tcc_state</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_eq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_eq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <name>VT_VALMASK</name><operator>)</operator> <operator>!=</operator> <name>VT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"__builtin_va_start expects a local variable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VT_LVAL</name> <operator>|</operator> <name>VT_REF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>char_pointer_type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_builtin_va_arg_types</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>tcc_state</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>tcc_state</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CType</name></type> <name>type</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK___NAN__</name></expr>:</case>

<expr_stmt><expr><call><name>vpush64</name> <argument_list>(<argument><expr><name>VT_DOUBLE</name></expr></argument>, <argument><expr><literal type="number">0x7ff8000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK___SNAN__</name></expr>:</case>

<expr_stmt><expr><call><name>vpush64</name> <argument_list>(<argument><expr><name>VT_DOUBLE</name></expr></argument>, <argument><expr><literal type="number">0x7ff0000000000001ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK___INF__</name></expr>:</case>

<expr_stmt><expr><call><name>vpush64</name> <argument_list>(<argument><expr><name>VT_DOUBLE</name></expr></argument>, <argument><expr><literal type="number">0x7ff0000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<label><name>tok_identifier</name>:</label>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>TOK_UIDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_find</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"'%s' undeclared"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"invalid declaration '%s'"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_STATIC</name> <operator>|</operator> <name>VT_INLINE</name> <operator>|</operator> <name>VT_BTYPE</name><operator>)</operator><operator>)</operator> <operator>==</operator>

<operator>(</operator><name>VT_STATIC</name> <operator>|</operator> <name>VT_INLINE</name> <operator>|</operator> <name>VT_FUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>VT_SYM</name> <operator>|</operator> <name>VT_CONST</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <name>VT_SYM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>sym</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>ul</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ARROW</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qualifiers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ARROW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indir</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qualifiers</name> <operator>=</operator> <name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_CONSTANT</name> <operator>|</operator> <name>VT_VOLATILE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_lvalue</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gaddrof</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>not_structured</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"struct or union"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>|=</operator> <name>SYM_FIELD</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name> <operator>==</operator> <name>tok</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"field not found: %s"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name> <operator>&amp;</operator> <operator>~</operator><name>SYM_FIELD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>char_pointer_type</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vpushi</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>qualifiers</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>|=</operator> <call><name>lvalue_type</name> <argument_list>(<argument><expr><name><name>vtop</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_TCC_BCHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tcc_state</name><operator>-&gt;</operator><name>do_bounds_check</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>|=</operator> <name>VT_MUSTBOUND</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gexpr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indir</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>expr_prod</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unary</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>tok</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>tok</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unary</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>expr_sum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_prod</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>tok</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_prod</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_shift</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_sum</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_SHL</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_SAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_sum</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_cmp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_shift</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tok</name> <operator>&gt;=</operator> <name>TOK_ULE</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>&lt;=</operator> <name>TOK_GT</name><operator>)</operator> <operator>||</operator>

<name>tok</name> <operator>==</operator> <name>TOK_ULT</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_UGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_shift</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_cmpeq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_cmp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_EQ</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_NE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_cmp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_and</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_cmpeq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_cmpeq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_xor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_and</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_and</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_or</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_xor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_xor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_land_const</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_or</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_or</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_lor_const</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_land_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_land_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_land</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_or</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LAND</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LAND</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_or</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_lor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>expr_land</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LOR</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LOR</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_land</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_cond</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>const_wanted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expr_lor_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vdup</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>!</operator><name>gnu_ext</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gexpr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_cond</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>expr_lor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_eq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>expr_cond</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator>

<operator>(</operator><name>tok</name> <operator>&gt;=</operator> <name>TOK_A_MOD</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>&lt;=</operator> <name>TOK_A_DIV</name><operator>)</operator> <operator>||</operator>

<name>tok</name> <operator>==</operator> <name>TOK_A_XOR</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_A_OR</name> <operator>||</operator>

<name>tok</name> <operator>==</operator> <name>TOK_A_SHL</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_A_SAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>test_lvalue</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expr_eq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vdup</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_eq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>gexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expr_eq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved_nocode_wanted</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_nocode_wanted</name> <operator>=</operator> <name>nocode_wanted</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gexpr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>vtop</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <name>saved_nocode_wanted</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unary_type</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>nocode_wanted</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unary</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>vtop</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nocode_wanted</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expr_const1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>const_wanted</name></expr>;</expr_stmt>

<expr_stmt><expr><name>const_wanted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_cond</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>const_wanted</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>long</name> <name>long</name></type> <name>expr_const</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>expr_const1</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_VALMASK</name> <operator>|</operator> <name>VT_LVAL</name> <operator>|</operator> <name>VT_SYM</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>VT_CONST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"constant expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>vtop</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>ll</name></name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_label</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_tok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>&lt;</operator> <name>TOK_UIDENT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_tok</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>last_tok</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>unget_tok</name> <argument_list>(<argument><expr><name>last_tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decl_designator</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>cur_index</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur_field</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>index_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>notfirst</name></decl>, <decl><type ref="prev"/><name>align</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>nb_elems</name></decl>, <decl><type ref="prev"/><name>elem_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>notfirst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gnu_ext</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call><name>is_label</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>struct_field</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <name>tok</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"array type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>expr_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"invalid index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_DOTS</name> <operator>&amp;&amp;</operator> <name>gnu_ext</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index_last</name> <operator>=</operator> <call><name>expr_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index_last</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index_last</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator> <operator>||</operator>

<name>index_last</name> <operator>&lt;</operator> <name>index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"invalid index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>index_last</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notfirst</name> <operator>&amp;&amp;</operator> <name>cur_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cur_index</name> <operator>=</operator> <name>index_last</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>pointed_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>elem_size</name> <operator>=</operator> <call><name>type_size</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>index</name> <operator>*</operator> <name>elem_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_elems</name> <operator>=</operator> <name>index_last</name> <operator>-</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_elems</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>notfirst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>struct_field</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>not_structured</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"struct/union type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>|=</operator> <name>SYM_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>v</name></name> <operator>==</operator> <name>l</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notfirst</name> <operator>&amp;&amp;</operator> <name>cur_field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cur_field</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type1</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <operator>~</operator><name>VT_TYPE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>&amp;</operator><name>type1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>notfirst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>notfirst</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gnu_ext</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <ternary><condition><expr><name>cur_index</name></expr> ?</condition><then> <expr><operator>*</operator><name>cur_index</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>pointed_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>index</name> <operator>*</operator> <call><name>type_size</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <ternary><condition><expr><name>cur_field</name></expr> ?</condition><then> <expr><operator>*</operator><name>cur_field</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"too many field init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type1</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type1</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <operator>~</operator><name>VT_TYPE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>&amp;</operator><name>type1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>decl_initializer</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPR_VAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPR_CONST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPR_ANY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_putv</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expr_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved_global_expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name></type> <name>dtype</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>expr_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXPR_VAL</name></expr>:</case>

<expr_stmt><expr><call><name>vpushll</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXPR_CONST</name></expr>:</case>

<expr_stmt><expr><name>saved_global_expr</name> <operator>=</operator> <name>global_expr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>global_expr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expr_const1</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>global_expr</name> <operator>=</operator> <name>saved_global_expr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vtop</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_VALMASK</name> <operator>|</operator> <name>VT_LVAL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>VT_CONST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"initializer element is not constant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EXPR_ANY</name></expr>:</case>

<expr_stmt><expr><call><name>expr_eq</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>dtype</name> <operator>=</operator> <operator>*</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtype</name><operator>.</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VT_CONSTANT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><name>VT_LOCAL</name> <operator>|</operator> <name>VT_LVAL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vswap</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_putz</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>vseti</name> <argument_list>(<argument><expr><name>VT_LOCAL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vpushi</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vpushs</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decl_initializer</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_only</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>array_length</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>no_oblock</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>parlevel</name></decl>, <decl><type ref="prev"/><name>parlevel1</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size1</name></decl>, <decl><type ref="prev"/><name>align1</name></decl>, <decl><type ref="prev"/><name>expr_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>t1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>array_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>pointed_type</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size1</name> <operator>=</operator> <call><name>type_size</name> <argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>no_oblock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>first</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>TOK_LSTR</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>TOK_STR</name><operator>)</operator> <operator>||</operator>

<name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"character array initializer must be a literal,"</literal>

<literal type="string">" optionally enclosed in braces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>no_oblock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tok</name> <operator>==</operator> <name>TOK_LSTR</name> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_INT16</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_UNSIGNED</name><operator>)</operator>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_INT32</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator> <operator>||</operator> <operator>(</operator><name>tok</name> <operator>==</operator> <name>TOK_STR</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_INT8</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>tcc_nerr</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>tok</name> <operator>==</operator> <name>TOK_STR</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_LSTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cstr_len</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cstr</name> <operator>=</operator> <name><name>tokc</name><operator>.</operator><name>cstr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cstr_len</name> <operator>=</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cstr_len</name> <operator>=</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nwchar_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cstr_len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <name>cstr_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb</name> <operator>&gt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>array_length</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>array_length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_only</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cstr_len</name> <operator>&gt;</operator> <name>nb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"initializer-string for array is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>nwchar_t</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init_putv</name> <argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <operator>(</operator><name>array_length</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>size1</name></expr></argument>,

<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>EXPR_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>array_length</name> <operator>+=</operator> <name>nb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>array_length</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_only</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_putv</name> <argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <operator>(</operator><name>array_length</name> <operator>*</operator> <name>size1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPR_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>array_length</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decl_designator</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"index too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_only</name> <operator>&amp;&amp;</operator> <name>array_length</name> <operator>&lt;</operator> <name>index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_putz</name> <argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>array_length</name> <operator>*</operator> <name>size1</name></expr></argument>,

<argument><expr><operator>(</operator><name>index</name> <operator>-</operator> <name>array_length</name><operator>)</operator> <operator>*</operator> <name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>array_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>array_length</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>no_oblock</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_oblock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_only</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>array_length</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_putz</name> <argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>array_length</name> <operator>*</operator> <name>size1</name></expr></argument>,

<argument><expr><operator>(</operator><name>n</name> <operator>-</operator> <name>array_length</name><operator>)</operator> <operator>*</operator> <name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>array_length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_structured</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>first</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <literal type="char">'{'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>par_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>par_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_NEW0</name> <argument_list>(<argument><expr><name>CType</name></expr></argument>, <argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>par_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_btype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"cast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>TYPE_ABSTRACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (!is_assignable_types (type, &amp;type1)) {

tcc_error ("invalid type for cast");

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>no_oblock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>no_oblock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>array_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decl_designator</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>size_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_only</name> <operator>&amp;&amp;</operator> <name>array_length</name> <operator>&lt;</operator> <name>index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_putz</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>array_length</name></expr></argument>,

<argument><expr><name>index</name> <operator>-</operator> <name>array_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>+</operator> <call><name>type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>array_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>array_length</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BITFIELD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BITFIELD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit_pos_1</name> <init>= <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&gt;&gt;</operator> <name>VT_STRUCT_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_pos_2</name> <init>= <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&gt;&gt;</operator> <name>VT_STRUCT_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_pos_1</name> <operator>!=</operator> <name>bit_pos_2</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>no_oblock</name> <operator>&amp;&amp;</operator> <name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_only</name> <operator>&amp;&amp;</operator> <name>array_length</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_putz</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>array_length</name></expr></argument>,

<argument><expr><name>n</name> <operator>-</operator> <name>array_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_oblock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>par_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>par_count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_initializer</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>size_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size_only</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parlevel</name> <operator>=</operator> <name>parlevel1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>parlevel</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>parlevel1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>tok</name> <operator>!=</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parlevel</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parlevel</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parlevel1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parlevel1</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>expr_type</name> <operator>=</operator> <name>EXPR_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_putv</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>expr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decl_initializer_alloc</name><parameter_list>(<parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AttributeDef</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_init</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>align</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParseState</name></type> <name>saved_parse_state</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenString</name></type> <name>init_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>flexible_array</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flexible_array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_struct</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>

<expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>field</name> <operator>&amp;&amp;</operator> <name><name>field</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>field</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flexible_array</name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>type_size</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>init_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flexible_array</name> <operator>&amp;&amp;</operator> <name>has_init</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"unknown type size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_init</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_STR</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_LSTR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add_tok</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>init_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>tok</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <literal type="char">';'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"unexpected end of file in initializer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add_tok</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>init_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>init_str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>init_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_parse_state</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>saved_parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name><name>init_str</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_initializer</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name><name>init_str</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>type_size</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"unknown type size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flexible_array</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>flexible_array</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>c</name></name> <operator>*</operator> <call><name>pointed_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>flexible_array</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>aligned</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>aligned</name></name> <operator>&gt;</operator> <name>align</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>ad</name><operator>-&gt;</operator><name>aligned</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>packed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>align</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <name>VT_VALMASK</name><operator>)</operator> <operator>==</operator> <name>VT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>(</operator><name>loc</name> <operator>-</operator> <name>size</name><operator>)</operator> <operator>&amp;</operator> <operator>-</operator> <name>align</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sym_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vset</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <name>scope</name> <operator>==</operator> <name>VT_CONST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>sym_find</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_compatible_types</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sym</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"incompatible types for redefinition of '%s'"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_EXTERN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VT_EXTERN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_init</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>no_alloc</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>scope</name> <operator>!=</operator> <name>VT_CONST</name> <operator>||</operator> <operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>r</name> <operator>|</operator> <name>VT_SYM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>asm_label</name></name> <operator>=</operator> <name>asm_label</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsetc</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>VT_CONST</name> <operator>|</operator> <name>VT_SYM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtop</name><operator>-&gt;</operator><name>sym</name></name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_WEAK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>sym</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>weaken_symbol</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>no_alloc</name>:</label>

<empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>func_decl_list</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>func_sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name></type> <name>btype</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>TOK_EOF</name> <operator>&amp;&amp;</operator>

<name>tok</name> <operator>!=</operator> <name>TOK_ASM1</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>TOK_ASM2</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>TOK_ASM3</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_btype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"declaration list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>is_enum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_structured</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>tok</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>btype</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>func_sym</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>v</name></name> <operator>&amp;</operator> <operator>~</operator><name>SYM_FIELD</name><operator>)</operator> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"declaration for parameter '%s' but no such parameter"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_STORAGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TCC_ERR</name> <argument_list>(<argument><expr><literal type="string">"storage class specified for '%s'"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>convert_parameter_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decl0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_for_loop_init</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>has_init</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CType</name></type> <name>type</name> <init>= <expr><block>{<expr><operator>.</operator><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>ref</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>btype</name> <init>= <expr><block>{<expr><operator>.</operator><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>ref</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AttributeDef</name></type> <name>ad</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_btype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_for_loop_init</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>VT_CONST</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>tok</name> <operator>==</operator> <name>TOK_ASM1</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ASM2</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ASM3</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"global asm not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>VT_LOCAL</name> <operator>||</operator> <name>tok</name> <operator>&lt;</operator> <name>TOK_DEFINE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>btype</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>VT_INT32</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>is_enum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_structured</name><argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>tok</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>btype</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>type_decl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{

char buf[500];

type_to_str (buf, sizeof(buf), t, get_tok_str (v, NULL));

printf ("type = '%s'\n", buf);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_STATIC</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>==</operator> <name>VT_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"function without file scope cannot be static"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>type</name><operator>.</operator><name>ref</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>FUNC_OLD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>func_decl_list</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>.</operator><name>weak</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_WEAK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>.</operator><name>func_import</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_IMPORT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>.</operator><name>func_export</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_EXPORT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>VT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"cannot use local functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>!=</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"function definition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>type</name><operator>.</operator><name>ref</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>sym</name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sym</name><operator>-&gt;</operator><name>v</name></name> <operator>&amp;</operator> <operator>~</operator><name>SYM_FIELD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <operator>(</operator><name>VT_EXTERN</name> <operator>|</operator> <name>VT_INLINE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>VT_EXTERN</name> <operator>|</operator> <name>VT_INLINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <operator>~</operator><name>VT_EXTERN</name><operator>)</operator> <operator>|</operator> <name>VT_STATIC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>sym_find</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>!=</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>func_error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FUNC_CALL</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FUNC_CDECL</name>

<operator>&amp;&amp;</operator> <call><name>FUNC_CALL</name> <argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FUNC_CDECL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FUNC_CALL</name> <argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>FUNC_CALL</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FUNC_EXPORT</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FUNC_EXPORT</name> <argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_STATIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>t</name></name> <operator>=</operator> <operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <operator>~</operator><name>VT_EXTERN</name><operator>)</operator> <operator>|</operator> <name>VT_STATIC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_compatible_types</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sym</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>func_error1</name>:</label>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"incompatible types for redefinition of '%s'"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>global_identifier_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>type</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name><name>type</name><operator>.</operator><name>ref</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>btype</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_TYPEDEF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>sym_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><call><name>INT_ATTR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>|=</operator> <name>VT_TYPEDEF</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>get_tok_str</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>type_to_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sym</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name><argument_list>(<argument><expr><literal type="string">"%s=typedef\n"</literal></expr></argument>,<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_appendf</name><argument_list>(<argument><expr><literal type="string">"typedef.%s=%s\n"</literal></expr></argument>,<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_BTYPE</name><operator>)</operator> <operator>==</operator> <name>VT_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>INT_ATTR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <call><name>lvalue_type</name> <argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>has_init</name> <operator>=</operator> <operator>(</operator><name>tok</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_init</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;</operator> <name>VT_VLA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"Variable length array cannot be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_for_loop_init</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>.</operator><name>aligned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>decl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>decl0</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
