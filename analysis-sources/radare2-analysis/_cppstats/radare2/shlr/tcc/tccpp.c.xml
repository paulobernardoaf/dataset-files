<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\tcc\tccpp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>tok_flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_BOL</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_BOF</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_ENDIF</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_FLAG_EOF</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>parse_flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_PREPROCESS</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_TOK_NUM</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_LINEFEED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_ASM_COMMENTS</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FLAG_SPACES</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>ST_DATA</name> <name><name>struct</name> <name>BufferedFile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>tok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>CValue</name></type> <name>tokc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>CString</name></type> <name>tokcstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>total_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>total_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>int</name></type> <name>tok_ident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ST_DATA</name> <name>TokenSym</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_ident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_ptr_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>unget_saved_macro_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>unget_saved_buffer</name><index>[<expr><name>TOK_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>unget_buffer_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TokenSym</name> <modifier>*</modifier></type><name><name>hash_ident</name><index>[<expr><name>TOK_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>token_buf</name><index>[<expr><name>STRING_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>isidnum_table</name><index>[<expr><literal type="number">256</literal> <operator>-</operator> <name>CH_EOF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>tcc_keywords</name><index>[]</index></name> <init>=</init></decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str "\0"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcctok.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEF</name></cpp:undef>

;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tok_two_chars</name><index>[]</index></name> <init>=

<expr><literal type="string">"&lt;=\236&gt;=\235!=\225&amp;&amp;\240||\241++\244--\242==\224&lt;&lt;\1&gt;&gt;\2+=\253"</literal>

<literal type="string">"-=\255*=\252/=\257%=\245&amp;=\246^=\336|=\374-&gt;\313..\250##\266"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>macro_level</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>macro_level</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>next_nomacro_spc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>macro_subst</name><parameter_list>(

<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>tok_str</name></decl></parameter>,

<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>nested_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_str</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>macro_level</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>can_read_stream</name></decl></parameter>

)</parameter_list>;</function_decl>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"'%c' expected (got \"%s\")"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>expect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"%s expected"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cstr_realloc</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size_allocated</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>new_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>cstr</name><operator>-&gt;</operator><name>data_allocated</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>-&gt;</operator><name>data_allocated</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>-&gt;</operator><name>size_allocated</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_ccat</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size_allocated</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_realloc</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_cat</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_wccat</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nwchar_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size_allocated</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_realloc</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>nwchar_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nwchar_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_new</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_free</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cstr</name><operator>-&gt;</operator><name>data_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_new</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>cstr_reset</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_char</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">126</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TokenSym</name> <modifier>*</modifier></type><name>tok_alloc_new</name><parameter_list>(<parameter><decl><type><name>TokenSym</name> <modifier>*</modifier><modifier>*</modifier></type><name>pts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TokenSym</name> <modifier>*</modifier></type><name>ts</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ptable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tok_ident</name> <operator>&gt;=</operator> <name>SYM_FIRST_ANOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"memory full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>tok_ident</name> <operator>-</operator> <name>TOK_IDENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>%</operator> <name>TOK_ALLOC_INCR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptable</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>table_ident</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>TOK_ALLOC_INCR</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TokenSym</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>table_ident</name> <operator>=</operator> <name>ptable</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TokenSym</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table_ident</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tok</name></name> <operator>=</operator> <name>tok_ident</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>sym_define</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>sym_label</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>sym_struct</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>sym_identifier</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>hash_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pts</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<return>return <expr><name>ts</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_HASH_INIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_HASH_FUNC</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h) * 263 + (c))</cpp:value></cpp:define>

<function><type><name>ST_FUNC</name> <name>TokenSym</name> <modifier>*</modifier></type><name>tok_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TokenSym</name> <modifier>*</modifier></type><name>ts</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>TOK_HASH_INIT</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>TOK_HASH_FUNC</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>h</name> <operator>&amp;=</operator> <operator>(</operator><name>TOK_HASH_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash_ident</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>*</operator><name>pts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ts</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ts</name><operator>-&gt;</operator><name>hash_next</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>tok_alloc_new</name> <argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>get_tok_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>CValue</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><name>STRING_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CString</name></type> <name>cstr_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CString</name> <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cstr_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr_buf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr_buf</name><operator>.</operator><name>size_allocated</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_CINT</name></expr>:</case>

<case>case <expr><name>TOK_CUINT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>cv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>cv</name><operator>-&gt;</operator><name>ui</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CLLONG</name></expr>:</case>

<case>case <expr><name>TOK_CULLONG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>cv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><name><name>cv</name><operator>-&gt;</operator><name>ull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_LCHAR</name></expr>:</case>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>TOK_CCHAR</name></expr>:</case>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><name><name>cv</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_PPNUM</name></expr>:</case>

<expr_stmt><expr><name>cstr</name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>cstr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>add_char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_LSTR</name></expr>:</case>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>TOK_STR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>cv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cstr</name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>cstr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'\"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>add_char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nwchar_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>add_char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>nwchar_t</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'\"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr_buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"cv = nil\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_LT</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>

<goto>goto <name>addv</name>;</goto>

<case>case <expr><name>TOK_GT</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

<goto>goto <name>addv</name>;</goto>

<case>case <expr><name>TOK_DOTS</name></expr>:</case>

<return>return <expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>TOK_A_SHL</name></expr>:</case>

<return>return <expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;="</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>TOK_A_SAR</name></expr>:</case>

<return>return <expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;="</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>tok_two_chars</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>addv</name>:</label>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>tok_ident</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>table_ident</name><index>[<expr><name>v</name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>SYM_FIRST_ANOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>v</name> <operator>-</operator> <name>SYM_FIRST_ANOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>cstr_buf</name><operator>.</operator><name>data</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tcc_peekc_slow</name><parameter_list>(<parameter><decl><type><name>BufferedFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name><name>bf</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARSE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>IO_BUF_SIZE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>total_bytes</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>bf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name>CH_EOB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&lt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bf</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>buf_end</name></name></expr>;</expr_stmt>

<return>return <expr><name>CH_EOF</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>handle_eob</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>tcc_peekc_slow</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>void</name></type> <name>inp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CH_EOB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_stray_noerror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>fail</name>:</label>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_stray</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>handle_stray_noerror</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"stray '\\' in program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_stray1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>parse_stray</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>parse_stray</name>:</label>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_stray</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEKC_EOB</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ p++; c = *p; if (c == '\\') { file-&gt;buf_ptr = p;c = handle_eob ();p = file-&gt;buf_ptr;} }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEKC</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ p++; c = *p; if (c == '\\') { c = handle_stray1 (p);p = file-&gt;buf_ptr;} }</cpp:value></cpp:define>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>minp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_stray</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>parse_line_comment</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<label><name>redo</name>:</label>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CH_EOF</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>uint8_t</name> <modifier>*</modifier></type><name>parse_comment</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>end_of_comment</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>after_star</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<label><name>after_star</name>:</label>

<empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CH_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"unexpected end of file in comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<label><name>end_of_comment</name>:</label>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cinp</name></cpp:macro> <cpp:value>minp</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>skip_spaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cinp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>check_space</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>spc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>spc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>spc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>spc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>parse_pp_string</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sep</name></decl></parameter>, <parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>sep</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CH_EOF</name></expr>)</condition> <block>{<block_content>

<label><name>unterminated_string</name>:</label>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"missing terminating %c character"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"'\n' after '\r'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CH_EOF</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>unterminated_string</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>add_char</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC_EOB</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>add_char</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>add_char</name>:</label>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>preprocess_skip</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>start_of_line</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>in_warn_or_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>redo_start</name>:</label>

<expr_stmt><expr><name>start_of_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in_warn_or_error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>redo_no_start</name>:</label>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case>

<case>case <expr><literal type="char">'\v'</literal></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>redo_no_start</name>;</goto>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>redo_start</name>;</goto>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CH_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"#endif"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_stray_noerror</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<goto>goto <name>redo_no_start</name>;</goto>

<case>case <expr><literal type="char">'\"'</literal></expr>:</case>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>in_warn_or_error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>_default</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_pp_string</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>in_warn_or_error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>_default</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>minp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_comment</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_line_comment</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_of_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>tok</name> <operator>==</operator> <name>TOK_ELSE</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ELIF</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_ENDIF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_IF</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_IFDEF</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_IFNDEF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ENDIF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ERROR</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_WARNING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_warn_or_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LINEFEED</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>redo_start</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<label><name>_default</name>:</label>

<default>default:</default>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>start_of_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>the_end</name>:</label>

<empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>save_parse_state</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_num</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>line_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macro_ptr</name></name> <operator>=</operator> <name>macro_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tok</name></name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tokc</name></name> <operator>=</operator> <name>tokc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>restore_parse_state</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>macro_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tok</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tokc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tokc</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>tok_ext_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_CINT</name></expr>:</case>

<case>case <expr><name>TOK_CUINT</name></expr>:</case>

<case>case <expr><name>TOK_CCHAR</name></expr>:</case>

<case>case <expr><name>TOK_LCHAR</name></expr>:</case>

<case>case <expr><name>TOK_CFLOAT</name></expr>:</case>

<case>case <expr><name>TOK_LINENUM</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>TOK_STR</name></expr>:</case>

<case>case <expr><name>TOK_LSTR</name></expr>:</case>

<case>case <expr><name>TOK_PPNUM</name></expr>:</case>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"unsupported token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>TOK_CDOUBLE</name></expr>:</case>

<case>case <expr><name>TOK_CLLONG</name></expr>:</case>

<case>case <expr><name>TOK_CULLONG</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>TOK_CLDOUBLE</name></expr>:</case>

<return>return <expr><name>LDOUBLE_SIZE</name> <operator>/</operator> <literal type="number">4</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>void</name></type> <name>tok_str_new</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocated_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_line_num</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>tok_str_free</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>tok_str_realloc</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>allocated_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_len</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocated_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>tok_str_add</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tok_str_realloc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tok_str_add2</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>CValue</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>TOK_MAX_SIZE</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tok_str_realloc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_CINT</name></expr>:</case>

<case>case <expr><name>TOK_CUINT</name></expr>:</case>

<case>case <expr><name>TOK_CCHAR</name></expr>:</case>

<case>case <expr><name>TOK_LCHAR</name></expr>:</case>

<case>case <expr><name>TOK_CFLOAT</name></expr>:</case>

<case>case <expr><name>TOK_LINENUM</name></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_PPNUM</name></expr>:</case>

<case>case <expr><name>TOK_STR</name></expr>:</case>

<case>case <expr><name>TOK_LSTR</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_words</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_words</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CString</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>cv</name><operator>-&gt;</operator><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>+</operator> <name>nb_words</name><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tok_str_realloc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>CString</name></type> <name>cstr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>cstr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>.</operator><name>data_allocated</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstr</name><operator>.</operator><name>size_allocated</name></name> <operator>=</operator> <name><name>cstr</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>CString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>CString</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>cv</name><operator>-&gt;</operator><name>cstr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cstr</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>nb_words</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TOK_CDOUBLE</name></expr>:</case>

<case>case <expr><name>TOK_CLLONG</name></expr>:</case>

<case>case <expr><name>TOK_CULLONG</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDOUBLE_SIZE</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>

<case>case <expr><name>TOK_CLDOUBLE</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDOUBLE_SIZE</name> <operator>==</operator> <literal type="number">12</literal></expr></cpp:if>

<case>case <expr><name>TOK_CLDOUBLE</name></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LDOUBLE_SIZE</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:elif>

<case>case <expr><name>TOK_CLDOUBLE</name></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LDOUBLE_SIZE</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:elif>

<cpp:error>#<cpp:directive>error</cpp:directive> add long double size support</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>tok_str_add_tok</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_line_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_line_num</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>line_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_line_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TOK_LINENUM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>TOK_GET</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>CValue</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>tab</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>t</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_CINT</name></expr>:</case>

<case>case <expr><name>TOK_CUINT</name></expr>:</case>

<case>case <expr><name>TOK_CCHAR</name></expr>:</case>

<case>case <expr><name>TOK_LCHAR</name></expr>:</case>

<case>case <expr><name>TOK_CFLOAT</name></expr>:</case>

<case>case <expr><name>TOK_LINENUM</name></expr>:</case>

<expr_stmt><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_STR</name></expr>:</case>

<case>case <expr><name>TOK_LSTR</name></expr>:</case>

<case>case <expr><name>TOK_PPNUM</name></expr>:</case>

<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>cstr</name></name> <operator>=</operator> <operator>(</operator><name>CString</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>cstr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CString</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CString</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>cv</name><operator>-&gt;</operator><name>cstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_CDOUBLE</name></expr>:</case>

<case>case <expr><name>TOK_CLLONG</name></expr>:</case>

<case>case <expr><name>TOK_CULLONG</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<goto>goto <name>copy</name>;</goto>

<case>case <expr><name>TOK_CLDOUBLE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDOUBLE_SIZE</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LDOUBLE_SIZE</name> <operator>==</operator> <literal type="number">12</literal></expr></cpp:elif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LDOUBLE_SIZE</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> add long double size support</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>copy</name>:</label>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tab</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name></expr>)</condition>;</do>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>macro_is_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>STRING_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CValue</name></type> <name>cv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pstrcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>a</name> <operator>||</operator> <operator>*</operator><name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>void</name></type> <name>define_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>macro_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>first_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>define_find</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>macro_is_equal</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"%s redefined"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>define_stack</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>macro_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>first_arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>table_ident</name><index>[<expr><name>v</name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name><operator>-&gt;</operator><name>sym_define</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>define_undef</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>TOK_IDENT</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>tok_ident</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>table_ident</name><index>[<expr><name>v</name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name><operator>-&gt;</operator><name>sym_define</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>Sym</name> <modifier>*</modifier></type><name>define_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>-=</operator> <name>TOK_IDENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>v</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>tok_ident</name> <operator>-</operator> <name>TOK_IDENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>table_ident</name><index>[<expr><name>v</name></expr>]</index></name><operator>-&gt;</operator><name>sym_define</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>free_defines</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>define_stack</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>top</name> <operator>!=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top1</name> <operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_free</name> <argument_list>(<argument><expr><name><name>top</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>TOK_IDENT</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>tok_ident</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>table_ident</name><index>[<expr><name>v</name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name><operator>-&gt;</operator><name>sym_define</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sym_free</name> <argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>top1</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>define_stack</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>label_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>-=</operator> <name>TOK_IDENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>v</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>tok_ident</name> <operator>-</operator> <name>TOK_IDENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>table_ident</name><index>[<expr><name>v</name></expr>]</index></name><operator>-&gt;</operator><name>sym_label</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>Sym</name> <modifier>*</modifier></type><name>label_push</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push2</name> <argument_list>(<argument><expr><name>ptop</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>table_ident</name><index>[<expr><name>v</name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name><operator>-&gt;</operator><name>sym_label</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptop</name> <operator>==</operator> <operator>&amp;</operator><name>global_label_stack</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>ps</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ps</name><operator>)</operator><operator>-&gt;</operator><name>prev_tok</name></name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_tok</name></name> <operator>=</operator> <operator>*</operator><name>ps</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>label_pop</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptop</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>slast</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>ptop</name></expr>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>slast</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name>s1</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>LABEL_DECLARED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"label '%s' declared but not used"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>LABEL_FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"label '%s' used but not defined"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>table_ident</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name> <operator>-</operator> <name>TOK_IDENT</name></expr>]</index></name><operator>-&gt;</operator><name>sym_label</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_tok</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sym_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ptop</name> <operator>=</operator> <name>slast</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>expr_preprocess</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenString</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tok_str_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>TOK_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_DEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>define_find</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CINT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>&gt;=</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CINT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add_tok</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name><name>str</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>expr_const</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_free</name> <argument_list>(<argument><expr><name><name>str</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARSE_DEBUG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tok_print</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>parse_define</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>varg</name></decl>, <decl><type ref="prev"/><name>is_vaargs</name></decl>, <decl><type ref="prev"/><name>spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenString</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"invalid macro name '%s'"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>MACRO_OBJ</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_nomacro_spc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name>first</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varg</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_vaargs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varg</name> <operator>==</operator> <name>TOK_DOTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varg</name> <operator>=</operator> <name>TOK___VA_ARGS__</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_vaargs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_DOTS</name> <operator>&amp;&amp;</operator> <name>gnu_ext</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_vaargs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varg</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"badly punctuated parameter list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_push2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>define_stack</name></expr></argument>, <argument><expr><name>varg</name> <operator>|</operator> <name>SYM_FIELD</name></expr></argument>, <argument><expr><name>is_vaargs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro_spc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>MACRO_FUNC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>TOK_EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>TOK_TWOSHARPS</name> <operator>==</operator> <name>tok</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>spc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>str</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'#'</literal> <operator>==</operator> <name>tok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>check_space</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>skip</name>:</label>

<expr_stmt><expr><call><name>next_nomacro_spc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>spc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>str</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"define %s %d: "</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_print</name> <argument_list>(<argument><expr><name><name>str</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>define_push</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hash_cached_include</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>TOK_HASH_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>filename</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>TOK_HASH_FUNC</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>h</name> <operator>&amp;=</operator> <operator>(</operator><name>CACHED_INCLUDES_HASH_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CachedInclude</name> <modifier>*</modifier></type><name>search_cached_include</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CachedInclude</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>hash_cached_include</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>cached_includes_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>cached_includes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>PATHCMP</name> <argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_cached_include</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ifndef_macro</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CachedInclude</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_cached_include</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"adding cached '%s' %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>ifndef_macro</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CachedInclude</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ifndef_macro</name></name> <operator>=</operator> <name>ifndef_macro</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dynarray_add</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>cached_includes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_cached_includes</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>hash_cached_include</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>hash_next</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>cached_includes_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>cached_includes_hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>nb_cached_includes</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pragma_parse</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_pack</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ASM_pop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name> <operator>&lt;=</operator> <name><name>s1</name><operator>-&gt;</operator><name>pack_stack</name></name></expr>)</condition> <block>{<block_content>

<label><name>stk_error</name>:</label>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"out of pack stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_ASM_push</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name> <operator>&gt;=</operator> <name><name>s1</name><operator>-&gt;</operator><name>pack_stack</name></name> <operator>+</operator> <name>PACK_STACK_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>stk_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_CINT</name></expr>)</condition> <block>{<block_content>

<label><name>pack_error</name>:</label>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"invalid pack pragma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>tokc</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal> <operator>||</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <operator>(</operator><name>val</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>pack_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>s1</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip</name> <argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>preprocess</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_bof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>tcc_state</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>saved_parse_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_parse_flags</name> <operator>=</operator> <name>parse_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_flags</name> <operator>=</operator> <name>PARSE_FLAG_PREPROCESS</name> <operator>|</operator> <name>PARSE_FLAG_TOK_NUM</name> <operator>|</operator>

<name>PARSE_FLAG_LINEFEED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>redo</name>:</label>

<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOK_DEFINE</name></expr>:</case>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_define</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_UNDEF</name></expr>:</case>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>define_find</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>define_undef</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_INCLUDE</name></expr>:</case>

<case>case <expr><name>TOK_INCLUDE_NEXT</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_spaces</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

<goto>goto <name>read_name</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<label><name>read_name</name>:</label>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ch</name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name>CH_EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>handle_stray_noerror</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>minp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

while (ch1 != '\n' &amp;&amp; ch1 != CH_EOF)

inp ();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<label><name>include_syntax</name>:</label>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"'#include' expects \"FILENAME\" or &lt;FILENAME&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tokc</name><operator>.</operator><name>cstr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>include_syntax</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name> <operator>&gt;=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack</name></name> <operator>+</operator> <name>INCLUDE_STACK_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#include recursion too deep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>nb_include_paths</name></name> <operator>+</operator> <name><name>s1</name><operator>-&gt;</operator><name>nb_sysinclude_paths</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><sizeof>sizeof <name><name>file</name><operator>-&gt;</operator><name>filename</name></name></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CachedInclude</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BufferedFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_ABSPATH</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pstrncpy</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>tcc_basename</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>s1</name><operator>-&gt;</operator><name>nb_include_paths</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>sysinclude_paths</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>s1</name><operator>-&gt;</operator><name>nb_include_paths</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pstrcpy</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pstrcat</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_INCLUDE_NEXT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name></expr>;</init> <condition><expr><name>f</name> <operator>&gt;=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>f</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>PATHCMP</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s: #include_next skipping %s\n"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>include_trynext</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>search_cached_include</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <call><name>define_find</name> <argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ifndef_macro</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s: skipping cached %s\n"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>include_done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tcc_open</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>include_trynext</name>:</label>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"#include \"%s\"\n"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: including %s\n"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dynarray_add</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>target_deps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_target_deps</name></name></expr></argument>,

<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok_flags</name> <operator>|=</operator> <name>TOK_FLAG_BOF</name> <operator>|</operator> <name>TOK_FLAG_BOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>filepath</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filepath_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>e</name> <operator>&gt;</operator> <name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>==</operator> <name><name>R_SYS_DIR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>filepath_len</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>filename</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filepath_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>filepath</name> <operator>+</operator> <name>filepath_len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tcc_open</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dirname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <literal type="string">"/usr/include"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>tcc_open</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"include file '%s' not found"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"#include \"%s\"\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok_flags</name> <operator>|=</operator> <name>TOK_FLAG_BOF</name> <operator>|</operator> <name>TOK_FLAG_BOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"#include \"%s\"\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok_flags</name> <operator>|=</operator> <name>TOK_FLAG_BOF</name> <operator>|</operator> <name>TOK_FLAG_BOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<label><name>include_done</name>:</label>

<break>break;</break>

<case>case <expr><name>TOK_IFNDEF</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>do_ifdef</name>;</goto>

<case>case <expr><name>TOK_IF</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>expr_preprocess</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>do_if</name>;</goto>

<case>case <expr><name>TOK_IFDEF</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>do_ifdef</name>:</label>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>&lt;</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"invalid argument for '#if%sdef'"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name></expr>?</condition><then> <expr><literal type="string">"n"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_bof</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"#ifndef %s\n"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ifndef_macro</name></name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><call><name>define_find</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>^</operator> <name>c</name></expr>;</expr_stmt>

<label><name>do_if</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>&gt;=</operator> <name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack</name></name> <operator>+</operator> <name>IFDEF_STACK_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"memory full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<goto>goto <name>test_skip</name>;</goto>

<case>case <expr><name>TOK_ELSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>==</operator> <name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#else without matching #if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#else after #else"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<goto>goto <name>test_else</name>;</goto>

<case>case <expr><name>TOK_ELIF</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>==</operator> <name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#elif without matching #if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#elif after #else"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>expr_preprocess</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<label><name>test_else</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ifndef_macro</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>test_skip</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<label><name>skip</name>:</label>

<expr_stmt><expr><call><name>preprocess_skip</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_bof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_ENDIF</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>&lt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#endif without matching #if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ifndef_macro</name></name> <operator>&amp;&amp;</operator>

<name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ifndef_macro_saved</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>ifndef_macro</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ifndef_macro</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>tok_flags</name> <operator>|=</operator> <name>TOK_FLAG_ENDIF</name></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_LINE</name></expr>:</case>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_CINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name> <operator>=</operator> <name><name>tokc</name><operator>.</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_STR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"#line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pstrcpy</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tokc</name><operator>.</operator><name>cstr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOK_ERROR</name></expr>:</case>

<case>case <expr><name>TOK_WARNING</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_spaces</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name>CH_EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>handle_stray_noerror</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>inp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"#%s %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <name>TOK_ERROR</name></expr>?</condition><then> <expr><literal type="string">"error"</literal></expr></then><else>: <expr><literal type="string">"warning"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TOK_PRAGMA</name></expr>:</case>

<expr_stmt><expr><call><name>pragma_parse</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LINEFEED</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_PPNUM</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>saved_parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_ASM_COMMENTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"Ignoring unknown preprocessing directive #%s"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <call><name>parse_line_comment</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>the_end</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<label><name>the_end</name>:</label>

<expr_stmt><expr><name>parse_flags</name> <operator>=</operator> <name>saved_parse_flags</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_escape_string</name><parameter_list>(<parameter><decl><type><name>CString</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_long</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isoct</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isoct</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<goto>goto <name>add_char_nonext</name>;</goto>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isnum</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<goto>goto <name>add_char_nonext</name>;</goto>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gnu_ext</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>invalid_escape</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<case>case <expr><literal type="char">'\"'</literal></expr>:</case>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<label><name>invalid_escape</name>:</label>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"unknown escape sequence: \'\\%c\'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"unknown escape sequence: \'\\x%x\'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<label><name>add_char_nonext</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_long</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cstr_wccat</name> <argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_long</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cstr_wccat</name> <argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bn_lshift</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>or_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BN_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>bn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>|</operator> <name>or_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>or_val</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bn_zero</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BN_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>frac_bits</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>exp_val</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>bn</name><index>[<expr><name>BN_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>token_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>float_frac_parse</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tcc_ext</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'B'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isnum</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <name>token_buf</name> <operator>+</operator> <name>STRING_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<label><name>num_too_long</name>:</label>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"number too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bn_zero</name> <argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>token_buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bn_lshift</name> <argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>frac_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"invalid digit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bn_lshift</name> <argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frac_bits</name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"exponent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exp_val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"exponent digits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exp_val</name> <operator>=</operator> <name>exp_val</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>exp_val</name> <operator>=</operator> <name>exp_val</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>bn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">4294967296.0</literal> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>bn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ldexp</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>exp_val</name> <operator>-</operator> <name>frac_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>toup</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CFLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CDOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CLDOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>ld</name></name> <operator>=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <name>d</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CDOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <name>token_buf</name> <operator>+</operator> <name>STRING_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>num_too_long</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<label><name>float_frac_parse</name>:</label>

<while>while <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <name>token_buf</name> <operator>+</operator> <name>STRING_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>num_too_long</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <name>token_buf</name> <operator>+</operator> <name>STRING_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>num_too_long</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <name>token_buf</name> <operator>+</operator> <name>STRING_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>num_too_long</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"exponent digits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <name>token_buf</name> <operator>+</operator> <name>STRING_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>num_too_long</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>toup</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CFLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>strtof</name> <argument_list>(<argument><expr><name>token_buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CDOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>d</name></name> <operator>=</operator> <call><name>strtod</name> <argument_list>(<argument><expr><name>token_buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCC_TARGET_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
tok = TOK_CDOUBLE;

tokc.d = strtod (token_buf, NULL);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

tok = TOK_CLDOUBLE;

tokc.ld = strtold (token_buf, NULL);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CDOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>d</name></name> <operator>=</operator> <call><name>strtod</name> <argument_list>(<argument><expr><name>token_buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lcount</name></decl>, <decl><type ref="prev"/><name>ucount</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>token_buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"invalid digit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>n1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"integer constant overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xffffffff00000000LL</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CULLONG</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CLLONG</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0x7fffffff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CUINT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CINT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ucount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>toup</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lcount</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"three 'l's in integer constant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lcount</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>TCC_TARGET_X86_64</name> <operator>||</operator> <name>defined</name> <name>TCC_TARGET_PE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>lcount</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_CINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CLLONG</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_CUINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CULLONG</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>TCC_TARGET_X86_64</name> <operator>||</operator> <name>defined</name> <name>TCC_TARGET_PE</name></expr></cpp:if>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ucount</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"two 'u's in integer constant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ucount</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_CINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CUINT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_CLLONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CULLONG</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_CINT</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK_CUINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>ui</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>ull</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"invalid number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE2</name><parameter_list>(<parameter><type><name>c1</name></type></parameter>, <parameter><type><name>tok1</name></type></parameter>, <parameter><type><name>c2</name></type></parameter>, <parameter><type><name>tok2</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>case c1: PEEKC (c, p); if (c == c2) { p++; tok = tok2; } else { tok = tok1; } break;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>next_nomacro1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>is_long</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenSym</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<label><name>redo_no_start</name>:</label>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>keep_tok_flags</name>;</goto>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case>

<case>case <expr><literal type="char">'\v'</literal></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>redo_no_start</name>;</goto>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_eob</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>parse_eof</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>redo_no_start</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_stray</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<goto>goto <name>redo_no_start</name>;</goto>

</block_content>}</block></else></if_stmt>

<label><name>parse_eof</name>:</label>

<block>{<block_content>

<decl_stmt><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>tcc_state</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_LINEFEED</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>tok_flags</name> <operator>&amp;</operator> <name>TOK_FLAG_EOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok_flags</name> <operator>|=</operator> <name>TOK_FLAG_EOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LINEFEED</name></expr>;</expr_stmt>

<goto>goto <name>keep_tok_flags</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_PREPROCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_EOF</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"missing #endif"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name> <operator>==</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_EOF</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_FLAG_EOF</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok_flags</name> <operator>&amp;</operator> <name>TOK_FLAG_ENDIF</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"#endif %s\n"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ifndef_macro_saved</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>add_cached_include</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ifndef_macro_saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tok_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_FLAG_ENDIF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tcc_close</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<goto>goto <name>redo_no_start</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok_flags</name> <operator>|=</operator> <name>TOK_FLAG_BOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<label><name>maybe_newline</name>:</label>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_LINEFEED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>redo_no_start</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LINEFEED</name></expr>;</expr_stmt>

<goto>goto <name>keep_tok_flags</name>;</goto>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tok_flags</name> <operator>&amp;</operator> <name>TOK_FLAG_BOL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_PREPROCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preprocess</name> <argument_list>(<argument><expr><name>tok_flags</name> <operator>&amp;</operator> <name>TOK_FLAG_BOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>

<goto>goto <name>maybe_newline</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_TWOSHARPS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_ASM_COMMENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_line_comment</name> <argument_list>(<argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>redo_no_start</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case> <case>case <expr><literal type="char">'h'</literal></expr>:</case>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'j'</literal></expr>:</case> <case>case <expr><literal type="char">'k'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case> <case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'p'</literal></expr>:</case>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> <case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> <case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case> <case>case <expr><literal type="char">'H'</literal></expr>:</case>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> <case>case <expr><literal type="char">'J'</literal></expr>:</case> <case>case <expr><literal type="char">'K'</literal></expr>:</case>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> <case>case <expr><literal type="char">'N'</literal></expr>:</case> <case>case <expr><literal type="char">'O'</literal></expr>:</case> <case>case <expr><literal type="char">'P'</literal></expr>:</case>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case> <case>case <expr><literal type="char">'R'</literal></expr>:</case> <case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'T'</literal></expr>:</case>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> <case>case <expr><literal type="char">'V'</literal></expr>:</case> <case>case <expr><literal type="char">'W'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case> <case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<case>case <expr><literal type="char">'_'</literal></expr>:</case> <case>case <expr><literal type="char">'.'</literal></expr>:</case>

<label><name>parse_ident_fast</name>:</label>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>TOK_HASH_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>TOK_HASH_FUNC</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isidnum_table</name><index>[<expr><operator>*</operator><name>p</name> <operator>-</operator> <name>CH_EOF</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdot</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnum</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>parse_num</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdot</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>parse_dots</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>TOK_HASH_FUNC</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TokenSym</name> <modifier>*</modifier><modifier>*</modifier></type><name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>&amp;=</operator> <operator>(</operator><name>TOK_HASH_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash_ident</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>*</operator><name>pts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>token_found</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ts</name><operator>-&gt;</operator><name>hash_next</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>tok_alloc_new</name> <argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>token_found</name>:</label>

<empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cstr_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p1</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>, <argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>parse_ident_slow</name>:</label>

<while>while <condition>(<expr><name><name>isidnum_table</name><index>[<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">255</literal></expr></then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>CH_EOF</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>tok_alloc</name> <argument_list>(<argument><expr><name><name>tokcstr</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tokcstr</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>tok</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>parse_ident_fast</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_long</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>str_const</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cstr_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>parse_ident_slow</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case>

<case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><call><name>cstr_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>parse_num</name>:</label>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>isnum</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isid</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isdot</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>t</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>cstr</name></name> <operator>=</operator> <operator>&amp;</operator><name>tokcstr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_PPNUM</name></expr>;</expr_stmt>

<break>break;</break>

<label><name>parse_dots</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdot</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">"'.'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_DOTS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<case>case <expr><literal type="char">'\"'</literal></expr>:</case>

<expr_stmt><expr><name>is_long</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>str_const</name>:</label>

<block>{<block_content>

<decl_stmt><decl><type><name>CString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_pp_string</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_escape_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tokcstr</name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>is_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>char_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_long</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>char_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>char_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nwchar_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tokcstr</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <name>char_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"empty character constant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tokcstr</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>char_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"multi-character character constant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_long</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator> <name><name>tokcstr</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_CCHAR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>nwchar_t</name> <operator>*</operator><operator>)</operator> <name><name>tokcstr</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LCHAR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tokc</name><operator>.</operator><name>cstr</name></name> <operator>=</operator> <operator>&amp;</operator><name>tokcstr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_long</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_STR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LSTR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_A_SHL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_SHL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_GE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_A_SAR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_SAR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_GT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LAND</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_A_AND</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_LOR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_A_OR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_INC</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_A_ADD</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_DEC</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_A_SUB</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_ARROW</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<macro><name>PARSE2</name> <argument_list>(<argument><literal type="char">'!'</literal></argument>, <argument><literal type="char">'!'</literal></argument>, <argument><literal type="char">'='</literal></argument>, <argument>TOK_NE</argument>)</argument_list></macro>

<macro><name>PARSE2</name> <argument_list>(<argument><literal type="char">'='</literal></argument>, <argument><literal type="char">'='</literal></argument>, <argument><literal type="char">'='</literal></argument>, <argument>TOK_EQ</argument>)</argument_list></macro>

<macro><name>PARSE2</name> <argument_list>(<argument><literal type="char">'*'</literal></argument>, <argument><literal type="char">'*'</literal></argument>, <argument><literal type="char">'='</literal></argument>, <argument>TOK_A_MUL</argument>)</argument_list></macro>

<macro><name>PARSE2</name> <argument_list>(<argument><literal type="char">'%'</literal></argument>, <argument><literal type="char">'%'</literal></argument>, <argument><literal type="char">'='</literal></argument>, <argument>TOK_A_MOD</argument>)</argument_list></macro>

<macro><name>PARSE2</name> <argument_list>(<argument><literal type="char">'^'</literal></argument>, <argument><literal type="char">'^'</literal></argument>, <argument><literal type="char">'='</literal></argument>, <argument>TOK_A_XOR</argument>)</argument_list></macro>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_comment</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<goto>goto <name>keep_tok_flags</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_line_comment</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<goto>goto <name>keep_tok_flags</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>TOK_A_DIV</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<case>case <expr><literal type="char">')'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<case>case <expr><literal type="char">'$'</literal></expr>:</case> 

<case>case <expr><literal type="char">'@'</literal></expr>:</case> 

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"unrecognized character \\x%02x"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>tok_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>keep_tok_flags</name>:</label>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARSE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"token = %s\n"</literal></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>next_nomacro_spc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>macro_ptr</name></expr>)</condition> <block>{<block_content>

<label><name>redo</name>:</label>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <operator>*</operator><name>macro_ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>macro_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LINENUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name> <operator>=</operator> <name><name>tokc</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro1</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>next_nomacro</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro_spc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_space</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_arg_subst</name><parameter_list>(<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>nested_list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_str</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_tok</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CString</name></type> <name>cstr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tok_str_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_tok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>macro_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>macro_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_find2</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_space</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cstr_cat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>cstr</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name>spc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"stringize: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>cstr</name></name> <operator>=</operator> <operator>&amp;</operator><name>cstr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>TOK_STR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>TOK_IDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sym_find2</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>macro_str</name> <operator>==</operator> <name>TOK_TWOSHARPS</name> <operator>||</operator> <name>last_tok</name> <operator>==</operator> <name>TOK_TWOSHARPS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gnu_ext</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;&amp;</operator>

<name>last_tok</name> <operator>==</operator> <name>TOK_TWOSHARPS</name> <operator>&amp;&amp;</operator>

<name><name>str</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>str</name><operator>.</operator><name>str</name><index>[<expr><name><name>str</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>st</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>str</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>

<goto>goto <name>add_var</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t1</name></decl>;</decl_stmt>

<label><name>add_var</name>:</label>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t1</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>macro_subst</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>nested_list</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>last_tok</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>str</name><operator>.</operator><name>str</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>ab_month_name</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>,

<expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>macro_subst_tok</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>tok_str</name></decl></parameter>,

<parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>nested_list</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>macro_level</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>can_read_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>args</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sa1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mstr_allocated</name></decl>, <decl><type ref="prev"/><name>parlevel</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mstr</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cstrval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CString</name></type> <name>cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK___LINE__</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cstrval</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>TOK_PPNUM</name></expr>;</expr_stmt>

<goto>goto <name>add_cstr1</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK___FILE__</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cstrval</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt>

<goto>goto <name>add_cstr</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK___DATE__</name> <operator>||</operator> <name>tok</name> <operator>==</operator> <name>TOK___TIME__</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>ti</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK___DATE__</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %2d %d"</literal></expr></argument>,

<argument><expr><name><name>ab_month_name</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d"</literal></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cstrval</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<label><name>add_cstr</name>:</label>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>TOK_STR</name></expr>;</expr_stmt>

<label><name>add_cstr1</name>:</label>

<expr_stmt><expr><call><name>cstr_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_cat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><name>cstrval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cval</name><operator>.</operator><name>cstr</name></name> <operator>=</operator> <operator>&amp;</operator><name>cstr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><name>tok_str</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mstr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mstr_allocated</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>==</operator> <name>MACRO_FUNC</name></expr>)</condition> <block>{<block_content>

<label><name>redo</name>:</label>

<if_stmt><if>if <condition>(<expr><name>macro_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>macro_ptr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TOK_LINEFEED</name> <operator>==</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>can_read_stream</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>macro_level</name></name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><operator>*</operator><name>can_read_stream</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ml</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>can_read_stream</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>nested_list</name><operator>)</operator><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PEEKC</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_comment</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_line_comment</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cinp</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>args</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sa</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"macro '%s' used with too many args"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parlevel</name> <operator>=</operator> <name>spc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>parlevel</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>tok</name> <operator>!=</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>tok</name> <operator>!=</operator> <literal type="char">','</literal> <operator>||</operator> <operator>(</operator><name>sa</name> <operator>&amp;&amp;</operator> <name><name>sa</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<name>tok</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parlevel</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parlevel</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LINEFEED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_space</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_nomacro_spc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>str</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <name>spc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa1</name> <operator>=</operator> <ternary><condition><expr><name>sa</name></expr> ?</condition><then> <expr><call><name>sym_push2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>v</name></name> <operator>&amp;</operator> <operator>~</operator><name>SYM_FIELD</name></expr></argument>, <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sa1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sa1</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name><name>str</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>&amp;&amp;</operator> <name><name>sa</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>t</name></name> <operator>&amp;&amp;</operator> <name>gnu_ext</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expect</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>sa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcc_error</name> <argument_list>(<argument><expr><literal type="string">"macro '%s' used with too few args"</literal></expr></argument>,

<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mstr</name> <operator>=</operator> <call><name>macro_arg_subst</name> <argument_list>(<argument><expr><name>nested_list</name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sa1</name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_free</name> <argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sym_free</name> <argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <name>sa1</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>mstr_allocated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sym_push2</name> <argument_list>(<argument><expr><name>nested_list</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>macro_subst</name> <argument_list>(<argument><expr><name>tok_str</name></expr></argument>, <argument><expr><name>nested_list</name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>, <argument><expr><name>can_read_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sa1</name> <operator>=</operator> <operator>*</operator><name>nested_list</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nested_list</name> <operator>=</operator> <name><name>sa1</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sym_free</name> <argument_list>(<argument><expr><name>sa1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mstr_allocated</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_free</name> <argument_list>(<argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_twosharps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenString</name></type> <name>macro_str1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CString</name></type> <name>cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>start_of_nosubsts</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>macro_str</name></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>TOK_TWOSHARPS</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start_of_nosubsts</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tok_str_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>macro_str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>macro_str</name></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_TWOSHARPS</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_NOSUBST</name> <operator>&amp;&amp;</operator> <name>start_of_nosubsts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_of_nosubsts</name> <operator>=</operator> <name><name>macro_str1</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>TOK_TWOSHARPS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_of_nosubsts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>macro_str1</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>start_of_nosubsts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>t</name> <operator>==</operator> <name>TOK_NOSUBST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>TOK_TWOSHARPS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_cat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cstr</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_cat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_ccat</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_open_bf</name> <argument_list>(<argument><expr><name>tcc_state</name></expr></argument>, <argument><expr><literal type="string">":paste:"</literal></expr></argument>, <argument><expr><name><name>cstr</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cstr</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cstr</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro1</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>*</operator><name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>macro_str1</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcc_warning</name> <argument_list>(<argument><expr><literal type="string">"pasting \"%.*s\" and \"%s\" does not give a valid preprocessing token"</literal></expr></argument>,

<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>cstr</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>tcc_close</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cstr_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>TOK_NOSUBST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_of_nosubsts</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>macro_str1</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>macro_str1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>macro_str1</name><operator>.</operator><name>str</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>macro_subst</name><parameter_list>(<parameter><decl><type><name>TokenString</name> <modifier>*</modifier></type><name>tok_str</name></decl></parameter>, <parameter><decl><type><name>Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>nested_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>macro_str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>macro_level</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>can_read_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>macro_str1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CValue</name></type> <name>cval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>macro_level</name></name></type> <name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force_blank</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>macro_str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_str1</name> <operator>=</operator> <call><name>macro_twosharps</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>macro_str1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>macro_str1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>force_blank</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>TOK_NOSUBST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><name>tok_str</name></expr></argument>, <argument><expr><name>TOK_NOSUBST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOK_GET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>no_subst</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>define_find</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sym_find2</name> <argument_list>(<argument><expr><operator>*</operator><name>nested_list</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><name>tok_str</name></expr></argument>, <argument><expr><name>TOK_NOSUBST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>no_subst</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ml</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>macro_ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>can_read_stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ml</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <operator>*</operator><name>can_read_stream</name></expr><operator>,</operator> <expr><operator>*</operator><name>can_read_stream</name> <operator>=</operator> <operator>&amp;</operator><name>ml</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>macro_subst_tok</name> <argument_list>(<argument><expr><name>tok_str</name></expr></argument>, <argument><expr><name>nested_list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>can_read_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>macro_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name><name>ml</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>can_read_stream</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>can_read_stream</name> <operator>==</operator> <operator>&amp;</operator><name>ml</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>can_read_stream</name> <operator>=</operator> <name><name>ml</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>no_subst</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_SPACES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>force_blank</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>no_subst</name>:</label>

<if_stmt><if>if <condition>(<expr><name>force_blank</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><name>tok_str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>force_blank</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_space</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add2</name> <argument_list>(<argument><expr><name>tok_str</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>macro_str1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_free</name> <argument_list>(<argument><expr><name>macro_str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>nested_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TokenString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>macro_level</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<label><name>redo</name>:</label>

<if_stmt><if>if <condition>(<expr><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_SPACES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro_spc</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>next_nomacro</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>macro_ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>&gt;=</operator> <name>TOK_IDENT</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_PREPROCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>define_find</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nested_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>macro_subst_tok</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nested_list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ml</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name><name>str</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr_allocated</name> <operator>=</operator> <name><name>str</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unget_buffer_enabled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name>unget_saved_macro_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unget_buffer_enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tok_str_free</name> <argument_list>(<argument><expr><name>macro_ptr_allocated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr_allocated</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_NOSUBST</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_PPNUM</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>parse_flags</name> <operator>&amp;</operator> <name>PARSE_FLAG_TOK_NUM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_number</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tokc</name><operator>.</operator><name>cstr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ST_INLN</name> <name>void</name></type> <name>unget_tok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>last_tok</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unget_buffer_enabled</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>unget_saved_macro_ptr</name> <operator>=</operator> <name>macro_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unget_buffer_enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>unget_saved_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>macro_ptr</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tok_ext_size</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name><name>tokc</name><operator>.</operator><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>tok</name> <operator>=</operator> <name>last_tok</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>preprocess_init</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>ifdef_stack_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vtop</name> <operator>=</operator> <name>vstack</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>pack_stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>pack_stack_ptr</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>pack_stack</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>void</name></type> <name>preprocess_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>CH_EOF</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>isidnum_table</name><index>[<expr><name>i</name> <operator>-</operator> <name>CH_EOF</name></expr>]</index></name> <operator>=</operator> <call><name>isid</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnum</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isdot</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>table_ident</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>hash_ident</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TOK_HASH_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TokenSym</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tok_ident</name> <operator>=</operator> <name>TOK_IDENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tcc_keywords</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>r</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tok_alloc</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>ST_FUNC</name> <name>int</name></type> <name>tcc_preprocess</name><parameter_list>(<parameter><decl><type><name>TCCState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>define_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BufferedFile</name> <modifier>*</modifier></type><name>file_ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>iptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>iptr_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>token_seen</name></decl>, <decl><type ref="prev"/><name>line_ref</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>preprocess_init</name> <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>define_start</name> <operator>=</operator> <name>define_stack</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tok_flags</name> <operator>=</operator> <name>TOK_FLAG_BOL</name> <operator>|</operator> <name>TOK_FLAG_BOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_flags</name> <operator>=</operator> <name>PARSE_FLAG_ASM_COMMENTS</name> <operator>|</operator> <name>PARSE_FLAG_PREPROCESS</name> <operator>|</operator>

<name>PARSE_FLAG_LINEFEED</name> <operator>|</operator> <name>PARSE_FLAG_SPACES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>token_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line_ref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>file_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>iptr</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tcc_nerr</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>next</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_EOF</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>file</name> <operator>!=</operator> <name>file_ref</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>print_line</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tok</name> <operator>==</operator> <name>TOK_LINEFEED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token_seen</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>line_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name>token_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>token_seen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>line_num</name></name> <operator>-</operator> <name>line_ref</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>file_ref</name> <operator>||</operator> <name>d</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>d</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<label><name>print_line</name>:</label>

<expr_stmt><expr><name>iptr_new</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>iptr_new</name> <operator>&gt;</operator> <name>iptr</name></expr>?</condition><then> <expr><literal type="string">" 1"</literal></expr>

</then><else>: <expr><ternary><condition><expr><name>iptr_new</name> <operator>&lt;</operator> <name>iptr</name></expr>?</condition><then> <expr><literal type="string">" 2"</literal></expr>

</then><else>: <expr><ternary><condition><expr><name>iptr_new</name> <operator>&gt;</operator> <name><name>s1</name><operator>-&gt;</operator><name>include_stack</name></name></expr>?</condition><then> <expr><literal type="string">" 3"</literal></expr>

</then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>

;</expr_stmt>

<expr_stmt><expr><name>iptr</name> <operator>=</operator> <name>iptr_new</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>ppfp</name></name></expr></argument>, <argument><expr><literal type="string">"#%d \"%s\"%s\n"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>line_num</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>d</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>ppfp</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>--</operator><name>d</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>line_ref</name> <operator>=</operator> <operator>(</operator><name>file_ref</name> <operator>=</operator> <name>file</name><operator>)</operator><operator>-&gt;</operator><name>line_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>token_seen</name> <operator>=</operator> <name>tok</name> <operator>!=</operator> <name>TOK_LINEFEED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token_seen</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><call><name>get_tok_str</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>ppfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free_defines</name> <argument_list>(<argument><expr><name>define_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
