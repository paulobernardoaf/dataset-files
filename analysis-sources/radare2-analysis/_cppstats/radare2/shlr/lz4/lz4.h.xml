<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\lz4\lz4.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_H_2983827168210</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_H_2983827168210</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4LIB_VISIBILITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4LIB_VISIBILITY</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default")))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4LIB_VISIBILITY</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_DLL_EXPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>LZ4_DLL_EXPORT</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4LIB_API</name></cpp:macro> <cpp:value>__declspec(dllexport) LZ4LIB_VISIBILITY</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_DLL_IMPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>LZ4_DLL_IMPORT</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4LIB_API</name></cpp:macro> <cpp:value>__declspec(dllimport) LZ4LIB_VISIBILITY</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4LIB_API</name></cpp:macro> <cpp:value>LZ4LIB_VISIBILITY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_VERSION_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_VERSION_MINOR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_VERSION_RELEASE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_VERSION_NUMBER</name></cpp:macro> <cpp:value>(LZ4_VERSION_MAJOR *100*100 + LZ4_VERSION_MINOR *100 + LZ4_VERSION_RELEASE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_LIB_VERSION</name></cpp:macro> <cpp:value>LZ4_VERSION_MAJOR.LZ4_VERSION_MINOR.LZ4_VERSION_RELEASE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_QUOTE</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#str</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_EXPAND_AND_QUOTE</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LZ4_QUOTE(str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_VERSION_STRING</name></cpp:macro> <cpp:value>LZ4_EXPAND_AND_QUOTE(LZ4_LIB_VERSION)</cpp:value></cpp:define>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_versionNumber</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>LZ4LIB_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>LZ4_versionString</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_MEMORY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_MEMORY_USAGE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_compress_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sourceSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDestSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_decompress_safe</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDecompressedSize</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_MAX_INPUT_SIZE</name></cpp:macro> <cpp:value>0x7E000000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_COMPRESSBOUND</name><parameter_list>(<parameter><type><name>isize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned)(isize) &gt; (unsigned)LZ4_MAX_INPUT_SIZE ? 0 : (isize) + ((isize)/255) + 16)</cpp:value></cpp:define>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_compressBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_compress_fast</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sourceSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDestSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acceleration</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_sizeofState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_compress_fast_extState</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDestSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acceleration</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_compress_destSize</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>sourceSizePtr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetDestSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_decompress_fast</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_decompress_safe_partial</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetOutputSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDecompressedSize</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>union</name> <name>LZ4_stream_u</name></name></type> <name>LZ4_stream_t</name>;</typedef> 

<function_decl><type><name>LZ4LIB_API</name> <name>LZ4_stream_t</name><modifier>*</modifier></type> <name>LZ4_createStream</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>void</name></type> <name>LZ4_freeStream</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>streamPtr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>void</name></type> <name>LZ4_resetStream</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>streamPtr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_loadDict</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>streamPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_compress_fast_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>streamPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acceleration</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_saveDict</name> <parameter_list>(<parameter><decl><type><name>LZ4_stream_t</name><modifier>*</modifier></type> <name>streamPtr</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>safeBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>union</name> <name>LZ4_streamDecode_u</name></name></type> <name>LZ4_streamDecode_t</name>;</typedef> 

<function_decl><type><name>LZ4LIB_API</name> <name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_createStreamDecode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>void</name></type> <name>LZ4_freeStreamDecode</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_setStreamDecode</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_streamDecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictionary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_decompress_safe_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_streamDecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDecompressedSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_decompress_fast_continue</name> <parameter_list>(<parameter><decl><type><name>LZ4_streamDecode_t</name><modifier>*</modifier></type> <name>LZ4_streamDecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_decompress_safe_usingDict</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressedSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDecompressedSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LZ4LIB_API</name> <name>int</name></type> <name>LZ4_decompress_fast_usingDict</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dictStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictSize</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_HASHLOG</name></cpp:macro> <cpp:value>(LZ4_MEMORY_USAGE-2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_HASHTABLESIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; LZ4_MEMORY_USAGE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_HASH_SIZE_U32</name></cpp:macro> <cpp:value>(1 &lt;&lt; LZ4_HASHLOG)</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator> <operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hashTable</name><index>[<expr><name>LZ4_HASH_SIZE_U32</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>currentOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>initCheck</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>dictionary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>bufferStart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dictSize</name></decl>;</decl_stmt>

}</block></struct></type> <name>LZ4_stream_t_internal</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>externalDict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extDictSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>prefixEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>prefixSize</name></decl>;</decl_stmt>

}</block></struct></type> <name>LZ4_streamDecode_t_internal</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>hashTable</name><index>[<expr><name>LZ4_HASH_SIZE_U32</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>currentOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>initCheck</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>dictionary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>bufferStart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dictSize</name></decl>;</decl_stmt>

}</block></struct></type> <name>LZ4_stream_t_internal</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>externalDict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extDictSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>prefixEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>prefixSize</name></decl>;</decl_stmt>

}</block></struct></type> <name>LZ4_streamDecode_t_internal</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_STREAMSIZE_U64</name></cpp:macro> <cpp:value>((1 &lt;&lt; (LZ4_MEMORY_USAGE-3)) + 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_STREAMSIZE</name></cpp:macro> <cpp:value>(LZ4_STREAMSIZE_U64 * sizeof(unsigned long long))</cpp:value></cpp:define>

<union>union <name>LZ4_stream_u</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>table</name><index>[<expr><name>LZ4_STREAMSIZE_U64</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4_stream_t_internal</name></type> <name>internal_donotuse</name></decl>;</decl_stmt>

}</block> ;</union> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_STREAMDECODESIZE_U64</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_STREAMDECODESIZE</name></cpp:macro> <cpp:value>(LZ4_STREAMDECODESIZE_U64 * sizeof(unsigned long long))</cpp:value></cpp:define>

<union>union <name>LZ4_streamDecode_u</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>table</name><index>[<expr><name>LZ4_STREAMDECODESIZE_U64</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4_streamDecode_t_internal</name></type> <name>internal_donotuse</name></decl>;</decl_stmt>

}</block> ;</union> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LZ4_DISABLE_DEPRECATE_WARNINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_DEPRECATED</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_GCC_VERSION</name></cpp:macro> <cpp:value>(__GNUC__ * 100 + __GNUC_MINOR__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_DEPRECATED</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((deprecated(message)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201402</literal><operator>)</operator></expr></cpp:elif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_DEPRECATED</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[[deprecated(message)]]</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LZ4_GCC_VERSION</name> <operator>&gt;=</operator> <literal type="number">405</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_DEPRECATED</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((deprecated(message)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LZ4_GCC_VERSION</name> <operator>&gt;=</operator> <literal type="number">301</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_DEPRECATED</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_DEPRECATED</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(deprecated(message))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"WARNING: You need to implement LZ4_DEPRECATED for this compiler"</cpp:literal><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4_DEPRECATED</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_compress_default() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_compress</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>sourceSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_compress_default() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_compress_limitedOutput</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>sourceSize</name></expr></argument>, <argument><expr><name>int</name> <name>maxOutputSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_compress_fast_extState() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_compress_withState</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>state</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>inputSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_compress_fast_extState() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_compress_limitedOutput_withState</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>state</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>inputSize</name></expr></argument>, <argument><expr><name>int</name> <name>maxOutputSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_compress_fast_continue() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_compress_continue</name> <argument_list>(<argument><expr><name>LZ4_stream_t</name><operator>*</operator> <name>LZ4_streamPtr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>inputSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_compress_fast_continue() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_compress_limitedOutput_continue</name> <argument_list>(<argument><expr><name>LZ4_stream_t</name><operator>*</operator> <name>LZ4_streamPtr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>inputSize</name></expr></argument>, <argument><expr><name>int</name> <name>maxOutputSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_decompress_fast() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_uncompress</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>outputSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_decompress_safe() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_uncompress_unknownOutputSize</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dest</name></expr></argument>, <argument><expr><name>int</name> <name>isize</name></expr></argument>, <argument><expr><name>int</name> <name>maxOutputSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_createStream() instead"</literal></expr></argument>)</argument_list> <name>void</name><modifier>*</modifier> <name>LZ4_create</name> <argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>inputBuffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_createStream() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_sizeofStreamState</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_resetStream() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_resetStreamState</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>state</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>inputBuffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_saveDict() instead"</literal></expr></argument>)</argument_list> <name>char</name><modifier>*</modifier> <name>LZ4_slideInputBuffer</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_decompress_safe_usingDict() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_decompress_safe_withPrefix64k</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>src</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><name>int</name> <name>compressedSize</name></expr></argument>, <argument><expr><name>int</name> <name>maxDstSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LZ4LIB_API</name></type> <name>LZ4_DEPRECATED</name><argument_list>(<argument><expr><literal type="string">"use LZ4_decompress_fast_usingDict() instead"</literal></expr></argument>)</argument_list> <name>int</name> <name>LZ4_decompress_fast_withPrefix64k</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>src</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><name>int</name> <name>originalSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
