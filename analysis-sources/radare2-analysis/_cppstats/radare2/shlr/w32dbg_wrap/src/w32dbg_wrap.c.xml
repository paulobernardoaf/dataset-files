<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\w32dbg_wrap\src\w32dbg_wrap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32dbg_wrap.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>__w32dbg_thread</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>w32dbg_wrap_params</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>inst</name><operator>-&gt;</operator><name>params</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>W32_CONTINUE</name></expr>:</case>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name>ContinueDebugEvent</name> <argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>continue_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>W32_WAIT</name></expr>:</case>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name>WaitForDebugEvent</name> <argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>de</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>wait_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>W32_CALL_FUNC</name></expr>:</case>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name><name>params</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>func</name></name> <argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>W32_ATTACH</name></expr>:</case>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name>DebugActiveProcess</name> <argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>W32_DETTACH</name></expr>:</case>

<case>case <expr><name>W32_STOP</name></expr>:</case>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name>DebugActiveProcessStop</name> <argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>params</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>GetLastError</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ReleaseSemaphore</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>W32_STOP</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>w32dbg_wrap_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w32dbg_wrap_instance</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w32dbg_wrap_params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inst</name><operator>-&gt;</operator><name>params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name> <operator>=</operator> <call><name>CreateSemaphore</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name> <operator>=</operator> <call><name>CreateSemaphore</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>debugThread</name></name> <operator>=</operator> <call><name>CreateThread</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__w32dbg_thread</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>w32dbg_wrap_fini</name><parameter_list>(<parameter><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseSemaphore</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32dbg_wrap_wait_ret</name><parameter_list>(<parameter><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ReleaseSemaphore</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>w32dbgw_ret</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
