<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\mpc\mpc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>mpc_state_t</name></type> <name>mpc_state_invalid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_state_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_state_t</name></type> <name>mpc_state_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_state_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>MPC_INPUT_STRING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MPC_INPUT_FILE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MPC_INPUT_PIPE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <block>{

<decl><name>MPC_INPUT_MARKS_MIN</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <block>{

<decl><name>MPC_INPUT_MEM_NUM</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>mem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>mpc_mem_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mpc_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>suppress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backtrack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marks_slots</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marks_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_state_t</name> <modifier>*</modifier></type><name>marks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lasts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mem_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>mem_full</name><index>[<expr><name>MPC_INPUT_MEM_NUM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_mem_t</name></type> <name><name>mem</name><index>[<expr><name>MPC_INPUT_MEM_NUM</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>mpc_input_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>mpc_input_t</name> <modifier>*</modifier></type><name>mpc_input_new_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_input_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_INPUT_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>mpc_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>suppress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name> <operator>=</operator> <name>MPC_INPUT_MARKS_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_state_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>mem_full</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MPC_INPUT_MEM_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_input_t</name> <modifier>*</modifier></type><name>mpc_input_new_pipe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_input_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_INPUT_PIPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>mpc_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>pipe</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>suppress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name> <operator>=</operator> <name>MPC_INPUT_MARKS_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_state_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>mem_full</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MPC_INPUT_MEM_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_input_t</name> <modifier>*</modifier></type><name>mpc_input_new_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_input_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_INPUT_FILE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>mpc_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>suppress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name> <operator>=</operator> <name>MPC_INPUT_MARKS_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_state_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>mem_full</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MPC_INPUT_MEM_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_delete</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_STRING</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_PIPE</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_mem_ptr</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return

<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name> <operator>&gt;=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>mem</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name> <operator>&lt;</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>mem</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>MPC_INPUT_MEM_NUM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_mem_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mpc_malloc</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_mem_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>mem_full</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>mem_full</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name> <operator>=</operator> <operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MPC_INPUT_MEM_NUM</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name> <operator>=</operator> <operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MPC_INPUT_MEM_NUM</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>i</name><operator>-&gt;</operator><name>mem_index</name></name></expr>)</condition>;</do>

<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mpc_calloc</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_free</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_mem_ptr</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>i</name><operator>-&gt;</operator><name>mem</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_mem_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>mem_full</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mpc_realloc</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_mem_ptr</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_mem_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_mem_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mpc_export</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_mem_ptr</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><name>p</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_mem_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_mem_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>q</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_backtrack_disable</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_backtrack_enable</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_suppress_disable</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>suppress</name></name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_suppress_enable</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>suppress</name></name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_mark</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>&gt;</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>+</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_state_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_PIPE</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_unmark</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name> <operator>&gt;</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>+</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>/</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name> <operator>&gt;</operator> <name>MPC_INPUT_MARKS_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name> <operator>=</operator> 

<ternary><condition><expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>&gt;</operator> <name>MPC_INPUT_MARKS_MIN</name></expr> ?</condition><then>

<expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name></expr> </then><else>: <expr><name>MPC_INPUT_MARKS_MIN</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_state_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>lasts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_PIPE</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_input_rewind</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>backtrack</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>marks</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>lasts</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>marks_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_FILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpc_input_unmark</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_buffer_in_range</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>i</name><operator>-&gt;</operator><name>marks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>mpc_input_buffer_get</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <name><name>i</name><operator>-&gt;</operator><name>marks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_terminated</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_STRING</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_FILE</name> <operator>&amp;&amp;</operator> <call><name>feof</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_PIPE</name> <operator>&amp;&amp;</operator> <call><name>feof</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>mpc_input_getc</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPC_INPUT_STRING</name></expr>:</case> <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>string</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name></expr>]</index></name></expr>;</return>

<case>case <expr><name>MPC_INPUT_FILE</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>c</name></expr>;</return>

<case>case <expr><name>MPC_INPUT_PIPE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>c</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <call><name>mpc_input_buffer_in_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mpc_input_buffer_get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<default>default:</default> <return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>mpc_input_peekc</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPC_INPUT_STRING</name></expr>:</case> <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>string</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name></expr>]</index></name></expr>;</return>

<case>case <expr><name>MPC_INPUT_FILE</name></expr>:</case> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="char">'\0'</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

<case>case <expr><name>MPC_INPUT_PIPE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="char">'\0'</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <call><name>mpc_input_buffer_in_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mpc_input_buffer_get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="char">'\0'</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<default>default:</default> <return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_failure</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPC_INPUT_STRING</name></expr>:</case> <block>{<block_content> <break>break;</break> </block_content>}</block>

<case>case <expr><name>MPC_INPUT_FILE</name></expr>:</case> <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content> <break>break;</break> </block_content>}</block>

<case>case <expr><name>MPC_INPUT_PIPE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <call><name>mpc_input_buffer_in_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<default>default:</default> <block>{<block_content> <break>break;</break> </block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_success</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_INPUT_PIPE</name>

<operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mpc_input_buffer_in_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>o</name><operator>)</operator> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>o</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>o</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_any</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><call><name>mpc_input_getc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_input_terminated</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><call><name>mpc_input_success</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_char</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><call><name>mpc_input_getc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_input_terminated</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <name>c</name></expr> ?</condition><then> <expr><call><name>mpc_input_success</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_input_failure</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_range</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><call><name>mpc_input_getc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_input_terminated</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name>d</name></expr> ?</condition><then> <expr><call><name>mpc_input_success</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_input_failure</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_oneof</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><call><name>mpc_input_getc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_input_terminated</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>mpc_input_success</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_input_failure</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_noneof</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><call><name>mpc_input_getc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_input_terminated</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>mpc_input_success</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_input_failure</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_satisfy</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>cond</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><call><name>mpc_input_getc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_input_terminated</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>cond</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>mpc_input_success</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_input_failure</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_string</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpc_input_mark</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>x</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_input_char</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_input_rewind</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>mpc_input_unmark</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_input_anchor</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name><modifier>*</modifier></type> <name>i</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>,<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><call><name>mpc_input_peekc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_state_t</name> <modifier>*</modifier></type><name>mpc_input_state_copy</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_state_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_err_delete</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_err_print</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_err_print_to</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_err_print_to</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>mpc_err_string</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_err_string_cat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>max</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator> <operator>+=</operator> <call><name>vsprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>char_unescape_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mpc_err_char_unescape</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>char_unescape_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>char_unescape_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>char_unescape_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>char_unescape_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\a'</literal></expr>:</case> <return>return <expr><literal type="string">"bell"</literal></expr>;</return>

<case>case <expr><literal type="char">'\b'</literal></expr>:</case> <return>return <expr><literal type="string">"backspace"</literal></expr>;</return>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case> <return>return <expr><literal type="string">"formfeed"</literal></expr>;</return>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <return>return <expr><literal type="string">"carriage return"</literal></expr>;</return>

<case>case <expr><literal type="char">'\v'</literal></expr>:</case> <return>return <expr><literal type="string">"vertical tab"</literal></expr>;</return>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> <return>return <expr><literal type="string">"end of input"</literal></expr>;</return>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <return>return <expr><literal type="string">"newline"</literal></expr>;</return>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <return>return <expr><literal type="string">"tab"</literal></expr>;</return>

<case>case <expr><literal type="char">' '</literal></expr> :</case> <return>return <expr><literal type="string">"space"</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><name><name>char_unescape_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><name>char_unescape_buffer</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>mpc_err_string</name><parameter_list>(<parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">1023</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>,

<argument><expr><literal type="string">"%s: error: %s\n"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, 

<argument><expr><literal type="string">"%s:%i:%i: error: expected "</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><literal type="string">"ERROR: NOTHING EXPECTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><literal type="string">"%s or %s"</literal></expr></argument>, 

<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, 

<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><literal type="string">" at "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><call><name>mpc_err_char_unescape</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>recieved</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_err_string_cat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_new</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>suppress</name></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_err_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>recieved</name></name> <operator>=</operator> <call><name>mpc_input_peekc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_fail</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>failure</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>suppress</name></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_err_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>failure</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name></expr></argument>, <argument><expr><name>failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>recieved</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>failure</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_err_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>mpc_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>failure</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name></expr></argument>, <argument><expr><name>failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>recieved</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_err_delete_internal</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_export</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>failure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_err_contains_expected</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_err_add_expected</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <call><name>mpc_realloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_or</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>fst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>fst</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fst</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_err_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>mpc_state_invalid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>fst</name></expr>]</index></name><operator>-&gt;</operator><name>filename</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>fst</name></expr>]</index></name><operator>-&gt;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>state</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>e</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>state</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>state</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>pos</name></name></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>failure</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>failure</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>failure</name></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>recieved</name></name> <operator>=</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>recieved</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>expected_num</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_err_contains_expected</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>expected</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_err_add_expected</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>expected</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpc_err_delete_internal</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>e</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_repeat</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>mpc_calloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <call><name>mpc_realloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>expect</name></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>expect</name></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" or "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><literal type="string">" or "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <call><name>mpc_realloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>expected_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>expect</name></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_many1</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_err_repeat</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"one or more of "</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_count</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>digits</name> <init>= <expr><name>n</name><operator>/</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>digits</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" of "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="string">"%i of "</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>mpc_err_repeat</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpc_err_merge</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name><name>errs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>errs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>errs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_err_or</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>errs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>MPC_TYPE_UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MPC_TYPE_PASS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MPC_TYPE_FAIL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>MPC_TYPE_LIFT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>MPC_TYPE_LIFT_VAL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>MPC_TYPE_EXPECT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>MPC_TYPE_ANCHOR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>MPC_TYPE_STATE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>MPC_TYPE_ANY</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>MPC_TYPE_SINGLE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>MPC_TYPE_ONEOF</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>MPC_TYPE_NONEOF</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>MPC_TYPE_RANGE</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>MPC_TYPE_SATISFY</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>MPC_TYPE_STRING</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>MPC_TYPE_APPLY</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>MPC_TYPE_APPLY_TO</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>MPC_TYPE_PREDICT</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>MPC_TYPE_NOT</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,

<decl><name>MPC_TYPE_MAYBE</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,

<decl><name>MPC_TYPE_MANY</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>MPC_TYPE_MANY1</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>MPC_TYPE_COUNT</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>MPC_TYPE_OR</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,

<decl><name>MPC_TYPE_AND</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_fail_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>mpc_ctor_t</name></type> <name>lf</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_lift_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_expect_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <function_decl><type><name>int</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>,<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl> }</block></struct></type> <name>mpc_pdata_anchor_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_single_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>y</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_range_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <function_decl><type><name>int</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl> }</block></struct></type> <name>mpc_pdata_satisfy_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_string_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_apply_t</name></type> <name>f</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_apply_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_apply_to_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_apply_to_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_predict_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_dtor_t</name></type> <name>dx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_ctor_t</name></type> <name>lf</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_not_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_dtor_t</name></type> <name>dx</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_repeat_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_or_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>mpc_dtor_t</name> <modifier>*</modifier></type><name>dxs</name></decl>;</decl_stmt> }</block></struct></type> <name>mpc_pdata_and_t</name>;</typedef>

<typedef>typedef <type><union>union <block>{

<decl_stmt><decl><type><name>mpc_pdata_fail_t</name></type> <name>fail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_lift_t</name></type> <name>lift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_expect_t</name></type> <name>expect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_anchor_t</name></type> <name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_single_t</name></type> <name>single</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_range_t</name></type> <name>range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_satisfy_t</name></type> <name>satisfy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_string_t</name></type> <name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_apply_t</name></type> <name>apply</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_apply_to_t</name></type> <name>apply_to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_predict_t</name></type> <name>predict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_not_t</name></type> <name>not</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_repeat_t</name></type> <name>repeat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_and_t</name></type> <name>and</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_or_t</name></type> <name>or</name></decl>;</decl_stmt>

}</block></union></type> <name>mpc_pdata_t</name>;</typedef>

<struct>struct <name>mpc_parser_t</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name>retained</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_pdata_t</name></type> <name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_nth_free</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></for>

<return>return <expr><name><name>xs</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_fst_free</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpcf_input_nth_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_snd_free</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpcf_input_nth_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_trd_free</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpcf_input_nth_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_strfold</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpc_calloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mpc_realloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_state_ast</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_state_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mpc_state_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mpc_ast_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>mpc_ast_state</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpc_parse_fold</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_null</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_null</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_fst</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_fst</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_snd</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_snd</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_trd</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_trd</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_fst_free</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_input_fst_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_snd_free</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_input_snd_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_trd_free</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_input_trd_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_strfold</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_input_strfold</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_state_ast</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_input_state_ast</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>xs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_free</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_input_str_ast</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>mpc_ast_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpc_parse_apply</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_apply_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_free</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_input_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mpcf_str_ast</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpcf_input_str_ast</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f</name><argument_list>(<argument><expr><call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpc_parse_apply_to</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_apply_to_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>f</name><argument_list>(<argument><expr><call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_parse_dtor</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>free</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>MPC_PARSE_STACK_MIN</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPC_SUCCESS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r-&gt;output = x; return 1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPC_FAILURE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r-&gt;error = x; return 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPC_PRIMITIVE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (x) { MPC_SUCCESS(r-&gt;output); } else { MPC_FAILURE(NULL); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_parse_run</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>mpc_err_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_result_t</name></type> <name><name>results_stk</name><index>[<expr><name>MPC_PARSE_STACK_MIN</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>results_slots</name> <init>= <expr><name>MPC_PARSE_STACK_MIN</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPC_TYPE_ANY</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_any</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_SINGLE</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_char</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>single</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_RANGE</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>range</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>range</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_ONEOF</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_oneof</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_NONEOF</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_noneof</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_SATISFY</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_satisfy</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>satisfy</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_STRING</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_string</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_ANCHOR</name></expr>:</case> <expr_stmt><expr><call><name>MPC_PRIMITIVE</name><argument_list>(<argument><expr><call><name>mpc_input_anchor</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>anchor</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_UNDEFINED</name></expr>:</case> <expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><call><name>mpc_err_fail</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"Parser Undefined!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_PASS</name></expr>:</case> <expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_FAIL</name></expr>:</case> <expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><call><name>mpc_err_fail</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_LIFT</name></expr>:</case> <expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><call><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lift</name><operator>.</operator><name>lf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_LIFT_VAL</name></expr>:</case> <expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lift</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_STATE</name></expr>:</case> <expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><call><name>mpc_input_state_copy</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>MPC_TYPE_APPLY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><call><name>mpc_parse_apply</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_APPLY_TO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><call><name>mpc_parse_apply_to</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_EXPECT</name></expr>:</case>

<expr_stmt><expr><call><name>mpc_input_suppress_enable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_input_suppress_disable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mpc_input_suppress_disable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><call><name>mpc_err_new</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_PREDICT</name></expr>:</case>

<expr_stmt><expr><call><name>mpc_input_backtrack_disable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>mpc_input_backtrack_enable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mpc_input_backtrack_enable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_NOT</name></expr>:</case>

<expr_stmt><expr><call><name>mpc_input_mark</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_suppress_enable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_input_rewind</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_suppress_disable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_parse_dtor</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><call><name>mpc_err_new</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"opposite"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mpc_input_unmark</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_suppress_disable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><call><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>lf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_MAYBE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <call><name>mpc_err_merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><call><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>lf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_MANY</name></expr>:</case>

<expr_stmt><expr><name>results</name> <operator>=</operator> <name>results_stk</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>MPC_PARSE_STACK_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>results_slots</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>j</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>results_slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>results_stk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MPC_PARSE_STACK_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>results_slots</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>results_slots</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>j</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>mpc_realloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>results_slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <call><name>mpc_err_merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>MPC_SUCCESS</name><argument_list>(

<argument>mpc_parse_fold(i, p-&gt;data.repeat.f, j, (mpc_val_t**)results);

if (j &gt;= MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<case>case <expr><name>MPC_TYPE_MANY1</name></expr>:</case>

<expr_stmt><expr><name>results</name> <operator>=</operator> <name>results_stk</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>MPC_PARSE_STACK_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>results_slots</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>j</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>results_slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>results_stk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MPC_PARSE_STACK_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>results_slots</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>results_slots</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>j</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>mpc_realloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>results_slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<macro><name>MPC_FAILURE</name><argument_list>(

<argument>mpc_err_many1(i, results[j].error);

if (j &gt;= MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <call><name>mpc_err_merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>MPC_SUCCESS</name><argument_list>(

<argument>mpc_parse_fold(i, p-&gt;data.repeat.f, j, (mpc_val_t**)results);

if (j &gt;= MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_COUNT</name></expr>:</case>

<expr_stmt><expr><name>results</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <name>MPC_PARSE_STACK_MIN</name></expr>

?</condition><then> <expr><call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>results_stk</name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>

<macro><name>MPC_SUCCESS</name><argument_list>(

<argument>mpc_parse_fold(i, p-&gt;data.repeat.f, j, (mpc_val_t**)results);

if (p-&gt;data.repeat.n &gt; MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_parse_dtor</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>MPC_FAILURE</name><argument_list>(

<argument>mpc_err_count(i, results[j].error, p-&gt;data.repeat.n);

if (p-&gt;data.repeat.n &gt; MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> 

</block_content>}</block></else></if_stmt>

<case>case <expr><name>MPC_TYPE_OR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>results</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <name>MPC_PARSE_STACK_MIN</name></expr>

?</condition><then> <expr><call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>results_stk</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>MPC_SUCCESS</name><argument_list>(<argument>results[j].output;

if (p-&gt;data.or.n &gt; MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <call><name>mpc_err_merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

</block_content>}</block></for>

<macro><name>MPC_FAILURE</name><argument_list>(<argument>NULL;

if (p-&gt;data.or.n &gt; MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<case>case <expr><name>MPC_TYPE_AND</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>MPC_SUCCESS</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>results</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <name>MPC_PARSE_STACK_MIN</name></expr>

?</condition><then> <expr><call><name>mpc_malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_result_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>results_stk</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_mark</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>results</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_input_rewind</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_parse_dtor</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>MPC_FAILURE</name><argument_list>(<argument>results[j].error;

if (p-&gt;data.or.n &gt; MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mpc_input_unmark</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<macro><name>MPC_SUCCESS</name><argument_list>(

<argument>mpc_parse_fold(i, p-&gt;data.and.f, j, (mpc_val_t**)results);

if (p-&gt;data.or.n &gt; MPC_PARSE_STACK_MIN) { mpc_free(i, results); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>MPC_FAILURE</name><argument_list>(<argument><expr><call><name>mpc_err_fail</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"Unknown Parser Type Id!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MPC_SUCCESS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MPC_FAILURE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MPC_PRIMITIVE</name></cpp:undef>

<function><type><name>int</name></type> <name>mpc_parse_input</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>mpc_err_fail</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"Unknown Error"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>mpc_state_invalid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mpc_parse_run</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_err_delete_internal</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>mpc_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>mpc_err_export</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>mpc_err_merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mpc_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>mpc_input_new_string</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mpc_parse_input</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_delete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mpc_parse_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>mpc_input_new_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mpc_parse_input</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_delete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mpc_parse_pipe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>mpc_input_new_pipe</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mpc_parse_input</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_delete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mpc_parse_contents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_result_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>mpc_err_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"Unable to open file!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mpc_parse_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mpc_undefine_unretained</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_undefine_or</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_undefine_and</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_undefine_unretained</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPC_TYPE_FAIL</name></expr>:</case> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_ONEOF</name></expr>:</case> 

<case>case <expr><name>MPC_TYPE_NONEOF</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>MPC_TYPE_APPLY</name></expr>:</case> <expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_APPLY_TO</name></expr>:</case> <expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_PREDICT</name></expr>:</case> <expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_MAYBE</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_NOT</name></expr>:</case>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_EXPECT</name></expr>:</case>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_MANY</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_MANY1</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_COUNT</name></expr>:</case>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_OR</name></expr>:</case> <expr_stmt><expr><call><name>mpc_undefine_or</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_AND</name></expr>:</case> <expr_stmt><expr><call><name>mpc_undefine_and</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_delete</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>MPC_TYPE_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_soft_delete</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_undefined</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_UNDEFINED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_copy</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>retained</name></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>a</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>retained</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPC_TYPE_FAIL</name></expr>:</case>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_ONEOF</name></expr>:</case> 

<case>case <expr><name>MPC_TYPE_NONEOF</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_STRING</name></expr>:</case>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_APPLY</name></expr>:</case> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_APPLY_TO</name></expr>:</case> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_PREDICT</name></expr>:</case> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MPC_TYPE_MAYBE</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_NOT</name></expr>:</case>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_EXPECT</name></expr>:</case>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_MANY</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_MANY1</name></expr>:</case>

<case>case <expr><name>MPC_TYPE_COUNT</name></expr>:</case>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_OR</name></expr>:</case>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MPC_TYPE_AND</name></expr>:</case>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mpc_copy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_undefine</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_undefine_unretained</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_UNDEFINED</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_define</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>mpc_failf</name><argument_list>(<argument><expr><literal type="string">"Attempt to assign to Unretained Parser!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>a2</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>a2</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>mpc_undefine</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>mpc_delete</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for> 

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_pass</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_PASS</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_failf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fail</name><operator>.</operator><name>m</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_lift_val</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_LIFT_VAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lift</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_lift</name><parameter_list>(<parameter><decl><type><name>mpc_ctor_t</name></type> <name>lf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_LIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lift</name><operator>.</operator><name>lf</name></name> <operator>=</operator> <name>lf</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_anchor</name><parameter_list>(<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>,<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_ANCHOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>anchor</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"anchor"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_STATE</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_expect</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_EXPECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_expectf</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_EXPECT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_any</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_ANY</name></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"any character"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_SINGLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>single</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expectf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"'%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_range</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_RANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>range</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>range</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expectf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"character between '%c' and '%c'"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_oneof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_ONEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expectf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"one of '%s'"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_noneof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_NONEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expectf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"none of '%s'"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_satisfy</name><parameter_list>(<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_SATISFY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>satisfy</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expectf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"character satisfying function %p"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expectf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_apply</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_apply_t</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_APPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_apply_to</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_apply_to_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_APPLY_TO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_predictive</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_PREDICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_not_lift</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>, <parameter><decl><type><name>mpc_ctor_t</name></type> <name>lf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_NOT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>dx</name></name> <operator>=</operator> <name>da</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>lf</name></name> <operator>=</operator> <name>lf</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_not</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_not_lift</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>da</name></expr></argument>, <argument><expr><name>mpcf_ctor_null</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_maybe_lift</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_ctor_t</name></type> <name>lf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_MAYBE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>lf</name></name> <operator>=</operator> <name>lf</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_maybe</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_maybe_lift</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>mpcf_ctor_null</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_many</name><parameter_list>(<parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_MANY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_many1</name><parameter_list>(<parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_MANY1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>dx</name></name> <operator>=</operator> <name>da</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_or</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_and</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_fold_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_soi_anchor</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>next</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>next</name></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>prev</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_eoi_anchor</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>next</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>prev</name></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>next</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_soi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_anchor</name><argument_list>(<argument><expr><name>mpc_soi_anchor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"start of input"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_eoi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_anchor</name><argument_list>(<argument><expr><name>mpc_eoi_anchor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"end of input"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_boundary_anchor</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>next</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal>

<literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal>

<literal type="string">"0123456789_"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>prev</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>next</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_boundary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_anchor</name><argument_list>(<argument><expr><name>mpc_boundary_anchor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"boundary"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_whitespace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">" \f\n\r\t\v"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"whitespace"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_whitespaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_whitespace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"spaces"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_blank</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><call><name>mpc_whitespaces</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_free</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"whitespace"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_newline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"newline"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tab"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_escape</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_digit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"0123456789"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"digit"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_hexdigit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"0123456789ABCDEFabcdef"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hex digit"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_octdigit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"01234567"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"oct digit"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_digits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_many1</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_digit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"digits"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_hexdigits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_many1</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_hexdigit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hex digits"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_octdigits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_many1</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_octdigit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"oct digits"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_lower</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lowercase letter"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_upper</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"uppercase letter"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_alpha</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"letter"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_underscore</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"underscore"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_alphanum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>mpc_alpha</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_digit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_underscore</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"alphanumeric"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_int</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><call><name>mpc_digits</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_int</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_hex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><call><name>mpc_hexdigits</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_hex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hexadecimal"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_oct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><call><name>mpc_octdigits</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_oct</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"octadecimal"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>mpc_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_hex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_oct</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_real</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p30</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p31</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p32</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>mpc_maybe_lift</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"+-"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>mpc_digits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>mpc_maybe_lift</name><argument_list>(<argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_digits</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p30</name> <operator>=</operator> <call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"eE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p31</name> <operator>=</operator> <call><name>mpc_maybe_lift</name><argument_list>(<argument><expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><literal type="string">"+-"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p32</name> <operator>=</operator> <call><name>mpc_digits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p3</name> <operator>=</operator> <call><name>mpc_maybe_lift</name><argument_list>(<argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name>p30</name></expr></argument>, <argument><expr><name>p31</name></expr></argument>, <argument><expr><name>p32</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_float</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><call><name>mpc_real</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_float</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_char_lit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_between</name><argument_list>(<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>mpc_escape</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_any</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_string_lit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>strchar</name> <init>= <expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>mpc_escape</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_noneof</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_between</name><argument_list>(<argument><expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name>strchar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_regex_lit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> 

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>regexchar</name> <init>= <expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>mpc_escape</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_noneof</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>mpc_expect</name><argument_list>(<argument><expr><call><name>mpc_between</name><argument_list>(<argument><expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name>regexchar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"regex"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_ident</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>mpc_alpha</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_underscore</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_alphanum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_startwith</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_soi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>mpcf_dtor_null</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_endwith</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_fst</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>mpc_eoi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_whole</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_soi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>mpc_eoi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_dtor_null</name></expr></argument>, <argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_stripl</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_blank</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>mpcf_dtor_null</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_stripr</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_fst</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>mpc_blank</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_dtor_null</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_strip</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_blank</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>mpc_blank</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_dtor_null</name></expr></argument>, <argument><expr><name>mpcf_dtor_null</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_fst</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>mpc_blank</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_dtor_null</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_sym</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_total</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>da</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_whole</name><argument_list>(<argument><expr><call><name>mpc_strip</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_between</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mpcf_snd_free</name></expr></argument>,

<argument><expr><call><name>mpc_string</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>mpc_string</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>free</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_parens</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_braces</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_brackets</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_squares</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_between</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mpcf_snd_free</name></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>free</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_parens</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_tok_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_braces</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_tok_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_brackets</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_tok_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_tok_squares</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_dtor_t</name></type> <name>ad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_tok_between</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_re_or</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></if>

<else>else <block>{<block_content> <return>return <expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_re_and</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_lift</name><argument_list>(<argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_re_repeat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_many1</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_maybe_lift</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpc_count</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_re_escape_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\a'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <return>return <expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <return>return <expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <return>return <expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <return>return <expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'\v'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_boundary</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_lift</name><argument_list>(<argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <return>return <expr><call><name>mpc_not_lift</name><argument_list>(<argument><expr><call><name>mpc_boundary</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_soi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_lift</name><argument_list>(<argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_eoi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_lift</name><argument_list>(<argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <return>return <expr><call><name>mpc_digit</name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <return>return <expr><call><name>mpc_not_lift</name><argument_list>(<argument><expr><call><name>mpc_digit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><call><name>mpc_whitespace</name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <return>return <expr><call><name>mpc_not_lift</name><argument_list>(<argument><expr><call><name>mpc_whitespace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <return>return <expr><call><name>mpc_alphanum</name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> <return>return <expr><call><name>mpc_not_lift</name><argument_list>(<argument><expr><call><name>mpc_alphanum</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_re_escape</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_any</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_soi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_lift</name><argument_list>(<argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd</name></expr></argument>, <argument><expr><call><name>mpc_eoi</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_lift</name><argument_list>(<argument><expr><name>mpcf_ctor_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mpc_re_escape_char</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>p</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>mpc_char</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mpc_char</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mpc_re_range_escape_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> <return>return <expr><literal type="string">"-"</literal></expr>;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><literal type="string">"\a"</literal></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <return>return <expr><literal type="string">"\f"</literal></expr>;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <return>return <expr><literal type="string">"\n"</literal></expr>;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <return>return <expr><literal type="string">"\r"</literal></expr>;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><literal type="string">"\t"</literal></expr>;</return>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <return>return <expr><literal type="string">"\v"</literal></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><literal type="string">"\b"</literal></expr>;</return>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <return>return <expr><literal type="string">"0123456789"</literal></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><literal type="string">" \f\n\r\t\v"</literal></expr>;</return>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <return>return <expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"</literal></expr>;</return>

<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_re_range</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><ternary><condition><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_fail</name><argument_list>(<argument><expr><literal type="string">"Invalid Regex Range Expression"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal> <operator>&amp;&amp;</operator> 

<name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpc_fail</name><argument_list>(<argument><expr><literal type="string">"Invalid Regex Range Expression"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>comp</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>mpc_re_range_escape_char</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out</name> <operator>=</operator> <ternary><condition><expr><name>comp</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>mpc_noneof</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_oneof</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpc_re</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>err_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_result_t</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>Regex</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Term</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Factor</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Range</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>RegexEnclose</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>Regex</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"regex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Term</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Factor</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"factor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Base</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Range</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Regex</name></expr></argument>, <argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_re_or</name></expr></argument>,

<argument><expr><name>Term</name></expr></argument>, 

<argument><expr><call><name>mpc_maybe</name><argument_list>(<argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd_free</name></expr></argument>, <argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Regex</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_delete</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Term</name></expr></argument>, <argument><expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_re_and</name></expr></argument>, <argument><expr><name>Factor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Factor</name></expr></argument>, <argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_re_repeat</name></expr></argument>,

<argument><expr><name>Base</name></expr></argument>,

<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,

<argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_brackets</name><argument_list>(<argument><expr><call><name>mpc_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_pass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_delete</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Base</name></expr></argument>, <argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><call><name>mpc_parens</name><argument_list>(<argument><expr><name>Regex</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_delete</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_squares</name><argument_list>(<argument><expr><name>Range</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_delete</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><call><name>mpc_escape</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mpcf_re_escape</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><call><name>mpc_noneof</name><argument_list>(<argument><expr><literal type="string">")|"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcf_re_escape</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Range</name></expr></argument>, <argument><expr><call><name>mpc_apply</name><argument_list>(

<argument><expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_strfold</name></expr></argument>, <argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>mpc_escape</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_noneof</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mpcf_re_range</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RegexEnclose</name> <operator>=</operator> <call><name>mpc_whole</name><argument_list>(<argument><expr><call><name>mpc_predictive</name><argument_list>(<argument><expr><name>Regex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>RegexEnclose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>mpc_parse</name><argument_list>(<argument><expr><literal type="string">"&lt;mpc_re_compiler&gt;"</literal></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>RegexEnclose</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>mpc_err_string</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err_out</name> <operator>=</operator> <call><name>mpc_failf</name><argument_list>(<argument><expr><literal type="string">"Invalid Regex: %s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_err_delete</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>err_out</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpc_cleanup</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>RegexEnclose</name></expr></argument>, <argument><expr><name>Regex</name></expr></argument>, <argument><expr><name>Term</name></expr></argument>, <argument><expr><name>Factor</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><name>Range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>r</name><operator>.</operator><name>output</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpcf_dtor_null</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>x</name></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_ctor_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_ctor_str</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_free</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_int</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_hex</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_oct</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_float</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strtriml</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strtrimr</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strtrim</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpcf_strtriml</name><argument_list>(<argument><expr><call><name>mpcf_strtrimr</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>mpc_escape_input_c</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="char">'\a'</literal></expr>, <expr><literal type="char">'\b'</literal></expr>, <expr><literal type="char">'\f'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>, <expr><literal type="char">'\r'</literal></expr>,

<expr><literal type="char">'\t'</literal></expr>, <expr><literal type="char">'\v'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'\''</literal></expr>, <expr><literal type="char">'\"'</literal></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpc_escape_output_c</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"\\a"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr>, <expr><literal type="string">"\\f"</literal></expr>, <expr><literal type="string">"\\n"</literal></expr>, <expr><literal type="string">"\\r"</literal></expr>, <expr><literal type="string">"\\t"</literal></expr>, 

<expr><literal type="string">"\\v"</literal></expr>, <expr><literal type="string">"\\\\"</literal></expr>, <expr><literal type="string">"\\'"</literal></expr>, <expr><literal type="string">"\\\""</literal></expr>, <expr><literal type="string">"\\0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>mpc_escape_input_raw_re</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'/'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpc_escape_output_raw_re</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"\\/"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>mpc_escape_input_raw_cstr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'"'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpc_escape_output_raw_cstr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"\\\""</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>mpc_escape_input_raw_cchar</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\''</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpc_escape_output_raw_cchar</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"\\'"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape_new</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape_new</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_escape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_c</name></expr></argument>, <argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_unescape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_c</name></expr></argument>, <argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape_regex</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_escape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_raw_re</name></expr></argument>, <argument><expr><name>mpc_escape_output_raw_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape_regex</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_unescape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_raw_re</name></expr></argument>, <argument><expr><name>mpc_escape_output_raw_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape_string_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_escape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_raw_cstr</name></expr></argument>, <argument><expr><name>mpc_escape_output_raw_cstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape_string_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_unescape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_raw_cstr</name></expr></argument>, <argument><expr><name>mpc_escape_output_raw_cstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_escape_char_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_escape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_raw_cchar</name></expr></argument>, <argument><expr><name>mpc_escape_output_raw_cchar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_unescape_char_raw</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_unescape_new</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>mpc_escape_input_raw_cchar</name></expr></argument>, <argument><expr><name>mpc_escape_output_raw_cchar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_null</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>xs</name></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_fst</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_snd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_trd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_nth_free</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>xs</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_fst_free</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpcf_nth_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_snd_free</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpcf_nth_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_trd_free</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpcf_nth_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_strfold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name>l</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_maths</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>vs</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%=</operator> <operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <operator>*</operator><name><name>vs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_print_unretained</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;anon&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_UNDEFINED</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;?&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_PASS</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;:&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_FAIL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;!&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_LIFT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;#&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_STATE</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;S&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_ANCHOR</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;@&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_EXPECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_ANY</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;.&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_SATISFY</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;f&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_SINGLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>single</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mpcf_escape_new</name><argument_list>(

<argument><expr><name>buff</name></expr></argument>,

<argument><expr><name>mpc_escape_input_c</name></expr></argument>,

<argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_RANGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>range</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mpcf_escape_new</name><argument_list>(

<argument><expr><name>buff</name></expr></argument>,

<argument><expr><name>mpc_escape_input_c</name></expr></argument>,

<argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>range</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>mpcf_escape_new</name><argument_list>(

<argument><expr><name>buff</name></expr></argument>,

<argument><expr><name>mpc_escape_input_c</name></expr></argument>,

<argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s-%s]"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_ONEOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mpcf_escape_new</name><argument_list>(

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>,

<argument><expr><name>mpc_escape_input_c</name></expr></argument>,

<argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_NONEOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mpcf_escape_new</name><argument_list>(

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>,

<argument><expr><name>mpc_escape_input_c</name></expr></argument>,

<argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[^%s]"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mpcf_escape_new</name><argument_list>(

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>x</name></name></expr></argument>,

<argument><expr><name>mpc_escape_input_c</name></expr></argument>,

<argument><expr><name>mpc_escape_output_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_APPLY</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_APPLY_TO</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_PREDICT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_NOT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MAYBE</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MANY</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MANY1</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_COUNT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{%i}"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_OR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" | "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_print</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_print_unretained</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mpc_test_fail</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>tester</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>mpc_dtor_t</name></type> <name>destructor</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>printer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_result_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>printer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse</name><argument_list>(<argument><expr><literal type="string">"&lt;test&gt;"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tester</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>destructor</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>destructor</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mpc_err_delete</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mpc_test_pass</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>tester</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, 

<parameter><decl><type><name>mpc_dtor_t</name></type> <name>destructor</name></decl></parameter>, 

<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>printer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_result_t</name></type> <name>r</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>mpc_parse</name><argument_list>(<argument><expr><literal type="string">"&lt;test&gt;"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tester</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>destructor</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Got "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printer</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Expected "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destructor</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>mpc_err_print</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_err_delete</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_ast_delete</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>children_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_ast_delete</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_ast_delete_no_children</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_ast_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>mpc_state_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>children_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>mpc_ast_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_ast_add_child</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>mpc_ast_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_add_root</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>a</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>children_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>a</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>children_num</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>a</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mpc_ast_new</name><argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_ast_add_child</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mpc_ast_eq</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>children_num</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>children_num</name></name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>children_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_ast_eq</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_add_child</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>children_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_ast_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>children_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>children_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_add_tag</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>a</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_tag</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>mpc_ast_state</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mpc_state_t</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>a</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_ast_print_depth</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s:%lu:%lu '%s'\n"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, 

<argument><expr><operator>(</operator><name>long</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>long</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>col</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s \n"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>children_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_ast_print_depth</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_ast_print</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_ast_print_depth</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_ast_print_to</name><parameter_list>(<parameter><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_ast_print_depth</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_fold_ast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_ast_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>as</name> <init>= <expr><operator>(</operator><name>mpc_ast_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mpc_ast_new</name><argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>as</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>children_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>as</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>children_num</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_ast_add_child</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>children</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mpc_ast_delete_no_children</name><argument_list>(<argument><expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>as</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>children_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_ast_add_child</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>children_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_str_ast</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>mpc_ast_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcf_state_ast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_state_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mpc_state_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_ast_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mpc_ast_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>mpc_ast_state</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_state</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_state_ast</name></expr></argument>, <argument><expr><call><name>mpc_state</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_tag</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_apply_to_t</name><operator>)</operator><name>mpc_ast_tag</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_add_tag</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_apply_to_t</name><operator>)</operator><name>mpc_ast_add_tag</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_root</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>mpc_apply</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_apply_t</name><operator>)</operator><name>mpc_ast_add_root</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_not</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_not</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_ast_delete</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_maybe</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_maybe</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_many</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpcf_fold_ast</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_many1</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_many1</name><argument_list>(<argument><expr><name>mpcf_fold_ast</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_count</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>mpcf_fold_ast</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_ast_delete</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_or</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_and</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_undefined</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MPC_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>mpcf_fold_ast</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_ast_delete</name></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_total</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mpc_total</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_ast_delete</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>va_list</name> <modifier>*</modifier></type><name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parsers_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>parsers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>mpca_grammar_st_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcaf_grammar_or</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></if>

<else>else <block>{<block_content> <return>return <expr><call><name>mpca_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcaf_grammar_and</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpc_pass</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mpca_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcaf_grammar_repeat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpca_many</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpca_many1</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpca_maybe</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>mpca_not</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpca_count</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcaf_grammar_string</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_unescape</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MPCA_LANG_WHITESPACE_SENSITIVE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>mpc_string</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_string</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpca_state</name><argument_list>(<argument><expr><call><name>mpca_tag</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mpcf_str_ast</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcaf_grammar_char</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_unescape</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MPCA_LANG_WHITESPACE_SENSITIVE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>mpc_char</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_char</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpca_state</name><argument_list>(<argument><expr><call><name>mpca_tag</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mpcf_str_ast</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcaf_grammar_regex</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpcf_unescape_regex</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MPCA_LANG_WHITESPACE_SENSITIVE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>mpc_re</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_re</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mpca_state</name><argument_list>(<argument><expr><call><name>mpca_tag</name><argument_list>(<argument><expr><call><name>mpc_apply</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mpcf_str_ast</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"regex"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"0123456789"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt> </block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_grammar_find_parser</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_number</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name><name>st</name><operator>-&gt;</operator><name>va</name></name></expr></argument>, <argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>parsers</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mpc_failf</name><argument_list>(<argument><expr><literal type="string">"No Parser in position %i! Only supplied %i Parsers!"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpc_failf</name><argument_list>(<argument><expr><literal type="string">"Unknown Parser '%s'!"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>q</name></expr>;</return> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><operator>*</operator><name><name>st</name><operator>-&gt;</operator><name>va</name></name></expr></argument>, <argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>parsers</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>parsers_num</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>mpc_failf</name><argument_list>(<argument><expr><literal type="string">"Unknown Parser '%s'!"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>p</name></expr>;</return> </block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpcaf_grammar_id</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpca_grammar_find_parser</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mpca_state</name><argument_list>(<argument><expr><call><name>mpca_root</name><argument_list>(<argument><expr><call><name>mpca_add_tag</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>mpca_state</name><argument_list>(<argument><expr><call><name>mpca_root</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_grammar_st</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>grammar</name></decl></parameter>, <parameter><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>err_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_result_t</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>GrammarTotal</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Grammar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Term</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Factor</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Base</name></decl>;</decl_stmt>

<expr_stmt><expr><name>GrammarTotal</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"grammar_total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Grammar</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"grammar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Term</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Factor</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"factor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Base</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>GrammarTotal</name></expr></argument>,

<argument><expr><call><name>mpc_predictive</name><argument_list>(<argument><expr><call><name>mpc_total</name><argument_list>(<argument><expr><name>Grammar</name></expr></argument>, <argument><expr><name>mpc_soft_delete</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Grammar</name></expr></argument>, <argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcaf_grammar_or</name></expr></argument>,

<argument><expr><name>Term</name></expr></argument>,

<argument><expr><call><name>mpc_maybe</name><argument_list>(<argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd_free</name></expr></argument>, <argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Grammar</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mpc_soft_delete</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Term</name></expr></argument>, <argument><expr><call><name>mpc_many1</name><argument_list>(<argument><expr><name>mpcaf_grammar_and</name></expr></argument>, <argument><expr><name>Factor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Factor</name></expr></argument>, <argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcaf_grammar_repeat</name></expr></argument>,

<argument><expr><name>Base</name></expr></argument>,

<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_tok_brackets</name><argument_list>(<argument><expr><call><name>mpc_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_pass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mpc_soft_delete</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Base</name></expr></argument>, <argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_string_lit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_string</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_char_lit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_char</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_regex_lit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_regex</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok_braces</name><argument_list>(<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>mpc_digits</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_ident</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_id</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_tok_parens</name><argument_list>(<argument><expr><name>Grammar</name></expr></argument>, <argument><expr><name>mpc_soft_delete</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>GrammarTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Grammar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>mpc_parse</name><argument_list>(<argument><expr><literal type="string">"&lt;mpc_grammar_compiler&gt;"</literal></expr></argument>, <argument><expr><name>grammar</name></expr></argument>, <argument><expr><name>GrammarTotal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>mpc_err_string</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err_out</name> <operator>=</operator> <call><name>mpc_failf</name><argument_list>(<argument><expr><literal type="string">"Invalid Grammar: %s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_err_delete</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>err_out</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpc_cleanup</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrammarTotal</name></expr></argument>, <argument><expr><name>Grammar</name></expr></argument>, <argument><expr><name>Term</name></expr></argument>, <argument><expr><name>Factor</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MPCA_LANG_PREDICTIVE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>mpc_predictive</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>r</name><operator>.</operator><name>output</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>mpca_grammar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>grammar</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>grammar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>va</name></name> <operator>=</operator> <operator>&amp;</operator><name>va</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mpca_grammar_st</name><argument_list>(<argument><expr><name>grammar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>parsers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>grammar</name></decl>;</decl_stmt>

}</block></struct></type> <name>mpca_stmt_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpca_stmt_afold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_stmt_t</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpca_stmt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>ident</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mpc_parser_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>xs</name><operator>)</operator><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stmt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpca_stmt_fold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpca_stmt_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stmts</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpca_stmt_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>stmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>stmts</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<return>return <expr><name>stmts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpca_stmt_list_delete</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_stmt_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stmts</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>stmts</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_stmt_t</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>*</operator><name>stmts</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_soft_delete</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>stmts</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_val_t</name> <modifier>*</modifier></type><name>mpca_stmt_list_apply_to</name><parameter_list>(<parameter><decl><type><name>mpc_val_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpca_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpca_stmt_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stmts</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>stmts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>*</operator><name>stmts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>mpca_grammar_find_parser</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MPCA_LANG_PREDICTIVE</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name> <operator>=</operator> <call><name>mpc_predictive</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name> <operator>=</operator> <call><name>mpc_expect</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>grammar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stmts</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang_st</name><parameter_list>(<parameter><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>mpca_grammar_st_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpc_result_t</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>Lang</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Stmt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Grammar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Term</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Factor</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Base</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>Lang</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"lang"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Stmt</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"stmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Grammar</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"grammar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Term</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Factor</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"factor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Base</name> <operator>=</operator> <call><name>mpc_new</name><argument_list>(<argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Lang</name></expr></argument>, <argument><expr><call><name>mpc_apply_to</name><argument_list>(

<argument><expr><call><name>mpc_total</name><argument_list>(<argument><expr><call><name>mpc_predictive</name><argument_list>(<argument><expr><call><name>mpc_many</name><argument_list>(<argument><expr><name>mpca_stmt_fold</name></expr></argument>, <argument><expr><name>Stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpca_stmt_list_delete</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mpca_stmt_list_apply_to</name></expr></argument>, <argument><expr><name>st</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Stmt</name></expr></argument>, <argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>mpca_stmt_afold</name></expr></argument>,

<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_ident</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_maybe</name><argument_list>(<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_string_lit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Grammar</name></expr></argument>, <argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>free</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>mpc_soft_delete</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Grammar</name></expr></argument>, <argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcaf_grammar_or</name></expr></argument>,

<argument><expr><name>Term</name></expr></argument>,

<argument><expr><call><name>mpc_maybe</name><argument_list>(<argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcf_snd_free</name></expr></argument>, <argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Grammar</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mpc_soft_delete</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Term</name></expr></argument>, <argument><expr><call><name>mpc_many1</name><argument_list>(<argument><expr><name>mpcaf_grammar_and</name></expr></argument>, <argument><expr><name>Factor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Factor</name></expr></argument>, <argument><expr><call><name>mpc_and</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mpcaf_grammar_repeat</name></expr></argument>,

<argument><expr><name>Base</name></expr></argument>,

<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_sym</name><argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_tok_brackets</name><argument_list>(<argument><expr><call><name>mpc_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_pass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mpc_soft_delete</name></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_define</name><argument_list>(<argument><expr><name>Base</name></expr></argument>, <argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_string_lit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_string</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_char_lit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_char</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok</name><argument_list>(<argument><expr><call><name>mpc_regex_lit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_regex</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_apply_to</name><argument_list>(<argument><expr><call><name>mpc_tok_braces</name><argument_list>(<argument><expr><call><name>mpc_or</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>mpc_digits</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>mpc_ident</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mpcaf_grammar_id</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mpc_tok_parens</name><argument_list>(<argument><expr><name>Grammar</name></expr></argument>, <argument><expr><name>mpc_soft_delete</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Grammar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_optimise</name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mpc_parse_input</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>error</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mpc_cleanup</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>Lang</name></expr></argument>, <argument><expr><name>Stmt</name></expr></argument>, <argument><expr><name>Grammar</name></expr></argument>, <argument><expr><name>Term</name></expr></argument>, <argument><expr><name>Factor</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>va</name></name> <operator>=</operator> <operator>&amp;</operator><name>va</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mpc_input_new_file</name><argument_list>(<argument><expr><literal type="string">"&lt;mpca_lang_file&gt;"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mpca_lang_st</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_delete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>parsers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>va</name></name> <operator>=</operator> <operator>&amp;</operator><name>va</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mpc_input_new_pipe</name><argument_list>(<argument><expr><literal type="string">"&lt;mpca_lang_pipe&gt;"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mpca_lang_st</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_delete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>parsers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>language</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>va</name></name> <operator>=</operator> <operator>&amp;</operator><name>va</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mpc_input_new_string</name><argument_list>(<argument><expr><literal type="string">"&lt;mpca_lang&gt;"</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mpca_lang_st</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_delete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>parsers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>mpca_lang_contents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mpca_grammar_st_t</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_input_t</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_err_t</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mpc_err_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"Unable to open file!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>va</name></name> <operator>=</operator> <operator>&amp;</operator><name>va</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>parsers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mpc_input_new_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mpca_lang_st</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_input_delete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>parsers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc_nodecount_unretained</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_EXPECT</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_APPLY</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_APPLY_TO</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_PREDICT</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_NOT</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MAYBE</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MANY</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MANY1</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_COUNT</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_OR</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_stats</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Stats\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"=====\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Node Count: %i\n"</literal></expr></argument>, <argument><expr><call><name>mpc_nodecount_unretained</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc_optimise_unretained</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>retained</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_EXPECT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>expect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_APPLY</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_APPLY_TO</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>apply_to</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_PREDICT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>predict</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_NOT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MAYBE</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>not</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MANY</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_MANY1</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_COUNT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>repeat</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_OR</name></expr>)</condition> <block>{<block_content> 

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt> 

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_OR</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_OR</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_OR</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_OR</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <name>m</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>or</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_PASS</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_fold_ast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_delete</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_fold_ast</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_fold_ast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <name>m</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_ast_delete</name></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_fold_ast</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_fold_ast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mpc_dtor_t</name><operator>)</operator><name>mpc_ast_delete</name></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_LIFT</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>lift</name><operator>.</operator><name>lf</name></name> <operator>==</operator> <name>mpcf_ctor_str</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_strfold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpc_delete</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_strfold</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_strfold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <name>m</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_strfold</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPC_TYPE_AND</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>retained</name>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>mpcf_strfold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpc_dtor_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpc_parser_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>xs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>and</name><operator>.</operator><name>dxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mpc_optimise</name><parameter_list>(<parameter><decl><type><name>mpc_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mpc_optimise_unretained</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
