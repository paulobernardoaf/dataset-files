<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\zip\include\zlib.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zconf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_VERSION</name></cpp:macro> <cpp:value>"1.2.8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_VERNUM</name></cpp:macro> <cpp:value>0x1280</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_VER_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_VER_MINOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_VER_REVISION</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_VER_SUBREVISION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <macro><name>voidpf</name> <argument_list>(<argument>*alloc_func</argument>)</argument_list></macro> <expr_stmt><expr><call><name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>voidpf</name> <name>opaque</name><operator>,</operator> <name>uInt</name> <name>items</name><operator>,</operator> <name>uInt</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<typedef>typedef <macro><name>void</name> <argument_list>(<argument>*free_func</argument>)</argument_list></macro> <expr_stmt><expr><call><name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>voidpf</name> <name>opaque</name><operator>,</operator> <name>voidpf</name> <name>address</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<struct_decl>struct <name>internal_state</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>z_stream_s</name> <block>{

<decl_stmt><decl><type><name>z_const</name> <name>Bytef</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>avail_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uLong</name></type> <name>total_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>next_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>avail_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uLong</name></type> <name>total_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>z_const</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>internal_state</name></name> <name>FAR</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>alloc_func</name></type> <name>zalloc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>free_func</name></type> <name>zfree</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>voidpf</name></type> <name>opaque</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>data_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uLong</name></type> <name>adler</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uLong</name></type> <name>reserved</name></decl>;</decl_stmt> 

}</block></struct></type> <name>z_stream</name>;</typedef>

<typedef>typedef <type><name>z_stream</name> <name>FAR</name> <modifier>*</modifier></type><name>z_streamp</name>;</typedef>

<typedef>typedef <type><struct>struct <name>gz_header_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uLong</name></type> <name>time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xflags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>os</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>extra_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>extra_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>name_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uInt</name></type> <name>comm_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hcrc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt> 

}</block></struct></type> <name>gz_header</name>;</typedef>

<typedef>typedef <type><name>gz_header</name> <name>FAR</name> <modifier>*</modifier></type><name>gz_headerp</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_NO_FLUSH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_PARTIAL_FLUSH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_SYNC_FLUSH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_FULL_FLUSH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_FINISH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_BLOCK</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_TREES</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_STREAM_END</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_NEED_DICT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_ERRNO</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_STREAM_ERROR</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_DATA_ERROR</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_MEM_ERROR</name></cpp:macro> <cpp:value>(-4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_BUF_ERROR</name></cpp:macro> <cpp:value>(-5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_VERSION_ERROR</name></cpp:macro> <cpp:value>(-6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_NO_COMPRESSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_BEST_SPEED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_BEST_COMPRESSION</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_DEFAULT_COMPRESSION</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_FILTERED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_HUFFMAN_ONLY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_RLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_FIXED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_DEFAULT_STRATEGY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_TEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_ASCII</name></cpp:macro> <cpp:value>Z_TEXT</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_UNKNOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_DEFLATED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zlib_version</name></cpp:macro> <cpp:value>zlibVersion()</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ZEXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>ZEXPORT</name> <name>zlibVersion</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflate</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator> <name>int</name> <name>flush</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateEnd</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflate</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator> <name>int</name> <name>flush</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateEnd</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateSetDictionary</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<specifier>const</specifier> <name>Bytef</name> <operator>*</operator><name>dictionary</name><operator>,</operator>

<name>uInt</name> <name>dictLength</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateCopy</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>dest</name><operator>,</operator>

<name>z_streamp</name> <name>source</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateReset</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateParams</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>int</name> <name>level</name><operator>,</operator>

<name>int</name> <name>strategy</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateTune</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>int</name> <name>good_length</name><operator>,</operator>

<name>int</name> <name>max_lazy</name><operator>,</operator>

<name>int</name> <name>nice_length</name><operator>,</operator>

<name>int</name> <name>max_chain</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>deflateBound</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>uLong</name> <name>sourceLen</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflatePending</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>unsigned</name> <operator>*</operator><name>pending</name><operator>,</operator>

<name>int</name> <operator>*</operator><name>bits</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflatePrime</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>int</name> <name>bits</name><operator>,</operator>

<name>int</name> <name>value</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateSetHeader</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>gz_headerp</name> <name>head</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateSetDictionary</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<specifier>const</specifier> <name>Bytef</name> <operator>*</operator><name>dictionary</name><operator>,</operator>

<name>uInt</name> <name>dictLength</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateGetDictionary</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>Bytef</name> <operator>*</operator><name>dictionary</name><operator>,</operator>

<name>uInt</name> <operator>*</operator><name>dictLength</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateSync</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateCopy</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>dest</name><operator>,</operator>

<name>z_streamp</name> <name>source</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateReset</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateReset2</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>int</name> <name>windowBits</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflatePrime</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>int</name> <name>bits</name><operator>,</operator>

<name>int</name> <name>value</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>long</name> <name>ZEXPORT</name> <name>inflateMark</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateGetHeader</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>gz_headerp</name> <name>head</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <macro><name>unsigned</name> <argument_list>(<argument>*in_func</argument>)</argument_list></macro> <expr_stmt><expr><call><name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <name>FAR</name> <operator>*</operator><operator>,</operator>

<name>z_const</name> <name>unsigned</name> <name>char</name> <name>FAR</name> <operator>*</operator> <name>FAR</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<typedef>typedef <macro><name>int</name> <argument_list>(<argument>*out_func</argument>)</argument_list></macro> <expr_stmt><expr><call><name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <name>FAR</name> <operator>*</operator><operator>,</operator> <name>unsigned</name> <name>char</name> <name>FAR</name> <operator>*</operator><operator>,</operator> <name>unsigned</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateBack</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<name>in_func</name> <name>in</name><operator>,</operator> <name>void</name> <name>FAR</name> <operator>*</operator><name>in_desc</name><operator>,</operator>

<name>out_func</name> <name>out</name><operator>,</operator> <name>void</name> <name>FAR</name> <operator>*</operator><name>out_desc</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateBackEnd</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>zlibCompileFlags</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Z_SOLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>compress</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>Bytef</name> <operator>*</operator><name>dest</name><operator>,</operator> <name>uLongf</name> <operator>*</operator><name>destLen</name><operator>,</operator>

<specifier>const</specifier> <name>Bytef</name> <operator>*</operator><name>source</name><operator>,</operator> <name>uLong</name> <name>sourceLen</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>compress2</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>Bytef</name> <operator>*</operator><name>dest</name><operator>,</operator> <name>uLongf</name> <operator>*</operator><name>destLen</name><operator>,</operator>

<specifier>const</specifier> <name>Bytef</name> <operator>*</operator><name>source</name><operator>,</operator> <name>uLong</name> <name>sourceLen</name><operator>,</operator>

<name>int</name> <name>level</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>compressBound</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name> <name>sourceLen</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>uncompress</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>Bytef</name> <operator>*</operator><name>dest</name><operator>,</operator> <name>uLongf</name> <operator>*</operator><name>destLen</name><operator>,</operator>

<specifier>const</specifier> <name>Bytef</name> <operator>*</operator><name>source</name><operator>,</operator> <name>uLong</name> <name>sourceLen</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>gzFile_s</name></name> <modifier>*</modifier></type><name>gzFile</name>;</typedef> 

<decl_stmt><decl><type><name>ZEXTERN</name> <name>gzFile</name> <name>ZEXPORT</name> <name>gzdopen</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>fd</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzbuffer</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <name>unsigned</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzsetparams</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <name>int</name> <name>level</name><operator>,</operator> <name>int</name> <name>strategy</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzread</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <name>voidp</name> <name>buf</name><operator>,</operator> <name>unsigned</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzwrite</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator>

<name>voidpc</name> <name>buf</name><operator>,</operator> <name>unsigned</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORTVA</name> <name>gzprintf</name></type> <name>Z_ARG</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzputs</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>char</name> <modifier>*</modifier> <name>ZEXPORT</name> <name>gzgets</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <name>char</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>int</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzputc</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzgetc</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzungetc</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>,</operator> <name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzflush</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <name>int</name> <name>flush</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzrewind</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzeof</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzdirect</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzclose</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzclose_r</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzclose_w</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>ZEXPORT</name> <name>gzerror</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator> <name>int</name> <operator>*</operator><name>errnum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>void</name> <name>ZEXPORT</name> <name>gzclearerr</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>adler32</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name> <name>adler</name><operator>,</operator> <specifier>const</specifier> <name>Bytef</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>uInt</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>crc32</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name> <name>crc</name><operator>,</operator> <specifier>const</specifier> <name>Bytef</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>uInt</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateInit_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator> <name>int</name> <name>level</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>version</name><operator>,</operator> <name>int</name> <name>stream_size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateInit_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>version</name><operator>,</operator> <name>int</name> <name>stream_size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateInit2_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator> <name>int</name> <name>level</name><operator>,</operator> <name>int</name> <name>method</name><operator>,</operator>

<name>int</name> <name>windowBits</name><operator>,</operator> <name>int</name> <name>memLevel</name><operator>,</operator>

<name>int</name> <name>strategy</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>version</name><operator>,</operator>

<name>int</name> <name>stream_size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateInit2_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator> <name>int</name> <name>windowBits</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>version</name><operator>,</operator> <name>int</name> <name>stream_size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateBackInit_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name> <name>strm</name><operator>,</operator> <name>int</name> <name>windowBits</name><operator>,</operator>

<name>unsigned</name> <name>char</name> <name>FAR</name> <operator>*</operator><name>window</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>version</name><operator>,</operator>

<name>int</name> <name>stream_size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deflateInit</name><parameter_list>(<parameter><type><name>strm</name></type></parameter>, <parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>deflateInit_((strm), (level), ZLIB_VERSION, (int)sizeof(z_stream))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit</name><parameter_list>(<parameter><type><name>strm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deflateInit2</name><parameter_list>(<parameter><type><name>strm</name></type></parameter>, <parameter><type><name>level</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><name>windowBits</name></type></parameter>, <parameter><type><name>memLevel</name></type></parameter>, <parameter><type><name>strategy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>deflateInit2_((strm),(level),(method),(windowBits),(memLevel),(strategy), ZLIB_VERSION, (int)sizeof(z_stream))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit2</name><parameter_list>(<parameter><type><name>strm</name></type></parameter>, <parameter><type><name>windowBits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inflateInit2_((strm), (windowBits), ZLIB_VERSION, (int)sizeof(z_stream))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateBackInit</name><parameter_list>(<parameter><type><name>strm</name></type></parameter>, <parameter><type><name>windowBits</name></type></parameter>, <parameter><type><name>window</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inflateBackInit_((strm), (windowBits), (window), ZLIB_VERSION, (int)sizeof(z_stream))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Z_SOLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>gzFile_s</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>have</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_off64_t</name></type> <name>pos</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>gzgetc_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Z_PREFIX_SET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>z_gzgetc</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z_gzgetc</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((g)-&gt;have ? ((g)-&gt;have--, (g)-&gt;pos++, *((g)-&gt;next)++) : gzgetc(g))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gzgetc</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((g)-&gt;have ? ((g)-&gt;have--, (g)-&gt;pos++, *((g)-&gt;next)++) : gzgetc(g))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Z_LARGE64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ZEXTERN</name> <name>gzFile</name> <name>ZEXPORT</name> <name>gzopen64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off64_t</name> <name>ZEXPORT</name> <name>gzseek64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>,</operator> <name>z_off64_t</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off64_t</name> <name>ZEXPORT</name> <name>gztell64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off64_t</name> <name>ZEXPORT</name> <name>gzoffset64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>adler32_combine64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off64_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>crc32_combine64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off64_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ZLIB_INTERNAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>Z_WANT64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Z_PREFIX_SET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z_gzopen</name></cpp:macro> <cpp:value>z_gzopen64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z_gzseek</name></cpp:macro> <cpp:value>z_gzseek64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z_gztell</name></cpp:macro> <cpp:value>z_gztell64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z_gzoffset</name></cpp:macro> <cpp:value>z_gzoffset64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z_adler32_combine</name></cpp:macro> <cpp:value>z_adler32_combine64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>z_crc32_combine</name></cpp:macro> <cpp:value>z_crc32_combine64</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gzopen</name></cpp:macro> <cpp:value>gzopen64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gzseek</name></cpp:macro> <cpp:value>gzseek64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gztell</name></cpp:macro> <cpp:value>gztell64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gzoffset</name></cpp:macro> <cpp:value>gzoffset64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>adler32_combine</name></cpp:macro> <cpp:value>adler32_combine64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>crc32_combine</name></cpp:macro> <cpp:value>crc32_combine64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Z_LARGE64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ZEXTERN</name> <name>gzFile</name> <name>ZEXPORT</name> <name>gzopen64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off_t</name> <name>ZEXPORT</name> <name>gzseek64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>,</operator> <name>z_off_t</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off_t</name> <name>ZEXPORT</name> <name>gztell64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off_t</name> <name>ZEXPORT</name> <name>gzoffset64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>adler32_combine64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>crc32_combine64</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>gzFile</name> <name>ZEXPORT</name> <name>gzopen</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off_t</name> <name>ZEXPORT</name> <name>gzseek</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>,</operator> <name>z_off_t</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off_t</name> <name>ZEXPORT</name> <name>gztell</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>z_off_t</name> <name>ZEXPORT</name> <name>gzoffset</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>adler32_combine</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>crc32_combine</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>adler32_combine</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>uLong</name> <name>ZEXPORT</name> <name>crc32_combine</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name><operator>,</operator> <name>uLong</name><operator>,</operator> <name>z_off_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ZUTIL_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_DUMMY_DECL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>internal_state</name> <block>{<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ZEXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>ZEXPORT</name> <name>zError</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateSyncPoint</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <modifier>*</modifier> <name>ZEXPORT</name> <name>get_crc_table</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateUndermine</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>inflateResetKeep</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORT</name> <name>deflateResetKeep</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>z_streamp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Z_SOLO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>ZEXTERN</name> <name>gzFile</name> <name>ZEXPORT</name> <name>gzopen_w</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><name>path</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>Z_HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Z_SOLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ZEXTERN</name> <name>int</name> <name>ZEXPORTVA</name> <name>gzvprintf</name></type> <name>Z_ARG</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name> <name>file</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name><operator>,</operator>

<name>va_list</name> <name>va</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
