<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\zip\zlib\inftrees.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inftrees.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBITS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>inflate_copyright</name><index>[]</index></name> <init>=

<expr><literal type="string">" inflate 1.2.11 Copyright 1995-2017 Mark Adler "</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name> <name>ZLIB_INTERNAL</name></type> <name>inflate_table</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>lens</name></type></decl></parameter>, <parameter><decl><type><name>codes</name></type></decl></parameter>, <parameter><decl><type><name>table</name></type></decl></parameter>, <parameter><decl><type><name>bits</name></type></decl></parameter>, <parameter><decl><type><name>work</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>codetype</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>lens</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>codes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>code</name> <name>FAR</name> <modifier>*</modifier> <name>FAR</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>FAR</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>work</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>sym</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>root</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>curr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>drop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>used</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>huff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>incr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>fill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>low</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>code</name></type> <name>here</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>code</name> <name>FAR</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>match</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>count</name><index>[<expr><name>MAXBITS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>offs</name><index>[<expr><name>MAXBITS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>lbase</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">35</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>lext</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">202</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>dbase</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">193</literal></expr>,

<expr><literal type="number">257</literal></expr>, <expr><literal type="number">385</literal></expr>, <expr><literal type="number">513</literal></expr>, <expr><literal type="number">769</literal></expr>, <expr><literal type="number">1025</literal></expr>, <expr><literal type="number">1537</literal></expr>, <expr><literal type="number">2049</literal></expr>, <expr><literal type="number">3073</literal></expr>, <expr><literal type="number">4097</literal></expr>, <expr><literal type="number">6145</literal></expr>,

<expr><literal type="number">8193</literal></expr>, <expr><literal type="number">12289</literal></expr>, <expr><literal type="number">16385</literal></expr>, <expr><literal type="number">24577</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>dext</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>,

<expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,

<expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <name>MAXBITS</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>count</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sym</name> <operator>&lt;</operator> <name>codes</name></expr>;</condition> <incr><expr><name>sym</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>count</name><index>[<expr><name><name>lens</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>root</name> <operator>=</operator> <operator>*</operator><name>bits</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>max</name> <operator>=</operator> <name>MAXBITS</name></expr>;</init> <condition><expr><name>max</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>max</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>max</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>root</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>root</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">64</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>here</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>here</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>min</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>min</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>min</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>root</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>root</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <name>MAXBITS</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>count</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>CODES</name> <operator>||</operator> <name>max</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>offs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>MAXBITS</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>offs</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>offs</name><index>[<expr><name>len</name></expr>]</index></name> <operator>+</operator> <name><name>count</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sym</name> <operator>&lt;</operator> <name>codes</name></expr>;</condition> <incr><expr><name>sym</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>lens</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>work</name><index>[<expr><name><name>offs</name><index>[<expr><name><name>lens</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>sym</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CODES</name></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>extra</name> <operator>=</operator> <name>work</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LENS</name></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>lbase</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>lext</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">257</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>dbase</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>dext</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>huff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><name>table</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>drop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>low</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>root</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>used</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>LENS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_LENS</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>type</name> <operator>==</operator> <name>DISTS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_DISTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>drop</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>+</operator> <literal type="number">1U</literal> <operator>&lt;</operator> <name>match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>&gt;=</operator> <name>match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>extra</name><index>[<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>-</operator> <name>match</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>base</name><index>[<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>-</operator> <name>match</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>drop</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>curr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt> 

<do>do <block>{<block_content>

<expr_stmt><expr><name>fill</name> <operator>-=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><index>[<expr><operator>(</operator><name>huff</name> <operator>&gt;&gt;</operator> <name>drop</name><operator>)</operator> <operator>+</operator> <name>fill</name></expr>]</index></name> <operator>=</operator> <name>here</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>fill</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>huff</name> <operator>&amp;</operator> <name>incr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>incr</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>incr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>huff</name> <operator>&amp;=</operator> <name>incr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>huff</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>huff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sym</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><operator>(</operator><name><name>count</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>lens</name><index>[<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>root</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>huff</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <name>low</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>drop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>drop</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>drop</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>curr</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>curr</name> <operator>+</operator> <name>drop</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>count</name><index>[<expr><name>curr</name> <operator>+</operator> <name>drop</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>used</name> <operator>+=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>curr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>LENS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_LENS</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>type</name> <operator>==</operator> <name>DISTS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_DISTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>huff</name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><index>[<expr><name>low</name></expr>]</index><operator>.</operator><name>op</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>curr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><index>[<expr><name>low</name></expr>]</index><operator>.</operator><name>bits</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>root</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><index>[<expr><name>low</name></expr>]</index><operator>.</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name>next</name> <operator>-</operator> <operator>*</operator><name>table</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>huff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">64</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>drop</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><index>[<expr><name>huff</name></expr>]</index></name> <operator>=</operator> <name>here</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>table</name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
