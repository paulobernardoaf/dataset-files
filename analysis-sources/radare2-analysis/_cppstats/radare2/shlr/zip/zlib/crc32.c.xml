<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\zip\zlib\crc32.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_CRC_TABLE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NOBYFOUR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>Z_U4</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYFOUR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>local</name> <name>unsigned</name> <name>long</name> <name>crc32_little</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>,</operator>

<specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <operator>*</operator><operator>,</operator> <name>z_size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>local</name> <name>unsigned</name> <name>long</name> <name>crc32_big</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>,</operator>

<specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <operator>*</operator><operator>,</operator> <name>z_size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBLS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBLS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>local</name> <name>unsigned</name> <name>long</name> <name>gf2_matrix_times</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><name>mat</name><operator>,</operator>

<name>unsigned</name> <name>long</name> <name>vec</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>local</name> <name>void</name> <name>gf2_matrix_square</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><name>square</name><operator>,</operator> <name>unsigned</name> <name>long</name> <operator>*</operator><name>mat</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>local</name> <name>uLong</name> <name>crc32_combine_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name> <name>crc1</name><operator>,</operator> <name>uLong</name> <name>crc2</name><operator>,</operator> <name>z_off64_t</name> <name>len2</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>local</name> <specifier>volatile</specifier> <name>int</name></type> <name>crc_table_empty</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>local</name> <name>z_crc_t</name> <name>FAR</name></type> <name><name>crc_table</name><index>[<expr><name>TBLS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>local</name> <name>void</name> <name>make_crc_table</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>local</name> <name>void</name> <name>write_table</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>local</name> <name>void</name></type> <name>make_crc_table</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>z_crc_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_crc_t</name></type> <name>poly</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">26</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>poly</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof><operator>/</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>poly</name> <operator>|=</operator> <operator>(</operator><name>z_crc_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>z_crc_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>poly</name> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>crc_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>crc_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crc_table</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>ZSWAP32</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>crc_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crc_table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crc_table</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>ZSWAP32</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>crc_table_empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<while>while <condition>(<expr><name>crc_table_empty</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"crc32.h"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"/* crc32.h -- tables for rapid CRC calculation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" * Generated automatically by crc32.c\n */\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"local const z_crc_t FAR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"crc_table[TBLS][256] =\n{\n {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_table</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>crc_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#ifdef BYFOUR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" },\n {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_table</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>crc_table</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" }\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>local</name> <name>void</name></type> <name>write_table</name><parameter_list>(<parameter><decl><type><name>out</name></type></decl></parameter>, <parameter><decl><type><name>table</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s0x%08lxUL%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>n</name> <operator>%</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>table</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>n</name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="string">",\n"</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc32.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <modifier>*</modifier> <name>ZEXPORT</name></type> <name>get_crc_table</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>crc_table_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>make_crc_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <operator>*</operator><operator>)</operator><name>crc_table</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>crc = crc_table[0][((int)crc ^ (*buf++)) &amp; 0xff] ^ (crc &gt;&gt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO8</name></cpp:macro> <cpp:value>DO1; DO1; DO1; DO1; DO1; DO1; DO1; DO1</cpp:value></cpp:define>

<function><type><name>unsigned</name> <name>long</name> <name>ZEXPORT</name></type> <name>crc32_z</name><parameter_list>(<parameter><decl><type><name>crc</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>Z_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0UL</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>crc_table_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>make_crc_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>z_crc_t</name></type> <name>endian</name></decl>;</decl_stmt>

<expr_stmt><expr><name>endian</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>endian</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>crc32_little</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>crc32_big</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>^</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DO8</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <do>do <block>{<block_content>

<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do></block_content></block></if></if_stmt>

<return>return <expr><name>crc</name> <operator>^</operator> <literal type="number">0xffffffffUL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name> <name>ZEXPORT</name></type> <name>crc32</name><parameter_list>(<parameter><decl><type><name>crc</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uInt</name></type> <name>len</name></decl>;</decl_stmt>

<block>{<block_content>

<return>return <expr><call><name>crc32_z</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOLIT4</name></cpp:macro> <cpp:value>c ^= *buf4++; c = crc_table[3][c &amp; 0xff] ^ crc_table[2][(c &gt;&gt; 8) &amp; 0xff] ^ crc_table[1][(c &gt;&gt; 16) &amp; 0xff] ^ crc_table[0][c &gt;&gt; 24]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOLIT32</name></cpp:macro> <cpp:value>DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4</cpp:value></cpp:define>

<function><type><name>local</name> <name>unsigned</name> <name>long</name></type> <name>crc32_little</name><parameter_list>(<parameter><decl><type><name>crc</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>z_crc_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <modifier>*</modifier></type><name>buf4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>z_crc_t</name><operator>)</operator><name>crc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>~</operator><name>c</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>crc_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>c</name> <operator>^</operator> <operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buf4</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <name>FAR</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DOLIT32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DOLIT4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <operator>*</operator><operator>)</operator><name>buf4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <do>do <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>crc_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>c</name> <operator>^</operator> <operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>~</operator><name>c</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>c</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOBIG4</name></cpp:macro> <cpp:value>c ^= *buf4++; c = crc_table[4][c &amp; 0xff] ^ crc_table[5][(c &gt;&gt; 8) &amp; 0xff] ^ crc_table[6][(c &gt;&gt; 16) &amp; 0xff] ^ crc_table[7][c &gt;&gt; 24]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOBIG32</name></cpp:macro> <cpp:value>DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4</cpp:value></cpp:define>

<function><type><name>local</name> <name>unsigned</name> <name>long</name></type> <name>crc32_big</name><parameter_list>(<parameter><decl><type><name>crc</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_size_t</name></type> <name>len</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>z_crc_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <modifier>*</modifier></type><name>buf4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ZSWAP32</name><argument_list>(<argument><expr><operator>(</operator><name>z_crc_t</name><operator>)</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>~</operator><name>c</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>crc_table</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buf4</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>z_crc_t</name> <name>FAR</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <name>FAR</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DOBIG32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DOBIG4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> <operator>*</operator><operator>)</operator><name>buf4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <do>do <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>crc_table</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>~</operator><name>c</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><call><name>ZSWAP32</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GF2_DIM</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<function><type><name>local</name> <name>unsigned</name> <name>long</name></type> <name>gf2_matrix_times</name><parameter_list>(<parameter><decl><type><name>mat</name></type></decl></parameter>, <parameter><decl><type><name>vec</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>mat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>vec</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>vec</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vec</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>^=</operator> <operator>*</operator><name>mat</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vec</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mat</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>local</name> <name>void</name></type> <name>gf2_matrix_square</name><parameter_list>(<parameter><decl><type><name>square</name></type></decl></parameter>, <parameter><decl><type><name>mat</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>square</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>mat</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>GF2_DIM</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>square</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>gf2_matrix_times</name><argument_list>(<argument><expr><name>mat</name></expr></argument>, <argument><expr><name><name>mat</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>local</name> <name>uLong</name></type> <name>crc32_combine_</name><parameter_list>(<parameter><decl><type><name>crc1</name></type></decl></parameter>, <parameter><decl><type><name>crc2</name></type></decl></parameter>, <parameter><decl><type><name>len2</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>uLong</name></type> <name>crc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uLong</name></type> <name>crc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_off64_t</name></type> <name>len2</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>even</name><index>[<expr><name>GF2_DIM</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>odd</name><index>[<expr><name>GF2_DIM</name></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>crc1</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>odd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xedb88320UL</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>GF2_DIM</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>odd</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><name>even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>crc1</name> <operator>=</operator> <call><name>gf2_matrix_times</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>crc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len2</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><name>even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>crc1</name> <operator>=</operator> <call><name>gf2_matrix_times</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><name>crc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len2</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>len2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>crc1</name> <operator>^=</operator> <name>crc2</name></expr>;</expr_stmt>

<return>return <expr><name>crc1</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>crc32_combine</name><parameter_list>(<parameter><decl><type><name>crc1</name></type></decl></parameter>, <parameter><decl><type><name>crc2</name></type></decl></parameter>, <parameter><decl><type><name>len2</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>uLong</name></type> <name>crc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uLong</name></type> <name>crc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_off_t</name></type> <name>len2</name></decl>;</decl_stmt>

<block>{<block_content>

<return>return <expr><call><name>crc32_combine_</name><argument_list>(<argument><expr><name>crc1</name></expr></argument>, <argument><expr><name>crc2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>crc32_combine64</name><parameter_list>(<parameter><decl><type><name>crc1</name></type></decl></parameter>, <parameter><decl><type><name>crc2</name></type></decl></parameter>, <parameter><decl><type><name>len2</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>uLong</name></type> <name>crc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uLong</name></type> <name>crc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_off64_t</name></type> <name>len2</name></decl>;</decl_stmt>

<block>{<block_content>

<return>return <expr><call><name>crc32_combine_</name><argument_list>(<argument><expr><name>crc1</name></expr></argument>, <argument><expr><name>crc2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
