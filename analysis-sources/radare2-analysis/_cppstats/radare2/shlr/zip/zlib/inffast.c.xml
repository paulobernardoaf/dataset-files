<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\zip\zlib\inffast.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inftrees.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inflate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inffast.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASMINF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"Assembler code may have bugs -- use at your own risk"</cpp:literal><name>)</name></cpp:pragma>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name> <name>ZLIB_INTERNAL</name></type> <name>inflate_fast</name><parameter_list>(<parameter><decl><type><name>strm</name></type></decl></parameter>, <parameter><decl><type><name>start</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>start</name></decl>;</decl_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>inflate_state</name></name> <name>FAR</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_const</name> <name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>z_const</name> <name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>beg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFLATE_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dmax</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name></type> <name>wsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>whave</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>wnext</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hold</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>code</name> <specifier>const</specifier> <name>FAR</name> <modifier>*</modifier></type><name>lcode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>code</name> <specifier>const</specifier> <name>FAR</name> <modifier>*</modifier></type><name>dcode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>lmask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>dmask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>code</name></type> <name>here</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>op</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>dist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>inflate_state</name> <name>FAR</name> <operator>*</operator><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>in</name> <operator>+</operator> <operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>out</name> <operator>-</operator> <operator>(</operator><name>start</name> <operator>-</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>out</name> <operator>+</operator> <operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>-</operator> <literal type="number">257</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFLATE_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dmax</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>dmax</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>wsize</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>wsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>whave</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>whave</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wnext</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>wnext</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hold</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>hold</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lcode</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>lencode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dcode</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>distcode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lmask</name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>lenbits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dmask</name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>distbits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hold</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>here</name> <operator>=</operator> <name><name>lcode</name><index>[<expr><name>hold</name> <operator>&amp;</operator> <name>lmask</name></expr>]</index></name></expr>;</expr_stmt>

<label><name>dolen</name>:</label>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>here</name><operator>.</operator><name>bits</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hold</name> <operator>&gt;&gt;=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>here</name><operator>.</operator><name>op</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <ternary><condition><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name><name>here</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <literal type="number">0x7f</literal></expr> ?</condition><then>

<expr><literal type="string">"inflate: literal '%c'\n"</literal></expr> </then><else>:

<expr><literal type="string">"inflate: literal 0x%02x\n"</literal></expr></else></ternary><operator>,</operator> <name><name>here</name><operator>.</operator><name>val</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>here</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>here</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>hold</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>op</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hold</name> <operator>&gt;&gt;=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"inflate: length %u\n"</literal><operator>,</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hold</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>here</name> <operator>=</operator> <name><name>dcode</name><index>[<expr><name>hold</name> <operator>&amp;</operator> <name>dmask</name></expr>]</index></name></expr>;</expr_stmt>

<label><name>dodist</name>:</label>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>here</name><operator>.</operator><name>bits</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hold</name> <operator>&gt;&gt;=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>here</name><operator>.</operator><name>op</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dist</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>here</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>hold</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>op</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFLATE_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <name>dmax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"invalid distance too far back"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BAD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>hold</name> <operator>&gt;&gt;=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"inflate: distance %u\n"</literal><operator>,</operator> <name>dist</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>out</name> <operator>-</operator> <name>beg</name><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <name>op</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>dist</name> <operator>-</operator> <name>op</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;</operator> <name>whave</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>sane</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator>

<operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"invalid distance too far back"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BAD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>op</name> <operator>-</operator> <name>whave</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>op</name> <operator>-</operator> <name>whave</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>op</name> <operator>&gt;</operator> <name>whave</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>out</name> <operator>-</operator> <name>dist</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wnext</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>wsize</name> <operator>-</operator> <name>op</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>op</name></expr>)</condition>;</do>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>out</name> <operator>-</operator> <name>dist</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>wnext</name> <operator>&lt;</operator> <name>op</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>wsize</name> <operator>+</operator> <name>wnext</name> <operator>-</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>-=</operator> <name>wnext</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>op</name></expr>)</condition>;</do>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wnext</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>wnext</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>op</name></expr>)</condition>;</do>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>out</name> <operator>-</operator> <name>dist</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>wnext</name> <operator>-</operator> <name>op</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>op</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>op</name></expr>)</condition>;</do>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>out</name> <operator>-</operator> <name>dist</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>out</name> <operator>-</operator> <name>dist</name></expr>;</expr_stmt> 

<do>do <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>from</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">64</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>here</name> <operator>=</operator> <name><name>dcode</name><index>[<expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>+</operator> <operator>(</operator><name>hold</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>op</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<goto>goto <name>dodist</name>;</goto>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"invalid distance code"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BAD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">64</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>here</name> <operator>=</operator> <name><name>lcode</name><index>[<expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>+</operator> <operator>(</operator><name>hold</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>op</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<goto>goto <name>dolen</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&amp;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"inflate: end of block\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>TYPE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"invalid literal/length code"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>BAD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>in</name> <operator>&lt;</operator> <name>last</name> <operator>&amp;&amp;</operator> <name>out</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>-=</operator> <name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hold</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>in</name> <operator>&lt;</operator> <name>last</name></expr> ?</condition><then> <expr><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>in</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">5</literal> <operator>-</operator> <operator>(</operator><name>in</name> <operator>-</operator> <name>last</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>out</name> <operator>&lt;</operator> <name>end</name></expr> ?</condition><then>

<expr><literal type="number">257</literal> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>out</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">257</literal> <operator>-</operator> <operator>(</operator><name>out</name> <operator>-</operator> <name>end</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hold</name></name> <operator>=</operator> <name>hold</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
