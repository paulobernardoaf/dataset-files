<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\zip\zlib\inftrees.h"><typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>op</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>val</name></decl>;</decl_stmt> 

}</block></struct></type> <name>code</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOUGH_LENS</name></cpp:macro> <cpp:value>852</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOUGH_DISTS</name></cpp:macro> <cpp:value>592</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOUGH</name></cpp:macro> <cpp:value>(ENOUGH_LENS+ENOUGH_DISTS)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CODES</name></decl>,

<decl><name>LENS</name></decl>,

<decl><name>DISTS</name></decl>

}</block></enum></type> <name>codetype</name>;</typedef>

<decl_stmt><decl><type><name>int</name> <name>ZLIB_INTERNAL</name> <name>inflate_table</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>codetype</name> <name>type</name><operator>,</operator> <name>unsigned</name> <name>short</name> <name>FAR</name> <operator>*</operator><name>lens</name><operator>,</operator>

<name>unsigned</name> <name>codes</name><operator>,</operator> <name>code</name> <name>FAR</name> <operator>*</operator> <name>FAR</name> <operator>*</operator><name>table</name><operator>,</operator>

<name>unsigned</name> <name>FAR</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>unsigned</name> <name>short</name> <name>FAR</name> <operator>*</operator><name>work</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
