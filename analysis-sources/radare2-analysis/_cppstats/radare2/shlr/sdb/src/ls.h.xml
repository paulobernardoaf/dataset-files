<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\sdb\src\ls.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SdbListFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>SdbListComparator</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>ls_iter_t</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ls_iter_t</name></name> <modifier>*</modifier></type><name>n</name></decl>, <modifier>*</modifier><name>p</name>;</decl_stmt>

}</block></struct></type> <name>SdbListIter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ls_t</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListFree</name></type> <name>free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListComparator</name></type> <name>cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sorted</name></decl>;</decl_stmt>

}</block></struct></type> <name>SdbList</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_foreach</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((list)) for (it = (list)-&gt;head; it &amp;&amp; (pos = it-&gt;data); it = it-&gt;n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_foreach_safe</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((list)) for (it = list-&gt;head; it &amp;&amp; (pos = it-&gt;data) &amp;&amp; ((tmp = it-&gt;n) || 1); it = tmp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_foreach_prev</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((list)) for (it = list-&gt;tail; it &amp;&amp; (pos = it-&gt;data); it = it-&gt;p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_iterator</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)?(x)-&gt;head:NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_empty</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!x || !x-&gt;length)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_head</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x-&gt;head</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_tail</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x-&gt;tail</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_unref</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_iter_get</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x-&gt;data; x=x-&gt;n</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_iter_next</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x?1:0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_iter_cur</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x-&gt;p</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_iter_unref</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_length</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x-&gt;length</cpp:value></cpp:define>

<function_decl><type><name>SDB_API</name> <name>SdbList</name> <modifier>*</modifier></type><name>ls_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>SdbList</name> <modifier>*</modifier></type><name>ls_newf</name><parameter_list>(<parameter><decl><type><name>SdbListFree</name></type> <name>freefn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>SdbListIter</name> <modifier>*</modifier></type><name>ls_append</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>SdbListIter</name> <modifier>*</modifier></type><name>ls_prepend</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>bool</name></type> <name>ls_sort</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SdbListComparator</name></type> <name>cmp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>bool</name></type> <name>ls_merge_sort</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SdbListComparator</name></type> <name>cmp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_delete</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>bool</name></type> <name>ls_delete_data</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_iter_init</name><parameter_list>(<parameter><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_destroy</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_free</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>SdbListIter</name> <modifier>*</modifier></type><name>ls_item_new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_unlink</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_split</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_split_iter</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name> <modifier>*</modifier></type><name>ls_get_n</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name> <modifier>*</modifier></type><name>ls_get_top</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls_push</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ls_append(x,y)</cpp:value></cpp:define>

<function_decl><type><name>SDB_API</name> <name>void</name> <modifier>*</modifier></type><name>ls_pop</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name></type> <name>ls_reverse</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>SdbList</name> <modifier>*</modifier></type><name>ls_clone</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>int</name></type> <name>ls_join</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>int</name></type> <name>ls_del_n</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>SdbListIter</name> <modifier>*</modifier></type><name>ls_insert</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SDB_API</name> <name>void</name> <modifier>*</modifier></type><name>ls_pop_head</name><parameter_list>(<parameter><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
