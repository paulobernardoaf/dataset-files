<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\sdb\src\cdb_make.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb_make.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT</name></cpp:macro> <cpp:value>sizeof (void*)</cpp:value></cpp:define>

<function><type><name>char</name> <modifier>*</modifier></type><name>cdb_alloc</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__POWERPC__</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>posix_memalign</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>ALIGNMENT</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>NULL</name></expr></then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__SDB_WINDOWS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__CYGWIN__</name></expr></cpp:elif>

<return>return <expr><call><name>_aligned_malloc</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cdb_alloc_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SDB_WINDOWS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__CYGWIN__</name></expr></cpp:if>

<expr_stmt><expr><call><name>_aligned_free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cdb_make_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdb_make</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>split</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>numentries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buffer_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BufferOp</name><operator>)</operator><name>write</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bspace</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bspace</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>seek_set</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>incpos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdb_make</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>newpos</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newpos</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>newpos</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ANEW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*)cdb_alloc(sizeof(x))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>cdb_make_addend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdb_make</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cdb_hplist</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>head</name> <operator>||</operator> <operator>(</operator><name><name>head</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name>CDB_HPLIST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>head</name> <operator>=</operator> <call><name>R_ANEW</name> <argument_list>(<argument><expr>struct <name>cdb_hplist</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>hp</name><index>[<expr><name><name>head</name><operator>-&gt;</operator><name>num</name></name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>hp</name><index>[<expr><name><name>head</name><operator>-&gt;</operator><name>num</name></name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>numentries</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">255</literal> <operator>&amp;</operator> <name>h</name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">255</literal> <operator>&amp;</operator> <name>h</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>memsize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>incpos</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>KVLSZ</name> <operator>+</operator> <name>keylen</name> <operator>+</operator> <name>datalen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pack_kvlen</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>vlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <name>SDB_MAX_KEY</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;=</operator> <name>SDB_MAX_VALUE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>klen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vlen</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vlen</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vlen</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cdb_make_addbegin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdb_make</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>KVLSZ</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pack_kvlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>buffer_putalign</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>KVLSZ</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cdb_make_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdb_make</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>keylen</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>datalen</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdb_make_addbegin</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buffer_putalign</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buffer_putalign</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>cdb_make_addend</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><call><name>sdb_hash</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cdb_make_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdb_make</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cdb_hp</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cdb_hplist</name></name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>memsize</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>

<expr_stmt><expr><name>memsize</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>numentries</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>memsize</name> <operator>&gt;</operator> <operator>(</operator><name>UT32_MAX</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>cdb_hp</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>split</name></name> <operator>=</operator> <operator>(</operator>struct <name>cdb_hp</name> <operator>*</operator><operator>)</operator> <call><name>cdb_alloc</name> <argument_list>(<argument><expr><name>memsize</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>cdb_hp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>split</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>numentries</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name><operator>=</operator><name><name>x</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>split</name><index>[<expr><operator>--</operator><name><name>c</name><operator>-&gt;</operator><name>start</name><index>[<expr><literal type="number">255</literal> <operator>&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>hp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>hp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>count</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ut32_pack</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>split</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>where</name> <operator>=</operator> <operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>%</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>where</name></expr>]</index></name><operator>.</operator><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>where</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>where</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>where</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>hp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ut32_pack</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ut32_pack</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buffer_putalign</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>incpos</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buffer_flush</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seek_set</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>x</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cdb_alloc_free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>cdb_alloc_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>buffer_putflush</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>c</name><operator>-&gt;</operator><name>final</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
