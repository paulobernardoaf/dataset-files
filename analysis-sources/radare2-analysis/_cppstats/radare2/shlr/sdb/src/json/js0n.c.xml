<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\sdb\src\json\js0n.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangstr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(depth == 1) prev = *out++ = ((cur+i) - js)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(depth == 1) prev = *out++ = ((cur+i) - (js + prev) + 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_COMPUTED_GOTOS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__EMSCRIPTEN__</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_COMPUTED_GOTOS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_COMPUTED_GOTOS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_COMPUTED_GOTOS</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunknown-pragmas"</cpp:literal></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpragmas"</cpp:literal></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Winitializer-overrides"</cpp:literal></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_RAWSTR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>sdb_js0n</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>js</name></decl></parameter>, <parameter><decl><type><name>RangstrType</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RangstrType</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>utf8_remain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>gostruct</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <literal type="number">255</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="char">'\t'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>, <expr><index>[<expr><literal type="char">' '</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>, <expr><index>[<expr><literal type="char">'\r'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>, <expr><index>[<expr><literal type="char">'\n'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>,

<expr><index>[<expr><literal type="char">'"'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_qup</name></expr>,

<expr><index>[<expr><literal type="char">':'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>, <expr><index>[<expr><literal type="char">','</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>,

<expr><index>[<expr><literal type="char">'['</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_up</name></expr>, <expr><index>[<expr><literal type="char">']'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_down</name></expr>, 

<expr><index>[<expr><literal type="char">'{'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_up</name></expr>, <expr><index>[<expr><literal type="char">'}'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_down</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RAWSTR</name></expr></cpp:if>

<expr><index>[<expr><literal type="char">'a'</literal><operator>...</operator><literal type="char">'z'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_rawstr</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><index>[<expr><literal type="char">'-'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bare</name></expr>, <expr><index>[<expr><literal type="number">48</literal> <operator>...</operator> <literal type="number">57</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bare</name></expr>, 

<expr><index>[<expr><literal type="char">'t'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bare</name></expr>, <expr><index>[<expr><literal type="char">'f'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bare</name></expr>, <expr><index>[<expr><literal type="char">'n'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bare</name></expr> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>gobare</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <literal type="number">31</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="number">32</literal> <operator>...</operator> <literal type="number">126</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>, 

<expr><index>[<expr><literal type="char">'\t'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unbare</name></expr>, <expr><index>[<expr><literal type="char">' '</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unbare</name></expr>, <expr><index>[<expr><literal type="char">'\r'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unbare</name></expr>, <expr><index>[<expr><literal type="char">'\n'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unbare</name></expr>,

<expr><index>[<expr><literal type="char">','</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unbare</name></expr>, <expr><index>[<expr><literal type="char">']'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unbare</name></expr>, <expr><index>[<expr><literal type="char">'}'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unbare</name></expr>,

<expr><index>[<expr><literal type="number">127</literal> <operator>...</operator> <literal type="number">255</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RAWSTR</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>gorawstr</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <literal type="number">31</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>, <expr><index>[<expr><literal type="number">127</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="number">32</literal> <operator>...</operator> <literal type="number">126</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>,

<expr><index>[<expr><literal type="char">'\\'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_esc</name></expr>, <expr><index>[<expr><literal type="char">':'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_qdown</name></expr>,

<expr><index>[<expr><literal type="number">128</literal> <operator>...</operator> <literal type="number">191</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="number">192</literal> <operator>...</operator> <literal type="number">223</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_utf8_2</name></expr>,

<expr><index>[<expr><literal type="number">224</literal> <operator>...</operator> <literal type="number">239</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_utf8_3</name></expr>,

<expr><index>[<expr><literal type="number">240</literal> <operator>...</operator> <literal type="number">247</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_utf8_4</name></expr>,

<expr><index>[<expr><literal type="number">248</literal> <operator>...</operator> <literal type="number">255</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>gostring</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <literal type="number">31</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>, <expr><index>[<expr><literal type="number">127</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="number">32</literal> <operator>...</operator> <literal type="number">126</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_loop</name></expr>,

<expr><index>[<expr><literal type="char">'\\'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_esc</name></expr>, <expr><index>[<expr><literal type="char">'"'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_qdown</name></expr>,

<expr><index>[<expr><literal type="number">128</literal> <operator>...</operator> <literal type="number">191</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="number">192</literal> <operator>...</operator> <literal type="number">223</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_utf8_2</name></expr>,

<expr><index>[<expr><literal type="number">224</literal> <operator>...</operator> <literal type="number">239</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_utf8_3</name></expr>,

<expr><index>[<expr><literal type="number">240</literal> <operator>...</operator> <literal type="number">247</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_utf8_4</name></expr>,

<expr><index>[<expr><literal type="number">248</literal> <operator>...</operator> <literal type="number">255</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>goutf8_continue</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <literal type="number">127</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="number">128</literal> <operator>...</operator> <literal type="number">191</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_utf_continue</name></expr>,

<expr><index>[<expr><literal type="number">192</literal> <operator>...</operator> <literal type="number">255</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>goesc</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <literal type="number">255</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_bad</name></expr>,

<expr><index>[<expr><literal type="char">'"'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>, <expr><index>[<expr><literal type="char">'\\'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>, <expr><index>[<expr><literal type="char">'/'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>, <expr><index>[<expr><literal type="char">'b'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>,

<expr><index>[<expr><literal type="char">'f'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>, <expr><index>[<expr><literal type="char">'n'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>, <expr><index>[<expr><literal type="char">'r'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>, <expr><index>[<expr><literal type="char">'t'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>, <expr><index>[<expr><literal type="char">'u'</literal></expr>]</index> <operator>=</operator> <operator>&amp;&amp;</operator><name>l_unesc</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>go</name> <init>= <expr><name>gostruct</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

printf (" gostrct= %p\n", gostruct);

printf (" gobare = %p\n", gobare);

printf (" gostr = %p\n", gostring);

printf (" goesc = %p\n", goesc);

printf (" goutf8= %p\n", goutf8_continue);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>cur</name><operator>=</operator><name>js</name></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>js</name><operator>+</operator><name>len</name></expr>;</init> <condition><expr><name>cur</name><operator>&lt;</operator><name>end</name></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<goto>goto *<name><name>go</name><index>[<expr><operator>*</operator><name>cur</name></expr>]</index></name>;</goto>

<label><name>l_loop</name>:</label><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<return>return <expr><name>depth</name></expr>;</return> 

<label><name>l_bad</name>:</label>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>l_up</name>:</label>

<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_down</name>:</label>

<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CAP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_qup</name>:</label>

<expr_stmt><expr><call><name>PUSH</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>gostring</name></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_qdown</name>:</label>

<expr_stmt><expr><call><name>CAP</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>gostruct</name></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_esc</name>:</label>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>goesc</name></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_unesc</name>:</label>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>gostring</name></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RAWSTR</name></expr></cpp:if>

<label><name>l_rawstr</name>:</label>

<expr_stmt><expr><call><name>PUSH</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>gorawstr</name></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>l_bare</name>:</label>

<expr_stmt><expr><call><name>PUSH</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>gobare</name></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_unbare</name>:</label>

<expr_stmt><expr><call><name>CAP</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>gostruct</name></expr>;</expr_stmt>

<goto>goto *<name><name>go</name><index>[<expr><operator>*</operator><name>cur</name></expr>]</index></name>;</goto>

<label><name>l_utf8_2</name>:</label>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>goutf8_continue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>utf8_remain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_utf8_3</name>:</label>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>goutf8_continue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>utf8_remain</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_utf8_4</name>:</label>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>goutf8_continue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>utf8_remain</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<goto>goto <name>l_loop</name>;</goto>

<label><name>l_utf_continue</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>utf8_remain</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>go</name> <operator>=</operator> <name>gostring</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>l_loop</name>;</goto>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_DOWN</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_UP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_Q_DOWN</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_Q_UP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_BARE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_UNBARE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_ESCAPE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_UNESCAPE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_UTF8</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_UTF8_CONTINUE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>sdb_js0n</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>js</name></decl></parameter>, <parameter><decl><type><name>RangstrType</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RangstrType</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>utf8_remain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>what_did</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>js</name></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>js</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>cur</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>what_did</name> <operator>&amp;</operator> <name>GO_BARE</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_UNBARE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CAP</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur</name> <operator>&lt;=</operator> <literal type="number">126</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what_did</name> <operator>&amp;</operator> <name>GO_UTF8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cur</name> <operator>&gt;=</operator><literal type="number">192</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur</name> <operator>&lt;=</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>utf8_remain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_UTF8_CONTINUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what_did</name> <operator>&amp;</operator> <name>GO_ESCAPE</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_UNESCAPE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what_did</name> <operator>&amp;</operator> <name>GO_Q_UP</name> <operator>||</operator> <name>what_did</name> <operator>&amp;</operator> <name>GO_UTF8_CONTINUE</name> <operator>||</operator> <name>what_did</name> <operator>&amp;</operator> <name>GO_UNESCAPE</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_ESCAPE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_Q_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CAP</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur</name> <operator>&lt;=</operator> <literal type="number">31</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cur</name> <operator>&gt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur</name> <operator>&lt;=</operator> <literal type="number">191</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cur</name> <operator>&gt;=</operator> <literal type="number">248</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur</name> <operator>&lt;=</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur</name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_UTF8</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur</name> <operator>&lt;</operator> <literal type="number">224</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>utf8_remain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur</name> <operator>&lt;</operator> <literal type="number">239</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>utf8_remain</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>utf8_remain</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><call><name>PUSH</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_Q_UP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<expr_stmt><expr><call><name>PUSH</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_UP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CAP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_DOWN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_BARE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUSH</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur</name> <operator>&gt;=</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur</name> <operator>&lt;=</operator> <literal type="number">57</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>what_did</name> <operator>=</operator> <name>GO_BARE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUSH</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>depth</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
