<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\sdb\src\json\rangstr.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RANGSTR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGSTR_C</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangstr.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

SDB_IPI void rangstr_print (Rangstr *s) {

if (s &amp;&amp; s-&gt;p) {

(void) fwrite (s-&gt;p+s-&gt;f,

s-&gt;t-s-&gt;f, 1, stdout);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SDB_IPI</name> <name>Rangstr</name></type> <name>rangstr_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Rangstr</name></type> <name>rs</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>rs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>Rangstr</name></type> <name>rangstr_new</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Rangstr</name></type> <name>rs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rangstr_null</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>f</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>t</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>rs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>int</name></type> <name>rangstr_length</name> <parameter_list>(<parameter><decl><type><name>Rangstr</name><modifier>*</modifier></type> <name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>t</name></name> <operator>&gt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>rs</name><operator>-&gt;</operator><name>t</name></name> <operator>-</operator> <name><name>rs</name><operator>-&gt;</operator><name>f</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>int</name></type> <name>rangstr_int</name> <parameter_list>(<parameter><decl><type><name>Rangstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>base</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mul</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr>]</index></name><operator>==</operator><literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>n</name> <operator>*</operator> <name>mul</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>char</name> <modifier>*</modifier></type><name>rangstr_dup</name> <parameter_list>(<parameter><decl><type><name>Rangstr</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rs</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>rangstr_length</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>rs</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>Rangstr</name></type> <name>rangstr_news</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RangstrType</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Rangstr</name></type> <name>rs</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>res</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>rs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>int</name></type> <name>rangstr_cmp</name> <parameter_list>(<parameter><decl><type><name>Rangstr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Rangstr</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>la</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>t</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>t</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lbz</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lbz</name> <operator>&lt;</operator> <name>lb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lb</name> <operator>=</operator> <name>lbz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>la</name> <operator>!=</operator> <name>lb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <name>int</name></type> <name>rangstr_find</name> <parameter_list>(<parameter><decl><type><name>Rangstr</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>t</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_IPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rangstr_str</name> <parameter_list>(<parameter><decl><type><name>Rangstr</name><modifier>*</modifier></type> <name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>rs</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>rs</name><operator>-&gt;</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
