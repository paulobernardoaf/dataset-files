<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\sdb\src\json\test.c"><function><type><name>int</name></type> <name>test_parse_json_path</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Rangstr</name></type> <name>rs</name> <init>= <expr><call><name>rangstr_new</name> <argument_list>(<argument><expr><literal type="string">"ping.board[\"pop\"][1][2][\"caca\"].panda"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>json_path_first</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rangstr_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" Int (%d)"</literal></expr></argument>, <argument><expr><call><name>rangstr_int</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>json_path_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"--\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
