<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\sdb\src\sdb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static inline SdbKv *kv_at(HtPP *ht, HtPPBucket *bt, ut32 i) {

return (SdbKv *)((char *)bt-&gt;arr + i * ht-&gt;opt.elem_size);

}

static inline SdbKv *prev_kv(HtPP *ht, SdbKv *kv) {

return (SdbKv *)((char *)kv - ht-&gt;opt.elem_size);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SdbKv</name> <modifier>*</modifier></type><name>next_kv</name><parameter_list>(<parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>SdbKv</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>kv</name> <operator>+</operator> <name><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>elem_size</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_FOREACH</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>bt</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>kv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((j) = 0, (kv) = (SdbKv *)(bt)-&gt;arr; j &lt; (bt)-&gt;count; (j)++, (kv) = next_kv (ht, kv))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>bt</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>kv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((bt)-&gt;arr) for ((j) = 0, (kv) = (SdbKv *)(bt)-&gt;arr, (count) = (ht)-&gt;count; (j) &lt; (bt)-&gt;count; (j) = (count) == (ht)-&gt;count? j + 1: j, (kv) = (count) == (ht)-&gt;count? next_kv (ht, kv): kv, (count) = (ht)-&gt;count)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>nextcas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut32</name></type> <name>cas</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cas</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cas</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cas</name><operator>++</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>SdbHook</name></type> <name>global_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>global_user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_global_hook</name><parameter_list>(<parameter><decl><type><name>SdbHook</name></type> <name>hook</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>global_hook</name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>

<expr_stmt><expr><name>global_user</name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>Sdb</name><modifier>*</modifier></type> <name>sdb_new0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>Sdb</name><modifier>*</modifier></type> <name>sdb_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>Sdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>plen</name> <operator>+</operator> <name>nlen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name><index>[<expr><name>plen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>+</operator> <name>plen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_lock</name> <argument_list>(<argument><expr><call><name>sdb_lock_file</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_lock_wait</name> <argument_list>(<argument><expr><call><name>sdb_lock_file</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>sdb_open</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>timestamped</name></name></expr>?</condition><then> <expr><call><name>sdb_now</name> <argument_list>()</argument_list></call></expr></then><else>: <expr><literal type="number">0LL</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>timestamped</name></name></expr>?</condition><then> <expr><call><name>sdb_now</name> <argument_list>()</argument_list></call></expr></then><else>: <expr><literal type="number">0LL</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>journal</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdump</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ndump</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <call><name>ls_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <call><name>sdb_ht_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>global_hook</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_hook</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>global_hook</name></expr></argument>, <argument><expr><name>global_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cdb_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_file</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_unlock</name> <argument_list>(<argument><expr><call><name>sdb_lock_file</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dir</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dir</name><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_lock</name> <argument_list>(<argument><expr><call><name>sdb_lock_file</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdb_merge_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_merge</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sdb_merge_cb</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_isempty</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_dump_begin</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>sdb_dump_hasnext</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_count</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_dump_begin</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>sdb_dump_hasnext</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdb_fini</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>donull</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_hook_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cdb_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_unlock</name> <argument_list>(<argument><expr><call><name>sdb_lock_file</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_ns_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ht_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_journal_close</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ndump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name><operator>.</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>donull</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Sdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_free</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ht</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>refs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>refs</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_fini</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdb_const_get_len</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vlen</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>now</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cas</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cas</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SdbKv</name><operator>*</operator><operator>)</operator> <call><name>sdb_ht_find_kvp</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>*</operator><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>timestamped</name></name> <operator>&amp;&amp;</operator> <name><name>kv</name><operator>-&gt;</operator><name>expire</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>now</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>sdb_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <name><name>kv</name><operator>-&gt;</operator><name>expire</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cas</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cas</name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>cas</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vlen</name> <operator>=</operator> <call><name>sdbkv_value_len</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cdb_findstart</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdb_findnext</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>hashfn</name></name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>cdb_datalen</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>SDB_MIN_VALUE</name> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <name>SDB_MAX_VALUE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>cdb_datapos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>.</operator><name>map</name></name> <operator>+</operator> <name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdb_const_get</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_const_get_len</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>char</name> <modifier>*</modifier></type><name>sdb_get_len</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vlen</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>sdb_const_get_len</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>char</name> <modifier>*</modifier></type><name>sdb_get</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_get_len</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_unset</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>key</name></expr>?</condition><then> <expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_remove</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_ht_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_uncat</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>valen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sdb_get_len</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>valen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>valen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>valen</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>valen</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_set_owned</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_concat</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>kl</name></decl>, <decl><type ref="prev"/><name>vl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>value</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>value</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sdb_const_get_len</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vl</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>kl</name> <operator>+</operator> <name>vl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>kl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>kl</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sdb_set_owned</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_add</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sdb_exists</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_exists</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>klen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SdbKv</name><operator>*</operator><operator>)</operator><call><name>sdb_ht_find_kvp</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>kv</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>v</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>v</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cdb_findstart</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdb_findnext</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><call><name>sdb_hash</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>cdb_datapos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cdb_read</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ch</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_open</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>fstat</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>S_IFREG</name> <operator>&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mode</name></name><operator>)</operator> <operator>!=</operator> <name>S_IFREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Database must be a file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cdb_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_close</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>db</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_reset</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_close</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ht_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <call><name>sdb_ht_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>lastChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>str</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>startsWith</name> <init>= <expr><operator>*</operator><name>expr</name> <operator>==</operator> <literal type="char">'^'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>endsWith</name> <init>= <expr><call><name>lastChar</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'$'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>startsWith</name> <operator>&amp;&amp;</operator> <name>endsWith</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> \

<operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>expr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startsWith</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>expr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endsWith</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>alen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&lt;=</operator> <name>blen</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>str</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>blen</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdbkv_match</name><parameter_list>(<parameter><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>e</name> <operator>+</operator> <operator>(</operator><name>eq</name> <operator>-</operator> <name>expr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ep</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><operator>!</operator><operator>*</operator><name>e</name> <operator>||</operator> <call><name>match</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res2</name> <init>= <expr><operator>!</operator><operator>*</operator><name>ep</name> <operator>||</operator> <call><name>match</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name> <operator>&amp;&amp;</operator> <name>res2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>match</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>SdbKv</name><modifier>*</modifier></type> <name>sdbkv_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdbkv_new2</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>SdbKv</name><modifier>*</modifier></type> <name>sdbkv_new2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vl</name> <operator>&gt;=</operator> <name>SDB_VSZ</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kl</name> <operator>&gt;=</operator> <name>SDB_KSZ</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SdbKv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key_len</name></name> <operator>=</operator> <name>kl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <name>vl</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>vl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>cas</name></name> <operator>=</operator> <call><name>nextcas</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<return>return <expr><name>kv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdbkv_free</name><parameter_list>(<parameter><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>sdb_set_internal</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owned</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>vlen</name></decl>, <decl><type ref="prev"/><name>klen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>owned</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>klen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;=</operator> <name>SDB_KSZ</name> <operator>||</operator> <name>vlen</name> <operator>&gt;=</operator> <name>SDB_VSZ</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>owned</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>journal</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_journal_log</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cdb_findstart</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>sdb_ht_find_kvp</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cdb_findnext</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><call><name>sdb_hash</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cas</name> <operator>&amp;&amp;</operator> <name><name>kv</name><operator>-&gt;</operator><name>cas</name></name> <operator>!=</operator> <name>cas</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>owned</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <call><name>sdbkv_value_len</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_hook_call</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>kv</name><operator>-&gt;</operator><name>cas</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>cas</name></name> <operator>=</operator> <name>cas</name> <operator>=</operator> <call><name>nextcas</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>owned</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <name>vlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut32</name><operator>)</operator><name>vlen</name> <operator>&gt;</operator> <name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <name>vlen</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ht_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sdb_hook_call</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cas</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>owned</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>sdbkv_new2</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <name>vlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>sdbkv_new2</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kv</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>cas</name> <init>= <expr><name><name>kv</name><operator>-&gt;</operator><name>cas</name></name> <operator>=</operator> <call><name>nextcas</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_ht_insert_kvp</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_hook_call</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cas</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_set_owned</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_set_internal</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_set</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_set_internal</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdb_foreach_list_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>(</operator><name>SdbList</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SdbKv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__cmp_asc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SdbKv</name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>ka</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>SdbList</name> <modifier>*</modifier></type><name>sdb_foreach_list</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sorted</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>ls_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>SdbListFree</name><operator>)</operator><name>sdbkv_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sdb_foreach_list_cb</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sorted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_sort</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>__cmp_asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>foreach_list_filter_t</name> <block>{

<decl_stmt><decl><type><name>SdbForeachCallback</name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdb_foreach_list_filter_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>foreach_list_filter_t</name></name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>(</operator>struct <name>foreach_list_filter_t</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>u</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>filter</name></name> <operator>||</operator> <call><name><name>u</name><operator>-&gt;</operator><name>filter</name></name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kv</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SdbKv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name> <operator>||</operator> <operator>!</operator><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>sdbkv_free</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>SdbList</name> <modifier>*</modifier></type><name>sdb_foreach_list_filter</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SdbForeachCallback</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sorted</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>foreach_list_filter_t</name></name></type> <name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>ls_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>SdbListFree</name><operator>)</operator><name>sdbkv_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sdb_foreach_list_filter_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sorted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_sort</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>__cmp_asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>single</name></decl>;</decl_stmt>

}</block></struct></type> <name>_match_sdb_user</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdb_foreach_match_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>_match_sdb_user</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>(</operator><name>_match_sdb_user</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name></type> <name>tkv</name> <init>= <expr><block>{ <expr><operator>.</operator><name><name>base</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>k</name></expr>, <expr><operator>.</operator><name><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdbkv_match</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tkv</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SdbKv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>single</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>SdbList</name> <modifier>*</modifier></type><name>sdb_foreach_match</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>single</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>ls_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>SdbListFree</name><operator>)</operator><name>sdbkv_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_match_sdb_user</name></type> <name>o</name> <init>= <expr><block>{ <expr><name>expr</name></expr>, <expr><name>list</name></expr>, <expr><name>single</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sdb_foreach_match_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (sorted) {

ls_sort (list, __cmp_asc);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getbytes</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdb_read</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdb_foreach_end</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdb_foreach_cdb</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SdbForeachCallback</name></type> <name>cb</name></decl></parameter>,

<parameter><decl><type><name>SdbForeachCallback</name></type> <name>cb2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><name>SDB_MAX_KEY</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_dump_begin</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>sdb_dump_dupnext</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>sdb_ht_find_kvp</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kv</name> <operator>&amp;&amp;</operator> <call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cb2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cb2</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_foreach</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SdbForeachCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sdb_foreach_cdb</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>sdb_foreach_end</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>HtPPBucket</name> <modifier>*</modifier></type><name>bt</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<macro><name>BUCKET_FOREACH_SAFE</name> <argument_list>(<argument>s-&gt;ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>count</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kv</name> <operator>&amp;&amp;</operator> <call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>sdb_foreach_end</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></for>

<return>return <expr><call><name>sdb_foreach_end</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_insert_into_disk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>Sdb</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_disk_insert</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_remove_afer_insert</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>Sdb</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ht_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_sync</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><call><name>sdb_disk_create</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sdb_foreach_cdb</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>_insert_into_disk</name></expr></argument>, <argument><expr><name>_remove_afer_insert</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>HtPPBucket</name> <modifier>*</modifier></type><name>bt</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<macro><name>BUCKET_FOREACH_SAFE</name> <argument_list>(<argument>s-&gt;ht</argument>, <argument>bt</argument>, <argument>j</argument>, <argument>count</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>kv</name><operator>-&gt;</operator><name>expire</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sdb_disk_insert</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></for>

<expr_stmt><expr><call><name>sdb_disk_finish</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_journal_clear</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_dump_begin</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>cdb_make</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>-&gt;</operator><name>final</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>seek_set</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>SdbKv</name> <modifier>*</modifier></type><name>sdb_dump_next</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><name>SDB_MAX_KEY</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_dump_dupnext</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vl</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>SDB_KSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name></name></expr></argument>)</argument_list></call><index>[<expr><name>SDB_KSZ</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name><operator>.</operator><name>base</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name><operator>.</operator><name>base</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <name>vl</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmpkv</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_dump_hasnext</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdb_getkvlen</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>v</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>k</name> <operator>+</operator> <name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_stats</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>disk</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>disk</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_dump_begin</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>sdb_dump_hasnext</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>disk</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mem</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mem</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>disk</name> <operator>||</operator> <name>mem</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_dump_dupnext</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>_vlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>vlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>klen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>_vlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>_vlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdb_getkvlen</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>vlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>_vlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>_vlen</name> <operator>=</operator> <name>vlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <name>SDB_MIN_KEY</name> <operator>&amp;&amp;</operator> <name>klen</name> <operator>&lt;</operator> <name>SDB_MAX_KEY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>getbytes</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key</name><index>[<expr><name>klen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&lt;</operator> <name>SDB_MAX_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>value</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getbytes</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>value</name><operator>)</operator><index>[<expr><name>vlen</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>parse_expire</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>month</name> <init>= <expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;</operator> <name>month</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <call><name>sdb_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>e</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_expire_set</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>expire</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timestamped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <call><name>parse_expire</name> <argument_list>(<argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kv</name> <operator>=</operator> <operator>(</operator><name>SdbKv</name><operator>*</operator><operator>)</operator><call><name>sdb_ht_find_kvp</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>kv</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cas</name> <operator>||</operator> <name>cas</name> <operator>==</operator> <name><name>kv</name><operator>-&gt;</operator><name>cas</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <call><name>parse_expire</name> <argument_list>(<argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cdb_findstart</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdb_findnext</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><call><name>sdb_hash</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>cdb_datapos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>cdb_datalen</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <name>INT32_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cdb_read</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set_owned</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sdb_expire_set</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>expire</name></expr></argument>, <argument><expr><name>cas</name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>ut64</name></type> <name>sdb_expire_get</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>cas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SdbKv</name><operator>*</operator><operator>)</operator><call><name>sdb_ht_find_kvp</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>kv</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cas</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cas</name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>cas</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>kv</name><operator>-&gt;</operator><name>expire</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_hook</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SdbHook</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbHook</name></type> <name>hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name></expr>)</condition> <block>{<block_content>

<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;hooks</argument>, <argument>iter</argument>, <argument>hook</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hook</name> <operator>==</operator> <name>cb</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name> <operator>=</operator> <call><name>ls_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_unhook</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SdbHook</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbHook</name></type> <name>hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;hooks</argument>, <argument>iter</argument>, <argument>hook</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hook</name> <operator>==</operator> <name>h</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>iter2</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name></expr></argument>, <argument><expr><name>iter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_hook_call</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbHook</name></type> <name>hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>timestamped</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>sdb_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>s-&gt;hooks</argument>, <argument>iter</argument>, <argument>hook</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hook</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_hook_free</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hooks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_config</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SDB_OPTION_SYNC</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SDB_OPTION_JOURNAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_journal_open</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_journal_load</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_journal_clear</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sdb_journal_close</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SDB_OPTION_NOSTAMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SDB_OPTION_FS</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_unlink</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_fini</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sdb_disk_unlink</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_drain</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_fini</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_foreach_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>void</name></type> <name>sdb_copy</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>copy_foreach_cb</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>src-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_copy</name> <argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><call><name>sdb_ns</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

}</block></struct></type> <name>UnsetCallbackData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unset_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>UnsetCallbackData</name> <modifier>*</modifier></type><name>ucd</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdb_match</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>ucd</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name><name>ucd</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_unset_like</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>UnsetCallbackData</name></type> <name>ucd</name> <init>= <expr><block>{ <expr><name>s</name></expr>, <expr><name>k</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>unset_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbForeachCallback</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>array_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>array_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>LikeCallbackData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>like_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>LikeCallbackData</name> <modifier>*</modifier></type><name>lcd</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>user</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <name><name>lcd</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sdb_match</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>lcd</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <name><name>lcd</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sdb_match</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>lcd</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lcd</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>lcd</name><operator>-&gt;</operator><name>array_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><name><name>lcd</name><operator>-&gt;</operator><name>array_size</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newarray</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>realloc</name> <argument_list>(<argument><expr><name><name>lcd</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newarray</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>newarray</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>-&gt;</operator><name>array_size</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>-&gt;</operator><name>array_index</name></name> <operator>=</operator> <name>idx</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lcd</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>lcd</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name><name>lcd</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>sdb_like</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>SdbForeachCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>LikeCallbackData</name></type> <name>lcd</name> <init>= <expr><block>{ <expr><name>s</name></expr>, <expr><name>k</name></expr>, <expr><name>v</name></expr>, <expr><name>cb</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>like_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lcd</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lcd</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>.</operator><name>array_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>.</operator><name>array</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name><name>lcd</name><operator>.</operator><name>array_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lcd</name><operator>.</operator><name>array</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lcd</name><operator>.</operator><name>array_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>like_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lcd</name><operator>.</operator><name>array_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>lcd</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>lcd</name><operator>.</operator><name>array</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
