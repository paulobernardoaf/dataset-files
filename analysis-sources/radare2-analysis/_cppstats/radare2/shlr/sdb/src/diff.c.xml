<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\sdb\src\diff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<function><type><name>SDB_API</name> <name>int</name></type> <name>sdb_diff_format</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SdbDiff</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPENDF</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int sr = snprintf (str, size, __VA_ARGS__); if (sr &lt; 0) { return sr; } r += sr; if (sr &gt;= size) { str = NULL; size = 0; } else { str += sr; size -= sr; } } while(0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>APPENDF</name> <argument_list>(<argument><expr><literal type="string">"%c%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>diff</name><operator>-&gt;</operator><name>add</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>diff</name><operator>-&gt;</operator><name>v</name></name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"NS"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>component</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>diff-&gt;path</argument>, <argument>it</argument>, <argument>component</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>APPENDF</name> <argument_list>(<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>diff</name><operator>-&gt;</operator><name>v</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>APPENDF</name> <argument_list>(<argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><name><name>diff</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>APPENDF</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>diff</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APPENDF</name></cpp:undef>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>sdb_diff_ctx_t</name> <block>{

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>equal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbDiffCallback</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_user</name></decl>;</decl_stmt>

}</block></struct></type> <name>SdbDiffCtx</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (ctx)-&gt;equal = false; if ((ctx)-&gt;cb) { c } else { return ret; } } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdb_diff_report_ns</name><parameter_list>(<parameter><decl><type><name>SdbDiffCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>add</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbDiff</name></type> <name>diff</name> <init>= <expr><block>{ <expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr>, <expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr>, <expr><name>NULL</name></expr>, <expr><name>add</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdb_diff_report_kv</name><parameter_list>(<parameter><decl><type><name>SdbDiffCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>add</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbDiff</name></type> <name>diff</name> <init>= <expr><block>{ <expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr>, <expr><name>k</name></expr>, <expr><name>v</name></expr>, <expr><name>add</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>sdb_diff_kv_cb_ctx</name> <block>{

<decl_stmt><decl><type><name>SdbDiffCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>add</name></decl>;</decl_stmt>

}</block></struct></type> <name>SdbDiffKVCbCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdb_diff_report_kv_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SdbDiffKVCbCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_diff_report_kv</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>add</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdb_diff_report</name><parameter_list>(<parameter><decl><type><name>SdbDiffCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>add</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>sdb-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_diff_report_ns</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_diff_report</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_pop</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>SdbDiffKVCbCtx</name></type> <name>cb_ctx</name> <init>= <expr><block>{ <expr><name>ctx</name></expr>, <expr><name>add</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>sdb_diff_report_kv_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdb_diff_kv_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SdbDiffKVCbCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>other</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>add</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>a</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>b</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other_val</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other_val</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>other_val</name></expr>)</condition> <block>{<block_content>

<macro><name>DIFF</name> <argument_list>(<argument>ctx-&gt;ctx</argument>,

<argument>sdb_diff_report_kv (ctx-&gt;ctx, k, v, ctx-&gt;add);</argument>

, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>add</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>other_val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<macro><name>DIFF</name> <argument_list>(<argument>ctx-&gt;ctx</argument>,

<argument>sdb_diff_report_kv (ctx-&gt;ctx, k, v, false);

sdb_diff_report_kv (ctx-&gt;ctx, k, other_val, true);</argument>

, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdb_diff_ctx</name><parameter_list>(<parameter><decl><type><name>SdbDiffCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbNs</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>ctx-&gt;a-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>b_ns</name> <init>= <expr><call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_ns</name></expr>)</condition> <block>{<block_content>

<macro><name>DIFF</name> <argument_list>(<argument>ctx</argument>,

<argument>sdb_diff_report_ns (ctx, ns, false);

ls_push (ctx-&gt;path, ns-&gt;name);

sdb_diff_report (ctx, ns-&gt;sdb, false);

ls_pop (ctx-&gt;path);</argument>

,)</argument_list></macro><empty_stmt>;</empty_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>sdb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>b_ns</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_push</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_diff_ctx</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_pop</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>ls_foreach</name> <argument_list>(<argument>ctx-&gt;b-&gt;ns</argument>, <argument>it</argument>, <argument>ns</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_ns</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>DIFF</name> <argument_list>(<argument>ctx</argument>,

<argument>sdb_diff_report_ns (ctx, ns, true);

ls_push (ctx-&gt;path, ns-&gt;name);

sdb_diff_report (ctx, ns-&gt;sdb, true);

ls_pop (ctx-&gt;path);</argument>

,)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>SdbDiffKVCbCtx</name></type> <name>kv_ctx</name> <init>= <expr><block>{ <expr><name>ctx</name></expr>, <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>sdb_diff_kv_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kv_ctx</name><operator>.</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>sdb_diff_kv_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>SDB_API</name> <name>bool</name></type> <name>sdb_diff</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>SdbDiffCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbDiffCtx</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>equal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>cb_user</name></name> <operator>=</operator> <name>cb_user</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>ls_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>path</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_diff_ctx</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ctx</name><operator>.</operator><name>equal</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
