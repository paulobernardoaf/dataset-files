<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\java\code.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"class.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>if (verbose)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_THE_DBG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFDBG</name></cpp:macro> <cpp:value>if(DO_THE_DBG)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_switch_op</name> <parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>enter_switch_op</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>update_switch_op</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>update_bytes_consumed</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>handle_switch_op</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name>IN_SWITCH_OP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>current_table_switch_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>def_jmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_val</name></decl>;</decl_stmt>

}</block></struct></type> <name>CurrentTableSwitch</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>CurrentTableSwitch</name></type> <name>SWITCH_OP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>BYTES_CONSUMED</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_switch_op</name> <parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>SWITCH_OP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>SWITCH_OP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>enter_switch_op</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int sz = ((BYTES_CONSUMED+1) % 4)

? (1 + 4 - (BYTES_CONSUMED+1) % 4)

: 1; 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz2</name> <init>= <expr><operator>(</operator><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>addr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>addr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Addr approach: 0x%04x and BYTES_CONSUMED approach: 0x%04"</literal><name>PFMT64x</name><literal type="string">", BYTES_CONSUMED%%4 = 0x%04x\n"</literal></expr></argument>,

<argument><expr><name>sz2</name></expr></argument>, <argument><expr><name>BYTES_CONSUMED</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_switch_op</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>IN_SWITCH_OP</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>SWITCH_OP</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>SWITCH_OP</name><operator>.</operator><name>def_jmp</name></name> <operator>=</operator> <operator>(</operator><call><name>UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>SWITCH_OP</name><operator>.</operator><name>min_val</name></name> <operator>=</operator> <operator>(</operator><call><name>UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>SWITCH_OP</name><operator>.</operator><name>max_val</name></name> <operator>=</operator> <operator>(</operator><call><name>UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isRelative</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_CJMP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_JMP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_bytes_consumed</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BYTES_CONSUMED</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_switch_op</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ccase</name> <init>= <expr><name><name>SWITCH_OP</name><operator>.</operator><name>cur_val</name></name> <operator>+</operator> <name><name>SWITCH_OP</name><operator>.</operator><name>min_val</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>SWITCH_OP</name><operator>.</operator><name>cur_val</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ccase</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name><name>SWITCH_OP</name><operator>.</operator><name>max_val</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>IN_SWITCH_OP</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>IFDBG</name></macro> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Addr approach: 0x%04"</literal><name>PFMT64x</name>

<literal type="string">" and BYTES_CONSUMED approach: 0x%04"</literal><name>PFMT64x</name>

<literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>BYTES_CONSUMED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_switch_op</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>jmp</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>UINT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name><name>SWITCH_OP</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ccase</name> <init>= <expr><name><name>SWITCH_OP</name><operator>.</operator><name>cur_val</name></name> <operator>+</operator> <name><name>SWITCH_OP</name><operator>.</operator><name>min_val</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"case %d: goto 0x%04x"</literal></expr></argument>, <argument><expr><name>ccase</name></expr></argument>, <argument><expr><name>jmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_switch_op</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>java_print_opcode</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>val_one</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>val_two</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>op_byte</name> <init>= <expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>byte</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>IN_SWITCH_OP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>handle_switch_op</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

IFDBG eprintf ("Handling the following opcode %s expects: %d byte(s), BYTES_CONSUMED: 0x%04"PFMT64x"\n",

JAVA_OPS[idx].name, JAVA_OPS[idx].size, BYTES_CONSUMED);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>op_byte</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0x11</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 

<case>case <expr><literal type="number">0x17</literal></expr>:</case> 

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 

<case>case <expr><literal type="number">0x19</literal></expr>:</case> 

<case>case <expr><literal type="number">0x37</literal></expr>:</case> 

<case>case <expr><literal type="number">0x38</literal></expr>:</case> 

<case>case <expr><literal type="number">0x39</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3a</literal></expr>:</case> 

<case>case <expr><literal type="number">0xbc</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa9</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0x12</literal></expr>:</case> 

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>r_bin_java_resolve_without_space</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>ut16</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s #%d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0x13</literal></expr>:</case>

<case>case <expr><literal type="number">0x14</literal></expr>:</case>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>r_bin_java_resolve_without_space</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s #%d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0x84</literal></expr>:</case> 

<expr_stmt><expr><name>val_one</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val_two</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>val_one</name></expr></argument>, <argument><expr><name>val_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0x99</literal></expr>:</case> 

<case>case <expr><literal type="number">0x9a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x9b</literal></expr>:</case> 

<case>case <expr><literal type="number">0x9c</literal></expr>:</case> 

<case>case <expr><literal type="number">0x9d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x9e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x9f</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa1</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa2</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa3</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa4</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa5</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa7</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa8</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s 0x%04"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><operator>(</operator><name>addr</name><operator>+</operator><operator>(</operator><name>short</name><operator>)</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0xab</literal></expr>:</case> 

<case>case <expr><literal type="number">0xaa</literal></expr>:</case> 

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>enter_switch_op</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s default: 0x%04"</literal><name>PFMT64x</name></expr></argument>,

<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>SWITCH_OP</name><operator>.</operator><name>def_jmp</name></name><operator>+</operator><name><name>SWITCH_OP</name><operator>.</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0xb6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb7</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb8</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb9</literal></expr>:</case> 

<case>case <expr><literal type="number">0xba</literal></expr>:</case> 

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>r_bin_java_resolve_without_space</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s #%d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0xbb</literal></expr>:</case> 

<case>case <expr><literal type="number">0xbd</literal></expr>:</case> 

<case>case <expr><literal type="number">0xc0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xc1</literal></expr>:</case> 

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>r_bin_java_resolve_without_space</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s #%d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0xb2</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb3</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb4</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb5</literal></expr>:</case> 

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>r_bin_java_resolve_with_space</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s #%d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>USHORT</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s 0x%04x 0x%04x"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>update_bytes_consumed</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_java_new_method</name> <parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Reseting the bytes consumed, they were: 0x%04"</literal><name>PFMT64x</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name>BYTES_CONSUMED</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_switch_op</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>IN_SWITCH_OP</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>BYTES_CONSUMED</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <name>U</name></type>(<name>r_java_set_obj</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_java_disasm</name><parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>java_print_opcode</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseJavaArgs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args_sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nargs</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nargs</name> <operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>args_sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>nargs</name> <operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nargs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_java_assemble</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nargs</name> <init>= <expr><call><name>parseJavaArgs</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>JAVA_OPS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>JAVA_OPS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>byte</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>JAVA_OPS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isRelative</name> <argument_list>(<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>JAVA_OPS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
