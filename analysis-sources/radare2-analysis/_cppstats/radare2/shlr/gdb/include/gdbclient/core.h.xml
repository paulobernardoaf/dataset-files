<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\gdb\include\gdbclient\core.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libgdbr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arch.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ATTACH</name></cpp:macro> <cpp:value>"vAttach;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_DETACH_MP</name></cpp:macro> <cpp:value>"D;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KILL_MP</name></cpp:macro> <cpp:value>"vKill;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_READREGS</name></cpp:macro> <cpp:value>"g"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_WRITEREGS</name></cpp:macro> <cpp:value>"G"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_READREG</name></cpp:macro> <cpp:value>"p"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_WRITEREG</name></cpp:macro> <cpp:value>"P"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_WRITEMEM</name></cpp:macro> <cpp:value>"M"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_READMEM</name></cpp:macro> <cpp:value>"m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_BP</name></cpp:macro> <cpp:value>"Z0"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_RBP</name></cpp:macro> <cpp:value>"z0"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_HBP</name></cpp:macro> <cpp:value>"Z1"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_RHBP</name></cpp:macro> <cpp:value>"z1"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_HWW</name></cpp:macro> <cpp:value>"Z2"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_RHWW</name></cpp:macro> <cpp:value>"z2"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_HWR</name></cpp:macro> <cpp:value>"Z3"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_RHWR</name></cpp:macro> <cpp:value>"z3"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_HWA</name></cpp:macro> <cpp:value>"Z4"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_RHWA</name></cpp:macro> <cpp:value>"z4"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_QRCMD</name></cpp:macro> <cpp:value>"qRcmd,"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_C</name></cpp:macro> <cpp:value>"vCont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_C_CONT</name></cpp:macro> <cpp:value>"c"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_C_CONT_SIG</name></cpp:macro> <cpp:value>"C"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_C_STEP</name></cpp:macro> <cpp:value>"s"</cpp:value></cpp:define>

<enum>enum <name>Breakpoint</name> <block>{

<decl><name>BREAKPOINT</name></decl>,

<decl><name>HARDWARE_BREAKPOINT</name></decl>,

<decl><name>WRITE_WATCHPOINT</name></decl>,

<decl><name>READ_WATCHPOINT</name></decl>,

<decl><name>ACCESS_WATCHPOINT</name></decl>

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>send_vcont</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name><modifier>*</modifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>set_bp</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name><modifier>*</modifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>conditions</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Breakpoint</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sizebp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>remove_bp</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name><modifier>*</modifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Breakpoint</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sizebp</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
