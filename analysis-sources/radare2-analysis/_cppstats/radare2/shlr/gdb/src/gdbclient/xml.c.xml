<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\gdb\src\gdbclient\xml.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdbclient/xml.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdbclient/commands.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdbclient/core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdbr_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packet.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PID_CHARS</name></cpp:macro> <cpp:value>(5)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>gdbr_read_feature</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>tot_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>retlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retmax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>pkt_sz</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><type ref="prev"/><name>blksz</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>data_max</name></name></expr></init></decl>, <decl><type ref="prev"/><name>subret_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>subret_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>subret</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>,

<decl><type ref="prev"/><name>status</name></decl>, <decl><type ref="prev"/><name>tmpchar</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"qXfer:features:read:%s:%"</literal><name>PFMT64x</name>

<literal type="string">",%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>send_msg</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>read_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>send_ack</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retmax</name> <operator>-</operator> <name>retlen</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>data_len</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>retmax</name> <operator>+</operator> <name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retmax</name> <operator>+=</operator> <name>blksz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>retlen</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retlen</name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>retlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tot_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"&lt;xi:include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp2</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"/&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subret_space</name> <operator>=</operator> <name>tmp2</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp2</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"href="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp3</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmpchar</name> <operator>=</operator> <operator>*</operator><name>tmp3</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp3</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>subret</name> <operator>=</operator> <call><name>gdbr_read_feature</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subret_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp3</name> <operator>=</operator> <name>tmpchar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subret_len</name> <operator>&lt;=</operator> <name>subret_space</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>subret</name></expr></argument>, <argument><expr><name>subret_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>subret_len</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>subret_space</name></expr></argument>,

<argument><expr><name>retlen</name> <operator>-</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name>subret_space</name> <operator>-</operator> <name>ret</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retlen</name> <operator>-=</operator> <name>subret_space</name> <operator>-</operator> <name>subret_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>retlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="string">"&lt;xi:include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>subret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subret_len</name> <operator>&gt;</operator> <name>retmax</name> <operator>-</operator> <name>retlen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp3</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>retmax</name> <operator>+</operator> <name>subret_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>subret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp3</name> <operator>+</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <name>ret</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retmax</name> <operator>+=</operator> <name>subret_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>subret_len</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>subret_space</name></expr></argument>,

<argument><expr><name>retlen</name> <operator>-</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name>subret_space</name> <operator>-</operator> <name>ret</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>subret</name></expr></argument>, <argument><expr><name>subret_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retlen</name> <operator>+=</operator> <name>subret_len</name> <operator>-</operator> <name>subret_space</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>retlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>subret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="string">"&lt;xi:include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>tot_len</name> <operator>=</operator> <name>retlen</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>exit_err</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tot_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>gdbr_read_osdata</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>tot_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>retlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retmax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>pkt_sz</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><type ref="prev"/><name>blksz</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>data_max</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"qXfer:osdata:read:%s:%"</literal> <name>PFMT64x</name> <literal type="string">",%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>send_msg</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>read_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>send_ack</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retmax</name> <operator>-</operator> <name>retlen</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>data_len</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>retmax</name> <operator>+</operator> <name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retmax</name> <operator>+=</operator> <name>blksz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>retlen</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retlen</name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>retlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tot_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tot_len</name> <operator>=</operator> <name>retlen</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>exit_err</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tot_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>bit_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name></decl>;</decl_stmt> 

}</block> <decl><name><name>fields</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>ut32</name></type> <name>num_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num_fields</name></decl>;</decl_stmt>

}</block></struct></type> <name>gdbr_xml_flags_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flagnum</name></decl>;</decl_stmt>

}</block></struct></type> <name>gdbr_xml_reg_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_write_flag_bits</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gdbr_xml_flags_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_resolve_arch</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xml_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>_extract_flags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>flagstr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>_extract_regs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>regstr</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pc_alias</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RDebugPid</name> <modifier>*</modifier></type><name>_extract_pid_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gdbr_parse_target_xml</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xml_data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>regstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>flagstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>profile</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name><name>pc_alias</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>flag_bits</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>flags</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gdbr_xml_flags_t</name> <modifier>*</modifier></type><name>tmpflag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gdbr_xml_reg_t</name> <modifier>*</modifier></type><name>tmpreg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packed_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>profile_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>profile_max_len</name></decl>, <decl><type ref="prev"/><name>regnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>regoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pc_alias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gdb_reg_t</name> <modifier>*</modifier></type><name>arch_regs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_resolve_arch</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>xml_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flagstr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>xml_data</name></expr></argument>, <argument><expr><literal type="string">"&lt;feature"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regstr</name> <operator>=</operator> <name>flagstr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>_extract_flags</name> <argument_list>(<argument><expr><name>flagstr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>regs</name> <operator>=</operator> <call><name>_extract_regs</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pc_alias</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arch_regs</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gdb_reg_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><call><name>r_list_length</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile_max_len</name> <operator>=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>profile</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>profile_max_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>regs</argument>, <argument>iter</argument>, <argument>tmpreg</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmpreg</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>arch_regs</name><index>[<expr><name>regnum</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arch_regs</name><index>[<expr><name>regnum</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>tmpreg</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arch_regs</name><index>[<expr><name>regnum</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>regoff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_len</name> <operator>+</operator> <literal type="number">128</literal> <operator>&gt;=</operator> <name>profile_max_len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><name>profile_max_len</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>profile_max_len</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>flag_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpflag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmpreg</name><operator>-&gt;</operator><name>flagnum</name></name> <operator>&lt;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpflag</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>flagnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_write_flag_bits</name> <argument_list>(<argument><expr><name>flag_bits</name></expr></argument>, <argument><expr><name>tmpflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>packed_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmpreg</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"fpu"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strstr</name> <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"mmx"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"xmm"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strstr</name> <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"ymm"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>packed_size</name> <operator>=</operator> <name><name>tmpreg</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile_len</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>profile</name> <operator>+</operator> <name>profile_len</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,

<argument><expr><literal type="string">"%s\t%s\t.%u\t%"</literal> <name>PFMT64d</name> <literal type="string">"\t%d\t%s\n"</literal></expr></argument>, <argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,

<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>regoff</name></expr></argument>,

<argument><expr><name>packed_size</name></expr></argument>,

<argument><expr><name>flag_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpflag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmpflag</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>profile_len</name> <operator>+</operator> <literal type="number">128</literal> <operator>&gt;=</operator> <name>profile_max_len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><name>profile_max_len</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>profile_max_len</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile_len</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>profile</name> <operator>+</operator> <name>profile_len</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"gpr\t%s\t"</literal>

<literal type="string">".%u\t.%"</literal><name>PFMT64d</name><literal type="string">"\t0\n"</literal></expr></argument>, <argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sz</name></expr></argument>, <argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit_num</name> <operator>+</operator> <operator>(</operator><name>regoff</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regnum</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>regoff</name> <operator>+=</operator> <name><name>tmpreg</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block>

<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>profile</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>,

<argument><expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP sp\n"</literal> 

<literal type="string">"=A0 r0\n"</literal>

<literal type="string">"=A1 r1\n"</literal>

<literal type="string">"=A2 r2\n"</literal>

<literal type="string">"=A3 r3\n"</literal></expr></argument>

)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>profile</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>,

<argument><expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"=BP x29\n"</literal>

<literal type="string">"=A0 x0\n"</literal>

<literal type="string">"=A1 x1\n"</literal>

<literal type="string">"=A2 x2\n"</literal>

<literal type="string">"=A3 x3\n"</literal>

<literal type="string">"=ZF zf\n"</literal>

<literal type="string">"=SF nf\n"</literal>

<literal type="string">"=OF vf\n"</literal>

<literal type="string">"=CF cf\n"</literal>

<literal type="string">"=SN x8\n"</literal></expr></argument>

)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>profile</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>,

<argument><expr><literal type="string">"=PC eip\n"</literal>

<literal type="string">"=SP esp\n"</literal>

<literal type="string">"=BP ebp\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>profile</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>,

<argument><expr><literal type="string">"=PC rip\n"</literal>

<literal type="string">"=SP rsp\n"</literal>

<literal type="string">"=BP rbp\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_SYS_ARCH_MIPS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>profile</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>,

<argument><expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP r29\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pc_alias</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>profile</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><name>pc_alias</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>==</operator> <name>R_SYS_ARCH_MIPS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arch_regs</name> <operator>&amp;&amp;</operator> <name><name>arch_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>regprofile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>regprofile</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>registers</name></name> <operator>=</operator> <name>arch_regs</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>exit_err</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arch_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gdbr_parse_processes_xml</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xml_data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>pidstr</name><index>[<expr><name>MAX_PID_CHARS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>status</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cmdline</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>itemstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>itemstr_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>column</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>column_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>proc_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ipid</name></decl>, <decl><type ref="prev"/><name>column_data_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>pid_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>xml_data</name></expr></argument>, <argument><expr><literal type="string">"&lt;osdata type=\"processes\"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>column</name> <operator>=</operator> <name>xml_data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>itemstr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"&lt;item&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>itemstr_end</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>itemstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;/item&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>column</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>itemstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;column name=\"pid\"&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>column_end</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"&lt;/column&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>column</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><literal type="string">"&lt;column name=\"pid\"&gt;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>column_data_len</name> <operator>=</operator> <name>column_end</name> <operator>-</operator> <name>column</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>pidstr</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>column_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pidstr</name><index>[<expr><name>column_data_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ipid</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>pidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>column</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>itemstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;column name=\"command\"&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>column_end</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"&lt;/column&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>column</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><literal type="string">"&lt;column name=\"command\"&gt;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>column_data_len</name> <operator>=</operator> <name>column_end</name> <operator>-</operator> <name>column</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>column_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmdline</name><index>[<expr><name>column_data_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>proc_filename</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"/proc/%d/status"</literal></expr></argument>, <argument><expr><name>ipid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gdbr_open_file</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>proc_filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gdbr_read_file</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pid_info</name> <operator>=</operator> <call><name>_extract_pid_info</name> <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name>ipid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to read from data from procfs file of pid (%d)\n"</literal></expr></argument>, <argument><expr><name>ipid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gdbr_close_file</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to close procfs file of pid (%d)\n"</literal></expr></argument>, <argument><expr><name>ipid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to open procfs file of pid (%d)\n"</literal></expr></argument>, <argument><expr><name>ipid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pid_info</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugPid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>pid_info</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>ipid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>ppid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pid_info</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>runnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_STOP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>pid</name> <operator>||</operator> <name>ipid</name> <operator>==</operator> <name>pid</name> <operator>||</operator> <name><name>pid_info</name><operator>-&gt;</operator><name>ppid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pid_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pid_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pid_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pid_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pid_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gdbr_read_target_xml</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_features_read</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>gdbr_read_feature</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="string">"target.xml"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gdbr_parse_target_xml</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gdbr_read_processes_xml</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>stub_features</name><operator>.</operator><name>qXfer_features_read</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>gdbr_read_osdata</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="string">"processes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gdbr_parse_processes_xml</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_write_flag_bits</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gdbr_xml_flags_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name><name>fc</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name><name>flags</name><operator>-&gt;</operator><name>num_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>flags</name><operator>-&gt;</operator><name>num_bits</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>flags</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>flags</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sz</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>flags</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fc</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fc</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>flags</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit_num</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_resolve_arch</name><parameter_list>(<parameter><decl><type><name>libgdbr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xml_data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arch</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>xml_data</name></expr></argument>, <argument><expr><literal type="string">"&lt;architecture"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arch</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arch</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"i386"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_X86</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arch</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">":x86-64"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"aarch64"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_ARM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_ARM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="string">"mips"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_MIPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>xml_data</name></expr></argument>, <argument><expr><literal type="string">"com.apple.debugserver.arm64"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_ARM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>xml_data</name></expr></argument>, <argument><expr><literal type="string">"org.gnu.gdb.mips"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_MIPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>xml_data</name></expr></argument>, <argument><expr><literal type="string">"com.apple.debugserver.x86_64"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <name>R_SYS_ARCH_X86</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown architecture parsing XML (%s)\n"</literal></expr></argument>, <argument><expr><name>xml_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>_extract_flags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>flagstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>flagsend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>field_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>field_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>num_fields</name></decl>, <decl><type ref="prev"/><name>type_sz</name></decl>, <decl><type ref="prev"/><name>name_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gdbr_xml_flags_t</name> <modifier>*</modifier></type><name>tmpflag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>flags</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>flagstr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>flagstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;flags"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flagsend</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>flagstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;/flags&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsend</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmpflag</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gdbr_xml_flags_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>flagstr</name></expr></argument>, <argument><expr><literal type="string">"id="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>type_sz</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>type_sz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>type_sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp2</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>flagstr</name></expr></argument>, <argument><expr><literal type="string">"size="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tmpflag</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>*=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>field_start</name> <operator>=</operator> <name>flagstr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>field_start</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>field_start</name></expr></argument>, <argument><expr><literal type="string">"&lt;field"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num_fields</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>field_end</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>field_start</name></expr></argument>, <argument><expr><literal type="string">"/&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>field_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>field_start</name></expr></argument>, <argument><expr><literal type="string">"name="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp2</name> <operator>-</operator> <name>tmp1</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>field_end</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>field_start</name> <operator>=</operator> <name>field_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>name_sz</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>num_fields</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>num_fields</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>name_sz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>num_fields</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>name_sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp2</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>field_start</name></expr></argument>, <argument><expr><literal type="string">"start="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>num_fields</name></expr>]</index></name><operator>.</operator><name>bit_num</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>field_start</name></expr></argument>, <argument><expr><literal type="string">"end="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>num_fields</name></expr>]</index></name><operator>.</operator><name>sz</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>num_fields</name></expr>]</index></name><operator>.</operator><name>sz</name> <operator>-=</operator> <name><name>tmpflag</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>num_fields</name></expr>]</index></name><operator>.</operator><name>bit_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_fields</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>field_end</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>field_start</name> <operator>=</operator> <name>field_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>=</operator> <name>num_fields</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>tmpflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsend</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flagstr</name> <operator>=</operator> <name>flagsend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>flags</name></expr>;</return>

<label><name>exit_err</name>:</label>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmpflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDebugPid</name> <modifier>*</modifier></type><name>_extract_pid_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>pid_info</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pid_info</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"State:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_RUN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_SLEEP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_STOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_ZOMBIE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_DEAD</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_SLEEP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"PPid:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>ppid</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"Uid:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"Gid:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <ternary><condition><expr><name>path</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>runnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_info</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>pid_info</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>_extract_regs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>regstr</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pc_alias</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>regstr_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>regname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>regtype</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmpregstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>feature_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>typegroup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flagnum</name></decl>, <decl><type ref="prev"/><name>regname_len</name></decl>, <decl><type ref="prev"/><name>regsize</name></decl>, <decl><type ref="prev"/><name>regnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gdbr_xml_reg_t</name> <modifier>*</modifier></type><name>tmpreg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gdbr_xml_flags_t</name> <modifier>*</modifier></type><name>tmpflag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>regs</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"gpr"</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tmpregstr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;reg"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>regstr_end</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>tmpregstr</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;feature"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>feature_end</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"core"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"gpr"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"segments"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"seg"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"linux"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"gpr"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"avx"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"ymm"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"mpx"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"seg"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"m-profile"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"gpr"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"pfe"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"fpu"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"vfp"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"fpu"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"iwmmxt"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"xmm"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"sve"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tmp1</name> <operator>&lt;</operator> <name>feature_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"ymm"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"gpr"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <name>typegroup</name></expr>;</expr_stmt>

<expr_stmt><expr><name>regstr</name> <operator>=</operator> <name>tmpregstr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>regstr_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>regname</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"name="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regname</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regname_len</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>regname</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"bitsize="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regsize</name> <operator>=</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>regnum</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"regnum="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regnum</name> <operator>=</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flagnum</name> <operator>=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"group="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"fpu"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"mmx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"mmx"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"sse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"xmm"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"vector"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"ymm"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"system"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"seg"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"type="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp1</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"vec"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"i387_ext"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"ieee_single"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"ieee_double"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"fpu"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"code_ptr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>pc_alias</name></expr></argument>, <argument><expr><literal type="string">"=PC "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>pc_alias</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><name>regname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>pc_alias</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>regname_len</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flagnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>flags</argument>, <argument>iter</argument>, <argument>tmpflag</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name><name>tmpflag</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tmpflag</name><operator>-&gt;</operator><name>num_bits</name></name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flagnum</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regsize</name> <operator>&gt;</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>regtype</name></expr></argument>, <argument><expr><literal type="string">"gpr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"xmm"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regsize</name> <operator>==</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>regtype</name></expr></argument>, <argument><expr><literal type="string">"fpu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="string">"xmm"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmpreg</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gdbr_xml_reg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regname</name><index>[<expr><name>regname_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regname_len</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Register name too long: %s\n"</literal></expr></argument>, <argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regname</name><index>[<expr><name>regname_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>regtype</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>regsize</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpreg</name><operator>-&gt;</operator><name>flagnum</name></name> <operator>=</operator> <name>flagnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regnum</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regnum</name> <operator>&gt;=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>regnum</name> <operator>-</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_tail</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_list_set_n</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>regnum</name></expr></argument>, <argument><expr><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>regstr_end</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regstr</name> <operator>=</operator> <name>regstr_end</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>regstr</name></expr></argument>, <argument><expr><literal type="string">"&lt;/feature&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regstr</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><literal type="string">"&lt;/feature&gt;"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>typegroup</name> <operator>=</operator> <literal type="string">"gpr"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<return>return <expr><name>regs</name></expr>;</return>

<label><name>exit_err</name>:</label>

<if_stmt><if>if <condition>(<expr><name>regs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
