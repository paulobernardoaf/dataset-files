<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\fs\fshelp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fshelp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_fshelp_view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_fshelp_find_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_fshelp_log2blksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_fshelp_read_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>grub_fshelp_view</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>grub_fshelp_find_file_closure</name>

<block>{

<decl_stmt><decl><type><name>grub_fshelp_node_t</name></type> <name>rootnode</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>iterate_dir</name>) <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>dir</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>)

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>read_symlink</name>) <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>symlinknest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>foundtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_fshelp_node_t</name></type> <name>currroot</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_node</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_fshelp_find_file_closure</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>rootnode</name></name> <operator>&amp;&amp;</operator> <name>node</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>currroot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>find_file_closure</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_fshelp_node_t</name> <modifier>*</modifier></type><name>oldnode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_fshelp_node_t</name> <modifier>*</modifier></type><name>currnode</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>iterate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>find_file_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filetype</name> <operator>==</operator> <name>GRUB_FSHELP_UNKNOWN</name> <operator>||</operator>

<operator>(</operator><call><name>grub_strcmp</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator> <operator>(</operator><name>filetype</name> <operator>&amp;</operator> <name>GRUB_FSHELP_CASE_INSENSITIVE</name><operator>)</operator> <operator>||</operator>

<call><name>grub_strncasecmp</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>GRUB_LONG_MAX</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>=</operator> <name>filetype</name> <operator>&amp;</operator> <operator>~</operator><name>GRUB_FSHELP_CASE_INSENSITIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>oldnode</name></name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>currnode</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>currnode</name></name><operator>)</operator> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>find_file</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>currpath</name></decl></parameter>, <parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>currroot</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name> <modifier>*</modifier></type><name>currfound</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>grub_fshelp_find_file_closure</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fpath</name> <init>= <expr><call><name>grub_malloc</name> <argument_list>(<argument><expr><call><name>grub_strlen</name> <argument_list>(<argument><expr><name>currpath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>fpath</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>type</name> <init>= <expr><name>GRUB_FSHELP_DIR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_fshelp_node_t</name></type> <name>currnode</name> <init>= <expr><name>currroot</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_fshelp_node_t</name></type> <name>oldnode</name> <init>= <expr><name>currroot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>currroot</name></name> <operator>=</operator> <name>currroot</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_strncpy</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>, <argument><expr><name>currpath</name></expr></argument>, <argument><expr><call><name>grub_strlen</name> <argument_list>(<argument><expr><name>currpath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>currfound</name> <operator>=</operator> <name>currnode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>find_file_closure</name></name></type> <name>cc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>grub_strchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>next</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>GRUB_FSHELP_DIR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>currnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"not a directory"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>type</name></name> <operator>=</operator> <operator>&amp;</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>oldnode</name></name> <operator>=</operator> <operator>&amp;</operator><name>oldnode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>currnode</name></name> <operator>=</operator> <operator>&amp;</operator><name>currnode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>iterate_dir</name></name> <argument_list>(<argument><expr><name>currnode</name></expr></argument>, <argument><expr><name>iterate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>found</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GRUB_FSHELP_SYMLINK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symlink</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>symlinknest</name></name><operator>)</operator> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>currnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>oldnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_SYMLINK_LOOP</name></expr></argument>,

<argument><expr><literal type="string">"too deep nesting of symlinks"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>symlink</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>read_symlink</name></name> <argument_list>(<argument><expr><name>currnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>currnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symlink</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>oldnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>symlink</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>oldnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldnode</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rootnode</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>find_file</name> <argument_list>(<argument><expr><name>symlink</name></expr></argument>, <argument><expr><name>oldnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>foundtype</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>symlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>oldnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_node</name> <argument_list>(<argument><expr><name>oldnode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>next</name> <operator>||</operator> <operator>*</operator><name>next</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>currfound</name> <operator>=</operator> <name>currnode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>foundtype</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_FILE_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"file not found"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>grub_err_t</name></type>

<name>grub_fshelp_find_file</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>rootnode</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name> <modifier>*</modifier></type><name>foundnode</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>iterate_dir</name>) <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>dir</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>)

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>,

<parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>read_symlink</name>) <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>expecttype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_err_t</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_find_file_closure</name></name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>rootnode</name></name> <operator>=</operator> <name>rootnode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>iterate_dir</name></name> <operator>=</operator> <name>iterate_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>read_symlink</name></name> <operator>=</operator> <name>read_symlink</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>symlinknest</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>foundtype</name></name> <operator>=</operator> <name>GRUB_FSHELP_DIR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name> <operator>||</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILENAME</name></expr></argument>, <argument><expr><literal type="string">"bad filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>find_file</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rootnode</name></expr></argument>, <argument><expr><name>foundnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>expecttype</name> <operator>==</operator> <name>GRUB_FSHELP_REG</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>.</operator><name>foundtype</name></name> <operator>!=</operator> <name>expecttype</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"not a regular file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>expecttype</name> <operator>==</operator> <name>GRUB_FSHELP_DIR</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>.</operator><name>foundtype</name></name> <operator>!=</operator> <name>expecttype</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>, <argument><expr><literal type="string">"not a directory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>grub_hack_lastoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>grub_ssize_t</name></type>

<name>grub_fshelp_read_file</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>grub_off_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><function_decl><type><name>grub_disk_addr_t</name></type> (<modifier>*</modifier><name>get_block</name>) <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>block</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>grub_off_t</name></type> <name>filesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2blocksize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>blockcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>log2blocksize</name> <operator>+</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>filesize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>filesize</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blockcnt</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>+</operator> <name>blocksize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator>

<operator>(</operator><name>log2blocksize</name> <operator>+</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pos</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2blocksize</name> <operator>+</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockcnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>blknr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blockoff</name> <init>= <expr><name>pos</name> <operator>&amp;</operator> <operator>(</operator><name>blocksize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blockend</name> <init>= <expr><name>blocksize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipfirst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blknr</name> <operator>=</operator> <call><name>get_block</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blknr</name> <operator>=</operator> <name>blknr</name> <operator>&lt;&lt;</operator> <name>log2blocksize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>blockcnt</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>blockend</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>blocksize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>blockend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blockend</name> <operator>=</operator> <name>blocksize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>(</operator><name>pos</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2blocksize</name> <operator>+</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>skipfirst</name> <operator>=</operator> <name>blockoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blockend</name> <operator>-=</operator> <name>skipfirst</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blknr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <name>read_hook</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>

<expr_stmt><expr><name>grub_hack_lastoff</name> <operator>=</operator> <name>blknr</name> <operator>*</operator> <literal type="number">512</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_disk_read_ex</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>blknr</name></expr></argument>, <argument><expr><name>skipfirst</name></expr></argument>, <argument><expr><name>blockend</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blockend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>blocksize</name> <operator>-</operator> <name>skipfirst</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>

<name>grub_fshelp_log2blksize</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>blksize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>blksize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <name>blksize</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>blksize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>blksize</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_NUMBER</name></expr></argument>,

<argument><expr><literal type="string">"the blocksize is not a power of two"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pow</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

</unit>
