<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\fs\ntfscomp.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NOT_USER_RIGHT_NOW</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fshelp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/ntfs.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>decomp_nextvcn</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_comp</name></name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>comp_head</name></name> <operator>&gt;=</operator> <name><name>cc</name><operator>-&gt;</operator><name>comp_tail</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"compression block overflown"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name>

<argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>comp_table</name><index>[<expr><name><name>cc</name><operator>-&gt;</operator><name>comp_head</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>comp_table</name><index>[<expr><name><name>cc</name><operator>-&gt;</operator><name>comp_head</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>cc</name><operator>-&gt;</operator><name>cbuf_vcn</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>cc</name><operator>-&gt;</operator><name>spc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cbuf_vcn</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>cbuf_vcn</name></name> <operator>&gt;=</operator> <name><name>cc</name><operator>-&gt;</operator><name>comp_table</name><index>[<expr><name><name>cc</name><operator>-&gt;</operator><name>comp_head</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>comp_head</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cbuf_ofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>decomp_getch</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_comp</name></name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>cbuf_ofs</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decomp_nextvcn</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>cc</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name><name>cc</name><operator>-&gt;</operator><name>cbuf_ofs</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>decomp_get16</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_comp</name></name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>grub_uint16_t</name> <modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>decomp_getch</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>decomp_getch</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>grub_uint16_t</name><operator>)</operator> <name>c2</name><operator>)</operator> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>grub_uint16_t</name><operator>)</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>decomp_block</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_comp</name></name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>flg</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decomp_get16</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>flg</name> <operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flg</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>copied</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>copied</name> <operator>=</operator> <name>tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>copied</name> <operator>&gt;</operator> <name>COM_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>,

<argument><expr><literal type="string">"compression block too large"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bits</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decomp_getch</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>lmask</name></decl>, <decl><type ref="prev"/><name>dshift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>word</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decomp_get16</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>word</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>word</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copied</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"nontext window empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>copied</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>lmask</name> <operator>=</operator> <literal type="number">0xFFF</literal></expr><operator>,</operator> <expr><name>dshift</name> <operator>=</operator> <literal type="number">12</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0x10</literal></expr>;</condition>

<incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>lmask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dshift</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <name>dshift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <name>lmask</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>copied</name></expr>]</index></name> <operator>=</operator> <name><name>dest</name><index>[<expr><name>copied</name> <operator>-</operator> <name>delta</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>copied</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decomp_getch</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>copied</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tag</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>!=</operator> <name>COM_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>,

<argument><expr><literal type="string">"invalid compression block size"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator> <operator>-</operator> <name><name>cc</name><operator>-&gt;</operator><name>cbuf_ofs</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dest</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name><name>cc</name><operator>-&gt;</operator><name>cbuf_ofs</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cbuf_ofs</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>decomp_nextvcn</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>read_block</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_rlst</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpb</name> <init>= <expr><name>COM_SEC</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>num</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"invalid compression block"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>cbuf_vcn</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>cbuf_ofs</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_ntfs_read_run_list</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RF_BLNK</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_vcn</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_ntfs_read_run_list</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nn</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>cpb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nn</name> <operator>&gt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nn</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>-=</operator> <name>nn</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RF_BLNK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>+=</operator> <name>nn</name> <operator>*</operator> <name>cpb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nn</name> <operator>*</operator> <name>COM_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>nn</name> <operator>*</operator> <name>COM_LEN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><name>nn</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decomp_block</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>COM_LEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nn</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>nn</name> <operator>*=</operator> <name>cpb</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nn</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;</operator> <name>nn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>+=</operator> <name>tt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name>

<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>disk</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>tt</name> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>tt</name> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nn</name> <operator>-=</operator> <name>tt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>&gt;=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_table</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nn</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name>

<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>disk</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_vcn</name></name> <operator>+</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>nn</name> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>nn</name> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>+=</operator> <name>nn</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>ntfscomp</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>ofs</name></decl></parameter>,

<parameter><decl><type><name>grub_uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_ntfs_rlst</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>vcn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_err_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_head</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>comp_tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>cbuf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vcn</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>read_block</name>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>vcn</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name><operator>)</operator> <operator>/</operator> <name>COM_SEC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>grub_errno</name></expr>;</expr_stmt>

<goto>goto <name>quit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>%</operator> <name>COM_LEN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_block</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>grub_errno</name></expr>;</expr_stmt>

<goto>goto <name>quit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>save_pos</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name>ofs</name> <operator>%</operator> <name>COM_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>COM_LEN</name> <operator>-</operator> <name>o</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>sbuf</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>quit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_block</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name> <operator>/</operator> <name>COM_LEN</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>grub_errno</name></expr>;</expr_stmt>

<goto>goto <name>quit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <operator>(</operator><name>len</name> <operator>/</operator> <name>COM_LEN</name><operator>)</operator> <operator>*</operator> <name>COM_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>%</operator> <name>COM_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_block</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>grub_errno</name></expr>;</expr_stmt>

<goto>goto <name>quit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>save_pos</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>quit</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>cbuf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
