<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\fs\btrfs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTRFS_SIGNATURE</name></cpp:macro> <cpp:value>"_BHRfS_M"</cpp:value></cpp:define>

<macro><name>R_PACKED</name><argument_list>(

<argument>struct btrfs_superblock

{ 

grub_uint8_t dummy1[<literal type="number">32</literal>];

grub_uint16_t uuid[<literal type="number">8</literal>];

grub_uint8_t dummy2[<literal type="number">16</literal>];

grub_uint8_t signature[sizeof (BTRFS_SIGNATURE) - <literal type="number">1</literal>];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<struct>struct <name>grub_btrfs_data</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>btrfs_superblock</name></name></type> <name>sblock</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>grub_btrfs_data</name></name> <modifier>*</modifier></type>

<name>grub_btrfs_mount</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_btrfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sblock</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_memcmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>signature</name></name></expr></argument>, <argument><expr><name>BTRFS_SIGNATURE</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>BTRFS_SIGNATURE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"not a Btrfs filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_btrfs_open</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter> ,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_NOT_IMPLEMENTED_YET</name></expr></argument>, <argument><expr><literal type="string">"only detection is supported for Btrfs"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_btrfs_dir</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> ,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_btrfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>grub_btrfs_mount</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_btrfs_uuid</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_btrfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_btrfs_mount</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <call><name>grub_xasprintf</name> <argument_list>(<argument><expr><literal type="string">"%04x%04x-%04x-%04x-%04x-%04x%04x%04x"</literal></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fs</name></name></type> <name>grub_btrfs_fs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"btrfs"</literal></expr>,

<expr><operator>.</operator><name>dir</name> <operator>=</operator> <name>grub_btrfs_dir</name></expr>,

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>grub_btrfs_open</name></expr>,

<expr><operator>.</operator><name>uuid</name> <operator>=</operator> <name>grub_btrfs_uuid</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
