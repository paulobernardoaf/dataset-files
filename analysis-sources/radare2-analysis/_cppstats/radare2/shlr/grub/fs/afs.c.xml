<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\fs\afs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fshelp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_FSNAME_SUFFIX</name></cpp:macro> <cpp:value>"_be"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_FSNAME_SUFFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_FSNAME</name></cpp:macro> <cpp:value>"befs" GRUB_AFS_FSNAME_SUFFIX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_FSNAME</name></cpp:macro> <cpp:value>"afs" GRUB_AFS_FSNAME_SUFFIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_DIRECT_BLOCK_COUNT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_BLOCKS_PER_DI_RUN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_SBLOCK_SECTOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_SBLOCK_MAGIC1</name></cpp:macro> <cpp:value>0x42465331</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_SBLOCK_SECTOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_SBLOCK_MAGIC1</name></cpp:macro> <cpp:value>0x41465331</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_SBLOCK_MAGIC2</name></cpp:macro> <cpp:value>0xdd121031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_SBLOCK_MAGIC3</name></cpp:macro> <cpp:value>0x15b6830e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_INODE_MAGIC</name></cpp:macro> <cpp:value>0x64358428</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_BTREE_MAGIC</name></cpp:macro> <cpp:value>0x69f6c2e8</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_BTREE_MAGIC</name></cpp:macro> <cpp:value>0x65768995</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_BNODE_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_S_IFMT</name></cpp:macro> <cpp:value>00170000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_S_IFLNK</name></cpp:macro> <cpp:value>0120000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_S_IFREG</name></cpp:macro> <cpp:value>0100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_S_IFDIR</name></cpp:macro> <cpp:value>0040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_S_IFIFO</name></cpp:macro> <cpp:value>0010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_AFS_NULL_VAL</name></cpp:macro> <cpp:value>((grub_afs_bvalue_t)-1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_afs_to_cpu16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_be_to_cpu16 (x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_afs_to_cpu32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_be_to_cpu32 (x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_afs_to_cpu64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_be_to_cpu64 (x)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_afs_to_cpu16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_le_to_cpu16 (x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_afs_to_cpu32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_le_to_cpu32 (x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_afs_to_cpu64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_le_to_cpu64 (x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_KEY_INDEX_ALIGN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_KEY_INDEX_ALIGN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_KEY_INDEX_OFFSET</name><parameter_list>(<parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_uint16_t *) ((char *) (node) + ALIGN_UP (sizeof (struct grub_afs_bnode) + node-&gt;key_size, B_KEY_INDEX_ALIGN)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_KEY_VALUE_OFFSET</name><parameter_list>(<parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((grub_afs_bvalue_t *) ((char *) B_KEY_INDEX_OFFSET (node) + node-&gt;key_count * 2))</cpp:value></cpp:define>

<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_afs_off_t</name>;</typedef>

<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_afs_bigtime</name>;</typedef>

<typedef>typedef <type><name>grub_uint64_t</name></type> <name>grub_afs_bvalue_t</name>;</typedef>

<struct>struct <name>grub_afs_blockrun</name>

<block>{

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>len</name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>grub_afs_datastream</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name><name>direct</name><index>[<expr><name>GRUB_AFS_DIRECT_BLOCK_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>max_direct_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>indirect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>max_indirect_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>double_indirect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>max_double_indirect_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>grub_afs_bnode</name>

<block>{

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>overflow</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>key_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>key_size</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>key_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>key_size</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name></type> <name><name>key_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>grub_afs_btree</name>

<block>{

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>unused1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>tree_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>unused2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name><name>unused3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct>struct <name>grub_afs_btree</name>

<block>{

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>tree_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>last_node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>first_free</name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>grub_afs_sblock</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>magic1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>byte_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>block_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>num_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>used_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>inode_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>magic2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>block_per_group</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>alloc_group_shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>alloc_group_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>log_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>log_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>valid_log_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>log_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>magic3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>root_dir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>deleted_files</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>index_dir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>boot_loader_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name><name>pad</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>grub_afs_inode</name>

<block>{

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>magic1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>inode_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>uid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>gid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>link_count</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>grub_afs_bigtime</name></type> <name>create_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_bigtime</name></type> <name>modified_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name>attrib_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>index_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>inode_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>unused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_datastream</name></name></type> <name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name><name>pad</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name><name>small_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>grub_fshelp_node</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_inode</name></name></type> <name>inode</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>grub_afs_data</name>

<block>{

<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_sblock</name></name></type> <name>sblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_inode</name></name> <modifier>*</modifier></type><name>inode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name></type> <name>diropen</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>grub_dl_t</name></type> <name>my_mod</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>grub_afs_off_t</name></type>

<name>grub_afs_run_to_num</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_afs_sblock</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name> <modifier>*</modifier></type><name>run</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>grub_afs_off_t</name><operator>)</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>run</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call>

<operator>*</operator> <name><name>sb</name><operator>-&gt;</operator><name>block_per_group</name></name> <operator>+</operator> <call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>run</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_afs_read_inode</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>grub_uint32_t</name></type> <name>ino</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_afs_inode</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>ino</name> <operator>*</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>block_size</name></name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_afs_inode</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_disk_addr_t</name></type>

<name>grub_afs_read_block</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>grub_disk_addr_t</name></type> <name>fileblock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_sblock</name></name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>sblock</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_datastream</name></name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileblock</name> <operator>&lt;</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>max_direct_range</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRUB_AFS_DIRECT_BLOCK_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fileblock</name> <operator>&lt;</operator> <call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>direct</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_afs_run_to_num</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>direct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>fileblock</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fileblock</name> <operator>-=</operator> <call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>direct</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>fileblock</name> <operator>&lt;</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>max_indirect_range</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ptrs_per_blk</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_afs_blockrun</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name><name>indir</name><index>[<expr><name>ptrs_per_blk</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>blk</name> <init>= <expr><call><name>grub_afs_run_to_num</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>indirect</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fileblock</name> <operator>-=</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>max_direct_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>indirect</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>blk</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>blk</name> <operator>*</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>indir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>indir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ptrs_per_blk</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fileblock</name> <operator>&lt;</operator> <call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>indir</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_afs_run_to_num</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>indir</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>fileblock</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fileblock</name> <operator>-=</operator> <call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>indir</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ptrs_per_blk</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_afs_blockrun</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_blockrun</name></name></type> <name><name>indir</name><index>[<expr><name>ptrs_per_blk</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_pos</name> <init>= <expr><name>fileblock</name> <operator>-</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>max_indirect_range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dptr_size</name> <init>= <expr><name>GRUB_AFS_BLOCKS_PER_DI_RUN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dblk_size</name> <init>= <expr><name>dptr_size</name> <operator>*</operator> <name>ptrs_per_blk</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idptr_size</name> <init>= <expr><name>dblk_size</name> <operator>*</operator> <name>GRUB_AFS_BLOCKS_PER_DI_RUN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idblk_size</name> <init>= <expr><name>idptr_size</name> <operator>*</operator> <name>ptrs_per_blk</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>cur_pos</name> <operator>%</operator> <name>GRUB_AFS_BLOCKS_PER_DI_RUN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dptr</name> <init>= <expr><operator>(</operator><name>cur_pos</name> <operator>/</operator> <name>dptr_size</name><operator>)</operator> <operator>%</operator> <name>ptrs_per_blk</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dblk</name> <init>= <expr><operator>(</operator><name>cur_pos</name> <operator>/</operator> <name>dblk_size</name><operator>)</operator> <operator>%</operator> <name>GRUB_AFS_BLOCKS_PER_DI_RUN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idptr</name> <init>= <expr><operator>(</operator><name>cur_pos</name> <operator>/</operator> <name>idptr_size</name><operator>)</operator> <operator>%</operator> <name>ptrs_per_blk</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idblk</name> <init>= <expr><operator>(</operator><name>cur_pos</name> <operator>/</operator> <name>idblk_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><operator>(</operator><call><name>grub_afs_run_to_num</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>double_indirect</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <name>idblk</name><operator>)</operator> <operator>*</operator>

<operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>indir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>indir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><operator>(</operator><call><name>grub_afs_run_to_num</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>indir</name><index>[<expr><name>idptr</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>dblk</name><operator>)</operator> <operator>*</operator>

<operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>indir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>indir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>grub_afs_run_to_num</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>indir</name><index>[<expr><name>dptr</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_ssize_t</name></type>

<name>grub_afs_read_file</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>grub_fshelp_read_file</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>read_hook</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>grub_afs_read_block</name></expr></argument>,

<argument><expr><call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>stream</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>block_shift</name></name>

<operator>-</operator> <name>GRUB_DISK_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>grub_afs_read_symlink</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_afs_off_t</name></type> <name>size</name> <init>= <expr><call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>stream</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>grub_zalloc</name> <argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>stream</name></name><operator>)</operator></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>grub_zalloc</name> <argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_afs_read_file</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>grub_afs_iterate_dir</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>dir</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_btree</name></name></type> <name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>node_data</name> <index>[<expr><name>GRUB_AFS_BNODE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_bnode</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator>struct <name>grub_afs_bnode</name> <operator>*</operator><operator>)</operator> <name>node_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>stream</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>GRUB_AFS_S_IFMT</name><operator>)</operator>

<operator>!=</operator> <name>GRUB_AFS_S_IFDIR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_afs_read_file</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_afs_read_file</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>head</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GRUB_AFS_BNODE_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>head</name><operator>.</operator><name>tree_depth</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_afs_bvalue_t</name></type> <name>blk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>grub_afs_to_cpu64</name><argument_list>(<argument><expr><call><name>B_KEY_VALUE_OFFSET</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_afs_read_file</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>GRUB_AFS_BNODE_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>key_count</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>cur_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key_start</name></decl>, <decl><type ref="prev"/><name>key_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>B_KEY_INDEX_OFFSET</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_start</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cur_key</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>

?</condition><then> <expr><call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>cur_key</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>key_size</name> <operator>=</operator> <call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>cur_key</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>key_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name> <index>[<expr><name>key_size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>fdiro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fdiro</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_fshelp_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>fdiro</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fdiro</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_afs_read_inode</name> <argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><call><name>grub_afs_to_cpu64</name>

<argument_list>(<argument><expr><call><name>B_KEY_VALUE_OFFSET</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <index>[<expr><name>cur_key</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fdiro</name><operator>-&gt;</operator><name>inode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>key_data</name><index>[<expr><name>key_start</name></expr>]</index></name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filename</name> <index>[<expr><name>key_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>fdiro</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>GRUB_AFS_S_IFMT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GRUB_AFS_S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>GRUB_FSHELP_DIR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GRUB_AFS_S_IFREG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>GRUB_FSHELP_REG</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GRUB_AFS_S_IFLNK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>GRUB_FSHELP_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>GRUB_FSHELP_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hook</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fdiro</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_key</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_key</name> <operator>&gt;=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>key_count</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>GRUB_AFS_NULL_VAL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_afs_read_file</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GRUB_AFS_BNODE_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>grub_afs_validate_sblock</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_afs_sblock</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>magic1</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GRUB_AFS_SBLOCK_MAGIC1</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>magic2</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>magic2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>magic3</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>magic3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>block_shift</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>block_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>used_blocks</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>used_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>num_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>inode_size</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>inode_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_count</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_shift</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>block_per_group</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>block_per_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_count</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>log_size</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>log_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>magic2</name></name> <operator>!=</operator> <name>GRUB_AFS_SBLOCK_MAGIC2</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>magic3</name></name> <operator>!=</operator> <name>GRUB_AFS_SBLOCK_MAGIC3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>block_per_group</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>block_shift</name></name><operator>)</operator> <operator>!=</operator> <name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>used_blocks</name></name> <operator>&gt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>inode_size</name></name> <operator>!=</operator> <name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>grub_uint32_t</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>alloc_group_shift</name></name><operator>)</operator> <operator>!=</operator>

<name><name>sb</name><operator>-&gt;</operator><name>block_per_group</name></name> <operator>*</operator> <name><name>sb</name><operator>-&gt;</operator><name>block_size</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>alloc_group_count</name></name> <operator>*</operator> <name><name>sb</name><operator>-&gt;</operator><name>block_per_group</name></name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>num_blocks</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>grub_afs_to_cpu16</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>log_block</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>sb</name><operator>-&gt;</operator><name>log_size</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>grub_afs_to_cpu32</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>valid_log_blocks</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>log_size</name></name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type>

<name>grub_afs_mount</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_afs_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>GRUB_AFS_SBLOCK_SECTOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_afs_sblock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sblock</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>grub_afs_validate_sblock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sblock</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>diropen</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>diropen</name><operator>.</operator><name>inode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name> <operator>=</operator> <name>disk</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_afs_read_inode</name> <argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><call><name>grub_afs_run_to_num</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sblock</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>root_dir</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>inode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"not an "</literal> <name>GRUB_AFS_FSNAME</name> <literal type="string">" filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_afs_open</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>fdiro</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_afs_mount</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_fshelp_find_file</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>diropen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdiro</name></expr></argument>, <argument><expr><name>grub_afs_iterate_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>grub_afs_read_symlink</name></expr></argument>, <argument><expr><name>GRUB_FSHELP_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>inode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdiro</name><operator>-&gt;</operator><name>inode</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_afs_inode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fdiro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>inode</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_ssize_t</name></type>

<name>grub_afs_read</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>grub_afs_data</name> <operator>*</operator><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>grub_afs_read_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>diropen</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>read_hook</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>,

<argument><expr><name><name>file</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_afs_close</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>grub_afs_dir_closure</name>

<block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>iterate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_dir_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_dirhook_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>filetype</name> <operator>&amp;</operator> <name>GRUB_FSHELP_TYPE_MASK</name><operator>)</operator> <operator>==</operator> <name>GRUB_FSHELP_DIR</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>mtimeset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODE_BFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>mtime</name></name> <operator>=</operator> <call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>modified_time</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>mtime</name></name> <operator>=</operator> <call><name>grub_divmod64</name> <argument_list>(<argument><expr><call><name>grub_afs_to_cpu64</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>inode</name><operator>.</operator><name>modified_time</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>c</name><operator>-&gt;</operator><name>hook</name></name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_afs_dir</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>fdiro</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_dir_closure</name></name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_afs_mount</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_fshelp_find_file</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>diropen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdiro</name></expr></argument>, <argument><expr><name>grub_afs_iterate_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>grub_afs_read_symlink</name></expr></argument>, <argument><expr><name>GRUB_FSHELP_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hook</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>hook</name></name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_afs_iterate_dir</name> <argument_list>(<argument><expr><name>fdiro</name></expr></argument>, <argument><expr><name>iterate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fdiro</name> <operator>!=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>diropen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fdiro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_afs_label</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_afs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_afs_mount</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <call><name>grub_strndup</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sblock</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>grub_fs</name></name></type> <name>grub_afs_fs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>GRUB_AFS_FSNAME</name></expr>,

<expr><operator>.</operator><name>dir</name> <operator>=</operator> <name>grub_afs_dir</name></expr>,

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>grub_afs_open</name></expr>,

<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>grub_afs_read</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>grub_afs_close</name></expr>,

<expr><operator>.</operator><name>label</name> <operator>=</operator> <name>grub_afs_label</name></expr>,

<expr><operator>.</operator><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
