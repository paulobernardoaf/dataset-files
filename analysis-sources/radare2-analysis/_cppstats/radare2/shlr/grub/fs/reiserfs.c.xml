<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\fs\reiserfs.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_REISERFS_DEBUG</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_REISERFS_JOURNALING</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_HEXDUMP</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fshelp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REISERFS_SUPER_BLOCK_OFFSET</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REISERFS_MAGIC_LEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REISERFS_MAGIC_STRING</name></cpp:macro> <cpp:value>"ReIsEr"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REISERFS_MAGIC_DESC_BLOCK</name></cpp:macro> <cpp:value>"ReIsErLB"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_REISERFS_VISIBLE_MASK</name></cpp:macro> <cpp:value>((grub_uint16_t) 0x04)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REISERFS_MAX_LABEL_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REISERFS_LABEL_OFFSET</name></cpp:macro> <cpp:value>0x64</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_IFLNK</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFLNK</name></cpp:macro> <cpp:value>0xA000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>grub_dl_t</name></type> <name>my_mod</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert</name><parameter_list>(<parameter><type><name>boolean</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>real_assert (boolean, GRUB_FILE, __LINE__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>real_assert</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>boolean</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>boolean</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"Assertion failed at %s:%d\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<enum>enum <name>grub_reiserfs_item_type</name>

<block>{

<decl><name>GRUB_REISERFS_STAT</name></decl>,

<decl><name>GRUB_REISERFS_DIRECTORY</name></decl>,

<decl><name>GRUB_REISERFS_DIRECT</name></decl>,

<decl><name>GRUB_REISERFS_INDIRECT</name></decl>,

<decl><name>GRUB_REISERFS_ANY</name></decl>,

<decl><name>GRUB_REISERFS_UNKNOWN</name></decl>

}</block>;</enum>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_superblock

{

grub_uint32_t block_count;

grub_uint32_t block_free_count;

grub_uint32_t root_block;

grub_uint32_t journal_block;

grub_uint32_t journal_device;

grub_uint32_t journal_original_size;

grub_uint32_t journal_max_transaction_size;

grub_uint32_t journal_block_count;

grub_uint32_t journal_max_batch;

grub_uint32_t journal_max_commit_age;

grub_uint32_t journal_max_transaction_age;

grub_uint16_t block_size;

grub_uint16_t oid_max_size;

grub_uint16_t oid_current_size;

grub_uint16_t state;

grub_uint8_t magic_string[REISERFS_MAGIC_LEN];

grub_uint32_t function_hash_code;

grub_uint16_t tree_height;

grub_uint16_t bitmap_number;

grub_uint16_t version;

grub_uint16_t reserved;

grub_uint32_t inode_generation;

grub_uint8_t unused[<literal type="number">4</literal>];

grub_uint16_t uuid[<literal type="number">8</literal>];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_journal_header

{

grub_uint32_t last_flush_uid;

grub_uint32_t unflushed_offset;

grub_uint32_t mount_id;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_description_block

{

grub_uint32_t id;

grub_uint32_t len;

grub_uint32_t mount_id;

grub_uint32_t real_blocks[<literal type="number">0</literal>];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_commit_block

{

grub_uint32_t id;

grub_uint32_t len;

grub_uint32_t real_blocks[<literal type="number">0</literal>];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_stat_item_v1

{

grub_uint16_t mode;

grub_uint16_t hardlink_count;

grub_uint16_t uid;

grub_uint16_t gid;

grub_uint32_t size;

grub_uint32_t atime;

grub_uint32_t mtime;

grub_uint32_t ctime;

grub_uint32_t rdev;

grub_uint32_t first_direct_byte;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name><argument_list>(

<argument>struct grub_reiserfs_stat_item_v2

{

grub_uint16_t mode;

grub_uint16_t reserved;

grub_uint32_t hardlink_count;

grub_uint64_t size;

grub_uint32_t uid;

grub_uint32_t gid;

grub_uint32_t atime;

grub_uint32_t mtime;

grub_uint32_t ctime;

grub_uint32_t blocks;

grub_uint32_t first_direct_byte;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_key

{

grub_uint32_t directory_id;

grub_uint32_t object_id;

union

{

R_PACKED (

struct

{

grub_uint32_t offset;

grub_uint32_t type;

}) v1;

R_PACKED (

struct

{

grub_uint64_t offset_type;

}) v2;

} u;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_item_header

{

struct grub_reiserfs_key key;

R_PACKED (

union

{

grub_uint16_t free_space;

grub_uint16_t entry_count;

}) u;

grub_uint16_t item_size;

grub_uint16_t item_location;

grub_uint16_t version;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_block_header

{

grub_uint16_t level;

grub_uint16_t item_count;

grub_uint16_t free_space;

grub_uint16_t reserved;

struct grub_reiserfs_key block_right_delimiting_key;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_disk_child

{

grub_uint32_t block_number;

grub_uint16_t size;

grub_uint16_t reserved;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_reiserfs_directory_header

{

grub_uint32_t offset;

grub_uint32_t directory_id;

grub_uint32_t object_id;

grub_uint16_t location;

grub_uint16_t state;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<struct>struct <name>grub_fshelp_node</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>block_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>block_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>next_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>grub_reiserfs_item_type</name></name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_item_header</name></name></type> <name>header</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>grub_reiserfs_data</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_superblock</name></name></type> <name>superblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>grub_reiserfs_item_type</name></name></type>

<name>grub_reiserfs_get_key_v2_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>o</name> <init>= <expr><call><name>grub_le_to_cpu64</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>o</name><operator>&gt;&gt;</operator><literal type="number">60</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_STAT</name></expr>;</return>

<case>case <expr><literal type="number">15</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_ANY</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_DIRECTORY</name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_DIRECT</name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_INDIRECT</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>GRUB_REISERFS_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>grub_reiserfs_item_type</name></name></type>

<name>grub_reiserfs_get_key_v1_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_STAT</name></expr>;</return>

<case>case <expr><literal type="number">555</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_ANY</name></expr>;</return>

<case>case <expr><literal type="number">500</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_DIRECTORY</name></expr>;</return>

<case>case <expr><literal type="number">0x20000000</literal></expr>:</case>

<case>case <expr><literal type="number">0xFFFFFFFF</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_DIRECT</name></expr>;</return>

<case>case <expr><literal type="number">0x10000000</literal></expr>:</case>

<case>case <expr><literal type="number">0xFFFFFFFE</literal></expr>:</case>

<return>return <expr><name>GRUB_REISERFS_INDIRECT</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>GRUB_REISERFS_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>grub_reiserfs_get_key_version</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>grub_reiserfs_get_key_v1_type</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GRUB_REISERFS_UNKNOWN</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_HEXDUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>grub_hexdump</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_size_t</name></type> <name>a</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"\n%08x "</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name><operator>)</operator><index>[<expr><name>a</name></expr>]</index><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_REISERFS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>grub_uint64_t</name></type>

<name>grub_reiserfs_get_key_offset</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>enum</name> <name>grub_reiserfs_item_type</name></name></type>

<name>grub_reiserfs_get_key_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>grub_reiserfs_print_key</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>reiserfs_type_strings</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"stat "</literal></expr>,

<expr><literal type="string">"directory"</literal></expr>,

<expr><literal type="string">"direct "</literal></expr>,

<expr><literal type="string">"indirect "</literal></expr>,

<expr><literal type="string">"any "</literal></expr>,

<expr><literal type="string">"unknown "</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_reiserfs_key</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name><operator>)</operator><index>[<expr><name>a</name></expr>]</index><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"parent id = 0x%08x, self id = 0x%08x, type = %s, offset = "</literal></expr></argument>,

<argument><expr><call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>directory_id</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>object_id</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>reiserfs_type_strings</name> <index>[<expr><call><name>grub_reiserfs_get_key_type</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_key_version</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>grub_reiserfs_get_key_offset</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"0x%07x%08x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><call><name>grub_reiserfs_get_key_offset</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><call><name>grub_reiserfs_get_key_offset</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>grub_uint64_t</name></type>

<name>grub_reiserfs_get_key_offset</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_key_version</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>grub_le_to_cpu64</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0ULL</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>grub_reiserfs_set_key_offset</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>grub_uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_key_version</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>grub_cpu_to_le32</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name> \

<operator>=</operator> <operator>(</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name> <operator>&amp;</operator> <call><name>grub_cpu_to_le64</name> <argument_list>(<argument><expr><literal type="number">15ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>|</operator> <call><name>grub_cpu_to_le64</name> <argument_list>(<argument><expr><name>value</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0ULL</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>grub_reiserfs_item_type</name></name></type>

<name>grub_reiserfs_get_key_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_key_version</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_reiserfs_get_key_v1_type</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>grub_reiserfs_get_key_v2_type</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>grub_reiserfs_set_key_type</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_reiserfs_item_type</name></name></type> <name>grub_type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>grub_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GRUB_REISERFS_STAT</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRUB_REISERFS_ANY</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">555</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRUB_REISERFS_DIRECTORY</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">500</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRUB_REISERFS_DIRECT</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xFFFFFFFF</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRUB_REISERFS_INDIRECT</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xFFFFFFFE</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>grub_cpu_to_le32</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name>

<operator>=</operator> <operator>(</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name> <operator>&amp;</operator> <call><name>grub_cpu_to_le64</name> <argument_list>(<argument><expr><operator>~</operator><literal type="number">0ULL</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>|</operator> <call><name>grub_cpu_to_le64</name> <argument_list>(<argument><expr><operator>(</operator><name>grub_uint64_t</name><operator>)</operator> <name>type</name> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>grub_reiserfs_get_key_type</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>grub_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>grub_reiserfs_compare_keys</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>offset1</name></decl>, <decl><type ref="prev"/><name>offset2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>grub_reiserfs_item_type</name></name></type> <name>type1</name></decl>, <decl><type ref="prev"/><name>type2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>id1</name></decl>, <decl><type ref="prev"/><name>id2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>key1</name> <operator>||</operator> <operator>!</operator> <name>key2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>id1</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key1</name><operator>-&gt;</operator><name>directory_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id2</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key2</name><operator>-&gt;</operator><name>directory_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id1</name> <operator>&lt;</operator> <name>id2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id1</name> <operator>&gt;</operator> <name>id2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>id1</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key1</name><operator>-&gt;</operator><name>object_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id2</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>key2</name><operator>-&gt;</operator><name>object_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id1</name> <operator>&lt;</operator> <name>id2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id1</name> <operator>&gt;</operator> <name>id2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <call><name>grub_reiserfs_get_key_offset</name> <argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset2</name> <operator>=</operator> <call><name>grub_reiserfs_get_key_offset</name> <argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset1</name> <operator>&lt;</operator> <name>offset2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset1</name> <operator>&gt;</operator> <name>offset2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type1</name> <operator>=</operator> <call><name>grub_reiserfs_get_key_type</name> <argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type2</name> <operator>=</operator> <call><name>grub_reiserfs_get_key_type</name> <argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type1</name> <operator>==</operator> <name>GRUB_REISERFS_ANY</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>type2</name> <operator>==</operator> <name>GRUB_REISERFS_DIRECT</name>

<operator>||</operator> <name>type2</name> <operator>==</operator> <name>GRUB_REISERFS_INDIRECT</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>type2</name> <operator>==</operator> <name>GRUB_REISERFS_ANY</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>type1</name> <operator>==</operator> <name>GRUB_REISERFS_DIRECT</name>

<operator>||</operator> <name>type1</name> <operator>==</operator> <name>GRUB_REISERFS_INDIRECT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type1</name> <operator>&lt;</operator> <name>type2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type1</name> <operator>&gt;</operator> <name>type2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_reiserfs_get_item</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>block_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_block_header</name></name> <modifier>*</modifier></type><name>block_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>block_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>block_size</name></decl>, <decl><type ref="prev"/><name>item_count</name></decl>, <decl><type ref="prev"/><name>current_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>previous_level</name> <init>= <expr><operator>~</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_item_header</name></name> <modifier>*</modifier></type><name>item_headers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_TEST_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"data is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>key</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_TEST_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"key is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>item</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_TEST_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"item is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_number</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>root_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_REISERFS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"Searching for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_print_key</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>block_header</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>block_header</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>block_number</name> <operator>*</operator> <operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>grub_off_t</name><operator>)</operator> <name>block_number</name> <operator>*</operator> <name>block_size</name><operator>)</operator>

<operator>&amp;</operator> <operator>(</operator><name>GRUB_DISK_SECTOR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>block_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_level</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>block_header</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs_tree"</literal></expr></argument>, <argument><expr><literal type="string">" at level %d\n"</literal></expr></argument>, <argument><expr><name>current_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_level</name> <operator>&gt;=</operator> <name>previous_level</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs_tree"</literal></expr></argument>, <argument><expr><literal type="string">"level loop detected, aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_FILE_READ_ERROR</name></expr></argument>, <argument><expr><literal type="string">"level loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>previous_level</name> <operator>=</operator> <name>current_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>item_count</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>block_header</name><operator>-&gt;</operator><name>item_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs_tree"</literal></expr></argument>, <argument><expr><literal type="string">" number of contained items : %d\n"</literal></expr></argument>,

<argument><expr><name>item_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_level</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name> <modifier>*</modifier></type><name>keys</name>

<init>= <expr><operator>(</operator>struct <name>grub_reiserfs_key</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>block_header</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_disk_child</name></name> <modifier>*</modifier></type><name>children</name>

<init>= <expr><operator>(</operator><operator>(</operator>struct <name>grub_reiserfs_disk_child</name> <operator>*</operator><operator>)</operator>

<operator>(</operator><name>keys</name> <operator>+</operator> <name>item_count</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name>item_count</name>

<operator>&amp;&amp;</operator> <call><name>grub_reiserfs_compare_keys</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_REISERFS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"i %03d/%03d "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>item_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_print_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><name>block_number</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>item_count</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>directory_id</name></name> <operator>==</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>directory_id</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>object_id</name></name> <operator>==</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>object_id</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next_offset</name></name> <operator>=</operator> <call><name>grub_reiserfs_get_key_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_REISERFS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>item_count</name>

<operator>||</operator> <call><name>grub_reiserfs_compare_keys</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>item_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">" %03d/%03d "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>item_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_print_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>item_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"+ %03d/%03d "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>item_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_print_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>keys</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"Accessing rightmost child at block %d.\n"</literal></expr></argument>,

<argument><expr><name>block_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>item_headers</name>

<operator>=</operator> <operator>(</operator>struct <name>grub_reiserfs_item_header</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>block_header</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name>item_count</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>grub_reiserfs_compare_keys</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr></argument>)</argument_list></call>

<operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_REISERFS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>directory_id</name></name> <operator>==</operator> <name><name>item_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><operator>.</operator><name>directory_id</name></name> <operator>&amp;&amp;</operator> \

<name><name>key</name><operator>-&gt;</operator><name>object_id</name></name> <operator>==</operator> <name><name>item_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><operator>.</operator><name>object_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">" %03d/%03d "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>item_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_print_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>item_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_key</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>item_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

while <condition>(<expr><name>current_level</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>item_count</name> <operator>||</operator> <call><name>grub_reiserfs_compare_keys</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>block_key</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>block_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>block_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>GRUB_REISERFS_UNKNOWN</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_REISERFS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>grub_printf</name><argument_list>(<argument><expr><literal type="string">"Not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>block_number</name></name> <operator>=</operator> <name>block_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>block_position</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>grub_reiserfs_get_key_type</name> <argument_list>(<argument><expr><name>block_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item_headers</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_reiserfs_item_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_REISERFS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>grub_printf</name> <argument_list>(<argument><expr><literal type="string">"F %03d/%03d "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>item_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_print_key</name> <argument_list>(<argument><expr><name>block_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>grub_errno</name> <operator>==</operator> <name>GRUB_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>block_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>grub_errno</name> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>block_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>grub_errno</name> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>grub_reiserfs_read_symlink</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symlink_buffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_off_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name></type> <name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>key</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>GRUB_REISERFS_DIRECT</name></expr></argument>,

<argument><expr><call><name>grub_reiserfs_get_key_version</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>found</name><operator>.</operator><name>block_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>header</name><operator>.</operator><name>item_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>(</operator><name>grub_disk_addr_t</name><operator>)</operator><name><name>found</name><operator>.</operator><name>block_number</name></name> \

<operator>*</operator> <operator>(</operator><operator>(</operator><name>grub_disk_addr_t</name><operator>)</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>header</name><operator>.</operator><name>item_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symlink_buffer</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>symlink_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>symlink_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>symlink_buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>symlink_buffer</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>symlink_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type>

<name>grub_reiserfs_mount</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>REISERFS_SUPER_BLOCK_OFFSET</name> <operator>/</operator> <name>GRUB_DISK_SECTOR_SIZE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>superblock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_memcmp</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>magic_string</name></name></expr></argument>,

<argument><expr><name>REISERFS_MAGIC_STRING</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>REISERFS_MAGIC_STRING</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"not a ReiserFS filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name> <operator>=</operator> <name>disk</name></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name> <operator>==</operator> <name>GRUB_ERR_OUT_OF_RANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"not a ReiserFS filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>grub_reiserfs_iterate_dir</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>item</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_block_header</name></name> <modifier>*</modifier></type><name>block_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>block_size</name></decl>, <decl><type ref="prev"/><name>block_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>block_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>next_offset</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>next_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GRUB_REISERFS_DIRECTORY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FILE_TYPE</name></expr></argument>,

<argument><expr><literal type="string">"grub_reiserfs_iterate_dir called on a non-directory item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_header</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>block_header</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block_number</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>block_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_position</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>block_position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>, <argument><expr><literal type="string">"Iterating directory...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hook</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_directory_header</name></name> <modifier>*</modifier></type><name>directory_headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name></type> <name>directory_item</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>entry_count</name></decl>, <decl><type ref="prev"/><name>entry_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_item_header</name></name> <modifier>*</modifier></type><name>item_headers</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>block_number</name> <operator>*</operator> <operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>grub_off_t</name><operator>)</operator> <name>block_number</name> <operator>*</operator> <name>block_size</name><operator>)</operator>

<operator>&amp;</operator> <operator>(</operator><name>GRUB_DISK_SECTOR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><name>block_size</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>block_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (grub_le_to_cpu16 (block_header-&gt;level) != 1)

{

grub_error (GRUB_ERR_TEST_FAILURE,

"reiserfs: block %d is not a leaf block",

block_number);

goto fail;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>item_headers</name> <operator>=</operator> <operator>(</operator>struct <name>grub_reiserfs_item_header</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>block_header</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>directory_headers</name>

<operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>grub_reiserfs_directory_header</name> <operator>*</operator><operator>)</operator>

<operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>block_header</name>

<operator>+</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>item_headers</name><index>[<expr><name>block_position</name></expr>]</index></name><operator>.</operator><name>item_location</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_count</name>

<operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>item_headers</name><index>[<expr><name>block_position</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>entry_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>entry_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>entry_number</name> <operator>&lt;</operator> <name>entry_count</name></expr>;</condition> <incr><expr><name>entry_number</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_directory_header</name></name> <modifier>*</modifier></type><name>directory_header</name>

<init>= <expr><operator>&amp;</operator><name><name>directory_headers</name><index>[<expr><name>entry_number</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>entry_state</name>

<init>= <expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>directory_header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_state</name> <operator>&amp;</operator> <name>GRUB_REISERFS_VISIBLE_MASK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_fshelp_node_t</name></type> <name>entry_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name></type> <name>entry_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>entry_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry_name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>directory_headers</name><operator>)</operator>

<operator>+</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>directory_header</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry_key</name><operator>.</operator><name>directory_id</name></name> <operator>=</operator> <name><name>directory_header</name><operator>-&gt;</operator><name>directory_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry_key</name><operator>.</operator><name>object_id</name></name> <operator>=</operator> <name><name>directory_header</name><operator>-&gt;</operator><name>object_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry_key</name><operator>.</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>entry_key</name></expr></argument>, <argument><expr><name>GRUB_REISERFS_DIRECTORY</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>entry_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_item</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>entry_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>entry_item</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry_key</name></expr></argument>, <argument><expr><name>entry_item</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>entry_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry_item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GRUB_REISERFS_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>entry_type</name> <operator>=</operator> <name>GRUB_FSHELP_DIR</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>entry_block_number</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>entry_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>entry_key</name></expr></argument>, <argument><expr><name>GRUB_REISERFS_STAT</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry_key</name></expr></argument>, <argument><expr><name>entry_item</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>entry_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry_item</name><operator>-&gt;</operator><name>block_number</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>entry_version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry_version</name>

<operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>entry_item</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_block_number</name> <operator>=</operator> <name><name>entry_item</name><operator>-&gt;</operator><name>block_number</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

grub_dprintf ("reiserfs",

"version %04x block %08x (%08x) position %08x\n",

entry_version, entry_block_number,

((grub_disk_addr_t) entry_block_number * block_size) / GRUB_DISK_SECTOR_SIZE,

grub_le_to_cpu16 (entry_item-&gt;header.item_location));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>entry_version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_stat_item_v1</name></name></type> <name>entry_v1_stat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>entry_block_number</name> <operator>*</operator> <operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>entry_item</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>item_location</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>entry_v1_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>entry_v1_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

grub_dprintf ("reiserfs",

"%04x %04x %04x %04x %08x %08x | %08x %08x %08x %08x\n",

grub_le_to_cpu16 (entry_v1_stat.mode),

grub_le_to_cpu16 (entry_v1_stat.hardlink_count),

grub_le_to_cpu16 (entry_v1_stat.uid),

grub_le_to_cpu16 (entry_v1_stat.gid),

grub_le_to_cpu32 (entry_v1_stat.size),

grub_le_to_cpu32 (entry_v1_stat.atime),

grub_le_to_cpu32 (entry_v1_stat.mtime),

grub_le_to_cpu32 (entry_v1_stat.ctime),

grub_le_to_cpu32 (entry_v1_stat.rdev),

grub_le_to_cpu32 (entry_v1_stat.first_direct_byte));

grub_dprintf ("reiserfs",

"%04x %04x %04x %04x %08x %08x | %08x %08x %08x %08x\n",

entry_v1_stat.mode,

entry_v1_stat.hardlink_count,

entry_v1_stat.uid,

entry_v1_stat.gid,

entry_v1_stat.size,

entry_v1_stat.atime,

entry_v1_stat.mtime,

entry_v1_stat.ctime,

entry_v1_stat.rdev,

entry_v1_stat.first_direct_byte);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>entry_v1_stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>S_IFLNK</name><operator>)</operator>

<operator>==</operator> <name>S_IFLNK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>entry_type</name> <operator>=</operator> <name>GRUB_FSHELP_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>entry_type</name> <operator>=</operator> <name>GRUB_FSHELP_REG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_stat_item_v2</name></name></type> <name>entry_v2_stat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>entry_block_number</name> <operator>*</operator> <operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>entry_item</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>item_location</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>entry_v2_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>entry_v2_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

grub_dprintf ("reiserfs",

"%04x %04x %08x %08x%08x | %08x %08x %08x %08x | %08x %08x %08x\n",

grub_le_to_cpu16 (entry_v2_stat.mode),

grub_le_to_cpu16 (entry_v2_stat.reserved),

grub_le_to_cpu32 (entry_v2_stat.hardlink_count),

(unsigned int) (grub_le_to_cpu64 (entry_v2_stat.size) &gt;&gt; 32),

(unsigned int) (grub_le_to_cpu64 (entry_v2_stat.size) &amp;&amp; 0xFFFFFFFF),

grub_le_to_cpu32 (entry_v2_stat.uid),

grub_le_to_cpu32 (entry_v2_stat.gid),

grub_le_to_cpu32 (entry_v2_stat.atime),

grub_le_to_cpu32 (entry_v2_stat.mtime),

grub_le_to_cpu32 (entry_v2_stat.ctime),

grub_le_to_cpu32 (entry_v2_stat.blocks),

grub_le_to_cpu32 (entry_v2_stat.first_direct_byte));

grub_dprintf ("reiserfs",

"%04x %04x %08x %08x%08x | %08x %08x %08x %08x | %08x %08x %08x\n",

entry_v2_stat.mode,

entry_v2_stat.reserved,

entry_v2_stat.hardlink_count,

(unsigned int) (entry_v2_stat.size &gt;&gt; 32),

(unsigned int) (entry_v2_stat.size &amp;&amp; 0xFFFFFFFF),

entry_v2_stat.uid,

entry_v2_stat.gid,

entry_v2_stat.atime,

entry_v2_stat.mtime,

entry_v2_stat.ctime,

entry_v2_stat.blocks,

entry_v2_stat.first_direct_byte);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>entry_v2_stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>S_IFLNK</name><operator>)</operator>

<operator>==</operator> <name>S_IFLNK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>entry_type</name> <operator>=</operator> <name>GRUB_FSHELP_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>entry_type</name> <operator>=</operator> <name>GRUB_FSHELP_REG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_strcmp</name> <argument_list>(<argument><expr><name>entry_name</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>,

<argument><expr><literal type="string">"Warning : %s has no stat block !\n"</literal></expr></argument>,

<argument><expr><name>entry_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>entry_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hook</name> <argument_list>(<argument><expr><name>entry_name</name></expr></argument>, <argument><expr><name>entry_type</name></expr></argument>, <argument><expr><name>entry_item</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>, <argument><expr><literal type="string">"Found : %s, type=%d\n"</literal></expr></argument>,

<argument><expr><name>entry_name</name></expr></argument>, <argument><expr><name>entry_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>entry_name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>next_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item_headers</name><index>[<expr><name>block_position</name></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr></argument>,

<argument><expr><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item_headers</name><index>[<expr><name>block_position</name></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name>directory_item</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block_number</name> <operator>=</operator> <name><name>directory_item</name><operator>.</operator><name>block_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_position</name> <operator>=</operator> <name><name>directory_item</name><operator>.</operator><name>block_position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_offset</name> <operator>=</operator> <name><name>directory_item</name><operator>.</operator><name>next_offset</name></name></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>block_number</name></expr>)</condition>;</do>

<label><name>found</name>:</label>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>grub_errno</name> <operator>==</operator> <name>GRUB_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>block_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>grub_errno</name> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>block_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_reiserfs_open</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name></type> <name>root</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>block_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>entry_version</name></decl>, <decl><type ref="prev"/><name>block_size</name></decl>, <decl><type ref="prev"/><name>entry_location</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_reiserfs_mount</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>directory_id</name></name> <operator>=</operator> <call><name>grub_cpu_to_le32</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>object_id</name></name> <operator>=</operator> <call><name>grub_cpu_to_le32</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>GRUB_REISERFS_DIRECTORY</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>block_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"unable to find root item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_fshelp_find_file</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>,

<argument><expr><name>grub_reiserfs_iterate_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>grub_reiserfs_read_symlink</name></expr></argument>, <argument><expr><name>GRUB_FSHELP_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>directory_id</name></name> <operator>=</operator> <name><name>found</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>key</name><operator>.</operator><name>directory_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>object_id</name></name> <operator>=</operator> <name><name>found</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>key</name><operator>.</operator><name>object_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>GRUB_REISERFS_STAT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>block_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"unable to find searched item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry_version</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>header</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_location</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>header</name><operator>.</operator><name>item_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_number</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>block_number</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_stat_item_v1</name></name></type> <name>entry_v1_stat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>block_number</name> <operator>*</operator> <operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><name>entry_location</name>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>grub_off_t</name><operator>)</operator> <name>block_number</name> <operator>*</operator> <name>block_size</name><operator>)</operator>

<operator>&amp;</operator> <operator>(</operator><name>GRUB_DISK_SECTOR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>entry_v1_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry_v1_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>grub_off_t</name><operator>)</operator> <call><name>grub_le_to_cpu64</name> <argument_list>(<argument><expr><name><name>entry_v1_stat</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_stat_item_v2</name></name></type> <name>entry_v2_stat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>block_number</name> <operator>*</operator> <operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><name>entry_location</name>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>grub_off_t</name><operator>)</operator> <name>block_number</name> <operator>*</operator> <name>block_size</name><operator>)</operator>

<operator>&amp;</operator> <operator>(</operator><name>GRUB_DISK_SECTOR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>entry_v2_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry_v2_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>grub_off_t</name><operator>)</operator> <call><name>grub_le_to_cpu64</name> <argument_list>(<argument><expr><name><name>entry_v2_stat</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>, <argument><expr><literal type="string">"file size : %d (%08x%08x)\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>found</name></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>grub_errno</name> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_ssize_t</name></type>

<name>grub_reiserfs_read</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>indirect_block</name></decl>, <decl><type ref="prev"/><name>indirect_block_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name></type> <name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>block_size</name> <init>= <expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>item_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name> <modifier>*</modifier></type><name>indirect_block_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>current_key_offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_off_t</name></type> <name>initial_position</name></decl>, <decl><type ref="prev"/><name>current_position</name></decl>, <decl><type ref="prev"/><name>final_position</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_off_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>directory_id</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>key</name><operator>.</operator><name>directory_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>object_id</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>key</name><operator>.</operator><name>object_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>GRUB_REISERFS_ANY</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initial_position</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>final_position</name> <operator>=</operator> <call><name>MIN</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>initial_position</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>,

<argument><expr><literal type="string">"Reading from %lld to %lld (%lld instead of requested %ld)\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>initial_position</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>final_position</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>(</operator><name>final_position</name> <operator>-</operator> <name>initial_position</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>current_position</name> <operator>&lt;</operator> <name>final_position</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>current_key_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>found</name><operator>.</operator><name>block_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item_size</name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>header</name><operator>.</operator><name>item_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>found</name><operator>.</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GRUB_REISERFS_DIRECT</name></expr>:</case>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>(</operator><name>grub_disk_addr_t</name><operator>)</operator><name><name>found</name><operator>.</operator><name>block_number</name></name> \

<operator>*</operator> <operator>(</operator><operator>(</operator><name>grub_disk_addr_t</name><operator>)</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs_blocktype"</literal></expr></argument>, <argument><expr><literal type="string">"D: %u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initial_position</name> <operator>&lt;</operator> <name>current_position</name> <operator>+</operator> <name>item_size</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><operator>(</operator><name>signed</name><operator>)</operator> <operator>(</operator><name>initial_position</name> <operator>-</operator> <name>current_position</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><call><name>MIN</name> <argument_list>(<argument><expr><name>item_size</name></expr></argument>, <argument><expr><name>final_position</name> <operator>-</operator> <name>current_position</name></expr></argument>)</argument_list></call>

<operator>-</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>,

<argument><expr><literal type="string">"Reading direct block %u from %u to %u...\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>block</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name>length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>read_hook</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>closure</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>closure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>block</name></expr></argument>,

<argument><expr><name>offset</name>

<operator>+</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>header</name><operator>.</operator><name>item_location</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>length</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_position</name> <operator>+=</operator> <name>offset</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>current_position</name> <operator>+=</operator> <name>item_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>GRUB_REISERFS_INDIRECT</name></expr>:</case>

<expr_stmt><expr><name>indirect_block_count</name> <operator>=</operator> <name>item_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>indirect_block_ptr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>indirect_block_ptr</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>item_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>indirect_block_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name><name>found</name><operator>.</operator><name>block_number</name></name> <operator>*</operator> <operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr></argument>,

<argument><expr><call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>header</name><operator>.</operator><name>item_location</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>item_size</name></expr></argument>, <argument><expr><name>indirect_block_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>read_hook</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>indirect_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>indirect_block</name> <operator>&lt;</operator> <name>indirect_block_count</name>

<operator>&amp;&amp;</operator> <name>current_position</name> <operator>&lt;</operator> <name>final_position</name></expr>;</condition>

<incr><expr><name>indirect_block</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>grub_le_to_cpu32</name> <argument_list>(<argument><expr><name><name>indirect_block_ptr</name><index>[<expr><name>indirect_block</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator>

<operator>(</operator><name>block_size</name> <operator>&gt;&gt;</operator> <name>GRUB_DISK_SECTOR_BITS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs_blocktype"</literal></expr></argument>, <argument><expr><literal type="string">"I: %u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_position</name> <operator>+</operator> <name>block_size</name> <operator>&gt;=</operator> <name>initial_position</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><operator>(</operator><name>signed</name><operator>)</operator> <operator>(</operator><name>initial_position</name> <operator>-</operator> <name>current_position</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><call><name>MIN</name> <argument_list>(<argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>final_position</name> <operator>-</operator> <name>current_position</name></expr></argument>)</argument_list></call>

<operator>-</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>,

<argument><expr><literal type="string">"Reading indirect block %u from %u to %u...\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>block</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>offset</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name>length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

grub_dprintf ("reiserfs",

"\nib=%04d/%04d, ip=%d, cp=%d, fp=%d, off=%d, l=%d, tl=%d\n",

indirect_block + 1, indirect_block_count,

initial_position, current_position,

final_position, offset, length, len);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_position</name> <operator>+=</operator> <name>offset</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>current_position</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>found</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>indirect_block_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indirect_block_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>current_key_offset</name> <operator>=</operator> <name>current_position</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>grub_dprintf</name> <argument_list>(<argument><expr><literal type="string">"reiserfs"</literal></expr></argument>,

<argument><expr><literal type="string">"Have successfully read %lld bytes (%ld requested)\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>(</operator><name>current_position</name> <operator>-</operator> <name>initial_position</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>current_position</name> <operator>-</operator> <name>initial_position</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

switch (found.type)

{

case GRUB_REISERFS_DIRECT:

read_length = MIN (len, item_size - file-&gt;offset);

grub_disk_read (found.data-&gt;disk,

(found.block_number * block_size) / GRUB_DISK_SECTOR_SIZE,

grub_le_to_cpu16 (found.header.item_location) + file-&gt;offset,

read_length, buf);

if (grub_errno)

goto fail;

break;

case GRUB_REISERFS_INDIRECT:

indirect_block_count = item_size / sizeof (*indirect_block_ptr);

indirect_block_ptr = grub_malloc (item_size);

if (!indirect_block_ptr)

goto fail;

grub_disk_read (found.data-&gt;disk,

(found.block_number * block_size) / GRUB_DISK_SECTOR_SIZE,

grub_le_to_cpu16 (found.header.item_location),

item_size, (char *) indirect_block_ptr);

if (grub_errno)

goto fail;

len = MIN (len, file-&gt;size - file-&gt;offset);

for (indirect_block = file-&gt;offset / block_size;

indirect_block &lt; indirect_block_count &amp;&amp; read_length &lt; len;

indirect_block++)

{

read = MIN (block_size, len - read_length);

grub_disk_read (found.data-&gt;disk,

(grub_le_to_cpu32 (indirect_block_ptr[indirect_block]) * block_size) / GRUB_DISK_SECTOR_SIZE,

file-&gt;offset % block_size, read,

((void *) buf) + read_length);

if (grub_errno)

goto fail;

read_length += read;

}

grub_free (indirect_block_ptr);

break;

default:

goto fail;

}

return read_length;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>indirect_block_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_reiserfs_close</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>grub_reiserfs_dir_closure</name>

<block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>iterate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_dir_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_dirhook_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>filetype</name> <operator>&amp;</operator> <name>GRUB_FSHELP_TYPE_MASK</name><operator>)</operator> <operator>==</operator> <name>GRUB_FSHELP_DIR</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>c</name><operator>-&gt;</operator><name>hook</name></name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_reiserfs_dir</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name></type> <name>root</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_key</name></name></type> <name>root_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_dir_closure</name></name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_reiserfs_mount</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>root_key</name><operator>.</operator><name>directory_id</name></name> <operator>=</operator> <call><name>grub_cpu_to_le32</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root_key</name><operator>.</operator><name>object_id</name></name> <operator>=</operator> <call><name>grub_cpu_to_le32</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root_key</name><operator>.</operator><name>u</name><operator>.</operator><name>v2</name><operator>.</operator><name>offset_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>root_key</name></expr></argument>, <argument><expr><name>GRUB_REISERFS_DIRECTORY</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_set_key_offset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>root_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_reiserfs_get_item</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>block_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name><argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"root not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_fshelp_find_file</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>, <argument><expr><name>grub_reiserfs_iterate_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>grub_reiserfs_read_symlink</name></expr></argument>, <argument><expr><name>GRUB_FSHELP_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>hook</name></name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_reiserfs_iterate_dir</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>iterate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_reiserfs_label</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>REISERFS_MAX_LABEL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>label</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>,

<argument><expr><name>REISERFS_SUPER_BLOCK_OFFSET</name> <operator>/</operator> <name>GRUB_DISK_SECTOR_SIZE</name></expr></argument>,

<argument><expr><name>REISERFS_LABEL_OFFSET</name></expr></argument>, <argument><expr><name>REISERFS_MAX_LABEL_LENGTH</name></expr></argument>,

<argument><expr><operator>*</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_reiserfs_uuid</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_reiserfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_reiserfs_mount</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <call><name>grub_xasprintf</name> <argument_list>(<argument><expr><literal type="string">"%04x%04x-%04x-%04x-%04x-%04x%04x%04x"</literal></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>grub_be_to_cpu16</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>superblock</name><operator>.</operator><name>uuid</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fs</name></name></type> <name>grub_reiserfs_fs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"reiserfs"</literal></expr>,

<expr><operator>.</operator><name>dir</name> <operator>=</operator> <name>grub_reiserfs_dir</name></expr>,

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>grub_reiserfs_open</name></expr>,

<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>grub_reiserfs_read</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>grub_reiserfs_close</name></expr>,

<expr><operator>.</operator><name>label</name> <operator>=</operator> <name>grub_reiserfs_label</name></expr>,

<expr><operator>.</operator><name>uuid</name> <operator>=</operator> <name>grub_reiserfs_uuid</name></expr>,

<expr><operator>.</operator><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
