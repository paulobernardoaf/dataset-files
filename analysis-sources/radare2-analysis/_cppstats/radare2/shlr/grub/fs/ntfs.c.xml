<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\fs\ntfs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/disk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/fshelp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/ntfs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/partition.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_ntfscomp_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_ntfs_read_run_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>grub_dl_t</name></type> <name>my_mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ntfscomp_func_t</name></type> <name>grub_ntfscomp_func</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>fixup</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>magic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>us</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"%s label not found"</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ss</name> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>!=</operator> <name>len</name> <operator>*</operator> <name>GRUB_DISK_SECTOR_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"size not match"</literal></expr></argument>,

<argument><expr><name>ss</name> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>,

<argument><expr><name>len</name> <operator>*</operator> <name>GRUB_DISK_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pu</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ss</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pu</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u16at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>us</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"fixup signature not match"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>v16at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>v16at</name> <argument_list>(<argument><expr><name>pu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ss</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>grub_err_t</name></type> <name>read_mft</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>grub_uint32_t</name></type> <name>mftno</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name> <modifier>*</modifier></type><name>sector</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>grub_err_t</name></type> <name>read_attr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>grub_err_t</name></type> <name>read_data</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_attr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>mft</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name></name> <operator>=</operator> <name>mft</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mft</name> <operator>==</operator> <operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mmft</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>AF_MMFT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>=</operator> <name><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>edat_buf</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_attr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>edat_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>find_attr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_ALST</name></expr>)</condition>

<block>{<block_content>

<label><name>retry</name>:</label>

<while>while <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>&lt;</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>==</operator> <name>attr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>attr</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_MMFT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>grub_disk_read</name>

<argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>, <argument><expr><call><name>v32at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator>

<operator>(</operator><call><name>grub_disk_read</name>

<argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>, <argument><expr><call><name>v32at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fixup</name>

<argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_size</name></name></expr></argument>,

<argument><expr><literal type="string">"FILE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_mft</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name></expr></argument>,

<argument><expr><call><name>u32at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name><index>[<expr><call><name>u16at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>new_pos</name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>new_pos</name> <operator>==</operator>

<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>u16at</name> <argument_list>(<argument><expr><name>new_pos</name></expr></argument>, <argument><expr><literal type="number">0xE</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>new_pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_pos</name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>new_pos</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>,

<argument><expr><literal type="string">"can\'t find 0x%X in attribute list"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>==</operator> <name>AT_ATTRIBUTE_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>==</operator> <name>attr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>attr</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>emft_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pa</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>GRUB_DISK_SECTOR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>GRUB_DISK_SECTOR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>edat_buf</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>edat_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_data</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>edat_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>,

<argument><expr><literal type="string">"fail to read non-resident attribute list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>edat_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>edat_buf</name></name> <operator>+</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name> <operator>+</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AF_ALST</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>&lt;</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>==</operator> <name>attr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>attr</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>&gt;=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_MMFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>==</operator> <name>AT_DATA</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AF_GPOS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pa</name> <operator>&lt;</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>pa</name> <operator>!=</operator> <name>attr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_attr</name>

<argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>pa</name> <operator>+</operator> <literal type="number">0x10</literal></expr></argument>,

<argument><expr><call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr></argument>,

<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pa</name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AF_GPOS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>locate_attr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>mft</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pa</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_ALST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pa</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_ALST</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pa</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>grub_errno</name> <operator>=</operator> <name>GRUB_ERR_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pa</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>read_run_data</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nn</name></decl></parameter>, <parameter><decl><type><name>grub_disk_addr_t</name> <modifier>*</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nn</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>v</name> <operator>*</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>run</name><operator>++</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sig</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>-=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<return>return <expr><name>run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>grub_err_t</name></type>

<name>grub_ntfs_read_run_list</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_rlst</name></name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>run</name></decl>;</decl_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_run</name></name></expr>;</expr_stmt>

<label><name>retry</name>:</label>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>run</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>run</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>attr</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>attr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_ALST</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>save_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>save_hook</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>attr</name><operator>-&gt;</operator><name>attr_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>disk</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <name>save_hook</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>run</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>,

<argument><expr><literal type="string">"$DATA should be non-resident"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>run</name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"run list overflown"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>read_run_data</name> <argument_list>(<argument><expr><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curr_vcn</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>read_run_data</name> <argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RF_BLNK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RF_BLNK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_run</name></name> <operator>=</operator> <name>run</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_disk_addr_t</name></type>

<name>grub_ntfs_read_block</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>grub_disk_addr_t</name></type> <name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_rlst</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator>struct <name>grub_ntfs_rlst</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_ntfs_read_run_list</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RF_BLNK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>block</name> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>curr_vcn</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name><operator>)</operator></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>read_data</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>vcn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_rlst</name></name></type> <name>cc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>&amp;</operator><name>cc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>spc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>disk</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>disk</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pa</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"read out of range"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pa</name> <operator>+=</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>ofs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>read_hook</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pa</name> <operator>&gt;=</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pa</name> <operator>&lt;</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>read_hook</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name>pa</name> <operator>-</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>pa</name> <operator>&gt;=</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pa</name> <operator>&lt;</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>read_hook</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>sector</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pa</name> <operator>-</operator> <name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <literal type="number">512</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u16at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0xC</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FLAG_COMPRESSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RF_COMP</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RF_COMP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_run</name></name> <operator>=</operator> <name>pa</name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RF_COMP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cached</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"attribute can\'t be compressed"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"can\'t get blocklist"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ofs</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>COM_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <name><name>at</name><operator>-&gt;</operator><name>save_pos</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>COM_LEN</name> <operator>-</operator> <operator>(</operator><name>ofs</name> <operator>-</operator> <name><name>at</name><operator>-&gt;</operator><name>save_pos</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name> <operator>+</operator> <name>ofs</name> <operator>-</operator> <name><name>at</name><operator>-&gt;</operator><name>save_pos</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>COM_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>sbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>save_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vcn</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>=</operator> <operator>(</operator><name>ofs</name> <operator>&gt;&gt;</operator> <name>COM_LOG_LEN</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>COM_SEC</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0xF</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>vcn</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>=</operator> <call><name>grub_divmod64</name> <argument_list>(<argument><expr><name>ofs</name> <operator>&gt;&gt;</operator> <name>BLK_SHR</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name> <operator>=</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_ntfs_read_run_list</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_GPOS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>st0</name></decl>, <decl><type ref="prev"/><name>st1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_divmod64</name> <argument_list>(<argument><expr><name>ofs</name> <operator>&gt;&gt;</operator> <name>BLK_SHR</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st0</name> <operator>=</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>target_vcn</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_vcn</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name>st1</name> <operator>=</operator> <name>st0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st1</name> <operator>==</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_vcn</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_vcn</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_ntfs_read_run_list</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st1</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>curr_lcn</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>v32at</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>st0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v32at</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>st1</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RF_COMP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pow</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>grub_fshelp_log2blksize</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>spc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pow</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_fshelp_read_file</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comp</name><operator>.</operator><name>disk</name></name></expr></argument>, <argument><expr><operator>(</operator><name>grub_fshelp_node_t</name><operator>)</operator> <name>ctx</name></expr></argument>,

<argument><expr><name>read_hook</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,

<argument><expr><name>grub_ntfs_read_block</name></expr></argument>, <argument><expr><name>ofs</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>pow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>grub_ntfscomp_func</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>grub_ntfscomp_func</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name>vcn</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"ntfscomp module not loaded"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>read_attr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>grub_disk_addr_t</name></type> <name>ofs</name></decl></parameter>,

<parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>read_hook</name>) <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>save_cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_err_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_cur</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_ALST</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>vcn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vcn</name> <operator>=</operator> <call><name>grub_divmod64</name> <argument_list>(<argument><expr><name>ofs</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>spc</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pa</name> <operator>&lt;</operator> <name><name>at</name><operator>-&gt;</operator><name>attr_end</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>pa</name> <operator>!=</operator> <name>attr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>vcn</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_nxt</name></name> <operator>=</operator> <name>pa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_data</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><name>read_hook</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name>grub_errno</name><operator>)</operator></expr> ?</condition><then> <expr><name>grub_errno</name></expr> </then><else>: <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>,

<argument><expr><literal type="string">"attribute not found"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name>save_cur</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>read_mft_hook</name> <parameter_list>(<parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>length</name> <operator>!=</operator> <name>GRUB_DISK_SECTOR_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"invalid mft location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>s</name> <operator>=</operator> <name>sector</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>read_mft</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>mftno</name></decl></parameter>,

<parameter><decl><type><name>grub_uint32_t</name> <modifier>*</modifier></type><name>sector</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_attr</name>

<argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>attr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mftno</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>grub_disk_addr_t</name><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read_mft_hook</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"Read MFT 0x%X fails"</literal></expr></argument>, <argument><expr><name>mftno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>fixup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name></expr></argument>, <argument><expr><literal type="string">"FILE"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>init_file</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>mft</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>mftno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flag</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mft</name><operator>-&gt;</operator><name>inode_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_mft</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>mftno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"MFT 0x%X is not in use"</literal></expr></argument>, <argument><expr><name>mftno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <call><name>locate_attr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>mft</name></expr></argument>, <argument><expr><name>AT_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pa</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"no $DATA in MFT 0x%X"</literal></expr></argument>, <argument><expr><name>mftno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pa</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mft</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mft</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>u64at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mft</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AF_ALST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mft</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>attr_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_attr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_file</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>mft</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_attr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>list_file</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>diro</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hook</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ustr</name></decl>, <decl><type ref="prev"/><name>namespace</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><index>[<expr><literal type="number">0xC</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">0x50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><name>np</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>namespace</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>np</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ns</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>namespace</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>fdiro</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u16at</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"64-bit MFT number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ATTR_DIRECTORY</name><operator>)</operator></expr> ?</condition><then> <expr><name>GRUB_FSHELP_DIR</name></expr> </then><else>:

<expr><name>GRUB_FSHELP_REG</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>fdiro</name> <operator>=</operator> <call><name>grub_zalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_ntfs_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fdiro</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fdiro</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>diro</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdiro</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ustr</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>ns</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ustr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name><argument_list>(<argument><expr><name>fdiro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>grub_utf16_to_utf8</name> <argument_list>(<argument><expr><operator>(</operator><name>grub_uint8_t</name> <operator>*</operator><operator>)</operator> <name>ustr</name></expr></argument>, <argument><expr><operator>(</operator><name>grub_uint16_t</name> <operator>*</operator><operator>)</operator> <name>np</name></expr></argument>,

<argument><expr><name>ns</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>namespace</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>GRUB_FSHELP_CASE_INSENSITIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hook</name> <argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fdiro</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>grub_ntfs_iterate_dir</name> <parameter_list>(<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>dir</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name></type> <name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>indx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_size_t</name></type> <name>bitmap_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>mft</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mft</name> <operator>=</operator> <operator>(</operator>struct <name>grub_ntfs_file</name> <operator>*</operator><operator>)</operator> <name>dir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mft</name><operator>-&gt;</operator><name>inode_read</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>init_file</name> <argument_list>(<argument><expr><name>mft</name></expr></argument>, <argument><expr><name><name>mft</name><operator>-&gt;</operator><name>ino</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <operator>&amp;</operator><name>attr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur_pos</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>AT_INDEX_ROOT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"no $INDEX_ROOT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x180400</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x490024</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x1C</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x300033</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_pos</name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur_pos</name> <operator>!=</operator> <literal type="number">0x30</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<expr_stmt><expr><name>cur_pos</name> <operator>+=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>list_file</name> <argument_list>(<argument><expr><name>mft</name></expr></argument>, <argument><expr><name>cur_pos</name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hook</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur_pos</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>AT_BITMAP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ofs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>cur_pos</name><index>[<expr><literal type="number">0xA</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cur_pos</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x490024</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>ofs</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x300033</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_resident</name> <init>= <expr><operator>(</operator><name><name>cur_pos</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap_len</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>is_resident</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_resident</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>cur_pos</name> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><name>bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_data</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bitmap_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>,

<argument><expr><literal type="string">"fails to read non-resident $BITMAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmap_len</name> <operator>=</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>bmp</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <call><name>locate_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>mft</name></expr></argument>, <argument><expr><name>AT_INDEX_ALLOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cur_pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x400401</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x490024</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x300033</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>AT_INDEX_ALLOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>cur_pos</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bitmap</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"$BITMAP without $INDEX_ALLOCATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>idx_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>grub_disk_addr_t</name><operator>)</operator><name>bitmap_len</name> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bitmap</name> <operator>&amp;</operator> <name>v</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>read_attr</name>

<argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <operator>(</operator><name><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>idx_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>idx_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>fixup</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>indx</name></expr></argument>, <argument><expr><name><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>idx_size</name></name></expr></argument>, <argument><expr><literal type="string">"INDX"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>list_file</name> <argument_list>(<argument><expr><name>mft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>indx</name><index>[<expr><literal type="number">0x18</literal> <operator>+</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>indx</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>hook</name></expr></argument>,

<argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>free_attr</name> <argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type>

<name>grub_ntfs_mount</name> <parameter_list>(<parameter><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_bpb</name></name></type> <name>bpb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disk</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>struct <name>grub_ntfs_data</name> <operator>*</operator><operator>)</operator> <call><name>grub_zalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>disk</name></name> <operator>=</operator> <name>disk</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bpb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>bpb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_memcmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>bpb</name><operator>.</operator><name>oem_name</name></name></expr></argument>, <argument><expr><literal type="string">"NTFS"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <call><name>grub_le_to_cpu16</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>bytes_per_sector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>spc</name></name> <operator>=</operator> <name><name>bpb</name><operator>.</operator><name>sectors_per_cluster</name></name> <operator>*</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&gt;&gt;</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bpb</name><operator>.</operator><name>clusters_per_mft</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>spc</name></name> <operator>*</operator> <name><name>bpb</name><operator>.</operator><name>clusters_per_mft</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name><name>bpb</name><operator>.</operator><name>clusters_per_mft</name></name> <operator>-</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bpb</name><operator>.</operator><name>clusters_per_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>idx_size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>spc</name></name> <operator>*</operator> <name><name>bpb</name><operator>.</operator><name>clusters_per_index</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>idx_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name><name>bpb</name><operator>.</operator><name>clusters_per_index</name></name> <operator>-</operator> <name>BLK_SHR</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mft_start</name></name> <operator>=</operator> <call><name>grub_le_to_cpu64</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>mft_lcn</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>spc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&gt;</operator> <name>MAX_MFT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>idx_size</name></name> <operator>&gt;</operator> <name>MAX_IDX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cmft</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>grub_disk_read</name>

<argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>mft_start</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>sector</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>mft_start</name></name> <operator>+</operator>

<call><name>grub_partition_get_start</name> <argument_list>(<argument><expr><name><name>disk</name><operator>-&gt;</operator><name>partition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uuid</name></name> <operator>=</operator> <call><name>grub_le_to_cpu64</name> <argument_list>(<argument><expr><name><name>bpb</name><operator>.</operator><name>num_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fixup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>mft_size</name></name></expr></argument>, <argument><expr><literal type="string">"FILE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>locate_attr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name><operator>.</operator><name>attr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name></name></expr></argument>, <argument><expr><name>AT_DATA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>, <argument><expr><name>FILE_ROOT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_error</name> <argument_list>(<argument><expr><name>GRUB_ERR_BAD_FS</name></expr></argument>, <argument><expr><literal type="string">"not an ntfs filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>grub_ntfs_dir_closure</name>

<block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>iterate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>grub_fshelp_filetype</name></name></type> <name>filetype</name></decl></parameter>,

<parameter><decl><type><name>grub_fshelp_node_t</name></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_dir_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_dirhook_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>filetype</name> <operator>&amp;</operator> <name>GRUB_FSHELP_TYPE_MASK</name><operator>)</operator> <operator>==</operator> <name>GRUB_FSHELP_DIR</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>c</name><operator>-&gt;</operator><name>hook</name></name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_ntfs_dir</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grub_dirhook_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>fdiro</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_dir_closure</name></name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_ntfs_mount</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_fshelp_find_file</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdiro</name></expr></argument>, <argument><expr><name>grub_ntfs_iterate_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GRUB_FSHELP_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>hook</name></name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>closure</name></name> <operator>=</operator> <name>closure</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_ntfs_iterate_dir</name> <argument_list>(<argument><expr><name>fdiro</name></expr></argument>, <argument><expr><name>iterate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdiro</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fdiro</name> <operator>!=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><name>fdiro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>fdiro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_ntfs_open</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>mft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_ntfs_mount</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_fshelp_find_file</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mft</name></expr></argument>, <argument><expr><name>grub_ntfs_iterate_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GRUB_FSHELP_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mft</name> <operator>!=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>, <argument><expr><name>mft</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mft</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name><operator>.</operator><name>inode_read</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>init_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cmft</name><operator>.</operator><name>ino</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>cmft</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_ssize_t</name></type>

<name>grub_ntfs_read</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>mft</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mft</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>grub_ntfs_data</name> <operator>*</operator><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>cmft</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>read_hook</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mft</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>save_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>read_attr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>file</name><operator>-&gt;</operator><name>read_hook</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>grub_errno</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_ntfs_close</name> <parameter_list>(<parameter><decl><type><name>grub_file_t</name></type> <name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_ntfs_label</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fshelp_node</name></name> <modifier>*</modifier></type><name>mft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_ntfs_mount</name> <argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_fshelp_find_file</name> <argument_list>(<argument><expr><literal type="string">"/$Volume"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mft</name></expr></argument>, <argument><expr><name>grub_ntfs_iterate_dir</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GRUB_FSHELP_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grub_errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mft</name><operator>-&gt;</operator><name>inode_read</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>mft_size</name></name> <operator>&lt;&lt;</operator> <name>BLK_SHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_mft</name> <argument_list>(<argument><expr><name><name>mft</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>mft</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mft</name><operator>-&gt;</operator><name>ino</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_attr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <call><name>find_attr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>mft</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>AT_VOLUME_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pa</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pa</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>u32at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pa</name> <operator>+=</operator> <call><name>u16at</name> <argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><call><name>grub_utf16_to_utf8</name> <argument_list>(<argument><expr><operator>(</operator><name>grub_uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>grub_uint16_t</name> <operator>*</operator><operator>)</operator> <name>pa</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>=</operator>

<literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mft</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mft</name> <operator>!=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type>

<name>grub_ntfs_uuid</name> <parameter_list>(<parameter><decl><type><name>grub_device_t</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_dl_ref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>grub_ntfs_mount</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <call><name>grub_xasprintf</name> <argument_list>(<argument><expr><literal type="string">"%016llx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>grub_dl_unref</name> <argument_list>(<argument><expr><name>my_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_fs</name></name></type> <name>grub_ntfs_fs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ntfs"</literal></expr>,

<expr><operator>.</operator><name>dir</name> <operator>=</operator> <name>grub_ntfs_dir</name></expr>,

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>grub_ntfs_open</name></expr>,

<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>grub_ntfs_read</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>grub_ntfs_close</name></expr>,

<expr><operator>.</operator><name>label</name> <operator>=</operator> <name>grub_ntfs_label</name></expr>,

<expr><operator>.</operator><name>uuid</name> <operator>=</operator> <name>grub_ntfs_uuid</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>reserved_first_sector</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
