<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\include\grub\command.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/list.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_COMMAND_FLAG_CMDLINE</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_COMMAND_FLAG_MENU</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_COMMAND_FLAG_BOTH</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_COMMAND_FLAG_TITLE</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_COMMAND_FLAG_NO_ECHO</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_COMMAND_FLAG_EXTCMD</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_COMMAND_FLAG_DYNCMD</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<struct_decl>struct <name>grub_command</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>grub_command_func_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_command</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>grub_command</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_command</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_command_func_t</name></type> <name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>summary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>grub_command</name></name> <modifier>*</modifier></type><name>grub_command_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_command_t</name></type> <name>grub_command_list</name></decl>;</decl_stmt>

<function_decl><type><name>grub_command_t</name></type> <name>grub_reg_cmd</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>grub_command_func_t</name></type> <name>func</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>summary</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prio</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_unregister_command</name> <parameter_list>(<parameter><decl><type><name>grub_command_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_register_command</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>summary</name></type></parameter>, <parameter><type><name>description</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_reg_cmd (name, func, summary, description, 0); GRUB_MODATTR ("command", name);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_register_command_p1</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>summary</name></type></parameter>, <parameter><type><name>description</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_reg_cmd (name, func, summary, description, 1); GRUB_MODATTR ("command", "*" name);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_command_t</name></type>

<name>grub_command_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>grub_named_list_find</name> <argument_list>(<argument><expr><call><name>GRUB_AS_NAMED_LIST</name> <argument_list>(<argument><expr><name>grub_command_list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_err_t</name></type>

<name>grub_command_execute</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_command_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>grub_command_find</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>cmd</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>cmd</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>GRUB_ERR_FILE_NOT_FOUND</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>grub_command_iterate</name> <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>grub_command_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>grub_list_iterate</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>grub_command_list</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>grub_list_hook_t</name><operator>)</operator> <name>func</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>grub_register_core_commands</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
