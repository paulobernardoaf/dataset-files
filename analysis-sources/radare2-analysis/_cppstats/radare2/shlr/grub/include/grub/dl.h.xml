<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\include\grub\dl.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void grub_mod_init (grub_dl_t mod __attribute__ ((unused))) __attribute__ ((used)); void grub_##name##_init (void); void grub_##name##_init (void) { grub_mod_init (0); } static void grub_mod_init (grub_dl_t mod __attribute__ ((unused)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_FINI</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void grub_mod_fini (void) __attribute__ ((used)); void grub_##name##_fini (void); void grub_##name##_fini (void) { grub_mod_fini (); } static void grub_mod_fini (void)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APPLE_CC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static char grub_modname[] __attribute__ ((section ("_modname, _modname"), used)) = #name;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_DEP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ (".section _moddeps, _moddeps\n.asciz \"" #name "\"\n")</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ (".section .modname\n.asciz \"" #name "\"\n")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_DEP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ (".section .moddeps\n.asciz \"" #name "\"\n")</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ (".section \".modname\"\n.asciz \"" #name "\"\n")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MOD_DEP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ (".section \".moddeps\"\n.asciz \"" #name "\"\n")</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>grub_dl_segment</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_dl_segment</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>section</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>grub_dl_segment</name></name> <modifier>*</modifier></type><name>grub_dl_segment_t</name>;</typedef>

<struct_decl>struct <name>grub_dl</name>;</struct_decl>

<struct>struct <name>grub_dl_dep</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_dl_dep</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_dl</name></name> <modifier>*</modifier></type><name>mod</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>grub_dl_dep</name></name> <modifier>*</modifier></type><name>grub_dl_dep_t</name>;</typedef>

<struct>struct <name>grub_dl</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_dl_dep_t</name></type> <name>dep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_dl_segment_t</name></type> <name>segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>symtab</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_dl</name></name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fini</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>grub_dl</name></name> <modifier>*</modifier></type><name>grub_dl_t</name>;</typedef>

<function_decl><type><name>grub_dl_t</name></type> <name>grub_dl_load_file</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_dl_t</name></type> <name>grub_dl_load</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_dl_t</name></type> <name>grub_dl_load_core</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>grub_dl_unload</name> <parameter_list>(<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_dl_unload_unneeded</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_dl_unload_all</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>GRUB_UTIL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>GRUB_TARGET_NO_MODULES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_NO_MODULES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_NO_MODULES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>grub_dl_ref</name> <parameter_list>(<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>mod</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>grub_dl_unref</name> <parameter_list>(<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>mod</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>grub_dl_iterate</name> <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hook</name>) <parameter_list>(<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_dl_t</name></type> <name>grub_dl_get</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> <name>grub_dl_register_symbol</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,

<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> <name>grub_arch_dl_check_header</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> <name>grub_arch_dl_relocate_symbols</name> <parameter_list>(<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> <name>grub_dl_add</name> <parameter_list>(<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type> <name>grub_dl_resolve_dependencies</name> <parameter_list>(<parameter><decl><type><name>grub_dl_t</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_mips</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <name>GRUB_NO_MODULES</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_LINKER_HAVE_INIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>grub_arch_dl_init_linker</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
