<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\include\grub\pciutils.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pciaccess.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>pci_device</name></name> <modifier>*</modifier></type><name>grub_pci_device_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>grub_pci_get_bus</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dev</name><operator>-&gt;</operator><name>bus</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>grub_pci_get_device</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dev</name><operator>-&gt;</operator><name>dev</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>grub_pci_get_function</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dev</name><operator>-&gt;</operator><name>func</name></name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>grub_pci_address</name>

<block>{

<decl_stmt><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>grub_pci_address</name></name></type> <name>grub_pci_address_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_uint32_t</name></type>

<name>grub_pci_read</name> <parameter_list>(<parameter><decl><type><name>grub_pci_address_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pci_device_cfg_read_u32</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_uint16_t</name></type>

<name>grub_pci_read_word</name> <parameter_list>(<parameter><decl><type><name>grub_pci_address_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pci_device_cfg_read_u16</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>grub_uint8_t</name></type>

<name>grub_pci_read_byte</name> <parameter_list>(<parameter><decl><type><name>grub_pci_address_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_uint8_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pci_device_cfg_read_u8</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>grub_pci_write</name> <parameter_list>(<parameter><decl><type><name>grub_pci_address_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pci_device_cfg_write_u32</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>grub_pci_write_word</name> <parameter_list>(<parameter><decl><type><name>grub_pci_address_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>grub_uint16_t</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pci_device_cfg_write_u16</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>grub_pci_write_byte</name> <parameter_list>(<parameter><decl><type><name>grub_pci_address_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>grub_uint8_t</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pci_device_cfg_write_u8</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>void</name> <modifier>*</modifier></type>

<name>grub_pci_device_map_range</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>grub_addr_t</name></type> <name>base</name></decl></parameter>,

<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>

<name>grub_pci_device_unmap_range</name> <parameter_list>(<parameter><decl><type><name>grub_pci_device_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,

<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
