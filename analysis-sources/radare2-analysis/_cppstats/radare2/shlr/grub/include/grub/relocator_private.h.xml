<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\include\grub\relocator_private.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm_private.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_size_t</name></type> <name>grub_relocator_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_size_t</name></type> <name>grub_relocator_forward_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_size_t</name></type> <name>grub_relocator_backward_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_size_t</name></type> <name>grub_relocator_jumper_size</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type>

<name>grub_cpu_relocator_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>grub_err_t</name></type>

<name>grub_relocator_prepare_relocs</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_relocator</name></name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,

<parameter><decl><type><name>grub_addr_t</name></type> <name>addr</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>relstart</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name> <modifier>*</modifier></type><name>relsize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_cpu_relocator_forward</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rels</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tgt</name></decl></parameter>,

<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_cpu_relocator_backward</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rels</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tgt</name></decl></parameter>,

<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_cpu_relocator_jumper</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rels</name></decl></parameter>, <parameter><decl><type><name>grub_addr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_MACHINE_IEEE1275</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_FIRMWARE_REQUESTS_QUANT_LOG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>GRUB_MACHINE_EFI</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_FIRMWARE_REQUESTS_QUANT_LOG</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name> <operator>&amp;&amp;</operator> <name>GRUB_RELOCATOR_FIRMWARE_REQUESTS_QUANT_LOG</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_HAVE_LEFTOVERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_HAVE_LEFTOVERS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_RELOCATOR_FIRMWARE_REQUESTS_QUANT</name></cpp:macro> <cpp:value>(1 &lt;&lt; GRUB_RELOCATOR_FIRMWARE_REQUESTS_QUANT_LOG)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>grub_relocator_mmap_event</name>

<block>{

<enum>enum <block>{

<decl><name>IN_REG_START</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>IN_REG_END</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>REG_BEG_START</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>REG_BEG_END</name> <init>= <expr><name>REG_BEG_START</name> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name></expr></cpp:if>

<decl><name>REG_FIRMWARE_START</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>REG_FIRMWARE_END</name> <init>= <expr><name>REG_FIRMWARE_START</name> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>FIRMWARE_BLOCK_START</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 

<decl><name>FIRMWARE_BLOCK_END</name> <init>= <expr><name>FIRMWARE_BLOCK_START</name> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_RELOCATOR_HAVE_LEFTOVERS</name></expr></cpp:if>

<decl><name>REG_LEFTOVER_START</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>REG_LEFTOVER_END</name> <init>= <expr><name>REG_LEFTOVER_START</name> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><name>COLLISION_START</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>COLLISION_END</name> <init>= <expr><name>COLLISION_START</name> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>

}</block> <decl><name>type</name></decl>;</enum>

<decl_stmt><decl><type><name>grub_phys_addr_t</name></type> <name>pos</name></decl>;</decl_stmt>

<union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>grub_mm_region_t</name></type> <name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_mm_header_t</name></type> <name>hancestor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_mm_region_t</name> <modifier>*</modifier></type><name>regancestor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_mm_header_t</name></type> <name>head</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_relocator_fw_leftover</name></name> <modifier>*</modifier></type><name>leftover</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</union>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS</name></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>grub_relocator_firmware_alloc_region</name> <parameter_list>(<parameter><decl><type><name>grub_phys_addr_t</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>grub_relocator_firmware_fill_events</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_relocator_mmap_event</name></name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>grub_relocator_firmware_get_max_events</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_relocator_firmware_free_region</name> <parameter_list>(<parameter><decl><type><name>grub_phys_addr_t</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
