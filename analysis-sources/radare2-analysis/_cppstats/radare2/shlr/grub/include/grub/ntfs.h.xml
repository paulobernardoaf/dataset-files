<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\include\grub\ntfs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_NTFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_NTFS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_MFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_MFTMIRR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LOGFILE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_VOLUME</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_ATTRDEF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_ROOT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BITMAP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BOOT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BADCLUS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_QUOTA</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_UPCASE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_STANDARD_INFORMATION</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_ATTRIBUTE_LIST</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FILENAME</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_OBJECT_ID</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SECURITY_DESCRIPTOR</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_VOLUME_NAME</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_VOLUME_INFORMATION</name></cpp:macro> <cpp:value>0x70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_DATA</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_INDEX_ROOT</name></cpp:macro> <cpp:value>0x90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_INDEX_ALLOCATION</name></cpp:macro> <cpp:value>0xA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_BITMAP</name></cpp:macro> <cpp:value>0xB0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SYMLINK</name></cpp:macro> <cpp:value>0xC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_EA_INFORMATION</name></cpp:macro> <cpp:value>0xD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_EA</name></cpp:macro> <cpp:value>0xE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_READ_ONLY</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_HIDDEN</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_SYSTEM</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_ARCHIVE</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_DEVICE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_NORMAL</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_TEMPORARY</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_SPARSE</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_REPARSE</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_COMPRESSED</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_OFFLINE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_NOT_INDEXED</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_ENCRYPTED</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_DIRECTORY</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_INDEX_VIEW</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_COMPRESSED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_ENCRYPTED</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_SPARSE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLK_SHR</name></cpp:macro> <cpp:value>GRUB_DISK_SECTOR_BITS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MFT</name></cpp:macro> <cpp:value>(1024 &gt;&gt; BLK_SHR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IDX</name></cpp:macro> <cpp:value>(16384 &gt;&gt; BLK_SHR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_LEN</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_LOG_LEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_SEC</name></cpp:macro> <cpp:value>(COM_LEN &gt;&gt; BLK_SHR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_ALST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_MMFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_GPOS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_COMP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_CBLK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_BLNK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>valueat</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>ofs</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*((type*)(((char*)buf)+ofs))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u16at</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>ofs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_le_to_cpu16(valueat(buf,ofs,grub_uint16_t))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u32at</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>ofs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_le_to_cpu32(valueat(buf,ofs,grub_uint32_t))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u64at</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>ofs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_le_to_cpu64(valueat(buf,ofs,grub_uint64_t))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v16at</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>ofs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>valueat(buf,ofs,grub_uint16_t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v32at</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>ofs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>valueat(buf,ofs,grub_uint32_t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v64at</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>ofs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>valueat(buf,ofs,grub_uint64_t)</cpp:value></cpp:define>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct grub_ntfs_bpb

{

grub_uint8_t jmp_boot[<literal type="number">3</literal>];

grub_uint8_t oem_name[<literal type="number">8</literal>];

grub_uint16_t bytes_per_sector;

grub_uint8_t sectors_per_cluster;

grub_uint8_t reserved_1[<literal type="number">7</literal>];

grub_uint8_t media;

grub_uint16_t reserved_2;

grub_uint16_t sectors_per_track;

grub_uint16_t num_heads;

grub_uint32_t num_hidden_sectors;

grub_uint32_t reserved_3[<literal type="number">2</literal>];

grub_uint64_t num_total_sectors;

grub_uint64_t mft_lcn;

grub_uint64_t mft_mirr_lcn;

grub_int8_t clusters_per_mft;

grub_int8_t reserved_4[<literal type="number">3</literal>];

grub_int8_t clusters_per_index;

grub_int8_t reserved_5[<literal type="number">3</literal>];

grub_uint64_t num_serial;

grub_uint32_t checksum;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_ntfs_file</name></cpp:macro> <cpp:value>grub_fshelp_node</cpp:value></cpp:define>

<struct>struct <name>grub_ntfs_attr</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>emft_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>edat_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>attr_nxt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>attr_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>save_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name> <modifier>*</modifier></type><name>mft</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>grub_fshelp_node</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>ino</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inode_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>sector</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name></type> <name>attr</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>grub_ntfs_data</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name></type> <name>cmft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_file</name></name></type> <name>mmft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>mft_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>idx_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>blocksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>mft_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>uuid</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>grub_ntfs_comp</name>

<block>{

<decl_stmt><decl><type><name>grub_disk_t</name></type> <name>disk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comp_head</name></decl>, <decl><type ref="prev"/><name>comp_tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name><name>comp_table</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint32_t</name></type> <name>cbuf_ofs</name></decl>, <decl><type ref="prev"/><name>cbuf_vcn</name></decl>, <decl><type ref="prev"/><name>spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuf</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>grub_ntfs_rlst</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_disk_addr_t</name></type> <name>target_vcn</name></decl>, <decl><type ref="prev"/><name>curr_vcn</name></decl>, <decl><type ref="prev"/><name>next_vcn</name></decl>, <decl><type ref="prev"/><name>curr_lcn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_ntfs_comp</name></name></type> <name>comp</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>grub_err_t</name></type> (<modifier>*</modifier><name>ntfscomp_func_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_attr</name></name> <modifier>*</modifier></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>grub_uint32_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_rlst</name></name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>,

<parameter><decl><type><name>grub_uint32_t</name></type> <name>vcn</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ntfscomp_func_t</name></type> <name>grub_ntfscomp_func</name></decl>;</decl_stmt>

<function_decl><type><name>grub_err_t</name></type> <name>grub_ntfs_read_run_list</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_ntfs_rlst</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
