<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\include\grub\offsets.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_TOTAL_MODULE_SIZE</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_KERNEL_IMAGE_SIZE</name></cpp:macro> <cpp:value>0xc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_COMPRESSED_SIZE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_INSTALL_DOS_PART</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_INSTALL_BSD_PART</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_REED_SOLOMON_REDUNDANCY</name></cpp:macro> <cpp:value>0x1c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_RAW_SIZE</name></cpp:macro> <cpp:value>0xca4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_NO_REED_SOLOMON_PART</name></cpp:macro> <cpp:value>0x70c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_PREFIX</name></cpp:macro> <cpp:value>GRUB_KERNEL_I386_PC_RAW_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_PREFIX_END</name></cpp:macro> <cpp:value>(GRUB_KERNEL_I386_PC_PREFIX + 0x40)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_BOOT_I386_PC_KERNEL_SEG</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_PC_LINK_ADDR</name></cpp:macro> <cpp:value>0x8200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MEMORY_I386_PC_UPPER</name></cpp:macro> <cpp:value>0xa0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MEMORY_I386_QEMU_UPPER</name></cpp:macro> <cpp:value>GRUB_MEMORY_I386_PC_UPPER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_BOOT_I386_QEMU_CORE_ENTRY_ADDR</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_QEMU_CORE_ENTRY_ADDR</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_QEMU_KERNEL_IMAGE_SIZE</name></cpp:macro> <cpp:value>0xc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_QEMU_PREFIX</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_QEMU_PREFIX_END</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_QEMU_LINK_ADDR</name></cpp:macro> <cpp:value>0x8200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_SPARC64_IEEE1275_TOTAL_MODULE_SIZE</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_SPARC64_IEEE1275_KERNEL_IMAGE_SIZE</name></cpp:macro> <cpp:value>0xc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_SPARC64_IEEE1275_COMPRESSED_SIZE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_SPARC64_IEEE1275_PREFIX</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_SPARC64_IEEE1275_PREFIX_END</name></cpp:macro> <cpp:value>0x114</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_BOOT_SPARC64_IEEE1275_LIST_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_BOOT_SPARC64_IEEE1275_IMAGE_ADDRESS</name></cpp:macro> <cpp:value>0x4400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_SPARC64_IEEE1275_RAW_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_SPARC64_IEEE1275_LINK_ADDR</name></cpp:macro> <cpp:value>0x4400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_POWERPC_IEEE1275_PREFIX</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_POWERPC_IEEE1275_PREFIX_END</name></cpp:macro> <cpp:value>0x44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_POWERPC_IEEE1275_LINK_ALIGN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_POWERPC_IEEE1275_LINK_ADDR</name></cpp:macro> <cpp:value>0x200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_LINK_ADDR</name></cpp:macro> <cpp:value>0x80200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_LINK_ALIGN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_COMPRESSED_SIZE</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_UNCOMPRESSED_SIZE</name></cpp:macro> <cpp:value>0xc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_TOTAL_MODULE_SIZE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_PREFIX</name></cpp:macro> <cpp:value>0x0c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_PREFIX_END</name></cpp:macro> <cpp:value>0x54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_EFI_PREFIX</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_EFI_PREFIX_END</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_X86_64_EFI_PREFIX</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_X86_64_EFI_PREFIX_END</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_COREBOOT_PREFIX</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_COREBOOT_PREFIX_END</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_COREBOOT_LINK_ADDR</name></cpp:macro> <cpp:value>0x8200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_MULTIBOOT_PREFIX</name></cpp:macro> <cpp:value>GRUB_KERNEL_I386_COREBOOT_PREFIX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_MULTIBOOT_PREFIX_END</name></cpp:macro> <cpp:value>GRUB_KERNEL_I386_COREBOOT_PREFIX_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_IEEE1275_PREFIX</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_IEEE1275_PREFIX_END</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_IEEE1275_LINK_ADDR</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_IEEE1275_MOD_ALIGN</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_COREBOOT_MOD_ALIGN</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_MULTIBOOT_MOD_ALIGN</name></cpp:macro> <cpp:value>GRUB_KERNEL_I386_COREBOOT_MOD_ALIGN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_IEEE1275_MOD_GAP</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_I386_COREBOOT_MOD_GAP</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_POWERPC_IEEE1275_MOD_ALIGN</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MIPS_YEELOONG_MOD_ALIGN</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_POWERPC_IEEE1275_MOD_GAP</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRUB_MACHINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_OFFSETS_CONCAT_</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##b ##c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_OFFSETS_CONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT_(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_MOD_ALIGN</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _MOD_ALIGN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_MOD_GAP</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _MOD_GAP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_TOTAL_MODULE_SIZE</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _TOTAL_MODULE_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_KERNEL_IMAGE_SIZE</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _KERNEL_IMAGE_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_COMPRESSED_SIZE</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _COMPRESSED_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_UNCOMPRESSED_SIZE</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _UNCOMPRESSED_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_PREFIX</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _PREFIX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_PREFIX_END</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _PREFIX_END)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_BOOT_MACHINE_KERNEL_SEG</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_BOOT_, GRUB_MACHINE, _KERNEL_SEG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_MEMORY_MACHINE_UPPER</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_MEMORY_, GRUB_MACHINE, _UPPER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_RAW_SIZE</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _RAW_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_INSTALL_BSD_PART</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _INSTALL_BSD_PART)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_KERNEL_MACHINE_INSTALL_DOS_PART</name></cpp:macro> <cpp:value>GRUB_OFFSETS_CONCAT (GRUB_KERNEL_, GRUB_MACHINE, _INSTALL_DOS_PART)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASM_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>grub_pc_bios_boot_blocklist</name>

<block>{

<decl_stmt><decl><type><name>grub_uint64_t</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>grub_uint16_t</name></type> <name>segment</name></decl>;</decl_stmt>

}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
