<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\include\grub\test.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/dl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/symbol.h&gt;</cpp:file></cpp:include>

<struct>struct <name>grub_test</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>grub_test</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator>main</expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>grub_test</name></name> <modifier>*</modifier></type><name>grub_test_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>grub_test_t</name></type> <name>grub_test_list</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>grub_test_register</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>test</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_test_unregister</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>grub_test_run</name> <parameter_list>(<parameter><decl><type><name>grub_test_t</name></type> <name>test</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>grub_test_nonzero</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>cond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>grub_uint32_t</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

__attribute__ <parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>5<operator>,</operator> 6</function_decl>)))<empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>grub_test_assert</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>grub_test_nonzero(cond, GRUB_FILE, __FUNCTION__, __LINE__, ##__VA_ARGS__, "assert failed: %s", #cond)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_UNIT_TEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>funp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void grub_unit_test_init (void) { grub_test_register (name, funp); } void grub_unit_test_fini (void) { grub_test_unregister (name); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRUB_FUNCTIONAL_TEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>funp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GRUB_MOD_INIT(functional_test_##funp) { grub_test_register (name, funp); } GRUB_MOD_FINI(functional_test_##funp) { grub_test_unregister (name); }</cpp:value></cpp:define>

</unit>
