<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\grubfs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"grubfs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RIOBind</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>empty</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>grub_err_t</name></type> <name>read_foo</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name></decl></parameter>, <parameter><decl><type><name>grub_disk_addr_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>grub_size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"oops. no disk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>blocksize</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>iob</name> <init>= <expr><name><name>disk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>iob</name> <operator>=</operator> <name>bio</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name><name>iob</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>iob</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>delta</name><operator>+</operator><operator>(</operator><name>blocksize</name><operator>*</operator><name>sector</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>size</name><operator>*</operator><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>GrubFS</name> <modifier>*</modifier></type><name>grubfs_new</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_fs</name></name> <modifier>*</modifier></type><name>myfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GrubFS</name> <modifier>*</modifier></type><name>gfs</name> <init>= <expr><call><name>empty</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GrubFS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gfs</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name> <operator>=</operator> <call><name>empty</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <call><name>empty</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_device</name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name> <operator>=</operator> <call><name>empty</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_disk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <operator>(</operator><name>grub_disk_dev_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>dev</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>read_foo</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fs</name></name> <operator>=</operator> <name>myfs</name></expr>;</expr_stmt>

<return>return <expr><name>gfs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>grub_disk_t</name></type> <name>grubfs_disk</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_disk</name></name> <modifier>*</modifier></type><name>disk</name> <init>= <expr><call><name>empty</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_disk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <call><name>empty</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>grub_disk_dev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>dev</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>read_foo</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>disk</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>disk</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>grubfs_free</name> <parameter_list>(<parameter><decl><type><name>GrubFS</name> <modifier>*</modifier></type><name>gf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gf</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <name><name>gf</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>device</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>gf</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>gf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>gf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>grubfs_bind_io</name> <parameter_list>(<parameter><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>iob</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>_delta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>bio</name> <operator>=</operator> <name>iob</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>_delta</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
