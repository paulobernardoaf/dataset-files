<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\kern\env.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/env.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/env_private.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_env_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_env_get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_env_unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_env_iterate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_env_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_register_variable_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_current_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_current_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>menu_pointer</name></name></type> <name>initial_menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_pointer</name></name> <modifier>*</modifier></type><name>grub_current_menu</name> <init>= <expr><operator>&amp;</operator><name>initial_menu</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>grub_env_context</name></name></type> <name>initial_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_context</name></name> <modifier>*</modifier></type><name>grub_current_context</name> <init>= <expr><operator>&amp;</operator><name>initial_context</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>

<name>grub_env_hashval</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <operator>*</operator><operator>(</operator><name>s</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i</name> <operator>%</operator> <name>HASHSZ</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type>

<name>grub_env_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>grub_env_hashval</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>var</name> <operator>=</operator> <name><name>grub_current_context</name><operator>-&gt;</operator><name>vars</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</init> <condition><expr><name>var</name></expr>;</condition> <incr><expr><name>var</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_strcmp</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>var</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>grub_env_insert</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_env_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>grub_env_hashval</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prevp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vars</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>vars</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prevp</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>vars</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>grub_env_remove</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>var</name><operator>-&gt;</operator><name>prevp</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prevp</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>prevp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>grub_err_t</name></type>

<name>grub_env_set</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>grub_env_find</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>write_hook</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name><name>var</name><operator>-&gt;</operator><name>write_hook</name></name> <argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>grub_strdup</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>grub_zalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>var</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>grub_strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>grub_strdup</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grub_env_insert</name> <argument_list>(<argument><expr><name>grub_current_context</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>grub_errno</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>grub_env_get</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>grub_env_find</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>var</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>read_hook</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>var</name><operator>-&gt;</operator><name>read_hook</name></name> <argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>grub_env_unset</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>grub_env_find</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>var</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>write_hook</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>grub_env_set</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grub_env_remove</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>grub_env_iterate</name> <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_sorted_var</name></name> <modifier>*</modifier></type><name>sorted_list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_sorted_var</name></name> <modifier>*</modifier></type><name>sorted_var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HASHSZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>var</name> <operator>=</operator> <name><name>grub_current_context</name><operator>-&gt;</operator><name>vars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>var</name></expr>;</condition> <incr><expr><name>var</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_sorted_var</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sorted_var</name> <operator>=</operator> <call><name>grub_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sorted_var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>sorted_var</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sorted_var</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <operator>&amp;</operator><name>sorted_list</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>q</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <operator>*</operator><name>q</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_strcmp</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sorted_var</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>sorted_var</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>sorted_var</name> <operator>=</operator> <name>sorted_list</name></expr>;</init> <condition><expr><name>sorted_var</name></expr>;</condition> <incr><expr><name>sorted_var</name> <operator>=</operator> <name><name>sorted_var</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>func</name> <argument_list>(<argument><expr><name><name>sorted_var</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<label><name>fail</name>:</label>

<for>for <control>(<init><expr><name>sorted_var</name> <operator>=</operator> <name>sorted_list</name></expr>;</init> <condition><expr><name>sorted_var</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_sorted_var</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>sorted_var</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grub_free</name> <argument_list>(<argument><expr><name>sorted_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sorted_var</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>grub_err_t</name></type>

<name>grub_register_variable_hook</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>grub_env_read_hook_t</name></type> <name>read_hook</name></decl></parameter>,

<parameter><decl><type><name>grub_env_write_hook_t</name></type> <name>write_hook</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_env_var</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>grub_env_find</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>var</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>grub_env_set</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GRUB_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>grub_errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>grub_env_find</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>read_hook</name></name> <operator>=</operator> <name>read_hook</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>write_hook</name></name> <operator>=</operator> <name>write_hook</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GRUB_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

</unit>
