<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\grub\kern\list.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/misc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grub/mm.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_list_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_list_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_list_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_list_iterate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_list_insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_prio_list_insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GRUB_EXPORT</name><argument_list>(<argument><expr><name>grub_named_list_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type>

<name>grub_list_push</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>grub_list_pop</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_list_t</name></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>*</operator><name>head</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>item</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>grub_list_remove</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>head</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><name>q</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>item</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>grub_list_iterate</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_hook_t</name></type> <name>hook</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_list_t</name></type> <name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>hook</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>grub_list_insert</name> <parameter_list>(<parameter><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_list_t</name></type> <name>item</name></decl></parameter>,

<parameter><decl><type><name>grub_list_test_t</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>grub_list_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>head</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><name>q</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>test</name> <argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>grub_named_list_find</name> <parameter_list>(<parameter><decl><type><name>grub_named_list_t</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>head</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>grub_strcmp</name> <argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>head</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>grub_prio_list_insert_closure</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>inactive</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>grub_prio_list_insert_test</name> <parameter_list>(<parameter><decl><type><name>grub_prio_list_t</name></type> <name>new_item</name></decl></parameter>, <parameter><decl><type><name>grub_prio_list_t</name></type> <name>item</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_prio_list_insert_closure</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>grub_strcmp</name> <argument_list>(<argument><expr><name><name>new_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_item</name><operator>-&gt;</operator><name>prio</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>prio</name></name> <operator>&amp;</operator> <name>GRUB_PRIO_LIST_PRIO_MASK</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prio</name></name> <operator>&amp;=</operator> <operator>~</operator><name>GRUB_PRIO_LIST_FLAG_ACTIVE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>inactive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>grub_prio_list_insert</name> <parameter_list>(<parameter><decl><type><name>grub_prio_list_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>grub_prio_list_t</name></type> <name>nitem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>grub_prio_list_insert_closure</name></name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>inactive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grub_list_insert</name> <argument_list>(<argument><expr><call><name>GRUB_AS_LIST_P</name> <argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GRUB_AS_LIST</name> <argument_list>(<argument><expr><name>nitem</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>grub_list_test_t</name><operator>)</operator> <name>grub_prio_list_insert_test</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>c</name><operator>.</operator><name>inactive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nitem</name><operator>-&gt;</operator><name>prio</name></name> <operator>|=</operator> <name>GRUB_PRIO_LIST_FLAG_ACTIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
