<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\jemalloc.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_HAVE_ATTR</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_HAVE_ATTR_ALLOC_SIZE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_HAVE_ATTR_FORMAT_PRINTF</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_OVERRIDE_MEMALIGN</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_OVERRIDE_VALLOC</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_USABLE_SIZE_CONST</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_USE_CXX_THROW</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR_WIN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR_WIN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_NO_RENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_malloc_conf</name></cpp:macro> <cpp:value>malloc_conf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_malloc_message</name></cpp:macro> <cpp:value>malloc_message</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_malloc</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_calloc</name></cpp:macro> <cpp:value>calloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_posix_memalign</name></cpp:macro> <cpp:value>posix_memalign</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_aligned_alloc</name></cpp:macro> <cpp:value>aligned_alloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_realloc</name></cpp:macro> <cpp:value>realloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_free</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallocx</name></cpp:macro> <cpp:value>mallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_rallocx</name></cpp:macro> <cpp:value>rallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_xallocx</name></cpp:macro> <cpp:value>xallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_sallocx</name></cpp:macro> <cpp:value>sallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_dallocx</name></cpp:macro> <cpp:value>dallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_sdallocx</name></cpp:macro> <cpp:value>sdallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_nallocx</name></cpp:macro> <cpp:value>nallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallctl</name></cpp:macro> <cpp:value>mallctl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallctlnametomib</name></cpp:macro> <cpp:value>mallctlnametomib</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallctlbymib</name></cpp:macro> <cpp:value>mallctlbymib</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_malloc_stats_print</name></cpp:macro> <cpp:value>malloc_stats_print</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_memalign</name></cpp:macro> <cpp:value>memalign</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_valloc</name></cpp:macro> <cpp:value>valloc</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VERSION</name></cpp:macro> <cpp:value>"4.5.0-0-g04380e79f1e2428bd0ad000bbc6e3d2dfc6b66a5"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VERSION_MAJOR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VERSION_MINOR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VERSION_BUGFIX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VERSION_NREV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VERSION_GID</name></cpp:macro> <cpp:value>"04380e79f1e2428bd0ad000bbc6e3d2dfc6b66a5"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_LG_ALIGN</name><parameter_list>(<parameter><type><name>la</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(la))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ALIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(ffs((int)(a))-1))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ALIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(((size_t)(a) &lt; (size_t)INT_MAX) ? ffs((int)(a))-1 : ffs((int)(((size_t)(a))&gt;&gt;32))+31))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ZERO</name></cpp:macro> <cpp:value>((int)0x40)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_TCACHE</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(((tc)+2) &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_TCACHE_NONE</name></cpp:macro> <cpp:value>MALLOCX_TCACHE(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCX_ARENA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((int)(a))+1) &lt;&lt; 20)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_USE_CXX_THROW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_CXX_THROW</name></cpp:macro> <cpp:value>throw()</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_CXX_THROW</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ATTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALIGNED</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(align(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE2</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DLLEXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_EXPORT</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_EXPORT</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_FORMAT_PRINTF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NOINLINE</name></cpp:macro> <cpp:value>__declspec(noinline)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NOTHROW</name></cpp:macro> <cpp:value>__declspec(nothrow)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NOTHROW</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_SECTION</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(allocate(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_RESTRICT_RETURN</name></cpp:macro> <cpp:value>__declspec(restrict)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__EDG__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOCATOR</name></cpp:macro> <cpp:value>__declspec(allocator)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOCATOR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ATTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALIGNED</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ATTR(aligned(s))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ATTR(alloc_size(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE2</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ATTR(alloc_size(s1, s2))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE2</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_EXPORT</name></cpp:macro> <cpp:value>JEMALLOC_ATTR(visibility("default"))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_FORMAT_PRINTF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ATTR(format(gnu_printf, s, i))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_ATTR_FORMAT_PRINTF</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_FORMAT_PRINTF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ATTR(format(printf, s, i))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_FORMAT_PRINTF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NOINLINE</name></cpp:macro> <cpp:value>JEMALLOC_ATTR(noinline)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NOTHROW</name></cpp:macro> <cpp:value>JEMALLOC_ATTR(nothrow)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_SECTION</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ATTR(section(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_RESTRICT_RETURN</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOCATOR</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ATTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALIGNED</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOC_SIZE2</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_EXPORT</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_FORMAT_PRINTF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NOINLINE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NOTHROW</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_SECTION</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_RESTRICT_RETURN</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALLOCATOR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>JEMALLOC_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>je_malloc_conf</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>JEMALLOC_EXPORT</name> <name>void</name></type> (<modifier>*</modifier><name>je_malloc_message</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbopaque</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_malloc</name><argument_list>(<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list>

<name>JEMALLOC_CXX_THROW</name> <name>JEMALLOC_ATTR</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list> <name>JEMALLOC_ALLOC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_calloc</name><argument_list>(<argument><expr><name>size_t</name> <name>num</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list>

<name>JEMALLOC_CXX_THROW</name> <name>JEMALLOC_ATTR</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list> <name>JEMALLOC_ALLOC_SIZE2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>int</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_posix_memalign</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>memptr</name></expr></argument>,

<argument><expr><name>size_t</name> <name>alignment</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>JEMALLOC_CXX_THROW</name> <name>JEMALLOC_ATTR</name><argument_list>(<argument><expr><call><name>nonnull</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_aligned_alloc</name><argument_list>(<argument><expr><name>size_t</name> <name>alignment</name></expr></argument>,

<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>JEMALLOC_CXX_THROW</name> <name>JEMALLOC_ATTR</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list>

<name>JEMALLOC_ALLOC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_realloc</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list>

<name>JEMALLOC_CXX_THROW</name> <name>JEMALLOC_ALLOC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>void</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_free</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list>

<name>JEMALLOC_CXX_THROW</name></decl>;</decl_stmt>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_mallocx</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

JEMALLOC_ATTR<parameter_list>(<parameter><decl><type><name>malloc</name></type></decl></parameter>)</parameter_list> JEMALLOC_ALLOC_SIZE<parameter_list>(</parameter_list>1</function_decl>)</block_content></block><empty_stmt>;</empty_stmt></extern>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_rallocx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> JEMALLOC_ALLOC_SIZE<parameter_list>(</parameter_list>2</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>size_t</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_xallocx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>extra</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>size_t</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_sallocx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> JEMALLOC_ATTR<parameter_list>(<parameter><decl><type><name>pure</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>void</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_dallocx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>void</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_sdallocx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>size_t</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_nallocx</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

JEMALLOC_ATTR<parameter_list>(<parameter><decl><type><name>pure</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>int</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_mallctl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>int</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_mallctlnametomib</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mibp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>miblenp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>int</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_mallctlbymib</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>mib</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>miblen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JEMALLOC_EXPORT</name> <name>void</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_malloc_stats_print</name><parameter_list>(

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>write_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>je_cbopaque</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>size_t</name> <name>JEMALLOC_NOTHROW</name></type> <name>je_malloc_usable_size</name><argument_list>(

<argument><expr><name>JEMALLOC_USABLE_SIZE_CONST</name> <name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>JEMALLOC_CXX_THROW</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_OVERRIDE_MEMALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_memalign</name><argument_list>(<argument><expr><name>size_t</name> <name>alignment</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list>

<name>JEMALLOC_CXX_THROW</name> <name>JEMALLOC_ATTR</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_OVERRIDE_VALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>JEMALLOC_EXPORT</name> <name>JEMALLOC_ALLOCATOR</name> <name>JEMALLOC_RESTRICT_RETURN</name>

<name>void</name> <name>JEMALLOC_NOTHROW</name> <modifier>*</modifier></type><name>je_valloc</name><argument_list>(<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>JEMALLOC_CXX_THROW</name>

<name>JEMALLOC_ATTR</name><argument_list>(<argument><expr><name>malloc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>chunk_alloc_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>chunk_dalloc_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>chunk_commit_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>chunk_decommit_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>chunk_purge_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>chunk_split_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>chunk_merge_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>chunk_alloc_t</name> <modifier>*</modifier></type><name>alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_dalloc_t</name> <modifier>*</modifier></type><name>dalloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_commit_t</name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_decommit_t</name> <modifier>*</modifier></type><name>decommit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_purge_t</name> <modifier>*</modifier></type><name>purge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_split_t</name> <modifier>*</modifier></type><name>split</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_merge_t</name> <modifier>*</modifier></type><name>merge</name></decl>;</decl_stmt>

}</block></struct></type> <name>chunk_hooks_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_MANGLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_NO_DEMANGLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_NO_DEMANGLE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>malloc_conf</name></cpp:macro> <cpp:value>je_malloc_conf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>malloc_message</name></cpp:macro> <cpp:value>je_malloc_message</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>malloc</name></cpp:macro> <cpp:value>je_malloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calloc</name></cpp:macro> <cpp:value>je_calloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>posix_memalign</name></cpp:macro> <cpp:value>je_posix_memalign</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aligned_alloc</name></cpp:macro> <cpp:value>je_aligned_alloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>realloc</name></cpp:macro> <cpp:value>je_realloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>free</name></cpp:macro> <cpp:value>je_free</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallocx</name></cpp:macro> <cpp:value>je_mallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rallocx</name></cpp:macro> <cpp:value>je_rallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xallocx</name></cpp:macro> <cpp:value>je_xallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sallocx</name></cpp:macro> <cpp:value>je_sallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dallocx</name></cpp:macro> <cpp:value>je_dallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdallocx</name></cpp:macro> <cpp:value>je_sdallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nallocx</name></cpp:macro> <cpp:value>je_nallocx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallctl</name></cpp:macro> <cpp:value>je_mallctl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallctlnametomib</name></cpp:macro> <cpp:value>je_mallctlnametomib</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallctlbymib</name></cpp:macro> <cpp:value>je_mallctlbymib</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>malloc_stats_print</name></cpp:macro> <cpp:value>je_malloc_stats_print</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>malloc_usable_size</name></cpp:macro> <cpp:value>je_malloc_usable_size</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memalign</name></cpp:macro> <cpp:value>je_memalign</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>valloc</name></cpp:macro> <cpp:value>je_valloc</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_NO_DEMANGLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc_conf</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc_message</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_calloc</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_posix_memalign</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_aligned_alloc</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_realloc</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_free</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallocx</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_rallocx</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_xallocx</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_sallocx</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_dallocx</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_sdallocx</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_nallocx</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallctl</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallctlnametomib</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallctlbymib</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc_stats_print</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc_usable_size</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_memalign</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_valloc</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
