<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\chunk.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_CHUNK_DEFAULT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_ADDR2BASE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)((uintptr_t)(a) &amp; ~chunksize_mask))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_ADDR2OFFSET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)((uintptr_t)(a) &amp; chunksize_mask))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_CEILING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((s) + chunksize_mask) &amp; ~chunksize_mask)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_HOOKS_INITIALIZER</name></cpp:macro> <cpp:value>{ NULL, NULL, NULL, NULL, NULL, NULL, NULL }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>opt_lg_chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt_dss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>rtree_t</name></type> <name>chunks_rtree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>chunksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>chunksize_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>chunk_npages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>chunk_hooks_t</name></type> <name>chunk_hooks_default</name></decl>;</decl_stmt>

<function_decl><type><name>chunk_hooks_t</name></type> <name>chunk_hooks_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>chunk_hooks_t</name></type> <name>chunk_hooks_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>chunk_hooks_t</name> <modifier>*</modifier></type><name>chunk_hooks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>chunk_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>gdump</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>chunk_deregister</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>chunk_alloc_base</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>chunk_alloc_cache</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>chunk_hooks_t</name> <modifier>*</modifier></type><name>chunk_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dalloc_node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>chunk_alloc_wrapper</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>chunk_hooks_t</name> <modifier>*</modifier></type><name>chunk_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>chunk_dalloc_cache</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>chunk_hooks_t</name> <modifier>*</modifier></type><name>chunk_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>chunk_dalloc_wrapper</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>chunk_hooks_t</name> <modifier>*</modifier></type><name>chunk_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>zeroed</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>chunk_purge_wrapper</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>chunk_hooks_t</name> <modifier>*</modifier></type><name>chunk_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>chunk_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>chunk_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_CHUNK_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<function><type><name>JEMALLOC_INLINE</name> <name>extent_node_t</name> <modifier>*</modifier></type>

<name>chunk_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>rtree_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chunks_rtree</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>dependent</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_dss.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_mmap.h"</cpp:file></cpp:include>

</unit>
