<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\ctl.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>ctl_node_s</name></name></type> <name>ctl_node_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ctl_named_node_s</name></name></type> <name>ctl_named_node_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ctl_indexed_node_s</name></name></type> <name>ctl_indexed_node_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ctl_arena_stats_s</name></name></type> <name>ctl_arena_stats_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ctl_stats_s</name></name></type> <name>ctl_stats_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>ctl_node_s</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>named</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ctl_named_node_s</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ctl_node_s</name></name></type> <name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nchildren</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ctl_node_t</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ctl</name>)<parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<struct>struct <name>ctl_indexed_node_s</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ctl_node_s</name></name></type> <name>node</name></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>ctl_named_node_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>index</name>)<parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,

<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<struct>struct <name>ctl_arena_stats_s</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nthreads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>lg_dirty_mult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>decay_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pactive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pdirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_stats_t</name></type> <name>astats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>allocated_small</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmalloc_small</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ndalloc_small</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrequests_small</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>malloc_bin_stats_t</name></type> <name><name>bstats</name><index>[<expr><name>JM_NBINS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>malloc_large_stats_t</name> <modifier>*</modifier></type><name>lstats</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>malloc_huge_stats_t</name> <modifier>*</modifier></type><name>hstats</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>ctl_stats_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>resident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>retained</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>narenas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctl_arena_stats_t</name> <modifier>*</modifier></type><name>arenas</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ctl_byname</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ctl_nametomib</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mibp</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>miblenp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ctl_bymib</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>mib</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>miblen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ctl_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ctl_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ctl_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ctl_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmallctl</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>oldp</name></type></parameter>, <parameter><type><name>oldlenp</name></type></parameter>, <parameter><type><name>newp</name></type></parameter>, <parameter><type><name>newlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (je_mallctl(name, oldp, oldlenp, newp, newlen) != 0) { malloc_printf( "&lt;jemalloc&gt;: Failure in xmallctl(\"%s\", ...)\n", name); abort(); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmallctlnametomib</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mibp</name></type></parameter>, <parameter><type><name>miblenp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (je_mallctlnametomib(name, mibp, miblenp) != 0) { malloc_printf("&lt;jemalloc&gt;: Failure in " "xmallctlnametomib(\"%s\", ...)\n", name); abort(); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmallctlbymib</name><parameter_list>(<parameter><type><name>mib</name></type></parameter>, <parameter><type><name>miblen</name></type></parameter>, <parameter><type><name>oldp</name></type></parameter>, <parameter><type><name>oldlenp</name></type></parameter>, <parameter><type><name>newp</name></type></parameter>, <parameter><type><name>newlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (je_mallctlbymib(mib, miblen, oldp, oldlenp, newp, newlen) != 0) { malloc_write( "&lt;jemalloc&gt;: Failure in xmallctlbymib()\n"); abort(); } } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
