<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\rb.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_COMPACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_node</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { a_type *rbn_left; a_type *rbn_right_red; }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_node</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { a_type *rbn_left; a_type *rbn_right; bool rbn_red; }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_tree</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { a_type *rbt_root; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_left_get</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a_node)-&gt;a_field.rbn_left)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_left_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>, <parameter><type><name>a_left</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_left = a_left; } while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_COMPACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_right_get</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a_type *) (((intptr_t) (a_node)-&gt;a_field.rbn_right_red) &amp; ((ssize_t)-2)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_right_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>, <parameter><type><name>a_right</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_right_red = (a_type *) (((uintptr_t) a_right) | (((uintptr_t) (a_node)-&gt;a_field.rbn_right_red) &amp; ((size_t)1))); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_red_get</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bool) (((uintptr_t) (a_node)-&gt;a_field.rbn_right_red) &amp; ((size_t)1)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_color_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>, <parameter><type><name>a_red</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_right_red = (a_type *) ((((intptr_t) (a_node)-&gt;a_field.rbn_right_red) &amp; ((ssize_t)-2)) | ((ssize_t)a_red)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_red_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_right_red = (a_type *) (((uintptr_t) (a_node)-&gt;a_field.rbn_right_red) | ((size_t)1)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_black_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_right_red = (a_type *) (((intptr_t) (a_node)-&gt;a_field.rbn_right_red) &amp; ((ssize_t)-2)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbt_node_new</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_rbt</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(((uintptr_t)(a_node) &amp; 0x1) == 0); rbtn_left_set(a_type, a_field, (a_node), NULL); rbtn_right_set(a_type, a_field, (a_node), NULL); rbtn_red_set(a_type, a_field, (a_node)); } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_right_get</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a_node)-&gt;a_field.rbn_right)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_right_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>, <parameter><type><name>a_right</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_right = a_right; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_red_get</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a_node)-&gt;a_field.rbn_red)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_color_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>, <parameter><type><name>a_red</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_red = (a_red); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_red_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_red = true; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_black_set</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_node)-&gt;a_field.rbn_red = false; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbt_node_new</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_rbt</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { rbtn_left_set(a_type, a_field, (a_node), NULL); rbtn_right_set(a_type, a_field, (a_node), NULL); rbtn_red_set(a_type, a_field, (a_node)); } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_new</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_rbt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a_rbt)-&gt;rbt_root = NULL; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_first</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_rbt</name></type></parameter>, <parameter><type><name>a_root</name></type></parameter>, <parameter><type><name>r_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (r_node) = (a_root); if ((r_node) != NULL) { for (; rbtn_left_get(a_type, a_field, (r_node)) != NULL; (r_node) = rbtn_left_get(a_type, a_field, (r_node))) { } } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_last</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_rbt</name></type></parameter>, <parameter><type><name>a_root</name></type></parameter>, <parameter><type><name>r_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (r_node) = (a_root); if ((r_node) != NULL) { for (; rbtn_right_get(a_type, a_field, (r_node)) != NULL; (r_node) = rbtn_right_get(a_type, a_field, (r_node))) { } } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_rotate_left</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>, <parameter><type><name>r_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (r_node) = rbtn_right_get(a_type, a_field, (a_node)); rbtn_right_set(a_type, a_field, (a_node), rbtn_left_get(a_type, a_field, (r_node))); rbtn_left_set(a_type, a_field, (r_node), (a_node)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_rotate_right</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_node</name></type></parameter>, <parameter><type><name>r_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (r_node) = rbtn_left_get(a_type, a_field, (a_node)); rbtn_left_set(a_type, a_field, (a_node), rbtn_right_get(a_type, a_field, (r_node))); rbtn_right_set(a_type, a_field, (r_node), (a_node)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_proto</name><parameter_list>(<parameter><type><name>a_attr</name></type></parameter>, <parameter><type><name>a_prefix</name></type></parameter>, <parameter><type><name>a_rbt_type</name></type></parameter>, <parameter><type><name>a_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a_attr void a_prefix##new(a_rbt_type *rbtree); a_attr bool a_prefix##empty(a_rbt_type *rbtree); a_attr a_type * a_prefix##first(a_rbt_type *rbtree); a_attr a_type * a_prefix##last(a_rbt_type *rbtree); a_attr a_type * a_prefix##next(a_rbt_type *rbtree, a_type *node); a_attr a_type * a_prefix##prev(a_rbt_type *rbtree, a_type *node); a_attr a_type * a_prefix##search(a_rbt_type *rbtree, const a_type *key); a_attr a_type * a_prefix##nsearch(a_rbt_type *rbtree, const a_type *key); a_attr a_type * a_prefix##psearch(a_rbt_type *rbtree, const a_type *key); a_attr void a_prefix##insert(a_rbt_type *rbtree, a_type *node); a_attr void a_prefix##remove(a_rbt_type *rbtree, a_type *node); a_attr a_type * a_prefix##iter(a_rbt_type *rbtree, a_type *start, a_type *(*cb)( a_rbt_type *, a_type *, void *), void *arg); a_attr a_type * a_prefix##reverse_iter(a_rbt_type *rbtree, a_type *start, a_type *(*cb)(a_rbt_type *, a_type *, void *), void *arg); a_attr void a_prefix##destroy(a_rbt_type *rbtree, void (*cb)(a_type *, void *), void *arg);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_gen</name><parameter_list>(<parameter><type><name>a_attr</name></type></parameter>, <parameter><type><name>a_prefix</name></type></parameter>, <parameter><type><name>a_rbt_type</name></type></parameter>, <parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a_attr void a_prefix##new(a_rbt_type *rbtree) { rb_new(a_type, a_field, rbtree); } a_attr bool a_prefix##empty(a_rbt_type *rbtree) { return (rbtree-&gt;rbt_root == NULL); } a_attr a_type * a_prefix##first(a_rbt_type *rbtree) { a_type *ret; rbtn_first(a_type, a_field, rbtree, rbtree-&gt;rbt_root, ret); return (ret); } a_attr a_type * a_prefix##last(a_rbt_type *rbtree) { a_type *ret; rbtn_last(a_type, a_field, rbtree, rbtree-&gt;rbt_root, ret); return (ret); } a_attr a_type * a_prefix##next(a_rbt_type *rbtree, a_type *node) { a_type *ret; if (rbtn_right_get(a_type, a_field, node) != NULL) { rbtn_first(a_type, a_field, rbtree, rbtn_right_get(a_type, a_field, node), ret); } else { a_type *tnode = rbtree-&gt;rbt_root; assert(tnode != NULL); ret = NULL; while (true) { int cmp = (a_cmp)(node, tnode); if (cmp &lt; 0) { ret = tnode; tnode = rbtn_left_get(a_type, a_field, tnode); } else if (cmp &gt; 0) { tnode = rbtn_right_get(a_type, a_field, tnode); } else { break; } assert(tnode != NULL); } } return (ret); } a_attr a_type * a_prefix##prev(a_rbt_type *rbtree, a_type *node) { a_type *ret; if (rbtn_left_get(a_type, a_field, node) != NULL) { rbtn_last(a_type, a_field, rbtree, rbtn_left_get(a_type, a_field, node), ret); } else { a_type *tnode = rbtree-&gt;rbt_root; assert(tnode != NULL); ret = NULL; while (true) { int cmp = (a_cmp)(node, tnode); if (cmp &lt; 0) { tnode = rbtn_left_get(a_type, a_field, tnode); } else if (cmp &gt; 0) { ret = tnode; tnode = rbtn_right_get(a_type, a_field, tnode); } else { break; } assert(tnode != NULL); } } return (ret); } a_attr a_type * a_prefix##search(a_rbt_type *rbtree, const a_type *key) { a_type *ret; int cmp; ret = rbtree-&gt;rbt_root; while (ret != NULL &amp;&amp; (cmp = (a_cmp)(key, ret)) != 0) { if (cmp &lt; 0) { ret = rbtn_left_get(a_type, a_field, ret); } else { ret = rbtn_right_get(a_type, a_field, ret); } } return (ret); } a_attr a_type * a_prefix##nsearch(a_rbt_type *rbtree, const a_type *key) { a_type *ret; a_type *tnode = rbtree-&gt;rbt_root; ret = NULL; while (tnode != NULL) { int cmp = (a_cmp)(key, tnode); if (cmp &lt; 0) { ret = tnode; tnode = rbtn_left_get(a_type, a_field, tnode); } else if (cmp &gt; 0) { tnode = rbtn_right_get(a_type, a_field, tnode); } else { ret = tnode; break; } } return (ret); } a_attr a_type * a_prefix##psearch(a_rbt_type *rbtree, const a_type *key) { a_type *ret; a_type *tnode = rbtree-&gt;rbt_root; ret = NULL; while (tnode != NULL) { int cmp = (a_cmp)(key, tnode); if (cmp &lt; 0) { tnode = rbtn_left_get(a_type, a_field, tnode); } else if (cmp &gt; 0) { ret = tnode; tnode = rbtn_right_get(a_type, a_field, tnode); } else { ret = tnode; break; } } return (ret); } a_attr void a_prefix##insert(a_rbt_type *rbtree, a_type *node) { struct { a_type *node; int cmp; } path[sizeof(void *) &lt;&lt; 4], *pathp; rbt_node_new(a_type, a_field, rbtree, node); path-&gt;node = rbtree-&gt;rbt_root; for (pathp = path; pathp-&gt;node != NULL; pathp++) { int cmp = pathp-&gt;cmp = a_cmp(node, pathp-&gt;node); assert(cmp != 0); if (cmp &lt; 0) { pathp[1].node = rbtn_left_get(a_type, a_field, pathp-&gt;node); } else { pathp[1].node = rbtn_right_get(a_type, a_field, pathp-&gt;node); } } pathp-&gt;node = node; for (pathp--; (uintptr_t)pathp &gt;= (uintptr_t)path; pathp--) { a_type *cnode = pathp-&gt;node; if (pathp-&gt;cmp &lt; 0) { a_type *left = pathp[1].node; rbtn_left_set(a_type, a_field, cnode, left); if (rbtn_red_get(a_type, a_field, left)) { a_type *leftleft = rbtn_left_get(a_type, a_field, left);if (leftleft != NULL &amp;&amp; rbtn_red_get(a_type, a_field, leftleft)) { a_type *tnode; rbtn_black_set(a_type, a_field, leftleft); rbtn_rotate_right(a_type, a_field, cnode, tnode); cnode = tnode; } } else { return; } } else { a_type *right = pathp[1].node; rbtn_right_set(a_type, a_field, cnode, right); if (rbtn_red_get(a_type, a_field, right)) { a_type *left = rbtn_left_get(a_type, a_field, cnode); if (left != NULL &amp;&amp; rbtn_red_get(a_type, a_field, left)) { rbtn_black_set(a_type, a_field, left); rbtn_black_set(a_type, a_field, right); rbtn_red_set(a_type, a_field, cnode); } else { a_type *tnode; bool tred = rbtn_red_get(a_type, a_field, cnode); rbtn_rotate_left(a_type, a_field, cnode, tnode); rbtn_color_set(a_type, a_field, tnode, tred); rbtn_red_set(a_type, a_field, cnode); cnode = tnode; } } else { return; } } pathp-&gt;node = cnode; } rbtree-&gt;rbt_root = path-&gt;node; rbtn_black_set(a_type, a_field, rbtree-&gt;rbt_root); } a_attr void a_prefix##remove(a_rbt_type *rbtree, a_type *node) { struct { a_type *node; int cmp; } *pathp, *nodep, path[sizeof(void *) &lt;&lt; 4]; nodep = NULL; path-&gt;node = rbtree-&gt;rbt_root; for (pathp = path; pathp-&gt;node != NULL; pathp++) { int cmp = pathp-&gt;cmp = a_cmp(node, pathp-&gt;node); if (cmp &lt; 0) { pathp[1].node = rbtn_left_get(a_type, a_field, pathp-&gt;node); } else { pathp[1].node = rbtn_right_get(a_type, a_field, pathp-&gt;node); if (cmp == 0) { pathp-&gt;cmp = 1; nodep = pathp; for (pathp++; pathp-&gt;node != NULL; pathp++) { pathp-&gt;cmp = -1; pathp[1].node = rbtn_left_get(a_type, a_field, pathp-&gt;node); } break; } } } assert(nodep-&gt;node == node); pathp--; if (pathp-&gt;node != node) { bool tred = rbtn_red_get(a_type, a_field, pathp-&gt;node); rbtn_color_set(a_type, a_field, pathp-&gt;node, rbtn_red_get(a_type, a_field, node)); rbtn_left_set(a_type, a_field, pathp-&gt;node, rbtn_left_get(a_type, a_field, node)); rbtn_right_set(a_type, a_field, pathp-&gt;node, rbtn_right_get(a_type, a_field, node)); rbtn_color_set(a_type, a_field, node, tred); nodep-&gt;node = pathp-&gt;node; pathp-&gt;node = node; if (nodep == path) { rbtree-&gt;rbt_root = nodep-&gt;node; } else { if (nodep[-1].cmp &lt; 0) { rbtn_left_set(a_type, a_field, nodep[-1].node, nodep-&gt;node); } else { rbtn_right_set(a_type, a_field, nodep[-1].node, nodep-&gt;node); } } } else { a_type *left = rbtn_left_get(a_type, a_field, node); if (left != NULL) { assert(!rbtn_red_get(a_type, a_field, node)); assert(rbtn_red_get(a_type, a_field, left)); rbtn_black_set(a_type, a_field, left); if (pathp == path) { rbtree-&gt;rbt_root = left; } else { if (pathp[-1].cmp &lt; 0) { rbtn_left_set(a_type, a_field, pathp[-1].node, left); } else { rbtn_right_set(a_type, a_field, pathp[-1].node, left); } } return; } else if (pathp == path) { rbtree-&gt;rbt_root = NULL; return; } } if (rbtn_red_get(a_type, a_field, pathp-&gt;node)) { assert(pathp[-1].cmp &lt; 0); rbtn_left_set(a_type, a_field, pathp[-1].node, NULL); return; } pathp-&gt;node = NULL; for (pathp--; (uintptr_t)pathp &gt;= (uintptr_t)path; pathp--) { assert(pathp-&gt;cmp != 0); if (pathp-&gt;cmp &lt; 0) { rbtn_left_set(a_type, a_field, pathp-&gt;node, pathp[1].node); if (rbtn_red_get(a_type, a_field, pathp-&gt;node)) { a_type *right = rbtn_right_get(a_type, a_field, pathp-&gt;node); a_type *rightleft = rbtn_left_get(a_type, a_field, right); a_type *tnode; if (rightleft != NULL &amp;&amp; rbtn_red_get(a_type, a_field, rightleft)) { rbtn_black_set(a_type, a_field, pathp-&gt;node); rbtn_rotate_right(a_type, a_field, right, tnode); rbtn_right_set(a_type, a_field, pathp-&gt;node, tnode);rbtn_rotate_left(a_type, a_field, pathp-&gt;node, tnode); } else { rbtn_rotate_left(a_type, a_field, pathp-&gt;node, tnode); } assert((uintptr_t)pathp &gt; (uintptr_t)path); if (pathp[-1].cmp &lt; 0) { rbtn_left_set(a_type, a_field, pathp[-1].node, tnode); } else { rbtn_right_set(a_type, a_field, pathp[-1].node, tnode); } return; } else { a_type *right = rbtn_right_get(a_type, a_field, pathp-&gt;node); a_type *rightleft = rbtn_left_get(a_type, a_field, right); if (rightleft != NULL &amp;&amp; rbtn_red_get(a_type, a_field, rightleft)) { a_type *tnode; rbtn_black_set(a_type, a_field, rightleft); rbtn_rotate_right(a_type, a_field, right, tnode); rbtn_right_set(a_type, a_field, pathp-&gt;node, tnode);rbtn_rotate_left(a_type, a_field, pathp-&gt;node, tnode); if (pathp == path) { rbtree-&gt;rbt_root = tnode; } else { if (pathp[-1].cmp &lt; 0) { rbtn_left_set(a_type, a_field, pathp[-1].node, tnode); } else { rbtn_right_set(a_type, a_field, pathp[-1].node, tnode); } } return; } else { a_type *tnode; rbtn_red_set(a_type, a_field, pathp-&gt;node); rbtn_rotate_left(a_type, a_field, pathp-&gt;node, tnode); pathp-&gt;node = tnode; } } } else { a_type *left; rbtn_right_set(a_type, a_field, pathp-&gt;node, pathp[1].node); left = rbtn_left_get(a_type, a_field, pathp-&gt;node); if (rbtn_red_get(a_type, a_field, left)) { a_type *tnode; a_type *leftright = rbtn_right_get(a_type, a_field, left); a_type *leftrightleft = rbtn_left_get(a_type, a_field, leftright); if (leftrightleft != NULL &amp;&amp; rbtn_red_get(a_type, a_field, leftrightleft)) { a_type *unode; rbtn_black_set(a_type, a_field, leftrightleft); rbtn_rotate_right(a_type, a_field, pathp-&gt;node, unode); rbtn_rotate_right(a_type, a_field, pathp-&gt;node, tnode); rbtn_right_set(a_type, a_field, unode, tnode); rbtn_rotate_left(a_type, a_field, unode, tnode); } else { assert(leftright != NULL); rbtn_red_set(a_type, a_field, leftright); rbtn_rotate_right(a_type, a_field, pathp-&gt;node, tnode); rbtn_black_set(a_type, a_field, tnode); } if (pathp == path) { rbtree-&gt;rbt_root = tnode; } else { if (pathp[-1].cmp &lt; 0) { rbtn_left_set(a_type, a_field, pathp[-1].node, tnode); } else { rbtn_right_set(a_type, a_field, pathp[-1].node, tnode); } } return; } else if (rbtn_red_get(a_type, a_field, pathp-&gt;node)) { a_type *leftleft = rbtn_left_get(a_type, a_field, left);if (leftleft != NULL &amp;&amp; rbtn_red_get(a_type, a_field, leftleft)) { a_type *tnode; rbtn_black_set(a_type, a_field, pathp-&gt;node); rbtn_red_set(a_type, a_field, left); rbtn_black_set(a_type, a_field, leftleft); rbtn_rotate_right(a_type, a_field, pathp-&gt;node, tnode); assert((uintptr_t)pathp &gt; (uintptr_t)path); if (pathp[-1].cmp &lt; 0) { rbtn_left_set(a_type, a_field, pathp[-1].node, tnode); } else { rbtn_right_set(a_type, a_field, pathp[-1].node, tnode); } return; } else { rbtn_red_set(a_type, a_field, left); rbtn_black_set(a_type, a_field, pathp-&gt;node); return; } } else { a_type *leftleft = rbtn_left_get(a_type, a_field, left);if (leftleft != NULL &amp;&amp; rbtn_red_get(a_type, a_field, leftleft)) { a_type *tnode; rbtn_black_set(a_type, a_field, leftleft); rbtn_rotate_right(a_type, a_field, pathp-&gt;node, tnode); if (pathp == path) { rbtree-&gt;rbt_root = tnode; } else { if (pathp[-1].cmp &lt; 0) { rbtn_left_set(a_type, a_field, pathp[-1].node, tnode); } else { rbtn_right_set(a_type, a_field, pathp[-1].node, tnode); } } return; } else { rbtn_red_set(a_type, a_field, left); } } } } rbtree-&gt;rbt_root = path-&gt;node; assert(!rbtn_red_get(a_type, a_field, rbtree-&gt;rbt_root)); } a_attr a_type * a_prefix##iter_recurse(a_rbt_type *rbtree, a_type *node, a_type *(*cb)(a_rbt_type *, a_type *, void *), void *arg) { if (node == NULL) { return (NULL); } else { a_type *ret; if ((ret = a_prefix##iter_recurse(rbtree, rbtn_left_get(a_type, a_field, node), cb, arg)) != NULL || (ret = cb(rbtree, node, arg)) != NULL) { return (ret); } return (a_prefix##iter_recurse(rbtree, rbtn_right_get(a_type, a_field, node), cb, arg)); } } a_attr a_type * a_prefix##iter_start(a_rbt_type *rbtree, a_type *start, a_type *node, a_type *(*cb)(a_rbt_type *, a_type *, void *), void *arg) { int cmp = a_cmp(start, node); if (cmp &lt; 0) { a_type *ret; if ((ret = a_prefix##iter_start(rbtree, start, rbtn_left_get(a_type, a_field, node), cb, arg)) != NULL || (ret = cb(rbtree, node, arg)) != NULL) { return (ret); } return (a_prefix##iter_recurse(rbtree, rbtn_right_get(a_type, a_field, node), cb, arg)); } else if (cmp &gt; 0) { return (a_prefix##iter_start(rbtree, start, rbtn_right_get(a_type, a_field, node), cb, arg)); } else { a_type *ret; if ((ret = cb(rbtree, node, arg)) != NULL) { return (ret); } return (a_prefix##iter_recurse(rbtree, rbtn_right_get(a_type, a_field, node), cb, arg)); } } a_attr a_type * a_prefix##iter(a_rbt_type *rbtree, a_type *start, a_type *(*cb)( a_rbt_type *, a_type *, void *), void *arg) { a_type *ret; if (start != NULL) { ret = a_prefix##iter_start(rbtree, start, rbtree-&gt;rbt_root, cb, arg); } else { ret = a_prefix##iter_recurse(rbtree, rbtree-&gt;rbt_root, cb, arg);} return (ret); } a_attr a_type * a_prefix##reverse_iter_recurse(a_rbt_type *rbtree, a_type *node, a_type *(*cb)(a_rbt_type *, a_type *, void *), void *arg) { if (node == NULL) { return (NULL); } else { a_type *ret; if ((ret = a_prefix##reverse_iter_recurse(rbtree, rbtn_right_get(a_type, a_field, node), cb, arg)) != NULL || (ret = cb(rbtree, node, arg)) != NULL) { return (ret); } return (a_prefix##reverse_iter_recurse(rbtree, rbtn_left_get(a_type, a_field, node), cb, arg)); } } a_attr a_type * a_prefix##reverse_iter_start(a_rbt_type *rbtree, a_type *start, a_type *node, a_type *(*cb)(a_rbt_type *, a_type *, void *), void *arg) { int cmp = a_cmp(start, node); if (cmp &gt; 0) { a_type *ret; if ((ret = a_prefix##reverse_iter_start(rbtree, start, rbtn_right_get(a_type, a_field, node), cb, arg)) != NULL || (ret = cb(rbtree, node, arg)) != NULL) { return (ret); } return (a_prefix##reverse_iter_recurse(rbtree, rbtn_left_get(a_type, a_field, node), cb, arg)); } else if (cmp &lt; 0) { return (a_prefix##reverse_iter_start(rbtree, start, rbtn_left_get(a_type, a_field, node), cb, arg)); } else { a_type *ret; if ((ret = cb(rbtree, node, arg)) != NULL) { return (ret); } return (a_prefix##reverse_iter_recurse(rbtree, rbtn_left_get(a_type, a_field, node), cb, arg)); } } a_attr a_type * a_prefix##reverse_iter(a_rbt_type *rbtree, a_type *start, a_type *(*cb)(a_rbt_type *, a_type *, void *), void *arg) { a_type *ret; if (start != NULL) { ret = a_prefix##reverse_iter_start(rbtree, start, rbtree-&gt;rbt_root, cb, arg); } else { ret = a_prefix##reverse_iter_recurse(rbtree, rbtree-&gt;rbt_root, cb, arg); } return (ret); } a_attr void a_prefix##destroy_recurse(a_rbt_type *rbtree, a_type *node, void (*cb)( a_type *, void *), void *arg) { if (node == NULL) { return; } a_prefix##destroy_recurse(rbtree, rbtn_left_get(a_type, a_field, node), cb, arg); rbtn_left_set(a_type, a_field, (node), NULL); a_prefix##destroy_recurse(rbtree, rbtn_right_get(a_type, a_field, node), cb, arg); rbtn_right_set(a_type, a_field, (node), NULL); if (cb) { cb(node, arg); } } a_attr void a_prefix##destroy(a_rbt_type *rbtree, void (*cb)(a_type *, void *), void *arg) { a_prefix##destroy_recurse(rbtree, rbtree-&gt;rbt_root, cb, arg); rbtree-&gt;rbt_root = NULL; }</cpp:value></cpp:define>

</unit>
