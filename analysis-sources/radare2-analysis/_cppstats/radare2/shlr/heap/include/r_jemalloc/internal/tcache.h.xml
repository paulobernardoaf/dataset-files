<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\tcache.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>tcache_bin_info_s</name></name></type> <name>tcache_bin_info_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>tcache_bin_s</name></name></type> <name>tcache_bin_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>tcache_s</name></name></type> <name>tcache_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>tcaches_s</name></name></type> <name>tcaches_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_STATE_DISABLED</name></cpp:macro> <cpp:value>((tcache_t *)(uintptr_t)1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_STATE_REINCARNATED</name></cpp:macro> <cpp:value>((tcache_t *)(uintptr_t)2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_STATE_PURGATORY</name></cpp:macro> <cpp:value>((tcache_t *)(uintptr_t)3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_STATE_MAX</name></cpp:macro> <cpp:value>TCACHE_STATE_PURGATORY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_NSLOTS_SMALL_MIN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_NSLOTS_SMALL_MAX</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_NSLOTS_LARGE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_TCACHE_MAXCLASS_DEFAULT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_GC_SWEEP</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCACHE_GC_INCR</name></cpp:macro> <cpp:value>((TCACHE_GC_SWEEP / JM_NBINS) + ((TCACHE_GC_SWEEP / JM_NBINS == 0) ? 0 : 1))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <block>{

<decl><name>tcache_enabled_false</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>tcache_enabled_true</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>tcache_enabled_default</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>tcache_enabled_t</name>;</typedef>

<struct>struct <name>tcache_bin_info_s</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>ncached_max</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>tcache_bin_s</name> <block>{

<decl_stmt><decl><type><name>tcache_bin_stats_t</name></type> <name>tstats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low_water</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_fill_div</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>ncached</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>avail</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>tcache_s</name> <block>{

<macro><name>ql_elm</name><argument_list>(<argument>tcache_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>prof_accumbytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ticker_t</name></type> <name>gc_ticker</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>szind_t</name></type> <name>next_gc_bin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>tcache_bin_t</name></type> <name><name>tbins</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>tcaches_s</name> <block>{

<union>union <block>{

<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcaches_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</union>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_tcache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>opt_lg_tcache_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>tcache_bin_info_t</name> <modifier>*</modifier></type><name>tcache_bin_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>nhbins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>tcache_maxclass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>tcaches_t</name> <modifier>*</modifier></type><name>tcaches</name></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>tcache_salloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_event_hard</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>tcache_alloc_small_hard</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,

<parameter><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>tcache_success</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_bin_flush_small</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_bin_flush_large</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>rem</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_arena_reassociate</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,

<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>oldarena</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>newarena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache_get_hard</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache_create</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_cleanup</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_enabled_cleanup</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_stats_merge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tcaches_create</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>r_ind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcaches_flush</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcaches_destroy</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tcache_boot</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>tcache_event</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tcache_enabled_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_enabled_set</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>tcache_alloc_easy</name><parameter_list>(<parameter><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>tcache_success</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>tcache_alloc_small</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>tcache_alloc_large</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_dalloc_small</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tcache_dalloc_large</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcaches_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_TCACHE_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>tcache_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcache_cleanup</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>tcache_enabled_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcache_enabled_t</name></type> <name>tcache_enabled</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>config_tcache</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tcache_enabled</name> <operator>=</operator> <call><name>tsd_tcache_enabled_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache_enabled</name> <operator>==</operator> <name>tcache_enabled_default</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tcache_enabled</name> <operator>=</operator> <operator>(</operator><name>tcache_enabled_t</name><operator>)</operator><name>opt_tcache</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tsd_tcache_enabled_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>bool</name><operator>)</operator><name>tcache_enabled</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>tcache_enabled_set</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcache_enabled_t</name></type> <name>tcache_enabled</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tcache_enabled</name> <operator>=</operator> <operator>(</operator><name>tcache_enabled_t</name><operator>)</operator><name>enabled</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tsd_tcache_enabled_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tcache_cleanup</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tcache_t</name> <modifier>*</modifier></type>

<name>tcache_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_tcache</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tcache</name> <operator>=</operator> <call><name>tsd_tcache_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>tcache</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tsd_nominal</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tcache</name> <operator>=</operator> <call><name>tcache_get_hard</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tsd_tcache_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>tcache</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>tcache_event</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>TCACHE_GC_INCR</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>ticker_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>gc_ticker</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tcache_event_hard</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type>

<name>tcache_alloc_easy</name><parameter_list>(<parameter><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>tcache_success</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tcache_success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tcache_success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>&lt;</operator> <name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type>

<name>tcache_alloc_small</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>tcache_success</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name> <name>usize</name></type> <name>JEMALLOC_CC_SILENCE_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>binind</name> <operator>&gt;</operator> <name>JM_NBINS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbin</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>tbins</name><index>[<expr><name>binind</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcache_alloc_easy</name><argument_list>(<argument><expr><name>tbin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcache_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>tcache_success</name> <operator>==</operator> <operator>(</operator><name>ret</name> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>tcache_success</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>tcache_hard_success</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>arena_choose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>arena</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcache_alloc_small_hard</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>,

<argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcache_hard_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache_hard_success</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>||</operator> <operator>(</operator><name>slow_path</name> <operator>&amp;&amp;</operator> <name>config_fill</name><operator>)</operator> <operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>index2size</name><argument_list>(<argument><expr><name>binind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_salloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slow_path</name> <operator>&amp;&amp;</operator> <name>config_fill</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_alloc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>arena_alloc_junk_small</name><argument_list>(<argument><expr><name>ret</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>arena_bin_info</name><index>[<expr><name>binind</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>opt_zero</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slow_path</name> <operator>&amp;&amp;</operator> <name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_alloc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>arena_alloc_junk_small</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_bin_info</name><index>[<expr><name>binind</name></expr>]</index></name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_prof</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>+=</operator> <name>usize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tcache_event</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type>

<name>tcache_alloc_large</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>tcache_success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>binind</name> <operator>&gt;</operator> <name>nhbins</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbin</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>tbins</name><index>[<expr><name>binind</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcache_alloc_easy</name><argument_list>(<argument><expr><name>tbin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcache_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>tcache_success</name> <operator>==</operator> <operator>(</operator><name>ret</name> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>tcache_success</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>arena_choose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>arena</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>arena_malloc_large</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <name>usize</name></type> <name>JEMALLOC_CC_SILENCE_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>||</operator> <operator>(</operator><name>slow_path</name> <operator>&amp;&amp;</operator> <name>config_fill</name><operator>)</operator> <operator>||</operator>

<call><name>unlikely</name><argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>index2size</name><argument_list>(<argument><expr><name>binind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize</name> <operator>&lt;=</operator> <name>tcache_maxclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <name>usize</name> <operator>==</operator> <name>LARGE_MINCLASS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name> <init>=

<expr><operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ret</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator>

<name>LG_PAGE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>arena_mapbits_large_binind_set</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>,

<argument><expr><name>BININD_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slow_path</name> <operator>&amp;&amp;</operator> <name>config_fill</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_alloc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>JEMALLOC_ALLOC_JUNK</name></expr></argument>,

<argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>opt_zero</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_prof</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>+=</operator> <name>usize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tcache_event</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>tcache_dalloc_small</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcache_bin_info_t</name> <modifier>*</modifier></type><name>tbin_info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_salloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SMALL_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slow_path</name> <operator>&amp;&amp;</operator> <name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_free</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arena_dalloc_junk_small</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_bin_info</name><index>[<expr><name>binind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbin</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>tbins</name><index>[<expr><name>binind</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tbin_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcache_bin_info</name><index>[<expr><name>binind</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>==</operator> <name><name>tbin_info</name><operator>-&gt;</operator><name>ncached_max</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcache_bin_flush_small</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>tbin_info</name><operator>-&gt;</operator><name>ncached_max</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>&lt;</operator> <name><name>tbin_info</name><operator>-&gt;</operator><name>ncached_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name><operator>)</operator> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcache_event</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>tcache_dalloc_large</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcache_bin_info_t</name> <modifier>*</modifier></type><name>tbin_info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <name>PAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_salloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>SMALL_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_salloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>tcache_maxclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>binind</name> <operator>=</operator> <call><name>size2index</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slow_path</name> <operator>&amp;&amp;</operator> <name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_free</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arena_dalloc_junk_large</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbin</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>tbins</name><index>[<expr><name>binind</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tbin_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcache_bin_info</name><index>[<expr><name>binind</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>==</operator> <name><name>tbin_info</name><operator>-&gt;</operator><name>ncached_max</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcache_bin_flush_large</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>tbin_info</name><operator>-&gt;</operator><name>ncached_max</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>&lt;</operator> <name><name>tbin_info</name><operator>-&gt;</operator><name>ncached_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name><operator>)</operator> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcache_event</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tcache_t</name> <modifier>*</modifier></type>

<name>tcaches_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tcaches_t</name> <modifier>*</modifier></type><name>elm</name> <init>= <expr><operator>&amp;</operator><name><name>tcaches</name><index>[<expr><name>ind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name> <operator>=</operator> <call><name>tcache_create</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>arena_choose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
