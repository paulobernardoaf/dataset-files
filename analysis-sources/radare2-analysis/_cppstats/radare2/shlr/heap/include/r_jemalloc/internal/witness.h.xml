<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\witness.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>witness_s</name></name></type> <name>witness_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name></type> <name>witness_rank_t</name>;</typedef>

<typedef>typedef <macro><name>ql_head</name><argument_list>(<argument>witness_t</argument>)</argument_list></macro> <expr_stmt><expr><name>witness_list_t</name></expr>;</expr_stmt></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>witness_comp_t</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_OMIT</name></cpp:macro> <cpp:value>0U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_MIN</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_INIT</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_CTL</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_TCACHES</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_ARENAS</name></cpp:macro> <cpp:value>3U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_DUMP</name></cpp:macro> <cpp:value>4U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_BT2GCTX</name></cpp:macro> <cpp:value>5U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_TDATAS</name></cpp:macro> <cpp:value>6U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_TDATA</name></cpp:macro> <cpp:value>7U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_GCTX</name></cpp:macro> <cpp:value>8U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_CORE</name></cpp:macro> <cpp:value>9U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_ARENA</name></cpp:macro> <cpp:value>9U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_ARENA_CHUNKS</name></cpp:macro> <cpp:value>10U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_ARENA_NODE_CACHE</name></cpp:macro> <cpp:value>11U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_BASE</name></cpp:macro> <cpp:value>12U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_LEAF</name></cpp:macro> <cpp:value>0xffffffffU</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_ARENA_BIN</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_ARENA_HUGE</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_DSS</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_ACTIVE</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_DUMP_SEQ</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_GDUMP</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_NEXT_THR_UID</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_RANK_PROF_THREAD_ACTIVE_INIT</name></cpp:macro> <cpp:value>WITNESS_RANK_LEAF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITNESS_INITIALIZER</name><parameter_list>(<parameter><type><name>rank</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{"initializer", rank, NULL, {NULL, NULL}}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>witness_s</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_rank_t</name></type> <name>rank</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_comp_t</name> <modifier>*</modifier></type><name>comp</name></decl>;</decl_stmt>

<macro><name>ql_elm</name><argument_list>(<argument>witness_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>witness_init</name><parameter_list>(<parameter><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>witness_rank_t</name></type> <name>rank</name></decl></parameter>,

<parameter><decl><type><name>witness_comp_t</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>witness_lock_error_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>witness_lock_error_t</name> <modifier>*</modifier></type><name>witness_lock_error</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>void</name></type> <name>witness_lock_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>witness_owner_error_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>witness_owner_error_t</name> <modifier>*</modifier></type><name>witness_owner_error</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>void</name></type> <name>witness_owner_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>witness_not_owner_error_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>witness_not_owner_error_t</name> <modifier>*</modifier></type><name>witness_not_owner_error</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>void</name></type> <name>witness_not_owner_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>witness_depth_error_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>witness_rank_t</name></type> <name>rank_inclusive</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>witness_depth_error_t</name> <modifier>*</modifier></type><name>witness_depth_error</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>void</name></type> <name>witness_depth_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl></parameter>,

<parameter><decl><type><name>witness_rank_t</name></type> <name>rank_inclusive</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>witnesses_cleanup</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_fork_cleanup</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_prefork</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>witness_owner</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_assert_owner</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_assert_not_owner</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_assert_depth_to_rank</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>witness_rank_t</name></type> <name>rank_inclusive</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_assert_depth</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_assert_lockless</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_lock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>witness_unlock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_MUTEX_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>witness_owner</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>witnesses</name> <operator>=</operator> <call><name>tsd_witnessesp_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ql_foreach</name><argument_list>(<argument>w</argument>, <argument>witnesses</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>witness</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>witness_assert_owner</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name> <operator>==</operator> <name>WITNESS_RANK_OMIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>witness_owner</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>witness_owner_error</name><argument_list>(<argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>witness_assert_not_owner</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name> <operator>==</operator> <name>WITNESS_RANK_OMIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>witnesses</name> <operator>=</operator> <call><name>tsd_witnessesp_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ql_foreach</name><argument_list>(<argument>w</argument>, <argument>witnesses</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>witness</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>witness_not_owner_error</name><argument_list>(<argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>witness_assert_depth_to_rank</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>witness_rank_t</name></type> <name>rank_inclusive</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>witnesses</name> <operator>=</operator> <call><name>tsd_witnessesp_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>ql_last</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<macro><name>ql_reverse_foreach</name><argument_list>(<argument>w</argument>, <argument>witnesses</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>rank</name></name> <operator>&lt;</operator> <name>rank_inclusive</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>depth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>witness_depth_error</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>, <argument><expr><name>rank_inclusive</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>witness_assert_depth</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>WITNESS_RANK_MIN</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>witness_assert_lockless</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>witness_lock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name> <operator>==</operator> <name>WITNESS_RANK_OMIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>witnesses</name> <operator>=</operator> <call><name>tsd_witnessesp_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>ql_last</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tsd_witness_fork_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>w</name><operator>-&gt;</operator><name>rank</name></name> <operator>&lt;=</operator> <name><name>witness</name><operator>-&gt;</operator><name>rank</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>rank</name></name> <operator>&gt;</operator> <name><name>witness</name><operator>-&gt;</operator><name>rank</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>witness_lock_error</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>rank</name></name> <operator>==</operator> <name><name>witness</name><operator>-&gt;</operator><name>rank</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>comp</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>w</name><operator>-&gt;</operator><name>comp</name></name> <operator>!=</operator>

<name><name>witness</name><operator>-&gt;</operator><name>comp</name></name> <operator>||</operator> <call><name><name>w</name><operator>-&gt;</operator><name>comp</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>witness_lock_error</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ql_elm_new</name><argument_list>(<argument><expr><name>witness</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>witness_unlock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name> <operator>==</operator> <name>WITNESS_RANK_OMIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>witness_owner</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>witnesses</name> <operator>=</operator> <call><name>tsd_witnessesp_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ql_remove</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>witness_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
