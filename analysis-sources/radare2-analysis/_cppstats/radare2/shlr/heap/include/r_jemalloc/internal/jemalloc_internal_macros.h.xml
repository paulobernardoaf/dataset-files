<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\jemalloc_internal_macros.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_DEBUG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_CODE_COVERAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALWAYS_INLINE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALWAYS_INLINE_C</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_INLINE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INLINE_C</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALWAYS_INLINE</name></cpp:macro> <cpp:value>static inline JEMALLOC_ATTR(unused) JEMALLOC_ATTR(always_inline)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALWAYS_INLINE_C</name></cpp:macro> <cpp:value>static inline JEMALLOC_ATTR(always_inline)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALWAYS_INLINE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ALWAYS_INLINE_C</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INLINE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INLINE_C</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>_inline</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZU</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZI</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ssize_t)z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QU</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)q)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QI</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int64_t)q)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KZU</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ZU(z##ULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KZI</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ZI(z##LL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KQU</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>QU(q##ULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KQI</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>QI(q##LL)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DECONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DECONST</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type)(uintptr_t)(const void *)(var))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAS_RESTRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>restrict</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
