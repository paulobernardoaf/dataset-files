<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\arena.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LARGE_MINCLASS</name></cpp:macro> <cpp:value>(ZU(1) &lt;&lt; LG_LARGE_MINCLASS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_RUN_MAXREGS</name></cpp:macro> <cpp:value>(LG_PAGE - LG_TINY_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_MAXREGS</name></cpp:macro> <cpp:value>(1U &lt;&lt; LG_RUN_MAXREGS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDZONE_MINSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_DIRTY_MULT_DEFAULT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>purge_mode_ratio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>purge_mode_decay</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>purge_mode_limit</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>purge_mode_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PURGE_DEFAULT</name></cpp:macro> <cpp:value>purge_mode_ratio</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECAY_TIME_DEFAULT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECAY_NTICKS_PER_UPDATE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>arena_runs_dirty_link_s</name></name></type> <name>arena_runs_dirty_link_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_avail_links_s</name></name></type> <name>arena_avail_links_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_run_s</name></name></type> <name>arena_run_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_chunk_map_bits_s</name></name></type> <name>arena_chunk_map_bits_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_chunk_map_misc_s</name></name></type> <name>arena_chunk_map_misc_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_chunk_s</name></name></type> <name>arena_chunk_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_bin_info_s</name></name></type> <name>arena_bin_info_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_decay_s</name></name></type> <name>arena_decay_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_bin_s</name></name></type> <name>arena_bin_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_s</name></name></type> <name>arena_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>arena_tdata_s</name></name></type> <name>arena_tdata_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ARENA_STRUCTS_A</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>arena_run_s</name> <block>{

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nfree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bitmap_t</name></type> <name><name>bitmap</name><index>[<expr><name>BITMAP_GROUPS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>arena_chunk_map_bits_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>bits</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_ALLOCATED</name></cpp:macro> <cpp:value>((size_t)0x01U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_LARGE</name></cpp:macro> <cpp:value>((size_t)0x02U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_STATE_MASK</name></cpp:macro> <cpp:value>((size_t)0x3U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_DECOMMITTED</name></cpp:macro> <cpp:value>((size_t)0x04U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_UNZEROED</name></cpp:macro> <cpp:value>((size_t)0x08U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_DIRTY</name></cpp:macro> <cpp:value>((size_t)0x10U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_FLAGS_MASK</name></cpp:macro> <cpp:value>((size_t)0x1cU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_BININD_SHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BININD_INVALID</name></cpp:macro> <cpp:value>((size_t)0xffU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_BININD_MASK</name></cpp:macro> <cpp:value>(BININD_INVALID &lt;&lt; CHUNK_MAP_BININD_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_BININD_INVALID</name></cpp:macro> <cpp:value>CHUNK_MAP_BININD_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_RUNIND_SHIFT</name></cpp:macro> <cpp:value>(CHUNK_MAP_BININD_SHIFT + 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_SIZE_SHIFT</name></cpp:macro> <cpp:value>(CHUNK_MAP_RUNIND_SHIFT - LG_PAGE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MAP_SIZE_MASK</name></cpp:macro> <cpp:value>(~(CHUNK_MAP_BININD_MASK | CHUNK_MAP_FLAGS_MASK | CHUNK_MAP_STATE_MASK))</cpp:value></cpp:define>

}</block>;</struct>

<struct>struct <name>arena_runs_dirty_link_s</name> <block>{

<macro><name>qr</name><argument_list>(<argument>arena_runs_dirty_link_t</argument>)</argument_list></macro> <expr_stmt><expr><name>rd_link</name></expr>;</expr_stmt>

}</block>;</struct>

<struct>struct <name>arena_chunk_map_misc_s</name> <block>{

<macro><name>phn</name><argument_list>(<argument>arena_chunk_map_misc_t</argument>)</argument_list></macro> <expr_stmt><expr><name>ph_link</name></expr>;</expr_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>arena_runs_dirty_link_t</name></type> <name>rd</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prof_tctx_pun</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>prof_tctx</name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>arena_run_t</name></type> <name>run</name></decl>;</decl_stmt>

}</block>;</union>

}</block>;</struct>

<typedef>typedef <macro><name>ph</name><argument_list>(<argument>arena_chunk_map_misc_t</argument>)</argument_list></macro> <expr_stmt><expr><name>arena_run_heap_t</name></expr>;</expr_stmt></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ARENA_STRUCTS_B</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>arena_chunk_s</name> <block>{

<decl_stmt><decl><type><name>extent_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hugepage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_chunk_map_bits_t</name></type> <name><name>map_bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>arena_bin_info_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>reg_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>redzone_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>reg_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>run_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nregs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>bitmap_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reg0_offset</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>arena_decay_s</name> <block>{

<decl_stmt><decl><type><name>ssize_t</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nstime_t</name></type> <name>interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nstime_t</name></type> <name>epoch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>jitter_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nstime_t</name></type> <name>deadline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ndirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>backlog</name><index>[<expr><name>SMOOTHSTEP_NSTEPS</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>arena_bin_s</name> <block>{

<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_run_t</name> <modifier>*</modifier></type><name>runcur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_run_heap_t</name></type> <name>runs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>malloc_bin_stats_t</name></type> <name>stats</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>arena_s</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>ind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>nthreads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_stats_t</name></type> <name>stats</name></decl>;</decl_stmt>

<macro><name>ql_head</name><argument_list>(<argument>tcache_t</argument>)</argument_list></macro> <expr_stmt><expr><name>tcache_ql</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>prof_accumbytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dss_prec_t</name></type> <name>dss_prec</name></decl>;</decl_stmt>

<macro><name>ql_head</name><argument_list>(<argument>extent_node_t</argument>)</argument_list></macro> <expr_stmt><expr><name>achunks</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extent_sn_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>spare</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>lg_dirty_mult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>purging</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nactive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ndirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_runs_dirty_link_t</name></type> <name>runs_dirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extent_node_t</name></type> <name>chunks_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_decay_t</name></type> <name>decay</name></decl>;</decl_stmt>

<macro><name>ql_head</name><argument_list>(<argument>extent_node_t</argument>)</argument_list></macro> <expr_stmt><expr><name>huge</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>huge_mtx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extent_tree_t</name></type> <name>chunks_szsnad_cached</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extent_tree_t</name></type> <name>chunks_ad_cached</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extent_tree_t</name></type> <name>chunks_szsnad_retained</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extent_tree_t</name></type> <name>chunks_ad_retained</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>chunks_mtx</name></decl>;</decl_stmt>

<macro><name>ql_head</name><argument_list>(<argument>extent_node_t</argument>)</argument_list></macro> <expr_stmt><expr><name>node_cache</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>node_cache_mtx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_hooks_t</name></type> <name>chunk_hooks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_bin_t</name></type> <name><name>bins</name><index>[<expr><name>JM_NBINS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_run_heap_t</name></type> <name><name>runs_avail</name><index>[<expr><name>NPSIZES</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>arena_tdata_s</name> <block>{

<decl_stmt><decl><type><name>ticker_t</name></type> <name>decay_ticker</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>large_pad</name> <init>=

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_CACHE_OBLIVIOUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>PAGE</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>opt_thp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>purge_mode_t</name></type> <name>opt_purge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>purge_mode_names</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>opt_lg_dirty_mult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>opt_decay_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>arena_bin_info_t</name></type> <name><name>arena_bin_info</name><index>[<expr><name>JM_NBINS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>map_bias</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>map_misc_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>arena_maxrun</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>large_maxclass</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>nlclasses</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>nhclasses</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<name>run_quantize_t</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>run_quantize_t</name> <modifier>*</modifier></type><name>run_quantize_floor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>run_quantize_t</name> <modifier>*</modifier></type><name>run_quantize_ceil</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>arena_chunk_cache_maybe_insert</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>cache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_chunk_cache_maybe_remove</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>cache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>arena_node_alloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_node_dalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>extent_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>arena_chunk_alloc_huge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>zero</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_chunk_dalloc_huge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_chunk_ralloc_huge_similar</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oldsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_chunk_ralloc_huge_shrink</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oldsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_chunk_ralloc_huge_expand</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oldsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>zero</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>arena_lg_dirty_mult_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_lg_dirty_mult_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name></type> <name>lg_dirty_mult</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>arena_decay_time_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_decay_time_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>decay_time</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_purge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>all</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_maybe_purge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_reset</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_tcache_fill_small</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>tcache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>prof_accumbytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_alloc_junk_small</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>arena_bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>arena_redzone_corruption_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>arena_redzone_corruption_t</name> <modifier>*</modifier></type><name>arena_redzone_corruption</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>arena_dalloc_junk_small_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>arena_bin_info_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>arena_dalloc_junk_small_t</name> <modifier>*</modifier></type><name>arena_dalloc_junk_small</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>void</name></type> <name>arena_dalloc_junk_small</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>arena_bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>arena_quarantine_junk_small</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>arena_malloc_large</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>ind</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>arena_malloc_hard</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>arena_palloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_prof_promoted</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_dalloc_bin_junked_locked</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>arena_chunk_map_bits_t</name> <modifier>*</modifier></type><name>bitselm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_dalloc_bin</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>, <parameter><decl><type><name>arena_chunk_map_bits_t</name> <modifier>*</modifier></type><name>bitselm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_dalloc_small</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>arena_dalloc_junk_large_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>arena_dalloc_junk_large_t</name> <modifier>*</modifier></type><name>arena_dalloc_junk_large</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>void</name></type> <name>arena_dalloc_junk_large</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>arena_dalloc_large_junked_locked</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_dalloc_large</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>arena_ralloc_junk_large_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>arena_ralloc_junk_large_t</name> <modifier>*</modifier></type><name>arena_ralloc_junk_large</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>bool</name></type> <name>arena_ralloc_no_move</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oldsize</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>extra</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>arena_ralloc</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oldsize</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>dss_prec_t</name></type> <name>arena_dss_prec_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_dss_prec_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>dss_prec_t</name></type> <name>dss_prec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>arena_lg_dirty_mult_default_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_lg_dirty_mult_default_set</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>lg_dirty_mult</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>arena_decay_time_default_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_decay_time_default_set</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>decay_time</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_basic_stats_merge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nthreads</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dss</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>lg_dirty_mult</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>decay_time</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nactive</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ndirty</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_stats_merge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nthreads</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dss</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>lg_dirty_mult</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>decay_time</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nactive</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ndirty</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>astats</name></decl></parameter>,

<parameter><decl><type><name>malloc_bin_stats_t</name> <modifier>*</modifier></type><name>bstats</name></decl></parameter>, <parameter><decl><type><name>malloc_large_stats_t</name> <modifier>*</modifier></type><name>lstats</name></decl></parameter>,

<parameter><decl><type><name>malloc_huge_stats_t</name> <modifier>*</modifier></type><name>hstats</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>arena_nthreads_get</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_nthreads_inc</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_nthreads_dec</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_extent_sn_next</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena_new</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_prefork0</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_prefork1</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_prefork2</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_prefork3</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>arena_chunk_map_bits_t</name> <modifier>*</modifier></type><name>arena_bitselm_get_mutable</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>arena_chunk_map_bits_t</name> <modifier>*</modifier></type><name>arena_bitselm_get_const</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>arena_miscelm_get_mutable</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>arena_miscelm_get_const</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_miscelm_to_pageind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>arena_miscelm_to_rpages</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>arena_rd_to_miscelm</name><parameter_list>(<parameter><decl><type><name>arena_runs_dirty_link_t</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>arena_run_to_miscelm</name><parameter_list>(<parameter><decl><type><name>arena_run_t</name> <modifier>*</modifier></type><name>run</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name> <modifier>*</modifier></type><name>arena_mapbitsp_get_mutable</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>arena_mapbitsp_get_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbitsp_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_size_decode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mapbits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_unallocated_size_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_large_size_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_small_runind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>szind_t</name></type> <name>arena_mapbits_binind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_dirty_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_unzeroed_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_decommitted_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_large_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_allocated_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_mapbitsp_write</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mapbits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_mapbits_size_encode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_mapbits_unallocated_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_mapbits_unallocated_size_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_mapbits_internal_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_mapbits_large_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_mapbits_large_binind_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_mapbits_small_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>runind</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_metadata_allocated_add</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_metadata_allocated_sub</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_metadata_allocated_get</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_prof_accum_impl</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_prof_accum_locked</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>arena_prof_accum</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>szind_t</name></type> <name>arena_ptr_small_binind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mapbits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>szind_t</name></type> <name>arena_bin_index</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>arena_bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_run_regind</name><parameter_list>(<parameter><decl><type><name>arena_run_t</name> <modifier>*</modifier></type><name>run</name></decl></parameter>, <parameter><decl><type><name>arena_bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>arena_prof_tctx_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_prof_tctx_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,

<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_prof_tctx_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>old_ptr</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>old_tctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_decay_ticks</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nticks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_decay_tick</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>arena_malloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>ind</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena_aalloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>arena_salloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>demote</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_dalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>arena_sdalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ENABLE_INLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ARENA_C_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ARENA_INLINE_A</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>arena_chunk_map_bits_t</name> <modifier>*</modifier></type>

<name>arena_bitselm_get_mutable</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>pageind</name> <operator>&lt;=</operator> <name>map_bias</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pageind</name> <operator>&gt;</operator> <name>chunk_npages</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>map_bits</name><index>[<expr><name>pageind</name><operator>-</operator><name>map_bias</name></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <specifier>const</specifier> <name>arena_chunk_map_bits_t</name> <modifier>*</modifier></type>

<name>arena_bitselm_get_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>arena_bitselm_get_mutable</name><argument_list>(<argument><expr><operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type>

<name>arena_miscelm_get_mutable</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>pageind</name> <operator>&lt;=</operator> <name>map_bias</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pageind</name> <operator>&gt;</operator> <name>chunk_npages</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>arena_chunk_map_misc_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name> <operator>+</operator>

<operator>(</operator><name>uintptr_t</name><operator>)</operator><name>map_misc_offset</name><operator>)</operator> <operator>+</operator> <name>pageind</name><operator>-</operator><name>map_bias</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <specifier>const</specifier> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type>

<name>arena_miscelm_get_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>arena_miscelm_get_mutable</name><argument_list>(<argument><expr><operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_miscelm_to_pageind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>miscelm</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name> <operator>+</operator>

<name>map_misc_offset</name><operator>)</operator><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>arena_chunk_map_misc_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>map_bias</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pageind</name> <operator>&gt;=</operator> <name>map_bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pageind</name> <operator>&lt;</operator> <name>chunk_npages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>pageind</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type>

<name>arena_miscelm_to_rpages</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name> <init>= <expr><call><name>arena_miscelm_to_pageind</name><argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name> <operator>+</operator> <operator>(</operator><name>pageind</name> <operator>&lt;&lt;</operator> <name>LG_PAGE</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type>

<name>arena_rd_to_miscelm</name><parameter_list>(<parameter><decl><type><name>arena_runs_dirty_link_t</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name> <init>= <expr><operator>(</operator><name>arena_chunk_map_misc_t</name>

<operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>rd</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>arena_chunk_map_misc_t</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><call><name>arena_miscelm_to_pageind</name> <argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>map_bias</name><operator>)</operator>

<operator>||</operator> <call><name>arena_miscelm_to_pageind</name> <argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>chunk_npages</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>miscelm</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type>

<name>arena_run_to_miscelm</name><parameter_list>(<parameter><decl><type><name>arena_run_t</name> <modifier>*</modifier></type><name>run</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name> <init>= <expr><operator>(</operator><name>arena_chunk_map_misc_t</name>

<operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>run</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>arena_chunk_map_misc_t</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><call><name>arena_miscelm_to_pageind</name> <argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>map_bias</name><operator>)</operator>

<operator>||</operator> <call><name>arena_miscelm_to_pageind</name> <argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>chunk_npages</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>miscelm</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name> <modifier>*</modifier></type>

<name>arena_mapbitsp_get_mutable</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>&amp;</operator><call><name>arena_bitselm_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bits</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type>

<name>arena_mapbitsp_get_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>arena_mapbitsp_get_mutable</name><argument_list>(<argument><expr><operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbitsp_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>*</operator><name>mapbitsp</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>arena_mapbitsp_read</name><argument_list>(<argument><expr><call><name>arena_mapbitsp_get_const</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_size_decode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mapbits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHUNK_MAP_SIZE_SHIFT</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_SIZE_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>CHUNK_MAP_SIZE_SHIFT</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CHUNK_MAP_SIZE_SHIFT</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_SIZE_MASK</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_SIZE_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>-</operator><name>CHUNK_MAP_SIZE_SHIFT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>size</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_unallocated_size_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <operator>(</operator><name>CHUNK_MAP_LARGE</name><operator>|</operator><name>CHUNK_MAP_ALLOCATED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>arena_mapbits_size_decode</name><argument_list>(<argument><expr><name>mapbits</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_large_size_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <operator>(</operator><name>CHUNK_MAP_LARGE</name><operator>|</operator><name>CHUNK_MAP_ALLOCATED</name><operator>)</operator><operator>)</operator> <operator>==</operator>

<operator>(</operator><name>CHUNK_MAP_LARGE</name><operator>|</operator><name>CHUNK_MAP_ALLOCATED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>arena_mapbits_size_decode</name><argument_list>(<argument><expr><name>mapbits</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_small_runind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <operator>(</operator><name>CHUNK_MAP_LARGE</name><operator>|</operator><name>CHUNK_MAP_ALLOCATED</name><operator>)</operator><operator>)</operator> <operator>==</operator>

<name>CHUNK_MAP_ALLOCATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>mapbits</name> <operator>&gt;&gt;</operator> <name>CHUNK_MAP_RUNIND_SHIFT</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>szind_t</name></type>

<name>arena_mapbits_binind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>binind</name> <operator>=</operator> <operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_BININD_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>CHUNK_MAP_BININD_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>&lt;</operator> <name>JM_NBINS</name> <operator>||</operator> <name>binind</name> <operator>==</operator> <name>BININD_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>binind</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_dirty_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_DECOMMITTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>mapbits</name> <operator>&amp;</operator>

<operator>(</operator><name>CHUNK_MAP_DIRTY</name><operator>|</operator><name>CHUNK_MAP_UNZEROED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_DIRTY</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_unzeroed_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_DECOMMITTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>mapbits</name> <operator>&amp;</operator>

<operator>(</operator><name>CHUNK_MAP_DIRTY</name><operator>|</operator><name>CHUNK_MAP_UNZEROED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_UNZEROED</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_decommitted_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_DECOMMITTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>mapbits</name> <operator>&amp;</operator>

<operator>(</operator><name>CHUNK_MAP_DIRTY</name><operator>|</operator><name>CHUNK_MAP_UNZEROED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_DECOMMITTED</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_large_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_LARGE</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_allocated_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_ALLOCATED</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_mapbitsp_write</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mapbits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mapbitsp</name> <operator>=</operator> <name>mapbits</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_mapbits_size_encode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHUNK_MAP_SIZE_SHIFT</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <name>size</name> <operator>&lt;&lt;</operator> <name>CHUNK_MAP_SIZE_SHIFT</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CHUNK_MAP_SIZE_SHIFT</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <operator>-</operator><name>CHUNK_MAP_SIZE_SHIFT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <operator>~</operator><name>CHUNK_MAP_SIZE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>mapbits</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_mapbits_unallocated_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name> <init>= <expr><call><name>arena_mapbitsp_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <name>PAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHUNK_MAP_FLAGS_MASK</name><operator>)</operator> <operator>==</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHUNK_MAP_DECOMMITTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator>

<operator>(</operator><name>CHUNK_MAP_DIRTY</name><operator>|</operator><name>CHUNK_MAP_UNZEROED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_mapbitsp_write</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>, <argument><expr><call><name>arena_mapbits_size_encode</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>|</operator>

<name>CHUNK_MAP_BININD_INVALID</name> <operator>|</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_mapbits_unallocated_size_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name> <init>= <expr><call><name>arena_mapbitsp_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name> <init>= <expr><call><name>arena_mapbitsp_read</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <name>PAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <operator>(</operator><name>CHUNK_MAP_LARGE</name><operator>|</operator><name>CHUNK_MAP_ALLOCATED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_mapbitsp_write</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>, <argument><expr><call><name>arena_mapbits_size_encode</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>|</operator>

<operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <operator>~</operator><name>CHUNK_MAP_SIZE_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_mapbits_internal_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name> <init>= <expr><call><name>arena_mapbitsp_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHUNK_MAP_UNZEROED</name><operator>)</operator> <operator>==</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_mapbitsp_write</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_mapbits_large_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name> <init>= <expr><call><name>arena_mapbitsp_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <name>PAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHUNK_MAP_FLAGS_MASK</name><operator>)</operator> <operator>==</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHUNK_MAP_DECOMMITTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator>

<operator>(</operator><name>CHUNK_MAP_DIRTY</name><operator>|</operator><name>CHUNK_MAP_UNZEROED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_mapbitsp_write</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>, <argument><expr><call><name>arena_mapbits_size_encode</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>|</operator>

<name>CHUNK_MAP_BININD_INVALID</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <name>CHUNK_MAP_LARGE</name> <operator>|</operator>

<name>CHUNK_MAP_ALLOCATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_mapbits_large_binind_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name> <init>= <expr><call><name>arena_mapbitsp_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name> <init>= <expr><call><name>arena_mapbitsp_read</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>&lt;=</operator> <name>BININD_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_large_size_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LARGE_MINCLASS</name> <operator>+</operator>

<name>large_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_mapbitsp_write</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>, <argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <operator>~</operator><name>CHUNK_MAP_BININD_MASK</name><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>binind</name> <operator>&lt;&lt;</operator> <name>CHUNK_MAP_BININD_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_mapbits_small_set</name><parameter_list>(<parameter><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>runind</name></decl></parameter>,

<parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapbitsp</name> <init>= <expr><call><name>arena_mapbitsp_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>&lt;</operator> <name>BININD_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pageind</name> <operator>-</operator> <name>runind</name> <operator>&gt;=</operator> <name>map_bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHUNK_MAP_UNZEROED</name><operator>)</operator> <operator>==</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_mapbitsp_write</name><argument_list>(<argument><expr><name>mapbitsp</name></expr></argument>, <argument><expr><operator>(</operator><name>runind</name> <operator>&lt;&lt;</operator> <name>CHUNK_MAP_RUNIND_SHIFT</name><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>binind</name> <operator>&lt;&lt;</operator> <name>CHUNK_MAP_BININD_SHIFT</name><operator>)</operator> <operator>|</operator> <name>flags</name> <operator>|</operator> <name>CHUNK_MAP_ALLOCATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>arena_metadata_allocated_add</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>atomic_add_z</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>metadata_allocated</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>arena_metadata_allocated_sub</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>atomic_sub_z</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>metadata_allocated</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>size_t</name></type>

<name>arena_metadata_allocated_get</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>atomic_read_z</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>metadata_allocated</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>arena_prof_accum_impl</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>config_prof</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>prof_interval</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>arena</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>+=</operator> <name>accumbytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arena</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>&gt;=</operator> <name>prof_interval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arena</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>-=</operator> <name>prof_interval</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>arena_prof_accum_locked</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>prof_interval</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>arena_prof_accum_impl</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>accumbytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>arena_prof_accum</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>prof_interval</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>arena_prof_accum_impl</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>accumbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>szind_t</name></type>

<name>arena_ptr_small_binind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mapbits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name></decl>;</decl_stmt>

<expr_stmt><expr><name>binind</name> <operator>=</operator> <operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_BININD_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>CHUNK_MAP_BININD_SHIFT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>actual_mapbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rpages_ind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>arena_run_t</name> <modifier>*</modifier></type><name>run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_bin_t</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>run_binind</name></decl>, <decl><type ref="prev"/><name>actual_binind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rpages</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>!=</operator> <name>BININD_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>&lt;</operator> <name>JM_NBINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>extent_node_arena_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pageind</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>actual_mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mapbits</name> <operator>==</operator> <name>actual_mapbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_large_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_allocated_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rpages_ind</name> <operator>=</operator> <name>pageind</name> <operator>-</operator> <call><name>arena_mapbits_small_runind_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>miscelm</name> <operator>=</operator> <call><name>arena_miscelm_get_const</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>rpages_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <operator>&amp;</operator><name><name>miscelm</name><operator>-&gt;</operator><name>run</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>run_binind</name> <operator>=</operator> <name><name>run</name><operator>-&gt;</operator><name>binind</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>run_binind</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>actual_binind</name> <operator>=</operator> <operator>(</operator><name>szind_t</name><operator>)</operator><operator>(</operator><name>bin</name> <operator>-</operator> <name><name>arena</name><operator>-&gt;</operator><name>bins</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>run_binind</name> <operator>==</operator> <name>actual_binind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bin_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>arena_bin_info</name><index>[<expr><name>actual_binind</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rpages</name> <operator>=</operator> <call><name>arena_miscelm_to_rpages</name><argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>rpages</name> <operator>+</operator>

<operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>bin_info</name><operator>-&gt;</operator><name>reg0_offset</name></name><operator>)</operator><operator>)</operator> <operator>%</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>reg_interval</name></name>

<operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>binind</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ARENA_INLINE_B</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>JEMALLOC_INLINE</name> <name>szind_t</name></type>

<name>arena_bin_index</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>arena_bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name> <init>= <expr><operator>(</operator><name>szind_t</name><operator>)</operator><operator>(</operator><name>bin</name> <operator>-</operator> <name><name>arena</name><operator>-&gt;</operator><name>bins</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>&lt;</operator> <name>JM_NBINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>binind</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>size_t</name></type>

<name>arena_run_regind</name><parameter_list>(<parameter><decl><type><name>arena_run_t</name> <modifier>*</modifier></type><name>run</name></decl></parameter>, <parameter><decl><type><name>arena_bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>interval</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>regind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>miscelm</name> <init>= <expr><call><name>arena_run_to_miscelm</name><argument_list>(<argument><expr><name>run</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rpages</name> <init>= <expr><call><name>arena_miscelm_to_rpages</name><argument_list>(<argument><expr><name>miscelm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>&gt;=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>rpages</name> <operator>+</operator>

<operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>bin_info</name><operator>-&gt;</operator><name>reg0_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>rpages</name> <operator>-</operator>

<name><name>bin_info</name><operator>-&gt;</operator><name>reg0_offset</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>interval</name> <operator>=</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>reg_interval</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>ffs_zu</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>interval</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interval</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regind</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_INV_SHIFT</name></cpp:macro> <cpp:value>((sizeof(size_t) &lt;&lt; 3) - LG_RUN_MAXREGS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_INV</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ZU(1) &lt;&lt; SIZE_INV_SHIFT) / (s)) + 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>interval_invs</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SIZE_INV</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>, <macro><name>SIZE_INV</name><argument_list>(<argument><literal type="number">31</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>interval</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>interval_invs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator>

<operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regind</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <name><name>interval_invs</name><index>[<expr><name>interval</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator>

<name>SIZE_INV_SHIFT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>regind</name> <operator>=</operator> <name>diff</name> <operator>/</operator> <name>interval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE_INV</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZE_INV_SHIFT</name></cpp:undef>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>diff</name> <operator>==</operator> <name>regind</name> <operator>*</operator> <name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regind</name> <operator>&lt;</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>nregs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>regind</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>prof_tctx_t</name> <modifier>*</modifier></type>

<name>arena_prof_tctx_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>config_prof</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ptr</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mapbits</name> <init>= <expr><call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_ALLOCATED</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_LARGE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>elm</name> <init>=

<expr><call><name>arena_miscelm_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>atomic_read_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>prof_tctx_pun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>huge_prof_tctx_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>arena_prof_tctx_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,

<parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_allocated_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>usize</name> <operator>&gt;</operator> <name>SMALL_MAXCLASS</name> <operator>||</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tctx</name> <operator>&gt;</operator>

<operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>elm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_large_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>elm</name> <operator>=</operator> <call><name>arena_miscelm_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_write_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>prof_tctx_pun</name></name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_large_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>huge_prof_tctx_set</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>arena_prof_tctx_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>old_ptr</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>old_tctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>usize</name> <operator>&gt;</operator> <name>SMALL_MAXCLASS</name> <operator>||</operator> <operator>(</operator><name>ptr</name> <operator>==</operator> <name>old_ptr</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>uintptr_t</name><operator>)</operator><name>old_tctx</name> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_chunk_map_misc_t</name> <modifier>*</modifier></type><name>elm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pageind</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator>

<name>LG_PAGE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_allocated_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator>

<literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_large_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>elm</name> <operator>=</operator> <call><name>arena_miscelm_get_mutable</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_write_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>prof_tctx_pun</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>huge_prof_tctx_reset</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_decay_ticks</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nticks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ticker_t</name> <modifier>*</modifier></type><name>decay_ticker</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decay_ticker</name> <operator>=</operator> <call><name>decay_ticker_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name><name>arena</name><operator>-&gt;</operator><name>ind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>decay_ticker</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>ticker_ticks</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>, <argument><expr><name>nticks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arena_purge</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_decay_tick</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>arena_decay_ticks</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type>

<name>arena_malloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>,

<parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>tcache</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>size</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SMALL_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>tcache_alloc_small</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>,

<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>tcache_maxclass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>tcache_alloc_large</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>,

<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;</operator> <name>tcache_maxclass</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>arena_malloc_hard</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>arena_t</name> <modifier>*</modifier></type>

<name>arena_aalloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><call><name>extent_node_arena_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><call><name>huge_aalloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>

<name>arena_salloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>demote</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pageind</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_allocated_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>binind</name> <operator>=</operator> <call><name>arena_mapbits_binind_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>binind</name> <operator>==</operator> <name>BININD_INVALID</name> <operator>||</operator> <operator>(</operator><name>config_prof</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>demote</name>

<operator>&amp;&amp;</operator> <call><name>arena_mapbits_large_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>config_cache_oblivious</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>&amp;</operator>

<name>PAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>arena_mapbits_large_size_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>-</operator>

<name>large_pad</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pageind</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ret</name><operator>+</operator><name>large_pad</name><operator>)</operator><operator>&gt;&gt;</operator><name>LG_PAGE</name><operator>)</operator> <operator>&lt;=</operator>

<name>chunk_npages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_dirty_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>==</operator>

<call><name>arena_mapbits_dirty_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>pageind</name><operator>+</operator><operator>(</operator><operator>(</operator><name>ret</name><operator>+</operator><name>large_pad</name><operator>)</operator><operator>&gt;&gt;</operator><name>LG_PAGE</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_large_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>arena_ptr_small_binind_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,

<argument><expr><call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>binind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>index2size</name><argument_list>(<argument><expr><name>binind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>huge_salloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_dalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name></decl>, <decl><type ref="prev"/><name>mapbits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pageind</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mapbits</name> <operator>=</operator> <call><name>arena_mapbits_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_allocated_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>(</operator><name>mapbits</name> <operator>&amp;</operator> <name>CHUNK_MAP_LARGE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name> <init>= <expr><call><name>arena_ptr_small_binind_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name>mapbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tcache_dalloc_small</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name>binind</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>arena_dalloc_small</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,

<argument><expr><call><name>extent_node_arena_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>arena_mapbits_large_size_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>config_cache_oblivious</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>&amp;</operator>

<name>PAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>size</name> <operator>-</operator> <name>large_pad</name> <operator>&lt;=</operator>

<name>tcache_maxclass</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcache_dalloc_large</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name>size</name> <operator>-</operator> <name>large_pad</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>arena_dalloc_large</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,

<argument><expr><call><name>extent_node_arena_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>huge_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>

<name>arena_sdalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>arena_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>arena_chunk_t</name> <operator>*</operator><operator>)</operator><call><name>CHUNK_ADDR2BASE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <name>opt_prof</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator>

<name>LG_PAGE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arena_mapbits_allocated_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator>

<literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>arena_mapbits_large_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>arena_mapbits_large_size_get</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>pageind</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>large_pad</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>s2u</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>s2u</name><argument_list>(<argument><expr><call><name>arena_salloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SMALL_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name> <init>= <expr><call><name>size2index</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tcache_dalloc_small</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name>binind</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pageind</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>-</operator>

<operator>(</operator><name>uintptr_t</name><operator>)</operator><name>chunk</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>arena_dalloc_small</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,

<argument><expr><call><name>extent_node_arena_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pageind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>config_cache_oblivious</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>&amp;</operator>

<name>PAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;=</operator> <name>tcache_maxclass</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcache_dalloc_large</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>arena_dalloc_large</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,

<argument><expr><call><name>extent_node_arena_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunk</name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>huge_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
