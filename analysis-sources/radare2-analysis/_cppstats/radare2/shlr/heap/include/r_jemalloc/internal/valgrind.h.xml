<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\valgrind.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_VALGRIND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MAKE_MEM_NOACCESS</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (unlikely(in_valgrind)) valgrind_make_mem_noaccess(ptr, usize); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (unlikely(in_valgrind)) valgrind_make_mem_undefined(ptr, usize); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MAKE_MEM_DEFINED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (unlikely(in_valgrind)) valgrind_make_mem_defined(ptr, usize); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MALLOC</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>tsdn</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>, <parameter><type><name>zero</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (unlikely(in_valgrind &amp;&amp; cond)) { VALGRIND_MALLOCLIKE_BLOCK(ptr, usize, p2rz(tsdn, ptr), zero); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC_MOVED_no</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>old_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC_MOVED_maybe</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>old_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ptr) != (old_ptr))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC_PTR_NULL_no</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC_PTR_NULL_maybe</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr == NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC_OLD_PTR_NULL_no</name><parameter_list>(<parameter><type><name>old_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC_OLD_PTR_NULL_maybe</name><parameter_list>(<parameter><type><name>old_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(old_ptr == NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC</name><parameter_list>(<parameter><type><name>moved</name></type></parameter>, <parameter><type><name>tsdn</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>, <parameter><type><name>ptr_null</name></type></parameter>, <parameter><type><name>old_ptr</name></type></parameter>, <parameter><type><name>old_usize</name></type></parameter>, <parameter><type><name>old_rzsize</name></type></parameter>, <parameter><type><name>old_ptr_null</name></type></parameter>, <parameter><type><name>zero</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (unlikely(in_valgrind)) { size_t rzsize = p2rz(tsdn, ptr); if (!JEMALLOC_VALGRIND_REALLOC_MOVED_##moved(ptr, old_ptr)) { VALGRIND_RESIZEINPLACE_BLOCK(ptr, old_usize, usize, rzsize); if (zero &amp;&amp; old_usize &lt; usize) { valgrind_make_mem_defined( (void *)((uintptr_t)ptr + old_usize), usize - old_usize); } } else { if (!JEMALLOC_VALGRIND_REALLOC_OLD_PTR_NULL_##old_ptr_null(old_ptr)) { valgrind_freelike_block(old_ptr, old_rzsize); } if (!JEMALLOC_VALGRIND_REALLOC_PTR_NULL_##ptr_null(ptr)) { size_t copy_size = (old_usize &lt; usize) ? old_usize : usize; size_t tail_size = usize - copy_size; VALGRIND_MALLOCLIKE_BLOCK(ptr, usize, rzsize, false); if (copy_size &gt; 0) { valgrind_make_mem_defined(ptr, copy_size); } if (zero &amp;&amp; tail_size &gt; 0) { valgrind_make_mem_defined( (void *)((uintptr_t)ptr + copy_size), tail_size); } } } } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>rzsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (unlikely(in_valgrind)) valgrind_freelike_block(ptr, rzsize); } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNNING_ON_VALGRIND</name></cpp:macro> <cpp:value>((unsigned)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MAKE_MEM_NOACCESS</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MAKE_MEM_DEFINED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_MALLOC</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>tsdn</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>, <parameter><type><name>zero</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_REALLOC</name><parameter_list>(<parameter><type><name>maybe_moved</name></type></parameter>, <parameter><type><name>tsdn</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>usize</name></type></parameter>, <parameter><type><name>ptr_maybe_null</name></type></parameter>, <parameter><type><name>old_ptr</name></type></parameter>, <parameter><type><name>old_usize</name></type></parameter>, <parameter><type><name>old_rzsize</name></type></parameter>, <parameter><type><name>old_ptr_maybe_null</name></type></parameter>, <parameter><type><name>zero</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_VALGRIND_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>rzsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_VALGRIND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>valgrind_make_mem_noaccess</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>valgrind_make_mem_undefined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>valgrind_make_mem_defined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>valgrind_freelike_block</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
