<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\heap\include\r_jemalloc\internal\atomic.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_EXTERNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_read_uint64</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_uint64(p, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_read_uint32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_uint32(p, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_read_p</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_p(p, NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_read_z</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_z(p, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_read_u</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_add_u(p, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_H_INLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

uint64_t atomic_add_uint64(uint64_t *p, uint64_t x);

uint64_t atomic_sub_uint64(uint64_t *p, uint64_t x);

bool atomic_cas_uint64(uint64_t *p, uint64_t c, uint64_t s);

void atomic_write_uint64(uint64_t *p, uint64_t x);

uint32_t atomic_add_uint32(uint32_t *p, uint32_t x);

uint32_t atomic_sub_uint32(uint32_t *p, uint32_t x);

bool atomic_cas_uint32(uint32_t *p, uint32_t c, uint32_t s);

void atomic_write_uint32(uint32_t *p, uint32_t x);

void *atomic_add_p(void **p, void *x);

void *atomic_sub_p(void **p, void *x);

bool atomic_cas_p(void **p, void *c, void *s);

void atomic_write_p(void **p, const void *x);

size_t atomic_add_z(size_t *p, size_t x);

size_t atomic_sub_z(size_t *p, size_t x);

bool atomic_cas_z(size_t *p, size_t c, size_t s);

void atomic_write_z(size_t *p, size_t x);

unsigned atomic_add_u(unsigned *p, unsigned x);

unsigned atomic_sub_u(unsigned *p, unsigned x);

bool atomic_cas_u(unsigned *p, unsigned c, unsigned s);

void atomic_write_u(unsigned *p, unsigned x);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<function><type><name>JEMALLOC_INLINE</name> <name>uint64_t</name></type>

<name>atomic_add_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint64_t</name></type>

<name>atomic_sub_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>p</name> <operator>-=</operator> <name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>atomic_cas_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>atomic_write_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>o</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>atomic_read_uint64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>atomic_cas_uint64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<function><type><name>JEMALLOC_INLINE</name> <name>uint32_t</name></type>

<name>atomic_add_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>uint32_t</name></type>

<name>atomic_sub_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>p</name> <operator>-=</operator> <name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>atomic_cas_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>atomic_write_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name> <modifier>*</modifier></type>

<name>atomic_add_p</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>atomic_add_uint64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>atomic_add_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

JEMALLOC_INLINE void *

atomic_sub_p(void **p, void *x)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

return ((void *)atomic_add_uint64((uint64_t *)p,

(uint64_t)-((int64_t)x)));

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:elif>

return ((void *)atomic_add_uint32((uint32_t *)p,

(uint32_t)-((int32_t)x)));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

JEMALLOC_INLINE bool

atomic_cas_p(void **p, void *c, void *s)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

return (atomic_cas_uint64((uint64_t *)p, (uint64_t)c, (uint64_t)s));

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:elif>

return (atomic_cas_uint32((uint32_t *)p, (uint32_t)c, (uint32_t)s));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>JEMALLOC_INLINE</name> <name>void</name></type>

<name>atomic_write_p</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>atomic_write_uint64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:elif>

<expr_stmt><expr><call><name>atomic_write_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>size_t</name></type>

<name>atomic_add_z</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>atomic_add_uint64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>atomic_add_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>size_t</name></type>

<name>atomic_sub_z</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>atomic_add_uint64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>x</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>atomic_add_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>x</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>JEMALLOC_INLINE</name> <name>bool</name></type>

<name>atomic_cas_z</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>atomic_cas_uint64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>atomic_cas_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

JEMALLOC_INLINE void

atomic_write_z(size_t *p, size_t x)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

atomic_write_uint64((uint64_t *)p, (uint64_t)x);

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:elif>

atomic_write_uint32((uint32_t *)p, (uint32_t)x);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

JEMALLOC_INLINE unsigned

atomic_add_u(unsigned *p, unsigned x)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_INT</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

return ((unsigned)atomic_add_uint64((uint64_t *)p, (uint64_t)x));

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_INT</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:elif>

return ((unsigned)atomic_add_uint32((uint32_t *)p, (uint32_t)x));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

JEMALLOC_INLINE unsigned

atomic_sub_u(unsigned *p, unsigned x)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_INT</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

return ((unsigned)atomic_add_uint64((uint64_t *)p,

(uint64_t)-((int64_t)x)));

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_INT</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:elif>

return ((unsigned)atomic_add_uint32((uint32_t *)p,

(uint32_t)-((int32_t)x)));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

JEMALLOC_INLINE bool

atomic_cas_u(unsigned *p, unsigned c, unsigned s)

{

if (sizeof(*p) == 8) {

return (atomic_cas_uint64((uint64_t *)p, (uint64_t)c, (uint64_t)s));

}

return (atomic_cas_uint32((uint32_t *)p, (uint32_t)c, (uint32_t)s));

}

JEMALLOC_INLINE void

atomic_write_u(unsigned *p, unsigned x)

{

if (sizeof(*p) == 8) {

atomic_write_uint64((uint64_t *)p, (uint64_t)x);

} else {

atomic_write_uint32((uint32_t *)p, (uint32_t)x);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
