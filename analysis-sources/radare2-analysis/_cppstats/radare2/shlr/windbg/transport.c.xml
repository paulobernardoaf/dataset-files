<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\windbg\transport.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>io_backend_t</name></type> <name>iob_pipe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>io_backend_t</name> <modifier>*</modifier></type><name><name>io_backends</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>iob_pipe</name></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>io_backend_t</name> <modifier>*</modifier></type><name>sel_backend</name> <init>= <expr><operator>&amp;</operator><name>iob_pipe</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>iob_select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>io_backend_t</name> <modifier>*</modifier></type><name>iob</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iob</name> <operator>=</operator> <name><name>io_backends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iob</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sel_backend</name> <operator>&amp;&amp;</operator> <name><name>sel_backend</name><operator>-&gt;</operator><name>deinit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>sel_backend</name><operator>-&gt;</operator><name>deinit</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sel_backend</name> <operator>=</operator> <name>iob</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sel_backend</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>sel_backend</name><operator>-&gt;</operator><name>init</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>iob_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sel_backend</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>sel_backend</name><operator>-&gt;</operator><name>open</name></name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>iob_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sel_backend</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>E_NOIF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>sel_backend</name><operator>-&gt;</operator><name>close</name></name> <argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>iob_config</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sel_backend</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>E_NOIF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>sel_backend</name><operator>-&gt;</operator><name>config</name></name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>iob_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RThreadLock</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>r_th_lock_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sel_backend</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>E_NOIF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>done</name> <operator>&lt;</operator> <name>buf_len</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>sel_backend</name><operator>-&gt;</operator><name>write</name></name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>done</name></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <name>done</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>done</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>iob_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RThreadLock</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>r_th_lock_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sel_backend</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>E_NOIF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>done</name> <operator>&lt;</operator> <name>buf_len</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>sel_backend</name><operator>-&gt;</operator><name>read</name></name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>done</name></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <name>done</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>done</name></expr>;</return>

</block_content>}</block></function>

</unit>
