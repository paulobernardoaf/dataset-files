<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\windbg\windbg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_FLAG_XPVAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIND_DBG</name></cpp:macro> <cpp:value>if (false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctx-&gt;os_profile-&gt;f[n]</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>Profile</name> <modifier>*</modifier></type><name><name>p_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>XP_SP2_X86</name></expr>,

<expr><operator>&amp;</operator><name>XP_SP3_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN7_SP0_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN7_SP1_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN7_SP0_X64</name></expr>,

<expr><operator>&amp;</operator><name>WIN7_SP1_X64</name></expr>,

<expr><operator>&amp;</operator><name>WIN8_SP0_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN8_SP1_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN8_SP0_X64</name></expr>,

<expr><operator>&amp;</operator><name>WIN8_SP1_X64</name></expr>,

<expr><operator>&amp;</operator><name>VISTA_SP0_X86</name></expr>,

<expr><operator>&amp;</operator><name>VISTA_SP0_X64</name></expr>,

<expr><operator>&amp;</operator><name>VISTA_SP1_X86</name></expr>,

<expr><operator>&amp;</operator><name>VISTA_SP1_X64</name></expr>,

<expr><operator>&amp;</operator><name>VISTA_SP2_X86</name></expr>,

<expr><operator>&amp;</operator><name>VISTA_SP2_X64</name></expr>,

<expr><operator>&amp;</operator><name>WIN2003_SP0_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN2003_SP1_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN2003_SP1_X64</name></expr>,

<expr><operator>&amp;</operator><name>WIN2003_SP2_X86</name></expr>,

<expr><operator>&amp;</operator><name>WIN2003_SP2_X64</name></expr>,

<expr><operator>&amp;</operator><name>WIN10_RS1_X64</name></expr>, 

<expr><operator>&amp;</operator><name>WIN10_RS4_X64</name></expr>, 

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Profile</name> <modifier>*</modifier></type><name>windbg_get_profile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>build</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>build</name> <operator>!=</operator> <name>build</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sp</name> <operator>!=</operator> <name>sp</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>bits</name> <operator>!=</operator> <name>bits</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_REQ</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ eprintf ("Request : %08x\nProcessor : %08x\nReturn : %08x\n",(r)-&gt;req, (r)-&gt;cpu, (r)-&gt;ret ); }</cpp:value></cpp:define>

<struct>struct <name>_WindCtx</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>io_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seq_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syncd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pae</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_x64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Profile</name> <modifier>*</modifier></type><name>os_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>plist_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>tlist_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>dbg_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WindProc</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>dontmix</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>bool</name></type> <name>windbg_lock_enter</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>windbg_break</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dontmix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>windbg_lock_tryenter</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_th_lock_tryenter</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dontmix</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>windbg_break</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>windbg_lock_leave</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dontmix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_get_bits</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr> ?</condition><then> <expr><name>R_SYS_BITS_64</name></expr> </then><else>: <expr><name>R_SYS_BITS_32</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_get_cpus</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>windbg_set_cpu</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <name>cpu</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu_count</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name> <operator>=</operator> <name>cpu</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_get_cpu</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>windbg_set_target</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>WindProc</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>windbg_list_process</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>l</argument>, <argument>it</argument>, <argument>p</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>uniqueid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>windbg_get_target</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name></expr>?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>uniqueid</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>windbg_get_target_base</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>base</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>peb</name></name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>P_ImageBaseAddress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>base</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>WindCtx</name> <modifier>*</modifier></type><name>windbg_ctx_new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>io_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WindCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dontmix</name></name> <operator>=</operator> <call><name>r_th_lock_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>=</operator> <name>io_ptr</name></expr>;</expr_stmt>

<return>return <expr><name>ctx</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>windbg_ctx_free</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>plist_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>tlist_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iob_close</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_lock_free</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>dontmix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_REQ</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kd_req_t *) (((kd_packet_t *) p)-&gt;data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_STC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kd_stc_64 *) (((kd_packet_t *) p)-&gt;data))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void dump_stc(kd_packet_t *p) {

kd_stc_64 *stc = PKT_STC (p);

eprintf ("New state: %08x\n", stc-&gt;state);

eprintf ("EIP: 0x%016"PFMT64x " Kthread: 0x%016"PFMT64x "\n",

(ut64) stc-&gt;pc, (ut64) stc-&gt;kthread);

eprintf ("On cpu %i/%i\n", stc-&gt;cpu + 1, stc-&gt;cpu_count);

if (stc-&gt;state == DbgKdExceptionStateChange) {

eprintf ("Exception\n");

eprintf (" Code : %08x\n", stc-&gt;exception.code);

eprintf (" Flags : %08x\n", stc-&gt;exception.flags);

eprintf (" Record : %016"PFMT64x "\n", (ut64) stc-&gt;exception.ex_record);

eprintf (" Addr : %016"PFMT64x "\n", (ut64) stc-&gt;exception.ex_addr);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_io_reply</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_ioc_t</name></type> <name>ioc</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>pkt</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Host resent io packet, ignoring.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ioc</name><operator>.</operator><name>req</name></name> <operator>=</operator> <literal type="number">0x3430</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ioc</name><operator>.</operator><name>ret</name></name> <operator>=</operator> <name>KD_RET_ENOENT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_FILE_IO</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kd_ioc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Waiting for io_reply ack...\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Ack received, restore flow\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_wait_packet</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>kd_packet_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retries</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_read_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name> <operator>||</operator> <operator>!</operator><name>pkt</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"We were not waiting for this... %08x\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>KD_PACKET_DATA</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KD_PACKET_TYPE_STATE_CHANGE64</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"State64\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>KD_PACKET_DATA</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KD_PACKET_TYPE_FILE_IO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Replying IO\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>do_io_reply</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>KD_PACKET_CTRL</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KD_PACKET_TYPE_RESEND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_backtrace</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Waoh. You probably sent a malformed packet !\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>KD_E_MALFORMED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name> <operator>&amp;&amp;</operator> <name>retries</name><operator>--</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>KD_E_OK</name></expr>;</return>

</block_content>}</block></function>

<macro><name>R_PACKED</name> <argument_list>(

<argument>typedef struct {

char tag[<literal type="number">4</literal>];

uint32_t start_vpn;

uint32_t end_vpn;

uint32_t parent;

uint32_t left;

uint32_t right;

uint32_t flags;

}</argument>)</argument_list></macro> <expr_stmt><expr><name>mmvad_short</name></expr>;</expr_stmt>

<function><type><name>int</name></type> <name>windbg_walk_vadtree</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mmvad_short</name></type> <name>entry</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>address</name> <operator>-</operator> <literal type="number">0x4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mmvad_short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mmvad_short</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name> <literal type="string">" Could not read the node!\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>.</operator><name>parent</name></name> <operator>!=</operator> <name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Wrong parent!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>start_vpn</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>entry</name><operator>.</operator><name>end_vpn</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prot</name> <operator>=</operator> <operator>(</operator><name><name>entry</name><operator>.</operator><name>flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Start 0x%016"</literal><name>PFMT64x</name> <literal type="string">" End 0x%016"</literal><name>PFMT64x</name> <literal type="string">" Prot 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>left</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>windbg_walk_vadtree</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>right</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>windbg_walk_vadtree</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>windbg_list_process</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>plist_cache</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>plist_cache</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbg_addr</name></name> <operator>+</operator> <name>K_PsActiveProcessHead</name></expr></argument>,

<argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Process list head : 0x%016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <call><name>O_</name><argument_list>(<argument><expr><name>E_ActiveProcessLinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>E_ImageFileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vadroot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>uniqueid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>peb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>dir_base_table</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>vadroot</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>E_VadRoot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>uniqueid</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>E_UniqueProcessId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peb</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>E_Peb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dir_base_table</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>P_DirectoryTableBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WindProc</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WindProc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>eprocess</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>vadroot</name></name> <operator>=</operator> <name>vadroot</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>uniqueid</name></name> <operator>=</operator> <name>uniqueid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>dir_base_table</name></name> <operator>=</operator> <name>dir_base_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>peb</name></name> <operator>=</operator> <name>peb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>base</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plist_cache</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_write_at_uva</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>pa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>totwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>totwritten</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_va_to_pa</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>restOfPage</name> <init>= <expr><literal type="number">0x1000</literal> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><call><name>windbg_write_at_phys</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>totwritten</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name> <operator>-</operator> <name>totwritten</name></expr></argument>, <argument><expr><name>restOfPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>written</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totwritten</name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totwritten</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_read_at_uva</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>pa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>totread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>totread</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_va_to_pa</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>restOfPage</name> <init>= <expr><literal type="number">0x1000</literal> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>windbg_read_at_phys</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>totread</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name> <operator>-</operator> <name>totread</name></expr></argument>, <argument><expr><name>restOfPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>read</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totread</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totread</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>windbg_list_modules</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No target process\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>peb</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No PEB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ldroff</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr> ?</condition><then> <expr><literal type="number">0x18</literal></expr> </then><else>: <expr><literal type="number">0xC</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>peb</name></name> <operator>+</operator> <name>ldroff</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"_PEB_LDR_DATA : 0x%016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>mlistoff</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr> ?</condition><then> <expr><literal type="number">0x20</literal></expr> </then><else>: <expr><literal type="number">0x14</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>mlistoff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"InMemoryOrderModuleList : 0x%016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>baseoff</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr> ?</condition><then> <expr><literal type="number">0x30</literal></expr> </then><else>: <expr><literal type="number">0x18</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>sizeoff</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x20</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>nameoff</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr> ?</condition><then> <expr><literal type="number">0x48</literal></expr> </then><else>: <expr><literal type="number">0x24</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"_LDR_DATA_TABLE_ENTRY : 0x%016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Corrupted InMemoryOrderModuleList found at: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WindModule</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>WindModule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mod</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>mod</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>baseoff</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>mod</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>sizeoff</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>nameoff</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>bufferaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>bufferaddr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>nameoff</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>unname</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>length</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unname</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_read_at_uva</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>unname</name></expr></argument>, <argument><expr><name>bufferaddr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mod</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wcstombs</name> <argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>unname</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>unname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>base</name></expr>)</condition>;</do>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>windbg_list_threads</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tlist_cache</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>tlist_cache</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No target process\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>eprocess</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No _EPROCESS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>E_ThreadListHead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Corrupted ThreadListEntry found at: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <call><name>O_</name><argument_list>(<argument><expr><name>ET_ThreadListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>entrypoint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>entrypoint</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>ET_Win32StartAddress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>uniqueid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>uniqueid</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>ET_Cid</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>O_</name><argument_list>(<argument><expr><name>C_UniqueThread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uniqueid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WindThread</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WindThread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>uniqueid</name></name> <operator>=</operator> <name>uniqueid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>runnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>ethread</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>entrypoint</name></name> <operator>=</operator> <name>entrypoint</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>base</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tlist_cache</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTE_VALID</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTE_LARGEPAGE</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTE_PROTOTYPE</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>windbg_va_to_pa</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>va</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>pml4i</name></decl>, <decl><type ref="prev"/><name>pdpi</name></decl>, <decl><type ref="prev"/><name>pdi</name></decl>, <decl><type ref="prev"/><name>pti</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"VA : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pti</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pdi</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pdpi</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pml4i</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">39</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x000000fffffff000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pti</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pdi</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pdpi</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pml4i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pti</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pdi</name> <operator>=</operator> <operator>(</operator><name>va</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pdpi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pml4i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xfffff000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>dir_base_table</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x1f</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"CR3 : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_read_at_phys</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>pml4i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"PML4 : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_read_at_phys</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>pdpi</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"PDPE : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_read_at_phys</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>pdi</name> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"PDE : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&amp;</operator> <name>PTE_LARGEPAGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name></expr>?</condition><then>

<expr><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x1fffff</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>va</name> <operator>&amp;</operator> <literal type="number">0x1fffff</literal><operator>)</operator></expr></then><else>:

<expr><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x3fffff</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>va</name> <operator>&amp;</operator> <literal type="number">0x3fffff</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_read_at_phys</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <name>pti</name> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"PTE : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&amp;</operator> <name>PTE_VALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>va</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&amp;</operator> <name>PTE_PROTOTYPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Prototype PTE lookup is currently missing!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>windbg_read_ver</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <literal type="number">0x3146</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kd_req_t</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"%s : req returned %08x\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>WIND_DBG</name></macro> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Major : %i Minor %i\n"</literal></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Protocol version : %i.%i\n"</literal></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>proto_major</name></name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>proto_minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Flags : %08x\n"</literal></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Machine : %08x\n"</literal></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Module list : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>mod_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Debug block : %016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>dbg_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>machine</name></name> <operator>!=</operator> <name>KD_MACH_I386</name> <operator>&amp;&amp;</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>machine</name></name> <operator>!=</operator> <name>KD_MACH_AMD64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported target host\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DBGKD_VERS_FLAG_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No _KDDEBUGGER_DATA64 pointer has been supplied by the debugee!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name> <operator>=</operator> <operator>(</operator><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>machine</name></name> <operator>==</operator> <name>KD_MACH_AMD64</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>dbg_addr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbg_addr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"_KDDEBUGGER_DATA64 at 0x%016"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbg_addr</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pae_enabled</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pae_enabled</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbg_addr</name></name> <operator>+</operator> <name>K_PaeEnabled</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbg_addr</name></name> <operator>+</operator> <name>K_CmNtCSDVersion</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_read_at</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name> <operator>=</operator> <name>pae_enabled</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>os_profile</name></name> <operator>=</operator> <call><name>windbg_get_profile</name> <argument_list>(<argument><expr><literal type="number">32</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_x64</name></name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_ver</name><operator>.</operator><name>minor</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>os_profile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not find a suitable profile for the target OS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_sync</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iob_write</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_ctrl_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_RESET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_RESET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_CHANGE64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>=</operator> <literal type="number">0x80800001</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kd_stc_64</name> <modifier>*</modifier></type><name>stc64</name> <init>= <expr><operator>(</operator><name>kd_stc_64</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name> <operator>=</operator> <name><name>stc64</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu_count</name></name> <operator>=</operator> <name><name>stc64</name><operator>-&gt;</operator><name>cpu_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plist_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plist_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tlist_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tlist_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pae</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sync done! (%i cpus found)\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_continue</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdContinueApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_cont</name><operator>.</operator><name>reason</name></name> <operator>=</operator> <literal type="number">0x10001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_cont</name><operator>.</operator><name>tf</name></name> <operator>=</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plist_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plist_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>windbg_write_reg</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdSetContextApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_ctx</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0x1003F</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Regwrite() size: %x\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kd_req_t</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"%s: req returned %08x\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_read_reg</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdGetContextApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_ctx</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0x1003F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_lock_tryenter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kd_req_t</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIND_DBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"%s: req returned %08x\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>rr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_query_mem</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>address_space</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdQueryMemoryApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_query_mem</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_query_mem</name><operator>.</operator><name>address_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kd_req_t</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>address_space</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>address_space</name> <operator>=</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_query_mem</name><operator>.</operator><name>address_space</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_query_mem</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_bkpt</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>hw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <ternary><condition><expr><name>set</name></expr>?</condition><then> <expr><name>DbgKdWriteBreakPointApi</name></expr></then><else>: <expr><name>DbgKdRestoreBreakPointApi</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_set_bp</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_del_bp</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>*</operator><name>handle</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kd_req_t</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_set_bp</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_read_at_phys</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdReadPhysicalMemoryApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>KD_MAX_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_lock_tryenter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_mem</name><operator>.</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_mem</name><operator>.</operator><name>read</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_read_at</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_req_t</name> <modifier>*</modifier></type><name>rr</name></decl>, <decl><type ref="prev"/><name>req</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdReadVirtualMemoryApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>KD_MAX_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>windbg_lock_tryenter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>r_mem</name><operator>.</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_mem</name><operator>.</operator><name>read</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_write_at</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>KD_MAX_PAYLOAD</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdWriteVirtualMemoryApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_mem</name><operator>.</operator><name>read</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_write_at_phys</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kd_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kd_req_t</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>syncd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>KD_MAX_PAYLOAD</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>DbgKdWritePhysicalMemoryApi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>r_mem</name><operator>.</operator><name>read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>windbg_lock_enter</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kd_send_data_packet</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>seq_id</name></name> <operator>^=</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kd_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_ACKNOWLEDGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>windbg_wait_packet</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>KD_PACKET_TYPE_STATE_MANIPULATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KD_E_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kd_req_t</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><call><name>PKT_REQ</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rr</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rr</name><operator>-&gt;</operator><name>r_mem</name><operator>.</operator><name>read</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>windbg_lock_leave</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>windbg_break</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>WindCtx</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>iob_write</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>windbg_break_read</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> (<modifier>*</modifier><name>w32_CancelIoEx</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPOVERLAPPED</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w32_CancelIoEx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w32_CancelIoEx</name> <operator>=</operator> <operator>(</operator><name>BOOL</name> <call><call><name>WINAPI</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>LPOVERLAPPED</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><call><name>GetModuleHandle</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"CancelIoEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w32_CancelIoEx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w32_CancelIoEx</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>io_ptr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
