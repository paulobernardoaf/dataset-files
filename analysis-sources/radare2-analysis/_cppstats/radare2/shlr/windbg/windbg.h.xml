<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\windbg\windbg.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kd.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>_WindCtx</name></name></type> <name>WindCtx</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WindProc</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>eprocess</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>uniqueid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vadroot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>dir_base_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>peb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>WindProc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WindThread</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>uniqueid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>runnable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ethread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>entrypoint</name></decl>;</decl_stmt>

}</block></struct></type> <name>WindThread</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WindModule</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>WindModule</name>;</typedef>

<enum>enum <block>{

<decl><name>K_PaeEnabled</name> <init>= <expr><literal type="number">0x036</literal></expr></init></decl>,

<decl><name>K_PsActiveProcessHead</name> <init>= <expr><literal type="number">0x050</literal></expr></init></decl>,

<decl><name>K_CmNtCSDVersion</name> <init>= <expr><literal type="number">0x268</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>E_ActiveProcessLinks</name></decl>, 

<decl><name>E_UniqueProcessId</name></decl>, 

<decl><name>E_Peb</name></decl>, 

<decl><name>E_ImageFileName</name></decl>, 

<decl><name>E_VadRoot</name></decl>, 

<decl><name>E_ThreadListHead</name></decl>, 

<decl><name>P_DirectoryTableBase</name></decl>, 

<decl><name>P_ImageBaseAddress</name></decl>, 

<decl><name>P_ProcessParameters</name></decl>, 

<decl><name>R_ImagePathName</name></decl>, 

<decl><name>ET_Tcb</name></decl>, 

<decl><name>ET_ThreadListEntry</name></decl>, 

<decl><name>ET_Win32StartAddress</name></decl>, 

<decl><name>ET_Cid</name></decl>, 

<decl><name>C_UniqueThread</name></decl>, 

<decl><name>O_Max</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>build</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>O_Max</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>Profile</name>;</typedef>

<function_decl><type><name>int</name></type> <name>windbg_get_bits</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ut64</name></type> <name>windbg_get_target_base</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ut32</name></type> <name>windbg_get_target</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_set_target</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>windbg_list_process</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>windbg_list_threads</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RList</name> <modifier>*</modifier></type><name>windbg_list_modules</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_get_cpus</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_set_cpu</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpu</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_get_cpu</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>WindCtx</name> <modifier>*</modifier></type> <name>windbg_ctx_new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>io_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>windbg_ctx_free</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_wait_packet</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>kd_packet_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_sync</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_read_ver</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_continue</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_write_reg</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_read_reg</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_query_mem</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>address_space</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_bkpt</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>hw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_read_at</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_read_at_uva</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_read_at_phys</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_write_at</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_write_at_uva</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_write_at_phys</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_va_to_pa</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>va</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>windbg_break</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>windbg_break_read</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_lock_enter</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_lock_leave</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>windbg_lock_tryenter</name><parameter_list>(<parameter><decl><type><name>WindCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
