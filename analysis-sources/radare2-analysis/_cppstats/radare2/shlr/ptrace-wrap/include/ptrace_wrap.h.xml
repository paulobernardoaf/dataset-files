<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\ptrace-wrap\include\ptrace_wrap.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;semaphore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>enum</name> <name>__ptrace_request</name></name></type> <name>ptrace_wrap_ptrace_request</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int</name></type> <name>ptrace_wrap_ptrace_request</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>PTRACE_WRAP_REQUEST_TYPE_STOP</name></decl>,

<decl><name>PTRACE_WRAP_REQUEST_TYPE_PTRACE</name></decl>,

<decl><name>PTRACE_WRAP_REQUEST_TYPE_FORK</name></decl>,

<decl><name>PTRACE_WRAP_REQUEST_TYPE_FUNC</name></decl>

}</block></enum></type> <name>ptrace_wrap_request_type</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>ptrace_wrap_func_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>ptrace_wrap_request_t</name> <block>{

<decl_stmt><decl><type><name>ptrace_wrap_request_type</name></type> <name>type</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>ptrace_wrap_ptrace_request</name></type> <name>request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>_errno</name></decl>;</decl_stmt>

}</block> <decl><name>ptrace</name></decl>;</struct>

<struct>struct <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>child_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>child_callback_user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>_errno</name></decl>;</decl_stmt>

}</block> <decl><name>fork</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>ptrace_wrap_func_func</name></type> <name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

}</block> <decl><name>func</name></decl>;</struct>

}</block>;</union>

}</block></struct></type> <name>ptrace_wrap_request</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ptrace_wrap_instance_t</name> <block>{

<decl_stmt><decl><type><name>pthread_t</name></type> <name>th</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sem_t</name></type> <name>request_sem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrace_wrap_request</name></type> <name>request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sem_t</name></type> <name>result_sem</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>long</name></type> <name>ptrace_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>fork_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func_result</name></decl>;</decl_stmt>

}</block>;</union>

}</block></struct></type> <name>ptrace_wrap_instance</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ptrace_wrap_instance_start</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ptrace_wrap_instance_stop</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>ptrace_wrap</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><decl><type><name>ptrace_wrap_ptrace_request</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>pid_t</name></type> <name>ptrace_wrap_fork</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>child_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_callback_user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ptrace_wrap_func</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><decl><type><name>ptrace_wrap_func_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
