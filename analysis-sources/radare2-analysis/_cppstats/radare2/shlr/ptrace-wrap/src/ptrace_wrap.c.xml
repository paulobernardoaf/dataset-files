<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\ptrace-wrap\src\ptrace_wrap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ptrace_wrap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>th_run</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>ptrace_wrap_instance_start</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sem_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>pthread_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>th</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>th_run</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sem_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ptrace_wrap_instance_stop</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PTRACE_WRAP_REQUEST_TYPE_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_join</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>th</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wrap_ptrace</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>ptrace_result</name></name> <operator>=</operator> <call><name>ptrace</name> <argument_list>(

<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>request</name></name></expr></argument>,

<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>pid</name></name></expr></argument>,

<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>addr</name></name></expr></argument>,

<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>_errno</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>_errno</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wrap_fork</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>pid_t</name></type> <name>r</name> <init>= <expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>fork</name><operator>.</operator><name>child_callback</name></name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>fork</name><operator>.</operator><name>child_callback_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>fork_result</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wrap_func</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>func_result</name></name> <operator>=</operator> <call><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>func</name><operator>.</operator><name>func</name></name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>func</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>th_run</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PTRACE_WRAP_REQUEST_TYPE_STOP</name></expr>:</case>

<goto>goto <name>stop</name>;</goto>

<case>case <expr><name>PTRACE_WRAP_REQUEST_TYPE_PTRACE</name></expr>:</case>

<expr_stmt><expr><call><name>wrap_ptrace</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PTRACE_WRAP_REQUEST_TYPE_FORK</name></expr>:</case>

<expr_stmt><expr><call><name>wrap_fork</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PTRACE_WRAP_REQUEST_TYPE_FUNC</name></expr>:</case>

<expr_stmt><expr><call><name>wrap_func</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>stop</name>:</label>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>ptrace_wrap</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><decl><type><name>ptrace_wrap_ptrace_request</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>th</name></name> <operator>==</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PTRACE_WRAP_REQUEST_TYPE_PTRACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>request</name></name> <operator>=</operator> <name>request</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>ptrace</name><operator>.</operator><name>_errno</name></name> <operator>=</operator> <operator>&amp;</operator><name>_errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>_errno</name></expr>;</expr_stmt>

<return>return <expr><name><name>inst</name><operator>-&gt;</operator><name>ptrace_result</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pid_t</name></type> <name>ptrace_wrap_fork</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>child_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_callback_user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>th</name></name> <operator>==</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pid_t</name></type> <name>r</name> <init>= <expr><call><name>fork</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>child_callback</name> <argument_list>(<argument><expr><name>child_callback_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PTRACE_WRAP_REQUEST_TYPE_FORK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>fork</name><operator>.</operator><name>child_callback</name></name> <operator>=</operator> <name>child_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>fork</name><operator>.</operator><name>child_callback_user</name></name> <operator>=</operator> <name>child_callback_user</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>fork</name><operator>.</operator><name>_errno</name></name> <operator>=</operator> <operator>&amp;</operator><name>_errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>_errno</name></expr>;</expr_stmt>

<return>return <expr><name><name>inst</name><operator>-&gt;</operator><name>fork_result</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ptrace_wrap_func</name><parameter_list>(<parameter><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><decl><type><name>ptrace_wrap_func_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>th</name></name> <operator>==</operator> <call><name>pthread_self</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>func</name> <argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PTRACE_WRAP_REQUEST_TYPE_FUNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>func</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>func</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_post</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>request_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>inst</name><operator>-&gt;</operator><name>result_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>inst</name><operator>-&gt;</operator><name>func_result</name></name></expr>;</return>

</block_content>}</block></function></unit>
