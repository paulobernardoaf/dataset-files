<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\shlr\qnx\src\core.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libqnxr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packet.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRAN_TRIES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_QNX_PROTOVER_MAJOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_QNX_PROTOVER_MINOR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ptid_t</name></type> <name>null_ptid</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>nto_send_init</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>subcmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>chan</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ptid_t</name></type> <name>nto_parse_notify</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>nto_send_env</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>nto_send_arg</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>nto_send</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>report_errors</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>registers_t</name></type> <name><name>x86_32</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"eax"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ecx"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"edx"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ebx"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"esp"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ebp"</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"esi"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"edi"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eip"</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eflags"</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cs"</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ss"</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{"ds", 48, 4},

{"es", 52, 4},

{"fs", 56, 4},

{"gs", 60, 4},

{"st0", 64, 10},

{"st1", 74, 10},

{"st2", 84, 10},

{"st3", 94, 10},

{"st4", 104, 10},

{"st5", 114, 10},

{"st6", 124, 10},

{"st7", 134, 10},

{"fctrl", 144, 4},

{"fstat", 148, 4},

{"ftag", 152, 4},

{"fiseg", 156, 4},

{"fioff", 160, 4},

{"foseg", 164, 4},

{"fooff", 168, 4},

{"fop", 172, 4},

{"xmm0", 176, 16},

{"xmm1", 192, 16},

{"xmm2", 208, 16},

{"xmm3", 224, 16},

{"xmm4", 240, 16},

{"xmm5", 256, 16},

{"xmm6", 272, 16},

{"xmm7", 288, 16},

{"mxcsr", 304, 4},

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>registers_t</name></type> <name><name>arm32</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"r0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r1"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r2"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r3"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r4"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r5"</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r6"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r7"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r8"</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r9"</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r10"</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r11"</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r12"</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sp"</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lr"</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pc"</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f0"</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f1"</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f2"</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f3"</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f4"</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f5"</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f6"</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f7"</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fps"</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cpsr"</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>qnxr_init</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>libqnxr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>send_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>send_buff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name>DS_DATA_MAX_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>send_buff</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_buff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name>DS_DATA_MAX_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>read_buff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>send_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>registers</name></name> <operator>=</operator> <name>x86_32</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_set_architecture</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>architecture</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>architecture</name></name> <operator>=</operator> <name>architecture</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>architecture</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARCH_X86_32</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>registers</name></name> <operator>=</operator> <name>x86_32</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARCH_ARM_32</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>registers</name></name> <operator>=</operator> <name>arm32</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error unknown architecture set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_cleanup</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>send_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>send_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>read_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_connect</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>host</name> <operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>connected</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <call><name>r_socket_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>connected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>mid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_socket_connect_tcp</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>connected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qnxr_send_ch_reset</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_connect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>connect</name><operator>.</operator><name>major</name></name> <operator>=</operator> <name>HOST_QNX_PROTOVER_MAJOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>connect</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <name>HOST_QNX_PROTOVER_MINOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>connect</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: connection failed: %lld\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,

<argument><expr><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>err</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_protover</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>protover</name><operator>.</operator><name>major</name></name> <operator>=</operator> <name>HOST_QNX_PROTOVER_MAJOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>protover</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <name>HOST_QNX_PROTOVER_MINOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>protover</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_err</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>err</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>EINVAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target_proto_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target_proto_minor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_okstatus</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target_proto_major</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>okstatus</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target_proto_minor</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>okstatus</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target_proto_major</name></name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>target_proto_major</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <name>DSMSG_PROTOVER_MAJOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>target_proto_minor</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>target_proto_minor</name></name> <operator>&amp;</operator> <name>DSMSG_PROTOVER_MINOR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Connection failed (Protocol Version Query): %lld\n"</literal></expr></argument>,

<argument><expr><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>err</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_disconnect</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>connected</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_disconnect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>disconnect</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>connected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>inferior_ptid</name></name> <operator>=</operator> <name>null_ptid</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_socket_close</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ptid_t</name></type> <name>qnxr_attach</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>inferior_ptid</name><operator>.</operator><name>pid</name></name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_disconnect</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_sleep</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qnxr_connect</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_attach</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>attach</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>attach</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>attach</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>attach</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>!=</operator> <name>DSrMsg_okdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: failed to attach to %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>null_ptid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>inferior_ptid</name></name> <operator>=</operator> <call><name>ptid_build</name> <argument_list>(

<argument><expr><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>notify</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>notify</name><operator>.</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>g</name><operator>-&gt;</operator><name>inferior_ptid</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ptid_t</name></type> <name>qnxr_run</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>envc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>null_ptid</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_env</name></expr></argument>, <argument><expr><name>DSMSG_ENV_CLEARENV</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DStMsg_env_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>envc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>env</name></expr>;</condition> <incr><expr><name>env</name><operator>++</operator></expr><operator>,</operator> <expr><name>envc</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>errors</name> <operator>+=</operator> <operator>!</operator><call><name>nto_send_env</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>*</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>errors</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: error(s) occurred while sending environment\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_env</name></expr></argument>, <argument><expr><name>DSMSG_ENV_CLEARARGV</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DStMsg_env_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errors</name> <operator>=</operator> <operator>!</operator><call><name>nto_send_arg</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errors</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errors</name> <operator>=</operator> <operator>!</operator><call><name>nto_send_arg</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errors</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: failed to send executable file name\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>null_ptid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>argv</name> <operator>=</operator> <name>args</name></expr>;</init> <condition><expr><operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>argv</name></expr>;</condition> <incr><expr><name>argv</name><operator>++</operator></expr><operator>,</operator> <expr><name>argc</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>errors</name> <operator>|=</operator> <operator>!</operator><call><name>nto_send_arg</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>errors</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: error(s) occurred while sending args\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errors</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>null_ptid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_load</name></expr></argument>, <argument><expr><name>DSMSG_LOAD_DEBUG</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>load</name><operator>.</operator><name>cmdline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>load</name><operator>.</operator><name>envc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>load</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>load</name><operator>.</operator><name>cmdline</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>DStMsg_load_t</name></expr></argument>, <argument><expr><name>cmdline</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p</name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>load</name><operator>.</operator><name>cmdline</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_okdata</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ptid_t</name></type> <name>ptid</name> <init>= <expr><call><name>nto_parse_notify</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: inferior pid: %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>ptid</name><operator>.</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>inferior_ptid</name></name> <operator>=</operator> <name>ptid</name></expr>;</expr_stmt>

<return>return <expr><name>ptid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>null_ptid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_read_registers</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>rlen</name></decl>, <decl><type ref="prev"/><name>regset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>DS_DATA_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regset</name> <operator>=</operator> <call><name>i386nto_regset_id</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>i386nto_register_area</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>regset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: unknown register %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_regrd</name></expr></argument>, <argument><expr><name>regset</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>regrd</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>regrd</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>regrd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_okdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>okdata</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: couldn't read register %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_read_memory</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rcv_len</name></decl>, <decl><type ref="prev"/><name>tot_len</name></decl>, <decl><type ref="prev"/><name>ask_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tot_len</name> <operator>=</operator> <name>rcv_len</name> <operator>=</operator> <name>ask_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_memrd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>address</name> <operator>+</operator> <name>tot_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>memrd</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>EXTRACT_UNSIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ask_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>tot_len</name><operator>)</operator> <operator>&gt;</operator> <name>DS_DATA_MAX_SIZE</name><operator>)</operator></expr> ?</condition><then>

<expr><name>DS_DATA_MAX_SIZE</name></expr> </then><else>:

<expr><operator>(</operator><name>len</name> <operator>-</operator> <name>tot_len</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>memrd</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ask_len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rcv_len</name> <operator>=</operator> <call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>memrd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator>

<sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rcv_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_okdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>tot_len</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>okdata</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>rcv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tot_len</name> <operator>+=</operator> <name>rcv_len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>tot_len</name> <operator>!=</operator> <name>len</name></expr>)</condition>;</do>

<return>return <expr><name>tot_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_write_memory</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_memwr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>memwr</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>EXTRACT_UNSIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>memwr</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>DStMsg_memwr_t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DSrMsg_ok</name></expr>:</case>

<return>return <expr><name>len</name></expr>;</return>

<case>case <expr><name>DSrMsg_okstatus</name></expr>:</case>

<return>return <expr><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>okstatus</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>qnxr_pidlist</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pidlist_cb_t</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dspidlist</name></name> <modifier>*</modifier></type><name>pidlist</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>okdata</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>start_tid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>subcmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_tid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>subcmd</name> <operator>=</operator> <name>DSMSG_PIDLIST_BEGIN</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_pidlist</name></expr></argument>, <argument><expr><name>subcmd</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>pidlist</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>pidlist</name><operator>.</operator><name>tid</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>start_tid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>pidlist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_err</name> <operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>!=</operator> <name>DSrMsg_okdata</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>pidlist</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>pidlist</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subcmd</name> <operator>=</operator> <name>DSMSG_PIDLIST_NEXT</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_select</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_select</name></expr></argument>, <argument><expr><name>DSMSG_SELECT_SET</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>select</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>select</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>select</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>select</name><operator>.</operator><name>tid</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>select</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: failed to select %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_step</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>qnxr_send_vcont</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_continue</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>qnxr_send_vcont</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_write_register</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tdep_len</name></decl>, <decl><type ref="prev"/><name>regset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>regset</name> <operator>=</operator> <call><name>i386nto_regset_id</name> <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tdep_len</name> <operator>=</operator> <call><name>i386nto_register_area</name> <argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>regset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>tdep_len</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: invalid length\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_regwr</name></expr></argument>, <argument><expr><name>regset</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>regwr</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>regwr</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>DStMsg_regwr_t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_write_reg</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error registername &lt;%s&gt; not found in profile\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qnxr_write_register</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_send_vcont</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_run</name></expr></argument>, <argument><expr><ternary><condition><expr><name>step</name></expr> ?</condition><then> <expr><name>DSMSG_RUN_COUNT</name></expr> </then><else>: <expr><name>DSMSG_RUN</name></expr></else></ternary></expr></argument>,

<argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>run</name><operator>.</operator><name>step</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>run</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_stop</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: waiting for stop\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>waiting_for_stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_stop</name></expr></argument>, <argument><expr><name>DSMSG_STOP_PIDS</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>send_len</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qnxr_send_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ptid_t</name></type> <name>qnxr_wait</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>null_ptid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ptid_t</name></type> <name>returned_ptid</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>inferior_ptid</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>inferior_ptid</name><operator>.</operator><name>pid</name></name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>null_ptid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>!=</operator> <name>DShMsg_notify</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>waiting_for_notify</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: waiting for inferior\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>qnxr_read_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>waiting_for_stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: read eror while waiting for stop\n"</literal></expr></argument>,

<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: read packet error or NAK\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>null_ptid</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>channelrd</name></name> <operator>==</operator> <name>SET_CHANNEL_TEXT</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DSHDR_MSG_BIG_ENDIAN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>waiting_for_stop</name></name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>waiting_for_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: got stop response\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>waiting_for_notify</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DShMsg_notify</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>DSrMsg_ok</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>channel</name></name> <operator>=</operator> <name>SET_CHANNEL_DEBUG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>mid</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>mid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qnxr_send_ch_debug</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>send_len</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qnxr_send_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>returned_ptid</name> <operator>=</operator> <call><name>nto_parse_notify</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>DSrMsg_ok</name></expr>;</expr_stmt>

<return>return <expr><name>returned_ptid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_set_bp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conditions</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_qnxr_set_bp</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>conditions</name></expr></argument>, <argument><expr><name>BREAKPOINT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_set_hwbp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conditions</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_qnxr_set_bp</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>conditions</name></expr></argument>, <argument><expr><name>HARDWARE_BREAKPOINT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_remove_bp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_qnxr_remove_bp</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>BREAKPOINT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>qnxr_remove_hwbp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_qnxr_remove_bp</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>HARDWARE_BREAKPOINT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_qnxr_set_bp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conditions</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Breakpoint</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_brk</name></expr></argument>, <argument><expr><name>DSMSG_BRK_EXEC</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>brk</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>EXTRACT_UNSIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>brk</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>brk</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_qnxr_remove_bp</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Breakpoint</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_brk</name></expr></argument>, <argument><expr><name>DSMSG_BRK_EXEC</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>brk</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>EXTRACT_UNSIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>brk</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>brk</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>nto_send_init</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>subcmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>chan</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>subcmd</name></name> <operator>=</operator> <name>subcmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>mid</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>chan</name> <operator>==</operator> <name>SET_CHANNEL_DEBUG</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>g</name><operator>-&gt;</operator><name>mid</name></name><operator>++</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>channel</name></name> <operator>=</operator> <name>chan</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ptid_t</name></type> <name>nto_parse_notify</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>tid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>notify</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>notify</name><operator>.</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: parse notify %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>subcmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>subcmd</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DSMSG_NOTIFY_PIDUNLOAD</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DSMSG_NOTIFY_BRK</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stop_flags</name></name> <operator>=</operator> <call><name>EXTRACT_UNSIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>notify</name><operator>.</operator><name>un</name><operator>.</operator><name>brk</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stop_pc</name></name> <operator>=</operator> <call><name>EXTRACT_UNSIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>notify</name><operator>.</operator><name>un</name><operator>.</operator><name>brk</name><operator>.</operator><name>ip</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_BREAKPOINT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DSMSG_NOTIFY_STEP</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_STEP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DSMSG_NOTIFY_SIGEV</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_SIGNAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>signal</name></name> <operator>=</operator> <call><name>host_signal_from_nto</name> <argument_list>(<argument><expr><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>notify</name><operator>.</operator><name>un</name><operator>.</operator><name>sigev</name><operator>.</operator><name>signo</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DSMSG_NOTIFY_PIDLOAD</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: notify type DSMSG_NOTIFY_PIDLOAD\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_UNKNOWN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DSMSG_NOTIFY_DLLLOAD</name></expr>:</case>

<case>case <expr><name>DSMSG_NOTIFY_TIDLOAD</name></expr>:</case>

<case>case <expr><name>DSMSG_NOTIFY_TIDUNLOAD</name></expr>:</case>

<case>case <expr><name>DSMSG_NOTIFY_DLLUNLOAD</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: notify type DSMSG_NOTIFY_DLLTID\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_UNKNOWN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DSMSG_NOTIFY_STOPPED</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_SWI</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: Unexpected notify type %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>subcmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>notify_type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_UNKNOWN</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><call><name>ptid_build</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>nto_send_env</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>totlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>target_proto_minor</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>DS_DATA_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_env</name></expr></argument>, <argument><expr><name>DSMSG_ENV_SETENV_MORE</name></expr></argument>,

<argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>env</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>env</name> <operator>+</operator> <name>totlen</name></expr></argument>,

<argument><expr><name>DS_DATA_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>DStMsg_env_t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name>DS_DATA_MAX_SIZE</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>DS_DATA_MAX_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <name>DS_DATA_MAX_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>DS_DATA_MAX_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Protovers &lt; 0.2 do not handle env vars longer than %d\n"</literal></expr></argument>,

<argument><expr><name>DS_DATA_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_env</name></expr></argument>, <argument><expr><name>DSMSG_ENV_SETENV</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>env</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>env</name> <operator>+</operator> <name>totlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>DStMsg_env_t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>nto_send_arg</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>DS_DATA_MAX_SIZE</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Argument too long: %.40s...\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nto_send_init</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>DStMsg_env</name></expr></argument>, <argument><expr><name>DSMSG_ENV_ADDARG</name></expr></argument>, <argument><expr><name>SET_CHANNEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>env</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nto_send</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>DStMsg_env_t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>nto_send</name> <parameter_list>(<parameter><decl><type><name>libqnxr_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>st32</name></type> <name>report_errors</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>tries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>connected</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>send_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>tries</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tries</name> <operator>&gt;=</operator> <name>MAX_TRAN_TRIES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: Remote exhausted %d retries.\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>tries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qnxr_send_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>qnxr_read_packet</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>channelrd</name></name> <operator>!=</operator> <name>SET_CHANNEL_TEXT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: NAK received - resending\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rlen</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>mid</name></name> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>mid</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: mid mismatch: %d/%d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>mid</name></name></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tran</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>mid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>channelrd</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SET_CHANNEL_DEBUG</name></expr>:</case>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DSHDR_MSG_BIG_ENDIAN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>DSrMsg_err</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>report_errors</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nerrno</name> <init>= <expr><call><name>errnoconvert</name> <argument_list>(

<argument><expr><call><name>EXTRACT_SIGNED_INTEGER</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>err</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>subcmd</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PDEBUG_ENOERR</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"remote: error packet with errno %d\n"</literal></expr></argument>, <argument><expr><name>nerrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_ENOPTY</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"remote: no ptys available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_ETHREAD</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"remote: thread start error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_ECONINV</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"remote: invalid console number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_ESPAWN</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote (spawn error)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_EPROCFS</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote (procfs [/proc] error)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_EPROCSTOP</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote (devctl PROC_STOP error)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_EQPSINFO</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote (psinfo error)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_EQMEMMODEL</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote (invalid memory model [not flat])\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_EQPROXY</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote (proxy error)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PDEBUG_EQDBG</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote (__nto_debug_* error)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Remote error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SET_CHANNEL_TEXT</name></expr>:</case>

<case>case <expr><name>SET_CHANNEL_RESET</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>rlen</name></expr>;</return>

</block_content>}</block></function>

</unit>
