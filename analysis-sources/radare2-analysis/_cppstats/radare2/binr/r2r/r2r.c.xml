<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\binr\r2r\r2r.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r2r.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORKERS_DEFAULT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADARE2_CMD_DEFAULT</name></cpp:macro> <cpp:value>"radare2"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RASM2_CMD_DEFAULT</name></cpp:macro> <cpp:value>"rasm2"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_TEST_FILE_DEFAULT</name></cpp:macro> <cpp:value>"../bins/elf/crackme0x00b"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_DEFAULT</name></cpp:macro> <cpp:value>960</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRV(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORKERS_DEFAULT_STR</name></cpp:macro> <cpp:value>STR(WORKERS_DEFAULT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_DEFAULT_STR</name></cpp:macro> <cpp:value>STR(TIMEOUT_DEFAULT)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r2r_state_t</name> <block>{

<decl_stmt><decl><type><name>R2RRunConfig</name></type> <name>run_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R2RTestDatabase</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>path_left</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RPVector</name></type> <name>completed_paths</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ok_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>xx_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>br_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>fx_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPVector</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPVector</name></type> <name>results</name></decl>;</decl_stmt>

}</block></struct></type> <name>R2RState</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>RThreadFunctionRet</name></type> <name>worker_th</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_state</name><parameter_list>(<parameter><decl><type><name>R2RState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>prev_completed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_log</name><parameter_list>(<parameter><decl><type><name>R2RState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>prev_completed</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>prev_paths_completed</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>help</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Usage: r2r [-vh] [-j threads] [test file/dir | @test-type]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(

<argument><expr><literal type="string">" -h print this help\n"</literal>

<literal type="string">" -v show version\n"</literal>

<literal type="string">" -V verbose\n"</literal>

<literal type="string">" -n do nothing (don't run any test, just load/parse them)\n"</literal>

<literal type="string">" -L log mode (better printing for CI, logfiles, etc.)"</literal>

<literal type="string">" -j [threads] how many threads to use for running tests concurrently (default is "</literal><name>WORKERS_DEFAULT_STR</name><literal type="string">")\n"</literal>

<literal type="string">" -r [radare2] path to radare2 executable (default is "</literal><name>RADARE2_CMD_DEFAULT</name><literal type="string">")\n"</literal>

<literal type="string">" -m [rasm2] path to rasm2 executable (default is "</literal><name>RASM2_CMD_DEFAULT</name><literal type="string">")\n"</literal>

<literal type="string">" -f [file] file to use for json tests (default is "</literal><name>JSON_TEST_FILE_DEFAULT</name><literal type="string">")\n"</literal>

<literal type="string">" -C [dir] chdir before running r2r (default follows executable symlink + test/new\n"</literal>

<literal type="string">" -t [seconds] timeout per test (default is "</literal><name>TIMEOUT_DEFAULT_STR</name><literal type="string">")\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"Supported test types: @json @unit @fuzz @cmds\n"</literal>

<literal type="string">"OS/Arch for archos tests: "</literal><name>R2R_ARCH_OS</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>path_left_free_kv</name><parameter_list>(<parameter><decl><type><name>HtPPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r2r_chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>src_path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r2r_path</name> <init>= <expr><call><name>r_file_path</name> <argument_list>(<argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>readlink</name> <argument_list>(<argument><expr><name>r2r_path</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>src_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name> <literal type="string">"binr"</literal><name>R_SYS_DIR</name><literal type="string">"r2r"</literal><name>R_SYS_DIR</name><literal type="string">"r2r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name><literal type="string">"test"</literal><name>R_SYS_DIR</name><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>src_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>chdir</name> <argument_list>(<argument><expr><name>src_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Running from %s\n"</literal></expr></argument>, <argument><expr><name>src_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r2r_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>found</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r2r_test_run_unit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>system</name> <argument_list>(<argument><expr><literal type="string">"make -C ../unit all run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r2r_chdir_fromtest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abs_test_path</name> <init>= <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><name>test_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>abs_test_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last_slash</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>abs_test_path</name></expr></argument>, <argument><expr><name><name>R_SYS_DIR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_slash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last_slash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>chdir</name> <argument_list>(<argument><expr><name>abs_test_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_cwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cwd</name> <operator>=</operator> <call><name>r_sys_getdir</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_cwd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>old_cwd</name></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Running from %s\n"</literal></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>old_cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_cwd</name> <operator>=</operator> <name>cwd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cwd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>chdir</name> <argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>old_cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>workers_count</name> <init>= <expr><name>WORKERS_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>nothing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>log_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>radare2_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rasm2_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json_test_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r2r_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>timeout_sec</name> <init>= <expr><name>TIMEOUT_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGetopt</name></type> <name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_getopt_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hvj:r:m:f:C:LnVt:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>r_getopt_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>help</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>R2_VERSION</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><name>verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>log_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>workers_count</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>workers_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid thread count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>help</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>radare2_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>radare2_cmd</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><name>r2r_dir</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>nothing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rasm2_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rasm2_cmd</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>json_test_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>json_test_file</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>timeout_sec</name> <operator>=</operator> <call><name>strtoull</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timeout_sec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_sec</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>help</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><call><name>r_sys_getdir</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r2r_dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>chdir</name> <argument_list>(<argument><expr><name>r2r_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>dir_found</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>

?</condition><then> <expr><call><name>r2r_chdir_fromtest</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>r2r_chdir</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find db/ directory related to the given test.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r2r_subprocess_init</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Subprocess init failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atexit</name> <argument_list>(<argument><expr><name>r2r_subprocess_fini</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>time_start</name> <init>= <expr><call><name>r_sys_now</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R2RState</name></type> <name>state</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>run_config</name><operator>.</operator><name>r2_cmd</name></name> <operator>=</operator> <ternary><condition><expr><name>radare2_cmd</name></expr> ?</condition><then> <expr><name>radare2_cmd</name></expr> </then><else>: <expr><name>RADARE2_CMD_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>run_config</name><operator>.</operator><name>rasm2_cmd</name></name> <operator>=</operator> <ternary><condition><expr><name>rasm2_cmd</name></expr> ?</condition><then> <expr><name>rasm2_cmd</name></expr> </then><else>: <expr><name>RASM2_CMD_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>run_config</name><operator>.</operator><name>json_test_file</name></name> <operator>=</operator> <ternary><condition><expr><name>json_test_file</name></expr> ?</condition><then> <expr><name>json_test_file</name></expr> </then><else>: <expr><name>JSON_TEST_FILE_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>run_config</name><operator>.</operator><name>timeout_ms</name></name> <operator>=</operator> <ternary><condition><expr><name>timeout_sec</name> <operator>&gt;</operator> <name>UT64_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr> ?</condition><then> <expr><name>UT64_MAX</name></expr> </then><else>: <expr><name>timeout_sec</name> <operator>*</operator> <literal type="number">1000</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>r2r_test_database_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>results</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RPVectorFree</name><operator>)</operator><name>r2r_test_result_info_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>completed_paths</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <call><name>r_th_lock_new</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cond</name></name> <operator>=</operator> <call><name>r_th_cond_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>cond</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>ind</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Category: %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"unit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r2r_test_run_unit</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"fuzz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">".fuzz: TODO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"db/json"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"dasm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"db/asm"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"cmds"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"db"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"db/%s"</literal></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal><name>R_SYS_DIR</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r2r_test_database_load</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to load tests from \"%s\"\n"</literal></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r2r_test_database_free</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r2r_test_database_load</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to load tests from ./db\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r2r_test_database_free</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>loaded_tests</name> <init>= <expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Loaded %u tests.\n"</literal></expr></argument>, <argument><expr><name>loaded_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nothing</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>coast</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>jq_available</name> <init>= <expr><call><name>r2r_check_jq_available</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jq_available</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Skipping json tests because jq is not available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R2R_TEST_TYPE_JSON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r2r_test_free</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_remove_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_pvector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>tests</name><operator>.</operator><name>v</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>path_left</name></name> <operator>=</operator> <call><name>ht_pp_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_left_free_kv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>path_left</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_pvector_foreach</name> <argument_list>(<argument>&amp;state.queue</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>path_left</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>path_left</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPVector</name></type> <name>workers</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>workers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>workers_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>r_th_new</name> <argument_list>(<argument><expr><name>worker_th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to start thread.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>workers</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>ut64</name></type> <name>prev_completed</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>prev_paths_completed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>completed</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_log</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>prev_completed</name></expr></argument>, <argument><expr><name>prev_paths_completed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>completed</name> <operator>!=</operator> <name>prev_completed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_state</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>prev_completed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_completed</name> <operator>=</operator> <name>completed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_paths_completed</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>completed_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>completed</name> <operator>==</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_th_cond_wait</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_pvector_foreach</name> <argument_list>(<argument>&amp;workers</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_th_wait</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_free</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>xx_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>coast</name>:</label>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>completed_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r2r_test_database_free</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_lock_free</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_th_cond_free</name> <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>seconds</name> <init>= <expr><operator>(</operator><call><name>r_sys_now</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>time_start</name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Finished in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seconds</name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>minutes</name> <init>= <expr><name>seconds</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" %"</literal><name>PFMT64d</name><literal type="string">" minutes and"</literal></expr></argument>, <argument><expr><name>seconds</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seconds</name> <operator>-=</operator> <operator>(</operator><name>minutes</name> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" %"</literal><name>PFMT64d</name><literal type="string">" seconds.\n"</literal></expr></argument>, <argument><expr><name>seconds</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>radare2_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rasm2_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>json_test_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RThreadFunctionRet</name></type> <name>worker_th</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R2RState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_pvector_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>r_pvector_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>R2RTestResultInfo</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r2r_run_test</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>run_config</name></name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_th_lock_enter</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>result</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R2R_TEST_RESULT_OK</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ok_count</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_RESULT_FAILED</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>xx_count</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_RESULT_BROKEN</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>br_count</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_RESULT_FIXED</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fx_count</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>path_left</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>path_left</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>completed_paths</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>test</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_th_cond_signal</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_th_lock_leave</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_TH_STOP</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_DIFF</name></cpp:macro> <cpp:value>!__WINDOWS__</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DO_DIFF</name></expr></cpp:if>

<decl_stmt><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>r_diff_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uni</name> <init>= <expr><call><name>r_diff_buffers_to_string</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>expected</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>actual</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_diff_free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><call><name>r_str_split_duplist</name> <argument_list>(<argument><expr><name>uni</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lines</argument>, <argument>it</argument>, <argument>line</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>line</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>Color_GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>Color_RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>uni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><call><name>r_str_split_duplist</name> <argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lines</argument>, <argument>it</argument>, <argument>line</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RED</name><literal type="string">"- %s"</literal><name>Color_RESET</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>r_str_split_duplist</name> <argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lines</argument>, <argument>it</argument>, <argument>line</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_GREEN</name><literal type="string">"+ %s"</literal><name>Color_RESET</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>R2RProcessOutput</name> <modifier>*</modifier></type><name>print_runner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>args_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvars</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envvals</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>env_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>env_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s=%s "</literal></expr></argument>, <argument><expr><name><name>envvars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>envvals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>args_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strpbrk</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n \'\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" '%s'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_result_diff</name><parameter_list>(<parameter><decl><type><name>R2RRunConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>R2RTestResultInfo</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>test</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R2R_TEST_TYPE_CMD</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>r2r_run_cmd_test</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>test</name><operator>-&gt;</operator><name>cmd_test</name></name></expr></argument>, <argument><expr><name>print_runner</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>test</name><operator>-&gt;</operator><name>cmd_test</name><operator>-&gt;</operator><name>expect</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expect</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>proc_out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-- stdout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_diff</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>proc_out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>test</name><operator>-&gt;</operator><name>cmd_test</name><operator>-&gt;</operator><name>expect_err</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>proc_out</name><operator>-&gt;</operator><name>err</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expect</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-- stderr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_diff</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-- stderr\n%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>proc_out</name><operator>-&gt;</operator><name>ret</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-- exit status: "</literal><name>Color_RED</name><literal type="string">"%d"</literal><name>Color_RESET</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>proc_out</name><operator>-&gt;</operator><name>ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>R2R_TEST_TYPE_ASM</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>R2R_TEST_TYPE_JSON</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_new_results</name><parameter_list>(<parameter><decl><type><name>R2RState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>prev_completed</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>completed</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>prev_completed</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>completed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTestResultInfo</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>R2R_TEST_RESULT_OK</name> <operator>||</operator> <name><name>result</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>R2R_TEST_RESULT_FIXED</name> <operator>||</operator> <name><name>result</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>R2R_TEST_RESULT_BROKEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r2r_test_name</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>test</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>result</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R2R_TEST_RESULT_OK</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_GREEN</name><literal type="string">"[OK]"</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_RESULT_FAILED</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RED</name><literal type="string">"[XX]"</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_RESULT_BROKEN</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_BLUE</name><literal type="string">"[BR]"</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_RESULT_FIXED</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_CYAN</name><literal type="string">"[FX]"</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_CYAN</name><literal type="string">" TIMEOUT"</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" %s "</literal><name>Color_YELLOW</name><literal type="string">"%s"</literal><name>Color_RESET</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>test</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>R2R_TEST_RESULT_FAILED</name> <operator>||</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>R2R_TEST_RESULT_BROKEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_result_diff</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>run_config</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_state_counts</name><parameter_list>(<parameter><decl><type><name>R2RState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%8"</literal><name>PFMT64u</name><literal type="string">" OK %8"</literal><name>PFMT64u</name><literal type="string">" BR %8"</literal><name>PFMT64u</name><literal type="string">" XX %8"</literal><name>PFMT64u</name><literal type="string">" FX"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ok_count</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>br_count</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xx_count</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>fx_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_state</name><parameter_list>(<parameter><decl><type><name>R2RState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>prev_completed</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_new_results</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>prev_completed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"[%"</literal><name>PFMT64u</name><literal type="string">"/%"</literal><name>PFMT64u</name><literal type="string">"]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>w</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>w</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_state_counts</name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_log</name><parameter_list>(<parameter><decl><type><name>R2RState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>prev_completed</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>prev_paths_completed</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>print_new_results</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>prev_completed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paths_completed</name> <init>= <expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>completed_paths</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>prev_paths_completed</name> <operator>&lt;</operator> <name>paths_completed</name></expr>;</condition> <incr><expr><name>prev_paths_completed</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"[**] %50s "</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>completed_paths</name></name></expr></argument>, <argument><expr><name>prev_paths_completed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_state_counts</name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
