<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\binr\r2r\load.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r2r.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEFMT</name></cpp:macro> <cpp:value>"%s, line %"PFMT64u": "</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>R2RCmdTest</name> <modifier>*</modifier></type><name>r2r_cmd_test_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R2RCmdTest</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_cmd_test_free</name><parameter_list>(<parameter><decl><type><name>R2RCmdTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_KEY_STR</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free (test-&gt;field.value);</cpp:value></cpp:define>

<macro><name>R2R_CMD_TEST_FOREACH_RECORD</name><argument_list>(<argument>DO_KEY_STR</argument>, <argument>R2R_CMD_TEST_FOREACH_RECORD_NOP</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO_KEY_STR</name></cpp:undef>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>readline</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>linesz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>end</name> <operator>-</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>linesz</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>linesz</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>read_string_val</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>linenum</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Invalid string syntax, use &lt;&lt;EOF instead of '...'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endtoken</name> <init>= <expr><name>val</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>endtoken</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Missing opening end token after &lt;&lt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>endtoken</name></expr></argument>, <argument><expr><literal type="string">"EOF"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: End token must be \"EOF\", got \"%s\" instead."</literal></expr></argument>, <argument><expr><name>endtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>*</operator><name>nextline</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>linesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>nextline</name> <operator>=</operator> <call><name>readline</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>linenum</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>endtoken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <operator>*</operator><name>nextline</name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Missing closing end token %s\n"</literal></expr></argument>, <argument><expr><name>endtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RPVector</name> <modifier>*</modifier></type><name>r2r_load_cmd_test_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contents</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to open file \"%s\"\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_pvector_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>R2RCmdTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>r2r_cmd_test_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>contents</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>linesz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextline</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nextline</name> <operator>=</operator> <call><name>readline</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linenum</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linesz</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"RUN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test</name> <operator>=</operator> <call><name>r2r_cmd_test_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_KEY_STR</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (strcmp (line, key) == 0) { if (test-&gt;field.value) { free (test-&gt;field.value); eprintf (LINEFMT "Warning: Duplicate key \"%s\"\n", file, linenum, key); } if (!val) { eprintf (LINEFMT "Error: No value for key \"%s\"\n", file, linenum, key); goto fail; } test-&gt;field.line_begin = linenum; test-&gt;field.value = read_string_val (&amp;nextline, val, &amp;linenum); test-&gt;field.line_end = linenum; if (!test-&gt;field.value) { eprintf (LINEFMT "Error: Failed to read value for key \"%s\"\n", file, linenum, key); goto fail; } continue; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_KEY_BOOL</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (strcmp (line, key) == 0) { if (test-&gt;field.value) { eprintf (LINEFMT "Warning: Duplicate key \"%s\"\n", file, linenum, key); } test-&gt;field.set = true; char *cmt = strchr (val, '#'); if (cmt) { *cmt = '\0'; cmt--; while (cmt &gt; val &amp;&amp; *cmt == ' ') { *cmt = '\0'; cmt--; } } if (!strcmp (val, "1")) { test-&gt;field.value = true; } else if (!strcmp (val, "0")) { test-&gt;field.value = false; } else { eprintf (LINEFMT "Error: Invalid value \"%s\" for boolean key \"%s\", only \"1\" or \"0\" allowed.\n", file, linenum, val, key); goto fail; } continue; }</cpp:value></cpp:define>

<macro><name>R2R_CMD_TEST_FOREACH_RECORD</name><argument_list>(<argument>DO_KEY_STR</argument>, <argument>DO_KEY_BOOL</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO_KEY_STR</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO_KEY_BOOL</name></cpp:undef>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Unknown key \"%s\".\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <name>nextline</name><operator>)</operator></expr>)</condition>;</do>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>value</name></name> <operator>||</operator> <name><name>test</name><operator>-&gt;</operator><name>cmds</name><operator>.</operator><name>value</name></name> <operator>||</operator> <name><name>test</name><operator>-&gt;</operator><name>expect</name><operator>.</operator><name>value</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: found test tokens at the end of \"%s\" without RUN.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r2r_cmd_test_free</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>r_pvector_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RAsmTest</name> <modifier>*</modifier></type><name>r2r_asm_test_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R2RAsmTest</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_asm_test_free</name><parameter_list>(<parameter><decl><type><name>R2RAsmTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>disasm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_asm_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>RStrConstPool</name> <modifier>*</modifier></type><name>strpool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arch_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cpuout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitsout</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>file_tokens</name> <init>= <expr><call><name>r_str_split_duplist</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_tokens</name> <operator>||</operator> <call><name>r_list_empty</name> <argument_list>(<argument><expr><name>file_tokens</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>file_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><call><name>r_list_last</name> <argument_list>(<argument><expr><name>file_tokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>arch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>file_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>second</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>second</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>third</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>third</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>third</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>third</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cpuout</name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><name>strpool</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bitsout</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cpuout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bitsout</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cpuout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bitsout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arch_out</name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><name>strpool</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>file_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RPVector</name> <modifier>*</modifier></type><name>r2r_load_asm_test_file</name><parameter_list>(<parameter><decl><type><name>RStrConstPool</name> <modifier>*</modifier></type><name>strpool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_asm_path</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>strpool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse arch/cpu/bits from path %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contents</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to open file \"%s\"\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_pvector_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>contents</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>linesz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextline</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nextline</name> <operator>=</operator> <call><name>readline</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linenum</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linesz</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>R2R_ASM_TEST_MODE_ASSEMBLE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>R2R_ASM_TEST_MODE_DISASSEMBLE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>R2R_ASM_TEST_MODE_BIG_ENDIAN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>R2R_ASM_TEST_MODE_BROKEN</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Warning: Invalid mode char '%c'\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_ASSEMBLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R2R_ASM_TEST_MODE_DISASSEMBLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Warning: Mode specifies neither assemble nor disassemble.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>disasm</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disasm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Error: Expected \" to begin disassembly.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disasm</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>disasm</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Error: Expected \" to end disassembly.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>hex</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hex</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>disasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>hex</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>hex</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hex</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hexlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Error: Expected hex chars.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>hexlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesz</name> <init>= <expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Error: Expected hex chars.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><name>LINEFMT</name> <literal type="string">"Error: Odd number of hex chars: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>R2RAsmTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>r2r_asm_test_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>linenum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <name>arch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>cpu</name></name> <operator>=</operator> <name>cpu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <ternary><condition><expr><name>offset</name></expr> ?</condition><then> <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>strtoull</name> <argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>disasm</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>disasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>bytes_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>bytesz</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <name>nextline</name><operator>)</operator></expr>)</condition>;</do>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>r_pvector_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RJsonTest</name> <modifier>*</modifier></type><name>r2r_json_test_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R2RJsonTest</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_json_test_free</name><parameter_list>(<parameter><decl><type><name>R2RJsonTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RPVector</name> <modifier>*</modifier></type><name>r2r_load_json_test_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contents</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to open file \"%s\"\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_pvector_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>contents</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>linesz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextline</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nextline</name> <operator>=</operator> <call><name>readline</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linenum</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linesz</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>broken_token</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"BROKEN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>broken_token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>broken_token</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>R2RJsonTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>r2r_json_test_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>linenum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>test</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r2r_json_test_free</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>broken</name></name> <operator>=</operator> <ternary><condition><expr><name>broken_token</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <name>nextline</name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_test_free</name><parameter_list>(<parameter><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R2R_TEST_TYPE_CMD</name></expr>:</case>

<expr_stmt><expr><call><name>r2r_cmd_test_free</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>cmd_test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_TYPE_ASM</name></expr>:</case>

<expr_stmt><expr><call><name>r2r_asm_test_free</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>asm_test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R2R_TEST_TYPE_JSON</name></expr>:</case>

<expr_stmt><expr><call><name>r2r_json_test_free</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>json_test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>R2RTestDatabase</name> <modifier>*</modifier></type><name>r2r_test_database_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTestDatabase</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>R2RTestDatabase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RPVectorFree</name><operator>)</operator><name>r2r_test_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_constpool_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>strpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>db</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r2r_test_database_free</name><parameter_list>(<parameter><decl><type><name>R2RTestDatabase</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_constpool_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>strpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>R2RTestType</name></type> <name>test_type_for_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>load_plugins</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTestType</name></type> <name>ret</name> <init>= <expr><name>R2R_TEST_TYPE_CMD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathdup</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>pathdup</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tokens</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_pop</name> <argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>load_plugins</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>tokens</argument>, <argument>it</argument>, <argument>token</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"asm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R2R_TEST_TYPE_ASM</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R2R_TEST_TYPE_JSON</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>load_plugins</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pathdup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>database_load</name><parameter_list>(<parameter><decl><type><name>R2RTestDatabase</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Directories for loading tests too deep: %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name></type> <name>subpath</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>subpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dir</argument>, <argument>it</argument>, <argument>subname</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>subname</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>subname</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Skipping %s"</literal><name>R_SYS_DIR</name><literal type="string">"%s because it requires additional dependencies.\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"archos"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name><literal type="string">"archos"</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>subname</name></expr></argument>, <argument><expr><name>R2R_ARCH_OS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Skipping %s"</literal><name>R_SYS_DIR</name><literal type="string">"%s because it does not match the current platform.\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>subpath</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>database_load</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>subpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>subpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Path \"%s\" does not exist\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pooled_path</name> <init>= <expr><call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>strpool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>load_plugins</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R2RTestType</name></type> <name>test_type</name> <init>= <expr><call><name>test_type_for_path</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>load_plugins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>test_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R2R_TEST_TYPE_CMD</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>cmd_tests</name> <init>= <expr><call><name>r2r_load_cmd_test_file</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_tests</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_pvector_foreach</name> <argument_list>(<argument>cmd_tests</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>R2RTest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R2R_TEST_TYPE_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>pooled_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>cmd_test</name></name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>cmd_test</name><operator>-&gt;</operator><name>load_plugins</name></name> <operator>=</operator> <name>load_plugins</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_pvector_free</name> <argument_list>(<argument><expr><name>cmd_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>R2R_TEST_TYPE_ASM</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>asm_tests</name> <init>= <expr><call><name>r2r_load_asm_test_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>strpool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asm_tests</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_pvector_foreach</name> <argument_list>(<argument>asm_tests</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>R2RTest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R2R_TEST_TYPE_ASM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>pooled_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>asm_test</name></name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_pvector_free</name> <argument_list>(<argument><expr><name>asm_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>R2R_TEST_TYPE_JSON</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>json_tests</name> <init>= <expr><call><name>r2r_load_json_test_file</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>json_tests</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_pvector_foreach</name> <argument_list>(<argument>json_tests</argument>, <argument>it</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>R2RTest</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>R2RTest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R2R_TEST_TYPE_JSON</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>pooled_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>json_test</name></name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>json_test</name><operator>-&gt;</operator><name>load_plugins</name></name> <operator>=</operator> <name>load_plugins</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_pvector_free</name> <argument_list>(<argument><expr><name>json_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r2r_test_database_load</name><parameter_list>(<parameter><decl><type><name>R2RTestDatabase</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>database_load</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
