<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\binr\preload\libr2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>RCoreFile</name> <modifier>*</modifier></type><name>openself</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"self://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"self://"</literal></expr></argument>, <argument><expr><name>R_PERM_RW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sigusr1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>openself</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_prompt_loop</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_file_close</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sigusr2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>openself</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"=H&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_libwrap_init</name><parameter_list>()</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(constructor</function_decl>))<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_libwrap_init</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>web</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>sigusr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>sigusr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"libr2 initialized. send SIGUSR1 to %d in order to reach the r2 prompt\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"kill -USR1 %d\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>web</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RARUN2_WEB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>core</name> <operator>=</operator> <call><name>r_core_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_loadlibs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>R_CORE_LOADLIBS_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>web</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"=H&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><literal type="string">"RARUN2_WEB"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>web</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>

<function><type><name>void</name></type> <name>alloc_console</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>coninfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hStdin</name> <init>= <expr><call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>lpMode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AllocConsole</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name> <argument_list>(<argument><expr><name>hStdin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lpMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>hStdin</name></expr></argument>, <argument><expr><name>lpMode</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>ENABLE_MOUSE_INPUT</name> <operator>|</operator> <name>ENABLE_PROCESSED_INPUT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name> <argument_list>(<argument><expr><name>hStdin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coninfo</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleScreenBufferSize</name> <argument_list>(<argument><expr><name>hStdin</name></expr></argument>, <argument><expr><name><name>coninfo</name><operator>.</operator><name>dwSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"conin$"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"conout$"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"conout$"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>start_r2</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>core</name> <operator>=</operator> <call><name>r_core_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_loadlibs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>R_CORE_LOADLIBS_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"self://"</literal></expr></argument>, <argument><expr><name>R_PERM_RW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_prompt_loop</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_file_close</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rundll_inject</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl></parameter>, <parameter><decl><type><name>LPWSTR</name></type> <name>lpszCmdLine</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nCmdShow</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><name>BOOL</name> <name>APIENTRY</name></type> <name>DllMain</name><parameter_list>(<parameter><decl><type><name>HMODULE</name></type> <name>hModule</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpReserved</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DLL_PROCESS_DETACH</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>DLL_PROCESS_ATTACH</name></expr>:</case>

<expr_stmt><expr><call><name>alloc_console</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_r2</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
