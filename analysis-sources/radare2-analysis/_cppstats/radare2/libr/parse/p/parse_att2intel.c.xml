<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\parse\p\parse_att2intel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"cmpl"</literal></expr>, <expr><literal type="string">"cmp 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"testl"</literal></expr>, <expr><literal type="string">"test 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"leal"</literal></expr>, <expr><literal type="string">"lea 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movl"</literal></expr>, <expr><literal type="string">"mov 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xorl"</literal></expr>, <expr><literal type="string">"xor 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"andl"</literal></expr>, <expr><literal type="string">"and 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"orl"</literal></expr>, <expr><literal type="string">"or 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"addl"</literal></expr>, <expr><literal type="string">"add 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"incl"</literal></expr>, <expr><literal type="string">"inc 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"decl"</literal></expr>, <expr><literal type="string">"dec 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"subl"</literal></expr>, <expr><literal type="string">"sub 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mull"</literal></expr>, <expr><literal type="string">"mul 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"divl"</literal></expr>, <expr><literal type="string">"div 2, 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"pushl"</literal></expr>, <expr><literal type="string">"push 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"popl"</literal></expr>, <expr><literal type="string">"pop 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ret"</literal></expr>, <expr><literal type="string">"ret"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="char">'\0'</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>argv</name><index>[ <expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>newstr</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name><operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">","</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w3</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_trim_head</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>num</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>num</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"+%d]%s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%d]%s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w0</name> <operator>=</operator> <operator>*</operator><name>w1</name> <operator>=</operator> <operator>*</operator><name>w2</name> <operator>=</operator> <operator>*</operator><name>w3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wa</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>w0</name></expr>, <expr><name>w1</name></expr>, <expr><name>w2</name></expr>, <expr><name>w3</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_att2intel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"att2intel"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"X86 att 2 intel plugin"</literal></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>parse</name> <operator>=</operator> <operator>&amp;</operator><name>parse</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_att2intel</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
