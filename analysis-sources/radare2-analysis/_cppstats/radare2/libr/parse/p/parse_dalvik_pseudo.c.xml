<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\parse\p\parse_dalvik_pseudo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"rsub-int"</literal></expr>, <expr><literal type="string">"1 = 2 - 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"float-to-double"</literal></expr>, <expr><literal type="string">"1 = (double)(float) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"float-to-long"</literal></expr>, <expr><literal type="string">"1 = (long)(float) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"float-to-int"</literal></expr>, <expr><literal type="string">"1 = (int)(float) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"long-to-float"</literal></expr>, <expr><literal type="string">"1 = (float)(long) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"long-to-int"</literal></expr>, <expr><literal type="string">"1 = (int)(long) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"long-to-double"</literal></expr>, <expr><literal type="string">"1 = (double) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"double-to-long"</literal></expr>, <expr><literal type="string">"1 = (long) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"double-to-int"</literal></expr>, <expr><literal type="string">"1 = (int) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"int-to-double"</literal></expr>, <expr><literal type="string">"1 = (double) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"int-to-long"</literal></expr>, <expr><literal type="string">"1 = (long) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"int-to-byte"</literal></expr>, <expr><literal type="string">"1 = (byte) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aget-byte"</literal></expr>, <expr><literal type="string">"1 = (byte) 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aget-short"</literal></expr>, <expr><literal type="string">"1 = (short) 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aget-object"</literal></expr>, <expr><literal type="string">"1 = (object) 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sput-wide"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sput-object"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-long"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-double"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul-long"</literal></expr>, <expr><literal type="string">"1 = 2 * 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const-string/jumbo"</literal></expr>, <expr><literal type="string">"1 = (jumbo-string) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const-string"</literal></expr>, <expr><literal type="string">"1 = (string) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const-wide"</literal></expr>, <expr><literal type="string">"1 = (wide) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const/4"</literal></expr>, <expr><literal type="string">"1 = (wide) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmp-int"</literal></expr>, <expr><literal type="string">"1 = (2 == 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmp-long"</literal></expr>, <expr><literal type="string">"1 = (2 == 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpl-double"</literal></expr>, <expr><literal type="string">"1 = (double)(2 == 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpl-float"</literal></expr>, <expr><literal type="string">"1 = (float)(2 == 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpl-int"</literal></expr>, <expr><literal type="string">"1 = (int)(2 == 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpg-double"</literal></expr>, <expr><literal type="string">"1 = (2 == 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpg-float"</literal></expr>, <expr><literal type="string">"1 = (2 == 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"or-int/2addr"</literal></expr>, <expr><literal type="string">"1 |= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"or-long"</literal></expr>, <expr><literal type="string">"1 |= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"and-long/2addr"</literal></expr>, <expr><literal type="string">"1 &amp;= (long) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"and-int"</literal></expr>, <expr><literal type="string">"1 &amp;= (int) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"and-byte"</literal></expr>, <expr><literal type="string">"1 &amp;= (byte) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub-float/2addr"</literal></expr>, <expr><literal type="string">"1 -= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub-float"</literal></expr>, <expr><literal type="string">"1 = 2 - 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub-int"</literal></expr>, <expr><literal type="string">"1 = (int) 2 - 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub-long"</literal></expr>, <expr><literal type="string">"1 = (long) 2 - 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub-long/2addr"</literal></expr>, <expr><literal type="string">"1 -= (long) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub-int/2addr"</literal></expr>, <expr><literal type="string">"1 -= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move/16"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-object"</literal></expr>, <expr><literal type="string">"1 = (object) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-object/16"</literal></expr>, <expr><literal type="string">"1 = (object) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-object/from16"</literal></expr>, <expr><literal type="string">"1 = (object) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-wide/from16"</literal></expr>, <expr><literal type="string">"1 = (wide) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"array-length"</literal></expr>, <expr><literal type="string">"1 = Array.length (2)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"new-array"</literal></expr>, <expr><literal type="string">"1 = new array (2, 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"new-instance"</literal></expr>, <expr><literal type="string">"1 = new 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shr-long/2addr"</literal></expr>, <expr><literal type="string">"1 &gt;&gt;= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shr-long"</literal></expr>, <expr><literal type="string">"1 = (long) 2 &gt;&gt; 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shr-int"</literal></expr>, <expr><literal type="string">"1 = (int) 2 &gt;&gt; 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ushr-int"</literal></expr>, <expr><literal type="string">"1 = (int) 2 &gt;&gt;&gt; 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ushr-int/2addr"</literal></expr>, <expr><literal type="string">"1 &gt;&gt;&gt;= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ushr-long"</literal></expr>, <expr><literal type="string">"1 = (long) 2 &gt;&gt;&gt; 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ushl-int/2addr"</literal></expr>, <expr><literal type="string">"1 &lt;&lt;&lt;= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shl-int/2addr"</literal></expr>, <expr><literal type="string">"1 &lt;&lt;&lt;= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shl-int"</literal></expr>, <expr><literal type="string">"1 = (int) 2 &lt;&lt; 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shl-long"</literal></expr>, <expr><literal type="string">"1 = (long) 2 &lt;&lt; 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move/from16"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-exception"</literal></expr>, <expr><literal type="string">"1 = exception"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-result"</literal></expr>, <expr><literal type="string">"1 = result"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-result-wide"</literal></expr>, <expr><literal type="string">"1 = (wide) result"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-result-object"</literal></expr>, <expr><literal type="string">"1 = (object) result"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const-wide/high16"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const/16"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const-wide/16"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const-wide/32"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const-class"</literal></expr>, <expr><literal type="string">"1 = (class) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const/high16"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"const"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rem-long"</literal></expr>, <expr><literal type="string">"1 = (long) 2 % 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rem-double"</literal></expr>, <expr><literal type="string">"1 = (double) 2 % 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rem-float"</literal></expr>, <expr><literal type="string">"1 = (float) 2 % 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rem-long/2addr"</literal></expr>, <expr><literal type="string">"1 %= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rem-float/2addr"</literal></expr>, <expr><literal type="string">"1 %= (float) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rem-double/2addr"</literal></expr>, <expr><literal type="string">"1 %= (double) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"instance-of"</literal></expr>, <expr><literal type="string">"1 = insteanceof (2) == 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aput"</literal></expr>, <expr><literal type="string">"2[3] = 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aput-byte"</literal></expr>, <expr><literal type="string">"2[3] = (byte) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aput-short"</literal></expr>, <expr><literal type="string">"2[3] = (short) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aput-object"</literal></expr>, <expr><literal type="string">"2[3] = (object) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aput-wide"</literal></expr>, <expr><literal type="string">"2[3] = (wide) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aput-char"</literal></expr>, <expr><literal type="string">"2[3] = (char) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aput-boolean"</literal></expr>, <expr><literal type="string">"2[3] = (bool) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aget"</literal></expr>, <expr><literal type="string">"1 = 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aget-wide"</literal></expr>, <expr><literal type="string">"1 = (wide) 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aget-char"</literal></expr>, <expr><literal type="string">"1 = (char) 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aget-boolean"</literal></expr>, <expr><literal type="string">"1 = (boolean) 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sget"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sget-char"</literal></expr>, <expr><literal type="string">"1 = (char) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sget-short"</literal></expr>, <expr><literal type="string">"1 = (short) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sget-boolean"</literal></expr>, <expr><literal type="string">"1 = (bool) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sget-object"</literal></expr>, <expr><literal type="string">"1 = (object) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iput"</literal></expr>, <expr><literal type="string">"2[3] = 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iput-object"</literal></expr>, <expr><literal type="string">"2[3] = (object) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iput-byte"</literal></expr>, <expr><literal type="string">"2[3] = (byte) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iput-char"</literal></expr>, <expr><literal type="string">"2[3] = (char) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iput-boolean"</literal></expr>, <expr><literal type="string">"2[3] = (bool) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sput-boolean"</literal></expr>, <expr><literal type="string">"2[3] = (bool) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sput-char"</literal></expr>, <expr><literal type="string">"2[3] = (char) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iput-int"</literal></expr>, <expr><literal type="string">"2[3] = (int) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iget"</literal></expr>, <expr><literal type="string">"1 = 2[3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sget-byte"</literal></expr>, <expr><literal type="string">"1 = (byte) 2 [3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iget-byte"</literal></expr>, <expr><literal type="string">"1 = (byte) 2 [3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iget-char"</literal></expr>, <expr><literal type="string">"1 = (char) 2 [3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iget-short"</literal></expr>, <expr><literal type="string">"1 = (short) 2 [3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iget-wide"</literal></expr>, <expr><literal type="string">"1 = (wide) 2 [3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iget-object"</literal></expr>, <expr><literal type="string">"1 = (2) 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iget-boolean"</literal></expr>, <expr><literal type="string">"1 = (bool) 2 [3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"+iget-wide-volatile"</literal></expr>, <expr><literal type="string">"1 = (wide-volatile) 2 [3]"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-eq"</literal></expr>, <expr><literal type="string">"if (1 == 2) goto 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-lt"</literal></expr>, <expr><literal type="string">"if (1 &lt; 2) goto 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-ne"</literal></expr>, <expr><literal type="string">"if (1 != 2) goto 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-eqz"</literal></expr>, <expr><literal type="string">"if (!1) goto 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-ge"</literal></expr>, <expr><literal type="string">"if (1 &gt; zero) goto 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-le"</literal></expr>, <expr><literal type="string">"if (1 &lt;= 2) goto 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-gtz"</literal></expr>, <expr><literal type="string">"if (1 &gt; 0) goto 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"filled-new-array"</literal></expr>, <expr><literal type="string">"1 = new Array(2)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"neg-long"</literal></expr>, <expr><literal type="string">"1 = -2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"neg-double"</literal></expr>, <expr><literal type="string">"1 = -2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"neg-float"</literal></expr>, <expr><literal type="string">"1 = -2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"not-int"</literal></expr>, <expr><literal type="string">"1 = !2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"packed-switch"</literal></expr>, <expr><literal type="string">"switch 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sparse-switch"</literal></expr>, <expr><literal type="string">"switch 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-direct"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-direct/range"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-interface"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-static"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-super"</literal></expr>, <expr><literal type="string">"call super 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-super/range"</literal></expr>, <expr><literal type="string">"call super 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-polymorphic"</literal></expr>, <expr><literal type="string">"call polymorphic 2 1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-virtual/range"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-virtual"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"+invoke-virtual-quick"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"+invoke-interface/range"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"invoke-interface/range"</literal></expr>, <expr><literal type="string">"call 2 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-float/2addr"</literal></expr>, <expr><literal type="string">"1 /= (float) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-double/2addr"</literal></expr>, <expr><literal type="string">"1 /= (double) 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-double"</literal></expr>, <expr><literal type="string">"1 = (double) 2 / 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-float"</literal></expr>, <expr><literal type="string">"1 = 2 / 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-int/lit8"</literal></expr>, <expr><literal type="string">"1 = 2 / 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-int/lit16"</literal></expr>, <expr><literal type="string">"1 = 2 / 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-int/2addr"</literal></expr>, <expr><literal type="string">"1 /= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div-int"</literal></expr>, <expr><literal type="string">"1 = (int)(2 / 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"goto/16"</literal></expr>, <expr><literal type="string">"goto 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"goto/32"</literal></expr>, <expr><literal type="string">"goto 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"or-int"</literal></expr>, <expr><literal type="string">"1 = (int)(2 | 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xor-int"</literal></expr>, <expr><literal type="string">"1 = (int)(2 ^ 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xor-int/2addr"</literal></expr>, <expr><literal type="string">"1 ^= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xor-byte"</literal></expr>, <expr><literal type="string">"1 = (byte)(2 ^ 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xor-short"</literal></expr>, <expr><literal type="string">"1 = (short)(2 ^ 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub-int"</literal></expr>, <expr><literal type="string">"1 = (int)(2 - 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-nez"</literal></expr>, <expr><literal type="string">"if (1) goto 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"if-ltz"</literal></expr>, <expr><literal type="string">"if (1 &lt;=) goto 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul-int"</literal></expr>, <expr><literal type="string">"1 = (int)(2 * 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul-int/lit8"</literal></expr>, <expr><literal type="string">"1 = (2 * 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"check-cast"</literal></expr>, <expr><literal type="string">"if (1 instanceof 2)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-int"</literal></expr>, <expr><literal type="string">"1 = (int)(2 + 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-int/lit8"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-int/lit16"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-int/2addr"</literal></expr>, <expr><literal type="string">"1 += 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-double"</literal></expr>, <expr><literal type="string">"1 = (double)(2 + 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add-double/2addr"</literal></expr>, <expr><literal type="string">"1 += (double)2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul-float/2addr"</literal></expr>, <expr><literal type="string">"1 *= 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul-float"</literal></expr>, <expr><literal type="string">"1 = 2 * 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xor-long"</literal></expr>, <expr><literal type="string">"1 = (long)(2 ^ 3)"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul-double"</literal></expr>, <expr><literal type="string">"1 = 2 * 3"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-wide"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move-wide/16"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"return-wide"</literal></expr>, <expr><literal type="string">"return (wide) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"return-object"</literal></expr>, <expr><literal type="string">"return (object) 1"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="char">'\0'</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;=</operator><literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>argv</name><index>[ <expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>newstr</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name><operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w3</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w4</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DEPRECATED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>w0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w0</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w1</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name><operator>=</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w1</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w2</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name><operator>=</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w2</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w3</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name><operator>=</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w3</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w4</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wa</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>w0</name></expr>, <expr><name>w1</name></expr>, <expr><name>w2</name></expr>, <expr><name>w3</name></expr>, <expr><name>w4</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"+ -"</literal></expr></argument>, <argument><expr><literal type="string">"- "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXPERIMENTAL_ZERO</name></expr></cpp:if>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"0 = "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int snprintf_len1_ = snprintf (a, 32, x, w1, w1); int snprintf_len2_ = snprintf (b, 32, y, w1); if (snprintf_len1_ &lt; 32 &amp;&amp; snprintf_len2_ &lt; 32) { p = r_str_replace (p, a, b, 0); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s +"</literal></expr></argument>, <argument><expr><literal type="string">"%s +="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s -"</literal></expr></argument>, <argument><expr><literal type="string">"%s -="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &amp;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &amp;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s |"</literal></expr></argument>, <argument><expr><literal type="string">"%s |="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s ^"</literal></expr></argument>, <argument><expr><literal type="string">"%s ^="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &gt;&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &gt;&gt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &lt;&lt;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &lt;&lt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_dalvik_pseudo</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dalvik.pseudo"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"DALVIK pseudo syntax"</literal></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>parse</name> <operator>=</operator> <name>parse</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_dalvik_pseudo</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
