<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\parse\p\parse_mips_pseudo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>can_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_operands</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\x00'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;</operator> <name>max_operands</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_operands</name></decl>;</decl_stmt>

}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"addi"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"addiu"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"addu"</literal></expr>, <expr><literal type="string">"1 = 2 + 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"1 = 2 &amp; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"andi"</literal></expr>, <expr><literal type="string">"1 = 2 &amp; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"goto 1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bal"</literal></expr>, <expr><literal type="string">"call 1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"begzal"</literal></expr>, <expr><literal type="string">"if (1 &gt;= 0) call 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"beq"</literal></expr>, <expr><literal type="string">"if (1 == 2) goto 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"beqz"</literal></expr>, <expr><literal type="string">"if (!1) goto 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bgez"</literal></expr>, <expr><literal type="string">"if (1 &gt;= 0) goto 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bgtz"</literal></expr>, <expr><literal type="string">"if (1 &gt; 0) goto 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"blez"</literal></expr>, <expr><literal type="string">"if (1 &lt;= 0) goto 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bltz"</literal></expr>, <expr><literal type="string">"if (1 &lt; 0) goto 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bltzal"</literal></expr>, <expr><literal type="string">"if (1 &lt; 0) call 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bne"</literal></expr>, <expr><literal type="string">"if (1 != 2) goto 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bnez"</literal></expr>, <expr><literal type="string">"if (1) goto 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"j"</literal></expr>, <expr><literal type="string">"goto 1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jal"</literal></expr>, <expr><literal type="string">"call 1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jalr"</literal></expr>, <expr><literal type="string">"call 1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jr"</literal></expr>, <expr><literal type="string">"goto 1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lb"</literal></expr>, <expr><literal type="string">"1 = byte [3 + 2]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lbu"</literal></expr>, <expr><literal type="string">"1 = (unsigned) byte [3 + 2]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lh"</literal></expr>, <expr><literal type="string">"1 = halfword [3 + 2]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lhu"</literal></expr>, <expr><literal type="string">"1 = (unsigned) halfword [3 + 2]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"li"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lui"</literal></expr>, <expr><literal type="string">"1 = 2 &lt;&lt; 16"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lw"</literal></expr>, <expr><literal type="string">"1 = [3 + 2]"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mfhi"</literal></expr>, <expr><literal type="string">"1 = hi"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mflo"</literal></expr>, <expr><literal type="string">"1 = lo"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"move"</literal></expr>, <expr><literal type="string">"1 = 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movn"</literal></expr>, <expr><literal type="string">"if (3) 1 = 2"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movz"</literal></expr>, <expr><literal type="string">"if (!3) 1 = 2"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mult"</literal></expr>, <expr><literal type="string">"(hi,lo) = 1 * 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"multu"</literal></expr>, <expr><literal type="string">"unsigned (hi,lo) = 1 * 2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul"</literal></expr>, <expr><literal type="string">"1 = 2 * 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mulu"</literal></expr>, <expr><literal type="string">"1 = 2 * 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"negu"</literal></expr>, <expr><literal type="string">"1 = ~2"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"nor"</literal></expr>, <expr><literal type="string">"1 = ~(2 | 3)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"1 = 2 | 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ori"</literal></expr>, <expr><literal type="string">"1 = 2 | 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sb"</literal></expr>, <expr><literal type="string">"byte [3 + 2] = 1"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sh"</literal></expr>, <expr><literal type="string">"halfword [3 + 2] = 1"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sll"</literal></expr>, <expr><literal type="string">"1 = 2 &lt;&lt; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sllv"</literal></expr>, <expr><literal type="string">"1 = 2 &lt;&lt; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"slr"</literal></expr>, <expr><literal type="string">"1 = 2 &gt;&gt; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="string">"slt"</literal></expr>, <expr><literal type="string">"1 = (2 &lt; 3)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"slti"</literal></expr>, <expr><literal type="string">"1 = (2 &lt; 3)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sltiu"</literal></expr>, <expr><literal type="string">"1 = (unsigned) (2 &lt; 3)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sltu"</literal></expr>, <expr><literal type="string">"1 = (unsigned) (2 &lt; 3)"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sra"</literal></expr>, <expr><literal type="string">"1 = (signed) 2 &gt;&gt; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="string">"srl"</literal></expr>, <expr><literal type="string">"1 = 2 &gt;&gt; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"srlv"</literal></expr>, <expr><literal type="string">"1 = 2 &gt;&gt; 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"subu"</literal></expr>, <expr><literal type="string">"1 = 2 - 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"1 = 2 - 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sw"</literal></expr>, <expr><literal type="string">"[3 + 2] = 1"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"syscall"</literal></expr>, <expr><literal type="string">"syscall"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="string">"1 = 2 ^ 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xori"</literal></expr>, <expr><literal type="string">"1 = 2 ^ 3"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="char">'\0'</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>can_replace</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_operands</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>argv</name><index>[ <expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>newstr</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name><operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSZ</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w1</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w2</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w3</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w4</name><index>[<expr><name>WSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"jr ra"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>w0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name><operator>=</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name><operator>=</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name><operator>=</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wa</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>w0</name></expr>, <expr><name>w1</name></expr>, <expr><name>w2</name></expr>, <expr><name>w3</name></expr>, <expr><name>w4</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"+ -"</literal></expr></argument>, <argument><expr><literal type="string">"- "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" + ]"</literal></expr></argument>, <argument><expr><literal type="string">" + 0]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"0 = "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int snprintf_len1_ = snprintf (a, 32, x, w1, w1); int snprintf_len2_ = snprintf (b, 32, y, w1); if (snprintf_len1_ &lt; 32 &amp;&amp; snprintf_len2_ &lt; 32) { p = r_str_replace (p, a, b, 0); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s +"</literal></expr></argument>, <argument><expr><literal type="string">"%s +="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s -"</literal></expr></argument>, <argument><expr><literal type="string">"%s -="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &amp;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &amp;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s |"</literal></expr></argument>, <argument><expr><literal type="string">"%s |="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s ^"</literal></expr></argument>, <argument><expr><literal type="string">"%s ^="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &gt;&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &gt;&gt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPLACE</name> <argument_list>(<argument><expr><literal type="string">"%s = %s &lt;&lt;"</literal></expr></argument>, <argument><expr><literal type="string">"%s &lt;&lt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="string">"0000"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>varsub</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tstr</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>analb</name><operator>.</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>varlist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bpargs</name> <init>= <expr><call><name><name>p</name><operator>-&gt;</operator><name>varlist</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>spargs</name> <init>= <expr><call><name><name>p</name><operator>-&gt;</operator><name>varlist</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ucase</name> <init>= <expr><call><name>IS_UPPER</name> <argument_list>(<argument><expr><operator>*</operator><name>tstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>spargs</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>get_ptr_at</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>get_ptr_at</name></name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpf</name> <operator>=</operator> <literal type="string">"%d(%s)"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpf</name> <operator>=</operator> <literal type="string">"0x%x(%s)"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmpf</name> <operator>=</operator> <literal type="string">"-0x%x(%s)"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>oldstr</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name>tmpf</name></expr></argument>, <argument><expr><call><name>r_num_abs</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ucase</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>localvar_only</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></then><else>:

<expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s(%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bpargs</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpf</name> <operator>=</operator> <literal type="string">"%d(%s)"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpf</name> <operator>=</operator> <literal type="string">"0x%x(%s)"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmpf</name> <operator>=</operator> <literal type="string">"-0x%x(%s)"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>oldstr</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name>tmpf</name></expr></argument>, <argument><expr><call><name>r_num_abs</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_BP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ucase</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>localvar_only</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></then><else>:

<expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s(%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bpargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>spargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_mips_pseudo</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mips.pseudo"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"MIPS pseudo syntax"</literal></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>parse</name> <operator>=</operator> <name>parse</name></expr>,

<expr><operator>.</operator><name>varsub</name> <operator>=</operator> <name>varsub</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_mips_pseudo</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
