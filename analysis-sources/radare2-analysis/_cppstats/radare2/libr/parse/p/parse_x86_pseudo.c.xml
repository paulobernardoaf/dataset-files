<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\parse\p\parse_x86_pseudo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPSEUDOOPS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>args</name><index>[<expr><name>MAXPSEUDOOPS</name></expr>]</index></name></decl>;</decl_stmt> 

}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"adc"</literal></expr>, <expr><literal type="string">"#+= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"#+= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"#&amp;= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"call"</literal></expr>, <expr><literal type="string">"#()"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmove"</literal></expr>, <expr><literal type="string">"if (!var) #= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmovl"</literal></expr>,<expr><literal type="string">"if (var &lt; 0) #= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="string">"var = #- #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpsq"</literal></expr>, <expr><literal type="string">"var = #- #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpsb"</literal></expr>, <expr><literal type="string">"while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI++; DI++; CX--; if (!var) break; }"</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cmpsw"</literal></expr>, <expr><literal type="string">"while (CX != 0) { var = *(DS*16 + SI) - *(ES*16 + DI); SI+=4; DI+=4; CX--; if (!var) break; }"</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"dec"</literal></expr>, <expr><literal type="string">"#--"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"div"</literal></expr>, <expr><literal type="string">"#/= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fabs"</literal></expr>, <expr><literal type="string">"abs(#)"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fadd"</literal></expr>, <expr><literal type="string">"#= #+ #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fcomp"</literal></expr>, <expr><literal type="string">"var = #- #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fcos"</literal></expr>, <expr><literal type="string">"#= cos(#)"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fdiv"</literal></expr>, <expr><literal type="string">"#= #/ #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fiadd"</literal></expr>, <expr><literal type="string">"#= #/ #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ficom"</literal></expr>, <expr><literal type="string">"var = #- #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fidiv"</literal></expr>, <expr><literal type="string">"#= #/ #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fidiv"</literal></expr>, <expr><literal type="string">"#= #* #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fisub"</literal></expr>, <expr><literal type="string">"#= #- #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fnul"</literal></expr>, <expr><literal type="string">"#= #* #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fnop"</literal></expr>, <expr><literal type="string">" "</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"frndint"</literal></expr>, <expr><literal type="string">"#= (int) #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fsin"</literal></expr>, <expr><literal type="string">"#= sin(#)"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fsqrt"</literal></expr>, <expr><literal type="string">"#= sqrt(#)"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fsub"</literal></expr>, <expr><literal type="string">"#= #- #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fxch"</literal></expr>, <expr><literal type="string">"#,#= #,#"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"idiv"</literal></expr>, <expr><literal type="string">"#/= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"imul"</literal></expr>, <expr><literal type="string">"#= #* #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"#= io[#]"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"inc"</literal></expr>, <expr><literal type="string">"#++"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ja"</literal></expr>, <expr><literal type="string">"if (((unsigned) var) &gt; 0) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jb"</literal></expr>, <expr><literal type="string">"if (((unsigned) var) &lt; 0) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jbe"</literal></expr>, <expr><literal type="string">"if (((unsigned) var) &lt;= 0) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"je"</literal></expr>, <expr><literal type="string">"if (!var) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jg"</literal></expr>, <expr><literal type="string">"if (var &gt; 0) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jge"</literal></expr>, <expr><literal type="string">"if (var &gt;= 0) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jle"</literal></expr>, <expr><literal type="string">"if (var &lt;= 0) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jmp"</literal></expr>, <expr><literal type="string">"goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"jne"</literal></expr>, <expr><literal type="string">"if (var) goto #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lea"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movq"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movaps"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movups"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movsd"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movsx"</literal></expr>,<expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movsxd"</literal></expr>,<expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movzx"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movntdq"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movnti"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movntpd"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"pcmpeqb"</literal></expr>, <expr><literal type="string">"#== #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movdqu"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"movdqa"</literal></expr>, <expr><literal type="string">"#= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"pextrb"</literal></expr>, <expr><literal type="string">"#= (byte) #[#]"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"palignr"</literal></expr>, <expr><literal type="string">"#= #align #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"pxor"</literal></expr>, <expr><literal type="string">"#^= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xorps"</literal></expr>, <expr><literal type="string">"#^= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mul"</literal></expr>, <expr><literal type="string">"#= #* #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mulss"</literal></expr>, <expr><literal type="string">"#= #* #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="string">"#~= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"not"</literal></expr>, <expr><literal type="string">"#= !#"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"#|= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"out"</literal></expr>, <expr><literal type="string">"io[#] = #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"pop"</literal></expr>, <expr><literal type="string">"pop #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"push"</literal></expr>, <expr><literal type="string">"push #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ret"</literal></expr>, <expr><literal type="string">"return"</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sal"</literal></expr>, <expr><literal type="string">"#&lt;&lt;= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sar"</literal></expr>, <expr><literal type="string">"#&gt;&gt;= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sete"</literal></expr>, <expr><literal type="string">"#= e"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"setne"</literal></expr>, <expr><literal type="string">"#= ne"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shl"</literal></expr>, <expr><literal type="string">"#&lt;&lt;&lt;= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shld"</literal></expr>, <expr><literal type="string">"#&lt;&lt;&lt;= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sbb"</literal></expr>, <expr><literal type="string">"#= #- #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shr"</literal></expr>, <expr><literal type="string">"#&gt;&gt;&gt;= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"shlr"</literal></expr>, <expr><literal type="string">"#&gt;&gt;&gt;= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"#-= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"swap"</literal></expr>, <expr><literal type="string">"var = #; #= #; #= var"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"test"</literal></expr>, <expr><literal type="string">"var = #&amp; #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xchg"</literal></expr>, <expr><literal type="string">"#,#= #,#"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xadd"</literal></expr>, <expr><literal type="string">"#,#= #,#+#"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="string">"#^= #"</literal></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"mov"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <name>MAXPSEUDOOPS</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>args</name><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>newstr</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>newstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>: <expr><literal type="string">","</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w3</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>sz</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>w0</name> <operator>=</operator> <operator>*</operator><name>w1</name> <operator>=</operator> <operator>*</operator><name>w2</name> <operator>=</operator> <operator>*</operator><name>w3</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>wa</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>w0</name></expr>, <expr><name>w1</name></expr>, <expr><name>w2</name></expr>, <expr><name>w3</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nw</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="string">"mul"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>wa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rax"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rax"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<default>default :</default> 

<if_stmt><if>if <condition>(<expr><name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> \

<name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>||</operator> <name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ax"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ax"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nw</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>wa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>wa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="string">"ax"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="string">"ah"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"return %s"</literal></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="string">"leave"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="string">"pop"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="string">"bp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>wa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>retleave_asm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name>nw</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_localvar</name> <parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newstr_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ireg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>att</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>att</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>localvar_only</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ireg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"(%%%s)"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>newstr_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ireg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">", %%%s"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>newstr_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s(%%%s%s)"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ireg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" + %s"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>localvar_only</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>newstr_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[%s%s]"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>newstr_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[%s%s %c %s]"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mk_reg_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>att</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ireg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>att</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ireg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">", %%%s"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%d(%%%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s0x%x(%%%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ireg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" + %s"</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[%s%s %c %d]"</literal></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[%s%s %c 0x%x]"</literal></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>varsub</name> <parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bpargs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spargs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>analb</name><operator>.</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>bparg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sparg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>bpargiter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spiter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>oldstr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>newstr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tstr</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tstr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>att</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>relsub</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>att</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rip</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_str_casestr</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><literal type="string">"(%rip)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pre</name> <init>= <expr><name>tstr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>rip</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><name>rip</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>word</name> <operator>&gt;</operator> <name>tstr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>word</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>word</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&gt;</operator> <name>tstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>word</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>n</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>repl_num</name> <init>= <expr><name>oplen</name> <operator>+</operator> <name>addr</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tstr_new</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%08"</literal><name>PFMT64x</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>repl_num</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>rip</name> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <name>tstr_new</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rip</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_str_casestr</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><literal type="string">"[rip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rip</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ripend</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>rip</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plus</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>rip</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>neg</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>rip</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tstr_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>repl_num</name> <init>= <expr><name>oplen</name> <operator>+</operator> <name>addr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ripend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ripend</name> <operator>=</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plus</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>repl_num</name> <operator>+=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>plus</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>repl_num</name> <operator>-=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>neg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tstr_new</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s0x%08"</literal><name>PFMT64x</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>repl_num</name></expr></argument>, <argument><expr><name>ripend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <name>tstr_new</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>varlist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bpargs</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>varlist</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spargs</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>varlist</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ucase</name> <init>= <expr><operator>*</operator><name>tstr</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tstr</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ucase</name> <operator>&amp;&amp;</operator> <name><name>tstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ucase</name> <operator>=</operator> <name><name>tstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>tstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ireg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>get_op_ireg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ireg</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>get_op_ireg</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>spargs</argument>, <argument>spiter</argument>, <argument>sparg</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>get_ptr_at</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sparg</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>get_ptr_at</name></name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>sparg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mk_reg_str</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_SP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sparg</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><name>ireg</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ucase</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parse_localvar</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sparg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_SP</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>ireg</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>att</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>att</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bpargs</argument>, <argument>bpargiter</argument>, <argument>bparg</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bparg</name><operator>-&gt;</operator><name>delta</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bparg</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <operator>-</operator><name><name>bparg</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mk_reg_str</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_BP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bparg</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sign</name><operator>==</operator><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><name>ireg</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ucase</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parse_localvar</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>bparg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_BP</name></expr>]</index></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>ireg</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>att</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>att</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[%s%c0x%x]"</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_BP</name></expr>]</index></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>bparg</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>char</name></type> <name><name>bp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_BP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>R_REG_NAME_BP</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ireg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>spargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bpargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RParsePlugin</name></type> <name>r_parse_plugin_x86_pseudo</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"x86.pseudo"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"X86 pseudo syntax"</literal></expr>,

<expr><operator>.</operator><name>parse</name> <operator>=</operator> <operator>&amp;</operator><name>parse</name></expr>,

<expr><operator>.</operator><name>varsub</name> <operator>=</operator> <operator>&amp;</operator><name>varsub</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_PARSE</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_parse_plugin_x86_pseudo</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
