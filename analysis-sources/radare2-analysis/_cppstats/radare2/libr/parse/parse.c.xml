<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\parse\parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RParsePlugin</name> <modifier>*</modifier></type><name><name>parse_static_plugins</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>R_PARSE_STATIC_PLUGINS</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>RParse</name> <modifier>*</modifier></type><name>r_parse_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parsers</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>parsers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_parse_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>notin_flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flagspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pseudo</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>relsub</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tailsub</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>minval</name></name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>localvar_only</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>parse_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_parse_add</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>parse_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_parse_free</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parsers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_parse_add</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RParsePlugin</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>itsFine</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>foo</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>itsFine</name> <operator>=</operator> <call><name><name>foo</name><operator>-&gt;</operator><name>init</name></name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>itsFine</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parsers</name></name></expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_parse_use</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RParsePlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>p</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>p-&gt;parsers</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_parse_assemble</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>assemble</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name>data</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>assemble</name></name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>s</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_parse_parse</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>p</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>&amp;&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>parse</name></name><operator>)</operator></expr>

?</condition><then> <expr><call><name><name>p</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>parse</name></name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_parse_immtrim</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opstr</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>opstr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>IS_HEXCHAR</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" - ]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" - ]"</literal></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" + ]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" + ]"</literal></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">", ]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">", ]"</literal></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" - "</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opstr</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">" + "</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>opstr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_parse_varsub</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>varsub</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>varsub</name></name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>oplen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_parse_set_user_ptr</name><parameter_list>(<parameter><decl><type><name>RParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
