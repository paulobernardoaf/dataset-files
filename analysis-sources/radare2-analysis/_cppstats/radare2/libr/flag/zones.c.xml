<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\flag\zones.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>f-&gt;zones</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>R_FLAG_ZONE_USE_SDB</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>RFlagZoneItem</name> <modifier>*</modifier></type><name>r_flag_zone_get</name> <parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>DB</argument>, <argument>iter</argument>, <argument>zi</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>zi</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>RFlagZoneItem</name> <modifier>*</modifier></type><name>r_flag_zone_get_inrange</name> <parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>DB</argument>, <argument>iter</argument>, <argument>zi</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>zi</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_add</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_FLAG_ZONE_USE_SDB</name></expr></cpp:if>

<decl_stmt><decl><type><name>RFlagZoneItem</name></type> <name>zi</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DB</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bound</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bound</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_fmt_tobin</name> <argument_list>(<argument><expr><name>bound</name></expr></argument>, <argument><expr><literal type="string">"qq"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name><name>zi</name><operator>.</operator><name>from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zi</name><operator>.</operator><name>from</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <name><name>zi</name><operator>.</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zi</name><operator>.</operator><name>to</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newBounds</name> <init>= <expr><call><name>sdb_fmt_tostr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>zi</name></expr></argument>, <argument><expr><literal type="string">"qq"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newBounds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>newBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name> <init>= <expr><call><name>r_flag_zone_get</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>zi</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <name><name>zi</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zi</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_flag_zone_reset</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zi</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFlagZoneItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_reset</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_FLAG_ZONE_USE_SDB</name></expr></cpp:if>

<return>return <expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>zones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>zones</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_flag_zone_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_del</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_FLAG_ZONE_USE_SDB</name></expr></cpp:if>

<return>return <expr><call><name>sdb_unset</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>DB</argument>, <argument>iter</argument>, <argument>zi</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_FLAG_ZONE_USE_SDB</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>r_flag_zone_context_t</name> <block>{

<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>l</name></decl>, <name>h</name>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>RFlagZoneContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from_to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagZoneContext</name> <modifier>*</modifier></type><name>zc</name> <init>= <expr><operator>(</operator><name>RFlagZoneContext</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagZoneItem</name></type> <name>zi</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>name</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_fmt_tobin</name> <argument_list>(<argument><expr><name>from_to</name></expr></argument>, <argument><expr><literal type="string">"qq"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>from</name></name> <operator>&gt;</operator> <name><name>zc</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zc</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>from</name></name> <operator>&lt;</operator> <name><name>zc</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>from</name></name> <operator>&lt;</operator> <name><name>zc</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zc</name><operator>-&gt;</operator><name>l</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>from</name></name> <operator>&gt;=</operator> <name><name>zc</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>to</name></name> <operator>&lt;=</operator> <name><name>zc</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zc</name><operator>-&gt;</operator><name>l</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>to</name></name> <operator>&gt;=</operator> <name><name>zc</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>to</name></name> <operator>&gt;</operator> <name><name>zc</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zc</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>.</operator><name>to</name></name> <operator>&lt;</operator> <name><name>zc</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zc</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>zi</name><operator>.</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>zc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_around</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagZoneContext</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>f</name></expr>, <expr><name>addr</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UT64_MAX</name></expr>, <expr><name>prev</name></expr>, <expr><name>next</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <operator>*</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_list</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from_to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s%s %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>from_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_list</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>cb_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>R_API</name> <name>void</name></type> <name>r_flag_zone_item_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_around</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <operator>*</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>h</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>DB</argument>, <argument>iter</argument>, <argument>zi</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;=</operator> <name>l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;=</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>zi</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_flag_zone_barlist</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>bsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name> <init>= <expr><call><name>r_flag_zone_get_inrange</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>from</name> <operator>+</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>zi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>bsize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_flag_zone_list</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagZoneItem</name> <modifier>*</modifier></type><name>zi</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>DB</argument>, <argument>iter</argument>, <argument>zi</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"fz %s @ 0x08%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f %s %d 0x08%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>zi</name><operator>-&gt;</operator><name>to</name></name> <operator>-</operator> <name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x08%"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" %s\n"</literal></expr></argument>,

<argument><expr><name><name>zi</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><name><name>zi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__MAIN__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_flag_zone_##x</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagZone</name> <modifier>*</modifier></type><name>fz</name> <init>= <expr><call><name>r_flag_zone_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>FZ</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fz</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0x80000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FZ</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fz</name></expr></argument>, <argument><expr><literal type="string">"network"</literal></expr></argument>, <argument><expr><literal type="number">0x85000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FZ</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fz</name></expr></argument>, <argument><expr><literal type="string">"libc"</literal></expr></argument>, <argument><expr><literal type="number">0x90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FZ</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fz</name></expr></argument>, <argument><expr><literal type="string">"network"</literal></expr></argument>, <argument><expr><literal type="number">0x000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FZ</name><argument_list>(<argument><expr><name>around</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fz</name></expr></argument>, <argument><expr><literal type="number">0x83000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FZ</name><argument_list>(<argument><expr><name>around</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fz</name></expr></argument>, <argument><expr><literal type="number">0x50000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FZ</name><argument_list>(<argument><expr><name>around</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fz</name></expr></argument>, <argument><expr><literal type="number">0x500000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>FZ</name></type>(<name>list</name>)<parameter_list>(<parameter><decl><type><name>fz</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>r_flag_zone_free</name> <argument_list>(<argument><expr><name>fz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
