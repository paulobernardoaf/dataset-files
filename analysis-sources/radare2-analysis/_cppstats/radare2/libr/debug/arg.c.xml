<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\arg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_debug_arg_get</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cctype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>n32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>n64</name></decl>, <decl><type ref="prev"/><name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>reg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cctype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_CC_TYPE_SYSV</name></expr>:</case>

<case>case <expr><name>R_ANAL_CC_TYPE_FASTCALL</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"A%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_ANAL_CC_TYPE_STDCALL</name></expr>:</case>

<case>case <expr><name>R_ANAL_CC_TYPE_PASCAL</name></expr>:</case>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"SP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><name>n64</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><name>n32</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"A%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_debug_arg_set</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cctype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>reg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cctype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_CC_TYPE_SYSV</name></expr>:</case>

<case>case <expr><name>R_ANAL_CC_TYPE_FASTCALL</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"A%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_debug_reg_set</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_ANAL_CC_TYPE_STDCALL</name></expr>:</case>

<case>case <expr><name>R_ANAL_CC_TYPE_PASCAL</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
