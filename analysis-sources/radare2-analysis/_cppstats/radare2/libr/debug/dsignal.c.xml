<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\dsignal.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>dbg-&gt;sgnls</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

}</block> <decl><name><name>signals</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"SIGHUP"</literal></expr>, <expr><literal type="string">"1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGINT"</literal></expr>, <expr><literal type="string">"2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGQUIT"</literal></expr>, <expr><literal type="string">"3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGILL"</literal></expr>, <expr><literal type="string">"4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGTRAP"</literal></expr>, <expr><literal type="string">"5"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGABRT"</literal></expr>, <expr><literal type="string">"6"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGBUS"</literal></expr>, <expr><literal type="string">"7"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGFPE"</literal></expr>, <expr><literal type="string">"8"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGKILL"</literal></expr>, <expr><literal type="string">"9"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGUSR1"</literal></expr>, <expr><literal type="string">"10"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGSEGV"</literal></expr>, <expr><literal type="string">"11"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGUSR2"</literal></expr>, <expr><literal type="string">"12"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGPIPE"</literal></expr>, <expr><literal type="string">"13"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGALRM"</literal></expr>, <expr><literal type="string">"14"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGTERM"</literal></expr>, <expr><literal type="string">"15"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGSTKFLT"</literal></expr>, <expr><literal type="string">"16"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGCHLD"</literal></expr>, <expr><literal type="string">"17"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGCONT"</literal></expr>, <expr><literal type="string">"18"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGSTOP"</literal></expr>, <expr><literal type="string">"19"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGTSTP"</literal></expr>, <expr><literal type="string">"20"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGTTIN"</literal></expr>, <expr><literal type="string">"21"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGTTOU"</literal></expr>, <expr><literal type="string">"22"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGURG"</literal></expr>, <expr><literal type="string">"23"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGXCPU"</literal></expr>, <expr><literal type="string">"24"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGXFSZ"</literal></expr>, <expr><literal type="string">"25"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGVTALRM"</literal></expr>, <expr><literal type="string">"26"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGPROF"</literal></expr>, <expr><literal type="string">"27"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGWINCH"</literal></expr>, <expr><literal type="string">"28"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGIO"</literal></expr>, <expr><literal type="string">"29"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGPOLL"</literal></expr>, <expr><literal type="string">"SIGIO"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGLOST"</literal></expr>, <expr><literal type="string">"29"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGPWR"</literal></expr>, <expr><literal type="string">"30"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGSYS"</literal></expr>, <expr><literal type="string">"31"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGRTMIN"</literal></expr>, <expr><literal type="string">"32"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIGRTMAX"</literal></expr>, <expr><literal type="string">"NSIG"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_signal_init</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DB</name> <operator>=</operator> <call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"signals"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr></argument>, <argument><expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>, <argument><expr><name><name>signals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>siglistcb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"cfg."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name> <init>= <expr><operator>(</operator><name>RDebug</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>, <decl><type ref="prev"/><name>mode</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>_mode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>key</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>R_DBG_SIGNAL_CONT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" cont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>R_DBG_SIGNAL_SKIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">" skip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>siglistjsoncb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"cfg."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name> <init>= <expr><operator>(</operator><name>RDebug</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>key</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>_mode</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"signum\":\"%s\",\"name\":\"%s\",\"option\":"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>R_DBG_SIGNAL_CONT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"\"cont\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>R_DBG_SIGNAL_SKIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"\"skip\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_signal_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>siglistcb</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>siglistjsoncb</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_newline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_signal_send</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_sandbox_kill</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_signal_setup</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_queryf</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="string">"cfg.%d=%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_signal_what</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"cfg.%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_signal_set</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_debug_kill_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>kill_list</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>kill_list</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_kill_setup</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: set signal handlers of child\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (dbg-&gt;h-&gt;kill_setup)

return dbg-&gt;h-&gt;kill_setup (dbg, sig, action);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
