<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\plugin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RDebugPlugin</name> <modifier>*</modifier></type><name><name>debug_static_plugins</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>R_DEBUG_STATIC_PLUGINS</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_debug_plugin_init</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>plugins</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>debug_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_debug_plugin_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>debug_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_debug_use</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>str</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;plugins</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_debug_set_arch</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>bp</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>breakpoint</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>bp</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>dbg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>reg_profile</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>reg_profile</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name> <operator>!=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>init</name></name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot retrieve reg profile from debug plugin (%s)\n"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debug_plugin_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>spaces</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>spaces</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spaces</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RDebugPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;plugins</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><literal type="number">8</literal><operator>-</operator><call><name>strlen</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spaces</name><index>[<expr><name>sp</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s{\"name\":\"%s\",\"license\":\"%s\"}"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>license</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%d %s %s %s%s\n"</literal></expr></argument>,

<argument><expr><name>count</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>h</name> <operator>==</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"dbg"</literal></expr></then><else>: <expr><literal type="string">"---"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>spaces</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>license</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>spaces</name><index>[<expr><name>sp</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_debug_plugin_add</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugPlugin</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name> <operator>||</operator> <operator>!</operator><name>foo</name> <operator>||</operator> <operator>!</operator><name><name>foo</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDebugPlugin</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RDebugPlugin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RDebugPlugin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_debug_plugin_set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_debug_plugin_set_reg_profile: Cannot find '%s'\n"</literal></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>set_reg_profile</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>dbg</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>set_reg_profile</name></name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
