<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\xnu\xnu_threads.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xnu_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xnu_threads.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xnu_thread_free</name> <parameter_list>(<parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to deallocate thread port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_thread_get_drx</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>thread</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__x86_64__</name> <operator>||</operator> <name>__i386__</name></expr></cpp:if>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>x86_DEBUG_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>x86_DEBUG_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name><operator>)</operator></expr>

?</condition><then> <expr><sizeof>sizeof <argument_list>(<argument><expr><name>x86_debug_state64_t</name></expr></argument>)</argument_list></sizeof></expr>

</then><else>: <expr><sizeof>sizeof <argument_list>(<argument><expr><name>x86_debug_state32_t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>drx</name><operator>.</operator><name>uds</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_get_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>drx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__arm64</name> <operator>||</operator> <name>__aarch64</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE64_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_get_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx64</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE32_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_get_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx32</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__arm</name> <operator>||</operator> <name>__armv7__</name></expr></cpp:elif>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_get_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:warning>#<cpp:directive>warning</cpp:directive> xnu_thread_get_drx: Unsupported architecture</cpp:warning>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>KERN_FAILURE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_thread_set_drx</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>thread</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>

<decl_stmt><decl><type><name>x86_debug_state_t</name> <modifier>*</modifier></type><name>regs</name> <init>= <expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>drx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>regs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>x86_DEBUG_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>x86_DEBUG_STATE_COUNT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>dsh</name><operator>.</operator><name>flavor</name></name> <operator>=</operator> <name>x86_DEBUG_STATE64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>dsh</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>x86_DEBUG_STATE64_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>dsh</name><operator>.</operator><name>flavor</name></name> <operator>=</operator> <name>x86_DEBUG_STATE32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>dsh</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>x86_DEBUG_STATE32_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_set_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><name>regs</name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__arm64</name> <operator>||</operator> <name>__aarch64</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE64_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_set_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx64</name></name></expr></argument>,

<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE32_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_set_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx32</name></name></expr></argument>,

<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name> <operator>||</operator> <name>__arm</name> <operator>||</operator> <name>__armv7__</name></expr></cpp:elif>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_DEBUG_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_set_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PPC_DEBUG_STATE32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPC_DEBUG_STATE32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ppc_debug_state_t</name> <modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>dsh</name><operator>.</operator><name>flavor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_thread_set_gpr</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>thread</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_REG_T</name> <modifier>*</modifier></type><name>regs</name> <init>= <expr><operator>(</operator><name>R_REG_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>gpr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>regs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>regs</name><operator>-&gt;</operator><name>uts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>x86_THREAD_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>x86_THREAD_STATE_COUNT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>flavor</name></name> <operator>=</operator> <name>x86_THREAD_STATE64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>x86_THREAD_STATE64_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>flavor</name></name> <operator>=</operator> <name>x86_THREAD_STATE32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>x86_THREAD_STATE32_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64</name> <operator>||</operator> <name>__aarch64</name> <operator>||</operator> <name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

thread-&gt;flavor = ARM_UNIFIED_THREAD_STATE;

thread-&gt;count = ARM_UNIFIED_THREAD_STATE_COUNT;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>regs</name><operator>-&gt;</operator><name>uts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_THREAD_STATE64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_THREAD_STATE64_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arm_thread_state64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_THREAD_STATE32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_THREAD_STATE32_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arm_thread_state32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm</name> <operator>||</operator> <name>__arm__</name> <operator>||</operator> <name>__armv7__</name></expr></cpp:elif>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_THREAD_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_THREAD_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arm_thread_state_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_set_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><name>regs</name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_thread_get_gpr</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>thread</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>R_REG_T</name> <modifier>*</modifier></type><name>regs</name> <init>= <expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>gpr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>regs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:if>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>regs</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64</name> <operator>||</operator> <name>__aarch64</name> <operator>||</operator> <name>__arch64__</name> <operator>||</operator> <name>__arm64__</name></expr></cpp:elif>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>regs</name><operator>-&gt;</operator><name>uts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_THREAD_STATE64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_THREAD_STATE64_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arm_thread_state64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_THREAD_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_THREAD_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arm_thread_state32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm</name> <operator>||</operator> <name>__arm__</name> <operator>||</operator> <name>__armv7__</name></expr></cpp:elif>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>regs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>ARM_THREAD_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>ARM_THREAD_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arm_thread_state_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__x86_64__</name> <operator>||</operator> <name>__i386__</name></expr></cpp:elif>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>regs</name><operator>-&gt;</operator><name>uts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name> <operator>=</operator> <name>x86_THREAD_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>x86_THREAD_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name><operator>)</operator></expr> ?</condition><then>

<expr><sizeof>sizeof <argument_list>(<argument><expr><name>x86_thread_state64_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else>:

<expr><sizeof>sizeof <argument_list>(<argument><expr><name>x86_thread_state32_t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>thread_get_state</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>flavor</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><name>regs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_fill_info_thread</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:if>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>count</name> <init>= <expr><name>THREAD_BASIC_INFO_COUNT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>thread_identifier_info_data_t</name></type> <name>identifier_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name> <init>= <expr><call><name>thread_info</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>THREAD_BASIC_INFO</name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_info_t</name><operator>)</operator><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>basic_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Fail to get thread_basic_info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>THREAD_IDENTIFIER_INFO_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>thread_info</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>THREAD_IDENTIFIER_INFO</name></expr></argument>,

<argument><expr><operator>(</operator><name>thread_info_t</name><operator>)</operator><operator>&amp;</operator><name>identifier_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Fail to get thread_identifier_info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>proc_threadinfo</name></name></type> <name>proc_threadinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_proc</name> <init>= <expr><call><name>proc_pidinfo</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>PROC_PIDTHREADINFO</name></expr></argument>,

<argument><expr><name><name>identifier_info</name><operator>.</operator><name>thread_handle</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>proc_threadinfo</name></expr></argument>, <argument><expr><name>PROC_PIDTHREADINFO_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_proc</name> <operator>&amp;&amp;</operator> <name><name>proc_threadinfo</name><operator>.</operator><name>pth_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>proc_threadinfo</name><operator>.</operator><name>pth_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xnu_thread_t</name> <modifier>*</modifier></type><name>xnu_get_thread_with_info</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>thread_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>xnu_thread_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xnu_fill_info_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>thread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xnu_update_thread_info</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xnu_fill_info_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_find</name> <parameter_list>(<parameter><decl><type><name>thread_t</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&amp;&amp;</operator> <name>port</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <operator>*</operator><name>port</name><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xnu_update_thread_list</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>thread_array_t</name></type> <name>thread_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>thread_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>task_t</name></type> <name>task</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><operator>&amp;</operator><name>xnu_thread_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>pid_to_task</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>task</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>task_threads</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thread_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to get list of task's threads\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>thread</name> <operator>=</operator> <call><name>xnu_get_thread_with_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>thread_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to fill_thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to add thread to list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xnu_thread_free</name> <argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>dbg-&gt;threads</argument>, <argument>iter</argument>, <argument>iter2</argument>, <argument>thread</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name><name>thread_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xnu_update_thread_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>r_list_find</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thread_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><operator>&amp;</operator><name>thread_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name><name>thread_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to deallocate port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>xnu_get_thread_with_info</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>thread_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vm_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>mach_vm_address_t</name><operator>)</operator><name>thread_list</name></expr></argument>,

<argument><expr><name>thread_count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>thread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
