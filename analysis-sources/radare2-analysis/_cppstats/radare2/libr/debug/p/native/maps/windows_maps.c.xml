<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\maps\windows_maps.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows_maps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../windows/windows_debug.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_SECTION_HEADER</name> <modifier>*</modifier></type><name>sect_hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sect_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>RWinModInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_map_type</name><parameter_list>(<parameter><decl><type><name>MEMORY_BASIC_INFORMATION</name> <modifier>*</modifier></type><name>mbi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>mbi</name><operator>-&gt;</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MEM_IMAGE</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"IMAGE"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MEM_MAPPED</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"MAPPED"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MEM_PRIVATE</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"PRIVATE"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"UNKNOWN"</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDebugMap</name> <modifier>*</modifier></type><name>add_map</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>MEMORY_BASIC_INFORMATION</name> <modifier>*</modifier></type><name>mbi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>map_type</name> <init>= <expr><call><name>get_map_type</name> <argument_list>(<argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>mbi</name><operator>-&gt;</operator><name>Protect</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PAGE_EXECUTE</name></expr>:</case>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PAGE_EXECUTE_READ</name></expr>:</case>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PAGE_EXECUTE_READWRITE</name></expr>:</case>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>R_PERM_RWX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PAGE_READONLY</name></expr>:</case>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PAGE_READWRITE</name></expr>:</case>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>R_PERM_RW</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PAGE_WRITECOPY</name></expr>:</case>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PAGE_EXECUTE_WRITECOPY</name></expr>:</case>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>map_name</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%-8s %s"</literal></expr></argument>, <argument><expr><name>map_type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map_name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>mr</name> <init>= <expr><call><name>r_debug_map_new</name> <argument_list>(<argument><expr><name>map_name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name><name>mbi</name><operator>-&gt;</operator><name>Type</name></name> <operator>==</operator> <name>MEM_PRIVATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>map_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RDebugMap</name> <modifier>*</modifier></type><name>add_map_reg</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>MEMORY_BASIC_INFORMATION</name> <modifier>*</modifier></type><name>mbi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>add_map</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>mbi</name><operator>-&gt;</operator><name>BaseAddress</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>mbi</name><operator>-&gt;</operator><name>RegionSize</name></name></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_w32_dbg_modules</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>main_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MODULEENTRY32</name></type> <name>me</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><name>TH32CS_SNAPMODULE</name> <operator>|</operator> <name>TH32CS_SNAPMODULE32</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h_mod_snap</name> <init>= <expr><call><name>w32_CreateToolhelp32Snapshot</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h_mod_snap</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"r_w32_dbg_modules/CreateToolhelp32Snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err_w32_dbg_modules</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>MODULEENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Module32First</name> <argument_list>(<argument><expr><name>h_mod_snap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"r_w32_dbg_modules/Module32First"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err_w32_dbg_modules</name>;</goto>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>me</name><operator>.</operator><name>modBaseAddr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mod_name</name> <init>= <expr><call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>szModule</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>dbgmap</name> <init>= <expr><call><name>r_debug_map_new</name> <argument_list>(<argument><expr><name>mod_name</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>, <argument><expr><name>baddr</name> <operator>+</operator> <name><name>me</name><operator>.</operator><name>modBaseSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mod_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dbgmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbgmap</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>szExePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbgmap</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>dbgmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>Module32Next</name> <argument_list>(<argument><expr><name>h_mod_snap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<label><name>err_w32_dbg_modules</name>:</label>

<if_stmt><if>if <condition>(<expr><name>h_mod_snap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>h_mod_snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pe_hdr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pe_hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>IMAGE_DOS_HEADER</name> <modifier>*</modifier></type><name>dos_header</name> <init>= <expr><operator>(</operator><name>IMAGE_DOS_HEADER</name> <operator>*</operator><operator>)</operator><name>pe_hdr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_NT_HEADERS</name> <modifier>*</modifier></type><name>nt_headers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dos_header</name><operator>-&gt;</operator><name>e_magic</name></name> <operator>==</operator> <name>IMAGE_DOS_SIGNATURE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nt_headers</name> <operator>=</operator> <operator>(</operator><name>IMAGE_NT_HEADERS</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dos_header</name>

<operator>+</operator> <name><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nt_headers</name><operator>-&gt;</operator><name>Signature</name></name> <operator>==</operator> <name>IMAGE_NT_SIGNATURE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_mod_inf</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h_proc</name></decl></parameter>, <parameter><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>RWinModInfo</name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>IMAGE_DOS_HEADER</name> <modifier>*</modifier></type><name>dos_hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_NT_HEADERS</name> <modifier>*</modifier></type><name>nt_hdrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_NT_HEADERS32</name> <modifier>*</modifier></type><name>nt_hdrs32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_SECTION_HEADER</name> <modifier>*</modifier></type><name>sect_hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>pe_hdr</name><index>[<expr><literal type="number">0x1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE_T</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod_inf_fill</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sect_hdr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_inf_fill</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReadProcessMemory</name> <argument_list>(<argument><expr><name>h_proc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCVOID</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>pe_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pe_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>(</operator><name>SIZE_T</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name>pe_hdr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <call><name>is_pe_hdr</name> <argument_list>(<argument><expr><name>pe_hdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dos_hdr</name> <operator>=</operator> <operator>(</operator><name>IMAGE_DOS_HEADER</name> <operator>*</operator><operator>)</operator><name>pe_hdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nt_hdrs</name> <operator>=</operator> <operator>(</operator><name>IMAGE_NT_HEADERS</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dos_hdr</name> <operator>+</operator> <name><name>dos_hdr</name><operator>-&gt;</operator><name>e_lfanew</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nt_hdrs</name><operator>-&gt;</operator><name>FileHeader</name><operator>.</operator><name>Machine</name></name> <operator>==</operator> <name>IMAGE_FILE_MACHINE_I386</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>nt_hdrs32</name> <operator>=</operator> <operator>(</operator><name>IMAGE_NT_HEADERS32</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dos_hdr</name> <operator>+</operator> <name><name>dos_hdr</name><operator>-&gt;</operator><name>e_lfanew</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>sect_count</name></name> <operator>=</operator> <name><name>nt_hdrs32</name><operator>-&gt;</operator><name>FileHeader</name><operator>.</operator><name>NumberOfSections</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sect_hdr</name> <operator>=</operator> <operator>(</operator><name>IMAGE_SECTION_HEADER</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nt_hdrs32</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>IMAGE_NT_HEADERS32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>sect_count</name></name> <operator>=</operator> <name><name>nt_hdrs</name><operator>-&gt;</operator><name>FileHeader</name><operator>.</operator><name>NumberOfSections</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sect_hdr</name> <operator>=</operator> <operator>(</operator><name>IMAGE_SECTION_HEADER</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nt_hdrs</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>IMAGE_NT_HEADERS</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sect_hdr</name> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>IMAGE_SECTION_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mod</name><operator>-&gt;</operator><name>sect_count</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pe_hdr</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>pe_hdr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>sect_hdr</name></name> <operator>=</operator> <operator>(</operator><name>IMAGE_SECTION_HEADER</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>IMAGE_SECTION_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mod</name><operator>-&gt;</operator><name>sect_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>sect_hdr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>sect_hdr</name></name></expr></argument>, <argument><expr><name>sect_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>IMAGE_SECTION_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mod</name><operator>-&gt;</operator><name>sect_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_inf_fill</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"malloc set_mod_inf()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_inf_fill</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>sect_hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mod_inf_fill</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proc_mem_img</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h_proc</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>map_list</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>mod_list</name></decl></parameter>, <parameter><decl><type><name>RWinModInfo</name> <modifier>*</modifier></type><name>mod</name></decl></parameter>, <parameter><decl><type><name>SYSTEM_INFO</name> <modifier>*</modifier></type><name>si</name></decl></parameter>, <parameter><decl><type><name>MEMORY_BASIC_INFORMATION</name> <modifier>*</modifier></type><name>mbi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>mbi</name><operator>-&gt;</operator><name>BaseAddress</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>mbi</name><operator>-&gt;</operator><name>RegionSize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mod</name><operator>-&gt;</operator><name>map</name></name> <operator>||</operator> <name><name>addr</name> <argument_list type="generic">&lt; <argument><expr><name><name>mod</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>||</operator> <operator>(</operator><name>addr</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <name><name>mod</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>mod</name><operator>-&gt;</operator><name>sect_hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RWinModInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>mod_list</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mod</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_mod_inf</name> <argument_list>(<argument><expr><name>h_proc</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mod</name><operator>-&gt;</operator><name>map</name></name> <operator>&amp;&amp;</operator> <name><name>mod</name><operator>-&gt;</operator><name>sect_hdr</name></name> <operator>&amp;&amp;</operator> <name><name>mod</name><operator>-&gt;</operator><name>sect_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sect_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p_mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sect_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_mask</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>dwPageSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mod</name><operator>-&gt;</operator><name>sect_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>IMAGE_SECTION_HEADER</name> <modifier>*</modifier></type><name>sect_hdr</name> <init>= <expr><operator>&amp;</operator><name><name>mod</name><operator>-&gt;</operator><name>sect_hdr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sect_addr</name> <init>= <expr><name><name>mod</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>sect_hdr</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sect_len</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>sect_hdr</name><operator>-&gt;</operator><name>Misc</name><operator>.</operator><name>VirtualSize</name></name><operator>)</operator> <operator>+</operator> <name>p_mask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>p_mask</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sect_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sect_addr</name> <operator>&gt;=</operator> <name>addr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sect_addr</name> <operator>+</operator> <name>sect_len</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>addr</name> <operator>+</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sect_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name>sect_addr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>addr</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>sect_addr</name> <operator>+</operator> <name>sect_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sect_found</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sect_found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>map_name</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s | %s"</literal></expr></argument>, <argument><expr><name><name>mod</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sect_hdr</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"r_str_newf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sect_found</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_map</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><name>map_name</name></expr></argument>, <argument><expr><name>sect_addr</name></expr></argument>, <argument><expr><name>sect_len</name></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_map_reg</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><name>map_name</name></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>map_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sect_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sect_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_map_reg</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><name><name>mod</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mod</name><operator>-&gt;</operator><name>map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_map_reg</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_map_reg</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><name><name>mod</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proc_mem_map</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h_proc</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>map_list</name></decl></parameter>, <parameter><decl><type><name>MEMORY_BASIC_INFORMATION</name> <modifier>*</modifier></type><name>mbi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>f_name</name><index>[<expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><call><name>GetMappedFileName</name> <argument_list>(<argument><expr><name>h_proc</name></expr></argument>, <argument><expr><name><name>mbi</name><operator>-&gt;</operator><name>BaseAddress</name></name></expr></argument>, <argument><expr><name>f_name</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f_name_</name> <init>= <expr><call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>f_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_map_reg</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><name>f_name_</name></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>f_name_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_map_reg</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_w32_dbg_maps</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>cur_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>mbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RWinModInfo</name></type> <name>mod_inf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>map_list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mod_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetSystemInfo</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_addr</name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>lpMinimumApplicationAddress</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_list</name> <operator>=</operator> <call><name>r_w32_dbg_modules</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cur_addr</name> <operator>&lt;</operator> <name><name>si</name><operator>.</operator><name>lpMaximumApplicationAddress</name></name> <operator>&amp;&amp;</operator>

<call><name>VirtualQueryEx</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>cur_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mbi</name><operator>.</operator><name>State</name></name> <operator>!=</operator> <name>MEM_FREE</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>mbi</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MEM_IMAGE</name></expr>:</case>

<expr_stmt><expr><call><name>proc_mem_img</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>map_list</name></expr></argument>, <argument><expr><name>mod_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod_inf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MEM_MAPPED</name></expr>:</case>

<expr_stmt><expr><call><name>proc_mem_map</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>map_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>add_map_reg</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_addr</name> <operator>=</operator> <operator>(</operator><name>LPVOID</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>mbi</name><operator>.</operator><name>BaseAddress</name></name> <operator>+</operator> <name><name>mbi</name><operator>.</operator><name>RegionSize</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>mod_inf</name><operator>.</operator><name>sect_hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>mod_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>map_list</name></expr>;</return>

</block_content>}</block></function>

</unit>
