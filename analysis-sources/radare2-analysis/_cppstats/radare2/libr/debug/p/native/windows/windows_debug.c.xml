<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\windows\windows_debug.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32dbg_wrap.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>wait_time</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w32_PROCESS_ALL_ACCESS</name></cpp:macro> <cpp:value>(STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0xFFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w32_THREAD_ALL_ACCESS</name></cpp:macro> <cpp:value>w32_PROCESS_ALL_ACCESS</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>setup_debug_privileges</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>tok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenProcessToken</name> <argument_list>(<argument><expr><call><name>GetCurrentProcess</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TOKEN_ADJUST_PRIVILEGES</name> <operator>|</operator> <name>TOKEN_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LUID</name></type> <name>luid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LookupPrivilegeValue</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SE_DEBUG_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>luid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TOKEN_PRIVILEGES</name></type> <name>tp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>PrivilegeCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Luid</name> <operator>=</operator> <name>luid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Attributes</name> <operator>=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name>SE_PRIVILEGE_ENABLED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AdjustTokenPrivileges</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetLastError</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_init</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rio</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOW32Dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>rio</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>w32dbg_wrap</name></name> <operator>=</operator> <call><name>w32dbg_wrap_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setup_debug_privileges</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>lib</name> <init>= <expr><call><name>GetModuleHandle</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lib</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w32_DebugActiveProcessStop</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"DebugActiveProcessStop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_OpenThread</name> <operator>=</operator> <operator>(</operator><call><call><name>HANDLE</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"OpenThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_OpenProcess</name> <operator>=</operator> <operator>(</operator><call><call><name>HANDLE</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"OpenProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_DebugBreakProcess</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"DebugBreakProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_CreateToolhelp32Snapshot</name> <operator>=</operator> <operator>(</operator><call><call><name>HANDLE</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"CreateToolhelp32Snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_GetThreadId</name> <operator>=</operator> <operator>(</operator><call><call><name>DWORD</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"GetThreadId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_GetProcessId</name> <operator>=</operator> <operator>(</operator><call><call><name>DWORD</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"GetProcessId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_QueryFullProcessImageName</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>LPTSTR</name></expr></argument>, <argument><expr><name>PDWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><call><name>W32_TCALL</name> <argument_list>(<argument><expr><literal type="string">"QueryFullProcessImageName"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_GetEnabledXStateFeatures</name> <operator>=</operator> <operator>(</operator><call><call><name>ut64</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>()</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"GetEnabledXStateFeatures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_InitializeContext</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>PCONTEXT</name> <operator>*</operator></expr></argument>, <argument><expr><name>PDWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"InitializeContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_GetXStateFeaturesMask</name> <operator>=</operator> <operator>(</operator><macro><name>BOOL</name> <argument_list>(<argument>WINAPI *</argument>)</argument_list></macro> <operator>(</operator><name>PCONTEXT</name> <name>Context</name><operator>,</operator> <name>PDWORD64</name><operator>)</operator><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"GetXStateFeaturesMask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_LocateXStateFeature</name> <operator>=</operator> <operator>(</operator><macro><name>PVOID</name> <argument_list>(<argument>WINAPI *</argument>)</argument_list></macro> <operator>(</operator><name>PCONTEXT</name> <name>Context</name><operator>,</operator> <name>DWORD</name><operator>,</operator> <name>PDWORD</name><operator>)</operator><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"LocateXStateFeature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_SetXStateFeaturesMask</name> <operator>=</operator> <operator>(</operator><macro><name>BOOL</name> <argument_list>(<argument>WINAPI *</argument>)</argument_list></macro> <operator>(</operator><name>PCONTEXT</name> <name>Context</name><operator>,</operator> <name>DWORD64</name><operator>)</operator><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"SetXStateFeaturesMask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>LoadLibrary</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"psapi.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot load psapi.dll. Aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w32_GetMappedFileName</name> <operator>=</operator> <operator>(</operator><call><call><name>DWORD</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>LPVOID</name></expr></argument>, <argument><expr><name>LPTSTR</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><call><name>W32_TCALL</name> <argument_list>(<argument><expr><literal type="string">"GetMappedFileName"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_GetModuleBaseName</name> <operator>=</operator> <operator>(</operator><call><call><name>DWORD</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>HMODULE</name></expr></argument>, <argument><expr><name>LPTSTR</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><call><name>W32_TCALL</name> <argument_list>(<argument><expr><literal type="string">"GetModuleBaseName"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_GetModuleInformation</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>HMODULE</name></expr></argument>, <argument><expr><name>LPMODULEINFO</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"GetModuleInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_GetModuleFileNameEx</name> <operator>=</operator> <operator>(</operator><call><call><name>DWORD</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>HMODULE</name></expr></argument>, <argument><expr><name>LPTSTR</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><call><name>W32_TCALL</name> <argument_list>(<argument><expr><literal type="string">"GetModuleFileNameEx"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>LoadLibrary</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"ntdll.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot load ntdll.dll. Aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w32_NtQuerySystemInformation</name> <operator>=</operator> <operator>(</operator><call><call><name>NTSTATUS</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>PULONG</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"NtQuerySystemInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_NtDuplicateObject</name> <operator>=</operator> <operator>(</operator><call><call><name>NTSTATUS</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>PHANDLE</name></expr></argument>, <argument><expr><name>ACCESS_MASK</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"NtDuplicateObject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_NtQueryObject</name> <operator>=</operator> <operator>(</operator><call><call><name>NTSTATUS</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>PULONG</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"NtQueryObject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w32_NtQueryInformationThread</name> <operator>=</operator> <operator>(</operator><call><call><name>NTSTATUS</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>PULONG</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"NtQueryInformationThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w32_DebugActiveProcessStop</name> <operator>||</operator> <operator>!</operator><name>w32_OpenThread</name> <operator>||</operator> <operator>!</operator><name>w32_DebugBreakProcess</name> <operator>||</operator>

<operator>!</operator><name>w32_GetModuleBaseName</name> <operator>||</operator> <operator>!</operator><name>w32_GetModuleInformation</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"debug_init_calls:\n"</literal>

<literal type="string">"DebugActiveProcessStop: 0x%p\n"</literal>

<literal type="string">"OpenThread: 0x%p\n"</literal>

<literal type="string">"DebugBreakProcess: 0x%p\n"</literal>

<literal type="string">"GetThreadId: 0x%p\n"</literal></expr></argument>,

<argument><expr><name>w32_DebugActiveProcessStop</name></expr></argument>, <argument><expr><name>w32_OpenThread</name></expr></argument>, <argument><expr><name>w32_DebugBreakProcess</name></expr></argument>, <argument><expr><name>w32_GetThreadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__w32_findthread_cmp</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tid</name></decl></parameter>, <parameter><decl><type><name>PTHREAD_ITEM</name></type> <name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>!</operator><operator>(</operator><operator>*</operator><name>tid</name> <operator>==</operator> <name><name>th</name><operator>-&gt;</operator><name>tid</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>PTHREAD_ITEM</name></type> <name>__find_thread</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_list_find</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>__w32_findthread_cmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>it</name></expr> ?</condition><then> <expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PTHREAD_ITEM</name></type> <name>__r_debug_thread_add</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hThread</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpThreadLocalBase</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpStartAddress</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bFinished</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lpStartAddress</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w32_NtQueryInformationThread</name> <argument_list>(<argument><expr><name>hThread</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lpStartAddress</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>LPVOID</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>THREAD_ITEM</name></type> <name>th</name> <init>= <expr><block>{

<expr><name>pid</name></expr>,

<expr><name>tid</name></expr>,

<expr><name>bFinished</name></expr>,

<expr><name>false</name></expr>,

<expr><name>hThread</name></expr>,

<expr><name>lpThreadLocalBase</name></expr>,

<expr><name>lpStartAddress</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>pthread</name> <init>= <expr><call><name>__find_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pthread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pthread</name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pthread</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>THREAD_ITEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pthread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_LOG_ERROR</name> <argument_list>(<argument><expr><literal type="string">"__r_debug_thread_add: Memory allocation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pthread</name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name>pthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pthread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__suspend_thread</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SuspendThread</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__suspend_thread/SuspendThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__resume_thread</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ResumeThread</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__resume_thread/ResumeThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__continue_thread</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__resume_thread</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__is_thread_alive</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>th</name> <init>= <expr><call><name>__find_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>bFinished</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SuspendThread</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ResumeThread</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>bFinished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__is_proc_alive</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetExitCodeProcess</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetExitCodeThread</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>code</name> <operator>==</operator> <name>STILL_ACTIVE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__set_thread_context</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SetThreadContext</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__set_thread_context/SetThreadContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__get_thread_context</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>ContextFlags</name></name> <operator>=</operator> <name>CONTEXT_ALL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetThreadContext</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__is_proc_alive</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__get_thread_context/GetThreadContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__get_avx</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>ut128</name></type> <name><name>xmm</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ut128</name></type> <name><name>ymm</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nregs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ctxsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>featurelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>featuremask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut128</name> <modifier>*</modifier></type><name>newxmm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut128</name> <modifier>*</modifier></type><name>newymm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PCONTEXT</name></type> <name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w32_GetEnabledXStateFeatures</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>featuremask</name> <operator>=</operator> <call><name>w32_GetEnabledXStateFeatures</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>featuremask</name> <operator>&amp;</operator> <name>XSTATE_MASK_AVX</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>w32_InitializeContext</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CONTEXT_ALL</name> <operator>|</operator> <name>CONTEXT_XSTATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>GetLastError</name> <argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_INSUFFICIENT_BUFFER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>ctxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32_InitializeContext</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>CONTEXT_ALL</name> <operator>|</operator> <name>CONTEXT_XSTATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_avx</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32_SetXStateFeaturesMask</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>XSTATE_MASK_AVX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_avx</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetThreadContext</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_avx</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w32_GetXStateFeaturesMask</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>featuremask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_avx</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newxmm</name> <operator>=</operator> <operator>(</operator><name>ut128</name> <operator>*</operator><operator>)</operator><call><name>w32_LocateXStateFeature</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>XSTATE_LEGACY_SSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>featurelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nregs</name> <operator>=</operator> <name>featurelen</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newxmm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>nregs</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ymm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>High</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>High</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ymm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>Low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>Low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>newxmm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>nregs</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xmm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>High</name> <operator>=</operator> <name><name>newxmm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>High</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>Low</name> <operator>=</operator> <name><name>newxmm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>Low</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>featuremask</name> <operator>&amp;</operator> <name>XSTATE_MASK_AVX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newymm</name> <operator>=</operator> <operator>(</operator><name>ut128</name> <operator>*</operator><operator>)</operator><call><name>w32_LocateXStateFeature</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>XSTATE_AVX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newymm</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_avx</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>nregs</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ymm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>High</name> <operator>=</operator> <name><name>newymm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>High</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ymm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>Low</name> <operator>=</operator> <name><name>newymm</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>Low</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<label><name>err_get_avx</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nregs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__printwincontext</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut128</name></type> <name><name>xmm</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut128</name></type> <name><name>ymm</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut80</name></type> <name><name>st</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name><name>mm</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>nxmm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nymm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN64</name></expr></cpp:if>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ControlWord = %08x StatusWord = %08x\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>ControlWord</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>StatusWord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"MxCsr = %08lx TagWord = %08x\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>MxCsr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>TagWord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ErrorOffset = %08lx DataOffset = %08lx\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>ErrorOffset</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>DataOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ErrorSelector = %08x DataSelector = %08x\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>ErrorSelector</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>DataSelector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>FloatRegisters</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>FloatRegisters</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>StatusWord</name></name> <operator>&amp;</operator> <literal type="number">0x3fff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mm</name><index>[<expr><name>top</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>FloatRegisters</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xmm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>XmmRegisters</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>FltSave</name><operator>.</operator><name>XmmRegisters</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nxmm</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ControlWord = %08x StatusWord = %08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>ControlWord</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>StatusWord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"MxCsr = %08x TagWord = %08x\n"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ExtendedRegisters</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>TagWord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ErrorOffset = %08x DataOffset = %08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>ErrorOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>DataOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ErrorSelector = %08x DataSelector = %08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>ErrorSelector</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>DataSelector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>RegisterArea</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>RegisterArea</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>StatusWord</name></name> <operator>&amp;</operator> <literal type="number">0x3fff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mm</name><index>[<expr><name>top</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>FloatSave</name><operator>.</operator><name>RegisterArea</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name><operator>&gt;</operator><literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xmm</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut128</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ExtendedRegisters</name><index>[<expr><operator>(</operator><literal type="number">10</literal> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nxmm</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ST%i %04x %016"</literal><name>PFMT64x</name><literal type="string">" (%f)\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>st</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name></expr></argument>, <argument><expr><name><name>st</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>st</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"MM%i %016"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>mm</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>nxmm</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"XMM%i %016"</literal><name>PFMT64x</name><literal type="string">" %016"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>xmm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name></expr></argument>, <argument><expr><name><name>xmm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nymm</name> <operator>=</operator> <call><name>__get_avx</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>xmm</name></expr></argument>, <argument><expr><name>ymm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nymm</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>nymm</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Ymm%d: %016"</literal><name>PFMT64x</name><literal type="string">" %016"</literal><name>PFMT64x</name><literal type="string">" %016"</literal><name>PFMT64x</name><literal type="string">" %016"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>ymm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name></expr></argument>, <argument><expr><name><name>ymm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name></expr></argument>, <argument><expr><name><name>xmm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>High</name></expr></argument>, <argument><expr><name><name>xmm</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>Low</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_reg_read</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>showfpu</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>showfpu</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>-</operator><name>type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>alive</name> <init>= <expr><call><name>__is_thread_alive</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>th</name> <init>= <expr><ternary><condition><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name> <operator>==</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr> ?</condition><then> <expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name> <operator>||</operator> <name>th</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><name>THREAD_SUSPEND_RESUME</name> <operator>|</operator> <name>THREAD_GET_CONTEXT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>THREAD_QUERY_INFORMATION</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>w32_OpenThread</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name> <operator>&amp;&amp;</operator> <name>alive</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_reg_read/OpenThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alive</name> <operator>&amp;&amp;</operator> <call><name>__suspend_thread</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>__get_thread_context</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showfpu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__printwincontext</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>(</operator><name>CONTEXT</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alive</name> <operator>&amp;&amp;</operator> <call><name>__resume_thread</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>!=</operator> <name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__transfer_drx</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>cur_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w32_reg_read</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_ALL</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cur_ctx</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>CONTEXT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CONTEXT</name> <modifier>*</modifier></type><name>new_ctx</name> <init>= <expr><operator>(</operator><name>CONTEXT</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>drx_size</name> <init>= <expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>CONTEXT</name></expr></argument>, <argument><expr><name>Dr7</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>offsetof</name> <argument_list>(<argument><expr><name>CONTEXT</name></expr></argument>, <argument><expr><name>Dr0</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>new_ctx</name><operator>-&gt;</operator><name>Dr7</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_ctx</name><operator>.</operator><name>Dr0</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_ctx</name><operator>-&gt;</operator><name>Dr0</name></name></expr></argument>, <argument><expr><name>drx_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>new_ctx</name> <operator>=</operator> <name>cur_ctx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_reg_write</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><name>THREAD_SUSPEND_RESUME</name> <operator>|</operator> <name>THREAD_SET_CONTEXT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>THREAD_QUERY_INFORMATION</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>th</name> <init>= <expr><call><name>w32_OpenThread</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_reg_write/OpenThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>alive</name> <init>= <expr><call><name>__is_thread_alive</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alive</name> <operator>&amp;&amp;</operator> <call><name>__suspend_thread</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_REG_TYPE_DRX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__transfer_drx</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>__set_thread_context</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alive</name> <operator>&amp;&amp;</operator> <call><name>__resume_thread</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_attach</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>ph</name> <init>= <expr><call><name>w32_OpenProcess</name> <argument_list>(<argument><expr><name>w32_PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ph</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_ATTACH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w32dbgw_err</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"DebugActiveProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>threads</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>threads</name> <operator>=</operator> <call><name>w32_thread_list</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>threads</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><operator>(</operator><operator>(</operator><name>RDebugPid</name> <operator>*</operator><operator>)</operator><name><name>threads</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>pid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name> <operator>=</operator> <name>ph</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32_dbg_wait</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_detach</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_DETTACH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>ret</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_file_name_from_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle_file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle_file_map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPTSTR</name></type> <name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>file_size_high</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>file_size_low</name> <init>= <expr><call><name>GetFileSize</name> <argument_list>(<argument><expr><name>handle_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size_high</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file_size_low</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>file_size_high</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle_file_map</name> <operator>=</operator> <call><name>CreateFileMapping</name> <argument_list>(<argument><expr><name>handle_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PAGE_READONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle_file_map</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_file_name_from_handle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_file_name_from_handle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>MapViewOfFile</name> <argument_list>(<argument><expr><name>handle_file_map</name></expr></argument>, <argument><expr><name>FILE_MAP_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name> <operator>||</operator> <operator>!</operator><call><name>GetMappedFileName</name> <argument_list>(<argument><expr><call><name>GetCurrentProcess</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err_get_file_name_from_handle</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>temp_buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetLogicalDriveStrings</name> <argument_list>(<argument><expr><call><name>_countof</name> <argument_list>(<argument><expr><name>temp_buffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>temp_buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_get_file_name_from_handle</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>drive</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">" :"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPTSTR</name></type> <name>cur_drive</name> <init>= <expr><name>temp_buffer</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cur_drive</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>drive</name> <operator>=</operator> <operator>*</operator><name>cur_drive</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QueryDosDevice</name> <argument_list>(<argument><expr><name>drive</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_length</name> <init>= <expr><call><name>_tcslen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>&lt;</operator> <name>MAX_PATH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_tcsnicmp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>filename</name> <operator>+</operator> <name>name_length</name><operator>)</operator> <operator>==</operator> <call><name>TEXT</name> <argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>temp_filename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_sntprintf_s</name> <argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><name>_TRUNCATE</name></expr></argument>, <argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>drive</name></expr></argument>, <argument><expr><name>filename</name> <operator>+</operator> <name>name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_tcsncpy</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>,

<argument><expr><call><name>_tcslen</name> <argument_list>(<argument><expr><name>temp_filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>TCHAR</name><operator>)</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_drive</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while> 

<label><name>err_get_file_name_from_handle</name>:</label>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UnmapViewOfFile</name> <argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>handle_file_map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>handle_file_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__resolve_path</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>mh</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>maxlength</name> <init>= <expr><name>MAX_PATH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>filename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>length</name> <init>= <expr><call><name>GetModuleFileNameEx</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>mh</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>maxlength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>__get_file_name_from_handle</name> <argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>GetProcessImageFileName</name> <argument_list>(<argument><expr><name>mh</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>maxlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>_tcschr</name> <argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>_tcschr</name> <argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <name>filename</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>device</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>TCHAR</name></type> <name><name>drv</name><index>[]</index></name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"A:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name><name>drv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <call><name>TEXT</name> <argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>drv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>QueryDosDevice</name> <argument_list>(<argument><expr><name>drv</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>maxlength</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_tcsncmp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_sntprintf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>maxlength</name></expr></argument>, <argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>drv</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lstLib</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PLIB_ITEM</name></type> <name>lstLibPtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__r_debug_findlib</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>BaseOfDll</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>PLIB_ITEM</name></type> <name>libPtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lstLib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>libPtr</name> <operator>=</operator> <operator>(</operator><name>PLIB_ITEM</name><operator>)</operator><name>lstLib</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>libPtr</name><operator>-&gt;</operator><name>hFile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>libPtr</name><operator>-&gt;</operator><name>hFile</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>libPtr</name><operator>-&gt;</operator><name>BaseOfDll</name></name> <operator>==</operator> <name>BaseOfDll</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>libPtr</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>libPtr</name> <operator>=</operator> <operator>(</operator><name>PLIB_ITEM</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ULONG_PTR</name><operator>)</operator><name>libPtr</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>LIB_ITEM</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLIB_MAX</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__r_debug_lstLibAdd</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpBaseOfDll</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dllname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lstLib</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lstLib</name> <operator>=</operator> <call><name>VirtualAlloc</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PLIB_MAX</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>LIB_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MEM_COMMIT</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lstLibPtr</name> <operator>=</operator> <operator>(</operator><name>PLIB_ITEM</name><operator>)</operator><name>lstLib</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lstLibPtr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_LOG_ERROR</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>PLIB_MAX</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lstLibPtr</name><operator>-&gt;</operator><name>hFile</name></name> <operator>==</operator> <name>hFile</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lstLibPtr</name><operator>-&gt;</operator><name>hFile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lstLibPtr</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lstLibPtr</name><operator>-&gt;</operator><name>hFile</name></name> <operator>=</operator> <name>hFile</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>lstLibPtr</name><operator>-&gt;</operator><name>BaseOfDll</name></name> <operator>=</operator> <name>lpBaseOfDll</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>lstLibPtr</name><operator>-&gt;</operator><name>Path</name></name></expr></argument>, <argument><expr><name>dllname</name></expr></argument>, <argument><expr><name>MAX_PATH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>dllname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>dllname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>lstLibPtr</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>, <argument><expr><name>dllname</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lstLibPtr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"__r_debug_lstLibAdd: Cannot find slot\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>breaked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>w32_attach_new_process</name><parameter_list>(<parameter><decl><type><name>RDebug</name><modifier>*</modifier></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32_detach</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to detach from (%d)\n"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tid</name> <operator>=</operator> <call><name>w32_attach</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to attach to (%d)\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_select</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_select</name><parameter_list>(<parameter><decl><type><name>RDebug</name><modifier>*</modifier></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>w32_attach_new_process</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>th</name> <init>= <expr><call><name>__find_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>__r_debug_thread_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><call><name>w32_OpenThread</name> <argument_list>(<argument><expr><name>w32_THREAD_ALL_ACCESS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>selected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>&amp;&amp;</operator> <call><name>__is_thread_alive</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__continue_thread</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>bSuspended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tid</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;threads</argument>, <argument>it</argument>, <argument>th</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__is_thread_alive</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__continue_thread</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>bSuspended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cfggeti</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dbg-&gt;threads</argument>, <argument>it</argument>, <argument>th</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>bFinished</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>bSuspended</name></name> <operator>&amp;&amp;</operator> <name><name>th</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>selected</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__suspend_thread</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>bSuspended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>selected</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_kill</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__is_proc_alive</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_DETTACH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TerminateProcess</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>wait_time</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_kill/WaitForSingleObject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>w32_break_process</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name> <init>= <expr><operator>(</operator><name>RDebug</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>cfggeti</name></name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w32_select</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32_DebugBreakProcess</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_break_process/DebugBreakProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Could not interrupt program, attempt to press Ctrl-C in the program's console.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>breaked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_w32_excep_name</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXCEPTION_ACCESS_VIOLATION</name></expr>:</case>

<return>return <expr><literal type="string">"access violation"</literal></expr>;</return>

<case>case <expr><name>EXCEPTION_ARRAY_BOUNDS_EXCEEDED</name></expr>:</case>

<return>return <expr><literal type="string">"array bounds exceeded"</literal></expr>;</return>

<case>case <expr><name>EXCEPTION_ILLEGAL_INSTRUCTION</name></expr>:</case>

<return>return <expr><literal type="string">"illegal instruction"</literal></expr>;</return>

<case>case <expr><name>EXCEPTION_INT_DIVIDE_BY_ZERO</name></expr>:</case>

<return>return <expr><literal type="string">"divide by zero"</literal></expr>;</return>

<case>case <expr><name>EXCEPTION_STACK_OVERFLOW</name></expr>:</case>

<return>return <expr><literal type="string">"stack overflow"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__debug_exception_event</name><parameter_list>(<parameter><decl><type><name>DEBUG_EVENT</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>code</name> <init>= <expr><name><name>de</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>Exception</name><operator>.</operator><name>ExceptionRecord</name><operator>.</operator><name>ExceptionCode</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXCEPTION_ACCESS_VIOLATION</name></expr>:</case>

<case>case <expr><name>EXCEPTION_ARRAY_BOUNDS_EXCEEDED</name></expr>:</case>

<case>case <expr><name>EXCEPTION_ILLEGAL_INSTRUCTION</name></expr>:</case>

<case>case <expr><name>EXCEPTION_INT_DIVIDE_BY_ZERO</name></expr>:</case>

<case>case <expr><name>EXCEPTION_STACK_OVERFLOW</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Fatal exception (%s) in thread %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>de</name><operator>-&gt;</operator><name>dwProcessId</name></name></expr></argument>, 

<argument><expr><call><name>__get_w32_excep_name</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>de</name><operator>-&gt;</operator><name>dwThreadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x406D1388</literal></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%d) MS_VC_EXCEPTION (%x) in thread %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>de</name><operator>-&gt;</operator><name>dwProcessId</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>de</name><operator>-&gt;</operator><name>dwThreadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Unknown exception %x in thread %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>de</name><operator>-&gt;</operator><name>dwProcessId</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>de</name><operator>-&gt;</operator><name>dwThreadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static char *__r_debug_get_dll() {

return lstLibPtr-&gt;Path;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PLIB_ITEM</name></type> <name>__r_debug_get_lib_item</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><name>lstLibPtr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_dbg_wait</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name><modifier>*</modifier></type> <name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DEBUG_EVENT</name></type> <name>de</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>, <decl><type ref="prev"/><name>next_event</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dllname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>R_DEBUG_REASON_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exited_already</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>w32_break_process</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exited_already</name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_DEBUG_REASON_DEAD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>de</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DEBUG_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_WAIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>de</name></name> <operator>=</operator> <operator>&amp;</operator><name>de</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>wait_time</name></name> <operator>=</operator> <name>wait_time</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bed</name> <init>= <expr><call><name>r_cons_sleep_begin</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_sleep_end</name> <argument_list>(<argument><expr><name>bed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32dbgw_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>w32dbgw_err</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SEM_TIMEOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_dbg_wait/WaitForDebugEvent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__is_thread_alive</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w32_select</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>breaked</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>breaked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_USERSUSP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>breaked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>de</name><operator>.</operator><name>dwThreadId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>de</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>de</name><operator>.</operator><name>dwDebugEventCode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CREATE_PROCESS_DEBUG_EVENT</name></expr>:</case>

<expr_stmt><expr><call><name>__r_debug_thread_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>hThread</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>lpThreadLocalBase</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>lpStartAddress</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name> <operator>=</operator> <name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name> <operator>=</operator> <name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>hThread</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>winbase</name></name> <operator>=</operator> <operator>(</operator><name>ULONG_PTR</name><operator>)</operator><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateProcessInfo</name><operator>.</operator><name>lpBaseOfImage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_NEW_PID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CREATE_THREAD_DEBUG_EVENT</name></expr>:</case>

<expr_stmt><expr><call><name>__r_debug_thread_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateThread</name><operator>.</operator><name>hThread</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateThread</name><operator>.</operator><name>lpThreadLocalBase</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateThread</name><operator>.</operator><name>lpStartAddress</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>R_DEBUG_REASON_USERSUSP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_NEW_TID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXIT_PROCESS_DEBUG_EVENT</name></expr>:</case>

<case>case <expr><name>EXIT_THREAD_DEBUG_EVENT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>th</name> <init>= <expr><call><name>__find_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>bFinished</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>hThread</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>dwExitCode</name></name> <operator>=</operator> <name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>ExitThread</name><operator>.</operator><name>dwExitCode</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__r_debug_thread_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateThread</name><operator>.</operator><name>lpThreadLocalBase</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>CreateThread</name><operator>.</operator><name>lpStartAddress</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>de</name><operator>.</operator><name>dwDebugEventCode</name></name> <operator>==</operator> <name>EXIT_PROCESS_DEBUG_EVENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exited_already</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>DBG_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>pid</name> <operator>==</operator> <name><name>dbg</name><operator>-&gt;</operator><name>main_pid</name></name></expr> ?</condition><then> <expr><name>R_DEBUG_REASON_DEAD</name></expr> </then><else>: <expr><name>R_DEBUG_REASON_EXIT_PID</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_EXIT_TID</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>LOAD_DLL_DEBUG_EVENT</name></expr>:</case>

<expr_stmt><expr><name>dllname</name> <operator>=</operator> <call><name>__resolve_path</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RIOW32Dbg</name> <operator>*</operator><operator>)</operator><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>LoadDll</name><operator>.</operator><name>hFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>dllname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__r_debug_lstLibAdd</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>,<argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>LoadDll</name><operator>.</operator><name>lpBaseOfDll</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>LoadDll</name><operator>.</operator><name>hFile</name></name></expr></argument>, <argument><expr><name>dllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_NEW_LIB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UNLOAD_DLL_DEBUG_EVENT</name></expr>:</case>

<expr_stmt><expr><name>lstLibPtr</name> <operator>=</operator> <operator>(</operator><name>PLIB_ITEM</name><operator>)</operator><call><name>__r_debug_findlib</name> <argument_list>(<argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>UnloadDll</name><operator>.</operator><name>lpBaseOfDll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lstLibPtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lstLibPtr</name><operator>-&gt;</operator><name>hFile</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__r_debug_lstLibAdd</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>UnloadDll</name><operator>.</operator><name>lpBaseOfDll</name></name></expr></argument>, <argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>, <argument><expr><literal type="string">"not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dllname</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_EXIT_LIB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OUTPUT_DEBUG_STRING_EVENT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>DebugString</name><operator>.</operator><name>nDebugStringLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ReadProcessMemory</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>DebugString</name><operator>.</operator><name>lpDebugStringData</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>DebugString</name><operator>.</operator><name>nDebugStringLength</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><ternary><condition><expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>DebugString</name><operator>.</operator><name>fUnicode</name></name></expr>

?</condition><then> <expr><call><name>r_utf16_to_utf8</name> <argument_list>(<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>r_acp_to_utf8</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%d) Debug string: %s\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>DBG_EXCEPTION_NOT_HANDLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>RIP_EVENT</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%d) RIP event\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXCEPTION_DEBUG_EVENT</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>Exception</name><operator>.</operator><name>ExceptionRecord</name><operator>.</operator><name>ExceptionCode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DBG_CONTROL_C</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Received CTRL+C, suspending execution\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>DBG_EXCEPTION_NOT_HANDLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN64</name></expr></cpp:if>

<case>case <expr><literal type="number">0x4000001f</literal></expr>:</case> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>EXCEPTION_BREAKPOINT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_BREAKPOINT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN64</name></expr></cpp:if>

<case>case <expr><literal type="number">0x4000001e</literal></expr>:</case> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>EXCEPTION_SINGLE_STEP</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_STEP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__debug_exception_event</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_TRAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>DBG_EXCEPTION_NOT_HANDLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>signum</name></name> <operator>=</operator> <name><name>de</name><operator>.</operator><name>u</name><operator>.</operator><name>Exception</name><operator>.</operator><name>ExceptionRecord</name><operator>.</operator><name>ExceptionCode</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>R_DEBUG_REASON_USERSUSP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%d) unknown event: %lu\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>dwDebugEventCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block> while <condition>(<expr><name>next_event</name></expr>)</condition>;</do>

<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>th</name> <init>= <expr><call><name>__find_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>hThread</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>th</name> <init>= <expr><call><name>w32_OpenThread</name> <argument_list>(<argument><expr><name>w32_THREAD_ALL_ACCESS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hThread</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__r_debug_thread_add</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>__is_thread_alive</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_step</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32_reg_read</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>EFlags</name></name> <operator>|=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32_reg_write</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>w32_continue</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>signum</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_continue</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>continue_status</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sig</name> <operator>==</operator> <name>DBG_EXCEPTION_NOT_HANDLED</name><operator>)</operator></expr>

?</condition><then> <expr><name>DBG_EXCEPTION_NOT_HANDLED</name></expr> </then><else>: <expr><name>DBG_EXCEPTION_HANDLED</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>w32_select</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_system</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"pid %d"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>tid</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>breaked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>breaked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>w32dbg_wrap_instance</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>rio</name><operator>-&gt;</operator><name>inst</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>W32_CONTINUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>dwThreadId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>continue_status</name></name> <operator>=</operator> <name>continue_status</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32dbg_wrap_wait_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>w32dbgw_ret</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w32dbgw_err</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_continue/ContinueDebugEvent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RDebugMap</name> <modifier>*</modifier></type><name>w32_map_alloc</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>base</name> <init>= <expr><call><name>VirtualAllocEx</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>SIZE_T</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>MEM_COMMIT</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_map_alloc/VirtualAllocEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_map_dealloc</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualFreeEx</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_map_dealloc/VirtualFreeEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__io_perms_to_prot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>io_perms</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prot_perms</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_RWX</name><operator>)</operator> <operator>==</operator> <name>R_PERM_RWX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_EXECUTE_READWRITE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>io_perms</name> <operator>&amp;</operator> <operator>(</operator><name>R_PERM_W</name> <operator>|</operator> <name>R_PERM_X</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>R_PERM_W</name> <operator>|</operator> <name>R_PERM_X</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_EXECUTE_READWRITE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>io_perms</name> <operator>&amp;</operator> <operator>(</operator><name>R_PERM_R</name> <operator>|</operator> <name>R_PERM_X</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>R_PERM_R</name> <operator>|</operator> <name>R_PERM_X</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_EXECUTE_READ</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_RW</name><operator>)</operator> <operator>==</operator> <name>R_PERM_RW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_READWRITE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_READWRITE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_X</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_EXECUTE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>io_perms</name> <operator>&amp;</operator> <name>R_PERM_R</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_READONLY</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prot_perms</name> <operator>=</operator> <name>PAGE_NOACCESS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>prot_perms</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>w32_map_protect</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>old</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>VirtualProtectEx</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>__io_perms_to_prot</name> <argument_list>(<argument><expr><name>perms</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>w32_thread_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>th</name> <init>= <expr><call><name>w32_CreateToolhelp32Snapshot</name> <argument_list>(<argument><expr><name>TH32CS_SNAPTHREAD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_thread_list/CreateToolhelp32Snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>THREADENTRY32</name></type> <name>te</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>te</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>ph</name> <init>= <expr><call><name>w32_OpenProcess</name> <argument_list>(<argument><expr><name>PROCESS_QUERY_INFORMATION</name> <operator>|</operator> <name>PROCESS_VM_READ</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Thread32First</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>te</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>te</name><operator>.</operator><name>th32ThreadID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>__resolve_path</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>sid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ProcessIdToSessionId</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uid</name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>saved_tid</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>status</name> <init>= <expr><name>R_DBG_PROC_SLEEP</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>.</operator><name>th32OwnerProcessID</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>pc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CONTEXT</name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name><name>te</name><operator>.</operator><name>th32ThreadID</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w32_reg_read</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN64</name></expr></cpp:if>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>Rip</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>Eip</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>PTHREAD_ITEM</name></type> <name>pthread</name> <init>= <expr><call><name>__find_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>te</name><operator>.</operator><name>th32ThreadID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pthread</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pthread</name><operator>-&gt;</operator><name>bFinished</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>R_DBG_PROC_DEAD</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pthread</name><operator>-&gt;</operator><name>bSuspended</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>R_DBG_PROC_SLEEP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>R_DBG_PROC_RUN</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_debug_pid_new</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>te</name><operator>.</operator><name>th32ThreadID</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>Thread32Next</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>te</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>saved_tid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_thread_list/Thread32First"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__w32_info_user</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>rdi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h_tok</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>tok_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTOKEN_USER</name></type> <name>tok_usr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPTSTR</name></type> <name>usr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>usr_dom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>usr_len</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>usr_dom_len</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SID_NAME_USE</name></type> <name>snu</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenProcessToken</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>TOKEN_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_info_user/OpenProcessToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err___w32_info_user</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetTokenInformation</name> <argument_list>(<argument><expr><name>h_tok</name></expr></argument>, <argument><expr><name>TokenUser</name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><operator>&amp;</operator><name>tok_usr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GetLastError</name> <argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_info_user/GetTokenInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err___w32_info_user</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tok_usr</name> <operator>=</operator> <operator>(</operator><name>PTOKEN_USER</name><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>tok_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tok_usr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_info_user/malloc tok_usr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err___w32_info_user</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetTokenInformation</name> <argument_list>(<argument><expr><name>h_tok</name></expr></argument>, <argument><expr><name>TokenUser</name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>tok_usr</name></expr></argument>, <argument><expr><name>tok_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_info_user/GetTokenInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err___w32_info_user</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>usr</name> <operator>=</operator> <operator>(</operator><name>LPTSTR</name><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>usr_len</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>usr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_info_user/malloc usr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err___w32_info_user</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>usr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>usr_dom</name> <operator>=</operator> <operator>(</operator><name>LPTSTR</name><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>usr_dom_len</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>usr_dom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_info_user/malloc usr_dom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err___w32_info_user</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>usr_dom</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupAccountSid</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>tok_usr</name><operator>-&gt;</operator><name>User</name><operator>.</operator><name>Sid</name></name></expr></argument>, <argument><expr><name>usr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usr_len</name></expr></argument>, <argument><expr><name>usr_dom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usr_dom_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"__w32_info_user/LookupAccountSid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err___w32_info_user</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>usr_dom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>usr</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name>W32_TCHAR_FSTR</name><literal type="string">"\\"</literal><name>W32_TCHAR_FSTR</name></expr></argument>, <argument><expr><name>usr_dom</name></expr></argument>, <argument><expr><name>usr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>usr</name></name> <operator>=</operator> <call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>usr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>err___w32_info_user</name>:</label>

<if_stmt><if>if <condition>(<expr><name>h_tok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>h_tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>usr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>usr_dom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tok_usr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__w32_info_exe</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>rdi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>exe</name></name> <operator>=</operator> <call><name>__resolve_path</name> <argument_list>(<argument><expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>w32_info</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>rdi</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdi</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_SLEEP</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>lib</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>__r_debug_get_lib_item</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>__find_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>cwd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>exe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>cmdline</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>libname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__w32_info_user</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__w32_info_exe</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdi</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDebugPid</name> <modifier>*</modifier></type><name>__build_debug_pid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ppid</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ph</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ph</name> <operator>=</operator> <call><name>w32_OpenProcess</name> <argument_list>(<argument><expr><name>PROCESS_QUERY_INFORMATION</name> <operator>|</operator> <name>PROCESS_VM_READ</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>__resolve_path</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>sid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ProcessIdToSessionId</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uid</name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>__resolve_path</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>sid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ProcessIdToSessionId</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uid</name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>r_sys_conv_win_to_utf8</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_debug_pid_new</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ppid</name></name> <operator>=</operator> <name>ppid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>w32_pid_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>sh</name> <init>= <expr><call><name>w32_CreateToolhelp32Snapshot</name> <argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_pid_list/CreateToolhelp32Snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PROCESSENTRY32</name></type> <name>pe</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Process32First</name> <argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RIOW32Dbg</name> <modifier>*</modifier></type><name>rio</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>all</name> <init>= <expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>all</name> <operator>||</operator> <name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name> <operator>==</operator> <name>pid</name> <operator>||</operator> <name><name>pe</name><operator>.</operator><name>th32ParentProcessID</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>dbg_pid</name> <init>= <expr><call><name>__build_debug_pid</name> <argument_list>(<argument><expr><name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>.</operator><name>th32ParentProcessID</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name></expr> ?</condition><then> <expr><name><name>rio</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>hProcess</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pe</name><operator>.</operator><name>szExeFile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg_pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>dbg_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

else {

eprintf ("w32_pid_list: failed to process pid %d\n", pe.th32ProcessID);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>Process32Next</name> <argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"w32_pid_list/Process32First"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>w32_desc_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugDesc</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>ph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSYSTEM_HANDLE_INFORMATION</name></type> <name>handleInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>handleInfoSize</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>buff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"win_desc_list/r_list_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ph</name> <operator>=</operator> <call><name>w32_OpenProcess</name> <argument_list>(<argument><expr><name>PROCESS_DUP_HANDLE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"win_desc_list/OpenProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handleInfo</name> <operator>=</operator> <operator>(</operator><name>PSYSTEM_HANDLE_INFORMATION</name><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>handleInfoSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_INFO_LENGTH_MISMATCH</name></cpp:macro> <cpp:value>0xc0000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SystemHandleInformation</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<while>while <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>w32_NtQuerySystemInformation</name> <argument_list>(<argument><expr><name>SystemHandleInformation</name></expr></argument>, <argument><expr><name>handleInfo</name></expr></argument>, <argument><expr><name>handleInfoSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>STATUS_INFO_LENGTH_MISMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handleInfoSize</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>handleInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>handleInfoSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handleInfo</name> <operator>=</operator> <operator>(</operator><name>PSYSTEM_HANDLE_INFORMATION</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"win_desc_list/NtQuerySystemInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>handleInfo</name><operator>-&gt;</operator><name>HandleCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SYSTEM_HANDLE</name></type> <name>handle</name> <init>= <expr><name><name>handleInfo</name><operator>-&gt;</operator><name>Handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>dupHandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POBJECT_TYPE_INFORMATION</name></type> <name>objectTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PVOID</name></type> <name>objectNameInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UNICODE_STRING</name></type> <name>objectName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>returnLength</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>.</operator><name>ProcessId</name></name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>.</operator><name>ObjectTypeNumber</name></name> <operator>!=</operator> <literal type="number">0x1c</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w32_NtDuplicateObject</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>handle</name><operator>.</operator><name>Handle</name></name></expr></argument>, <argument><expr><call><name>GetCurrentProcess</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dupHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>objectTypeInfo</name> <operator>=</operator> <operator>(</operator><name>POBJECT_TYPE_INFORMATION</name><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w32_NtQueryObject</name> <argument_list>(<argument><expr><name>dupHandle</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objectTypeInfo</name></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>dupHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>objectNameInfo</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>objectNameInfo</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w32_NtQueryObject</name> <argument_list>(<argument><expr><name>dupHandle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objectNameInfo</name></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>returnLength</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>objectNameInfo</name></expr></argument>, <argument><expr><name>returnLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>objectNameInfo</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w32_NtQueryObject</name> <argument_list>(<argument><expr><name>dupHandle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objectNameInfo</name></expr></argument>, <argument><expr><name>returnLength</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>objectTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>objectNameInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>dupHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>objectName</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>PUNICODE_STRING</name><operator>)</operator><name>objectNameInfo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>objectName</name><operator>.</operator><name>Length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>objectName</name><operator>.</operator><name>Length</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcstombs</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>objectName</name><operator>.</operator><name>Buffer</name></name></expr></argument>, <argument><expr><name><name>objectName</name><operator>.</operator><name>Length</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_debug_desc_new</name> <argument_list>(<argument><expr><name><name>handle</name><operator>.</operator><name>Handle</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>objectTypeInfo</name><operator>-&gt;</operator><name>Name</name><operator>.</operator><name>Length</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcstombs</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>objectTypeInfo</name><operator>-&gt;</operator><name>Name</name><operator>.</operator><name>Buffer</name></name></expr></argument>, <argument><expr><name><name>objectTypeInfo</name><operator>-&gt;</operator><name>Name</name><operator>.</operator><name>Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_debug_desc_new</name> <argument_list>(<argument><expr><name><name>handle</name><operator>.</operator><name>Handle</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>objectTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>objectNameInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>dupHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>handleInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
