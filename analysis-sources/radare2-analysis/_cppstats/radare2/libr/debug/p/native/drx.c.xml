<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\drx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRXN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_STATUS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_CONTROL</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_LOCAL_ENABLE_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_GLOBAL_ENABLE_SHIFT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_ENABLE_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_CONTROL_RESERVED</name></cpp:macro> <cpp:value>(0xFC00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_CONTROL_MASK</name></cpp:macro> <cpp:value>(~DR_CONTROL_RESERVED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_LOCAL_SLOWDOWN</name></cpp:macro> <cpp:value>(0x100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_GLOBAL_SLOWDOWN</name></cpp:macro> <cpp:value>(0x200)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_CONTROL_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_CONTROL_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_RW_EXECUTE</name></cpp:macro> <cpp:value>(0x0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_RW_WRITE</name></cpp:macro> <cpp:value>(0x1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_RW_IORW</name></cpp:macro> <cpp:value>(0x2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_RW_READ</name></cpp:macro> <cpp:value>(0x3)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_NADDR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_STATUS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_CONTROL</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drxt</name></cpp:macro> <cpp:value>size_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_LEN_1</name></cpp:macro> <cpp:value>(0 &lt;&lt; 2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_LEN_2</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_LEN_4</name></cpp:macro> <cpp:value>(3 &lt;&lt; 2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_LEN_8</name></cpp:macro> <cpp:value>(2 &lt;&lt; 2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_CONTROL_MASK</name></cpp:macro> <cpp:value>(~DR_CONTROL_RESERVED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_VACANT</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>((control &amp; (3 &lt;&lt; (DR_ENABLE_SIZE * (i)))) == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_LOCAL_ENABLE</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>control |= (1 &lt;&lt; (DR_LOCAL_ENABLE_SHIFT + DR_ENABLE_SIZE * (i)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_GLOBAL_ENABLE</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>control |= (1 &lt;&lt; (DR_GLOBAL_ENABLE_SHIFT + DR_ENABLE_SIZE * (i)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_IS_LOCAL_ENABLED</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(control &amp; (1 &lt;&lt; (DR_LOCAL_ENABLE_SHIFT + DR_ENABLE_SIZE * (i))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_IS_ENABLED</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>control &amp; (3 &lt;&lt; (DR_ENABLE_SIZE * (i)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_ENABLE</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>control |= (3 &lt;&lt; (DR_ENABLE_SIZE * (i)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_DISABLE</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>control &amp;= ~(3 &lt;&lt; (DR_ENABLE_SIZE * (i)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_SET_RW_LEN</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>rwlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { control &amp;= ~(0x0f &lt;&lt; (DR_CONTROL_SHIFT + DR_CONTROL_SIZE * (i)));control |= ((rwlen) &lt;&lt; (DR_CONTROL_SHIFT + DR_CONTROL_SIZE * (i)));} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I386_DR_GET_RW_LEN</name><parameter_list>(<parameter><type><name>control</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>((control &gt;&gt; (DR_CONTROL_SHIFT + DR_CONTROL_SIZE * (i))) &amp; 0x0f)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>drx_set</name><parameter_list>(<parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>drx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>global</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>control</name> <init>= <expr><name><name>drx</name><index>[<expr><name>DR_CONTROL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name>DR_NADDR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid DRX index (0-%d)\n"</literal></expr></argument>, <argument><expr><name>DR_NADDR</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>rwx</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>rwx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>rwx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>rwx</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>rwx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>I386_DR_DISABLE</name> <argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>control</name> <operator>&amp;=</operator> <name>I386_DR_CONTROL_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drx</name><index>[<expr><name>DR_CONTROL</name></expr>]</index></name> <operator>=</operator> <name>control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drx</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid DRX length (%d) must be 1, 2, 4, 8 bytes\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>I386_DR_SET_RW_LEN</name> <argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>len</name> <operator>|</operator> <name>rwx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>global</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>I386_DR_GLOBAL_ENABLE</name> <argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>I386_DR_LOCAL_ENABLE</name> <argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>control</name> <operator>&amp;=</operator> <name>I386_DR_CONTROL_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drx</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drx</name><index>[<expr><name>DR_CONTROL</name></expr>]</index></name> <operator>=</operator> <name>control</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>drx_get</name><parameter_list>(<parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>drx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rwx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>global</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>enabled</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>I386_DR_GET_RW_LEN</name> <argument_list>(<argument><expr><name><name>drx</name><index>[<expr><name>DR_CONTROL</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>global</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>global</name> <operator>=</operator> <call><name>I386_DR_IS_LOCAL_ENABLED</name> <argument_list>(<argument><expr><name><name>drx</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0xC</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DR_LEN_1</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DR_LEN_2</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DR_LEN_4</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DR_LEN_8</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>enabled</name> <operator>=</operator> <call><name>I386_DR_IS_ENABLED</name> <argument_list>(<argument><expr><name><name>drx</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rwx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rwx</name> <operator>=</operator> <name>ret</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>drx</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>drx_next</name><parameter_list>(<parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>drx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>drx</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>drx_get_at</name><parameter_list>(<parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>drx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rwx</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>en</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rwx</name> <operator>=</operator> <name>len</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>en</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>drx_get</name> <argument_list>(<argument><expr><name>drx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rwx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>at_addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drx_list</name><parameter_list>(<parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>drx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rwx</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>en</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rwx</name> <operator>=</operator> <name>len</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>en</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>drx_get</name> <argument_list>(<argument><expr><name>drx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rwx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%c dr%d %c%c 0x%08"</literal><name>PFMT64x</name> <literal type="string">" %d\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>en</name></expr>?</condition><then> <expr><literal type="char">'*'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>g</name></expr>?</condition><then> <expr><literal type="char">'G'</literal></expr></then><else>: <expr><literal type="char">'L'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>rwx</name> <operator>==</operator> <name>DR_RW_READ</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'r'</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>rwx</name> <operator>==</operator> <name>DR_RW_WRITE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'w'</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>rwx</name> <operator>==</operator> <name>DR_RW_EXECUTE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'x'</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>rwx</name> <operator>==</operator> <name>DR_RW_IORW</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'i'</literal></expr></then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drx_init</name><parameter_list>(<parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>drxt</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>DRXN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drx_enable</name><parameter_list>(<parameter><decl><type><name>drxt</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>I386_DR_ENABLE</name> <argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>DR_CONTROL</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>I386_DR_DISABLE</name> <argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>DR_CONTROL</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>drx_add</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>nhwbps</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_DRX</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_drx_set</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>nhwbps</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_DRX</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>nhwbps</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>drx_del</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>nhwbps</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_DRX</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_drx_unset</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>nhwbps</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_DRX</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>nhwbps</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAIN</name></expr></cpp:if>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>drxt</name></type> <name><name>regs</name><index>[<expr><name>DRXN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drx_init</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drx_set</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x8048123</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DR_RW_EXECUTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drx_set</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x8048123</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>DR_RW_READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drx_list</name> <argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
