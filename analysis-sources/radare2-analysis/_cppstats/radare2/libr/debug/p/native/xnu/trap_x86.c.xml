<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\xnu\trap_x86.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_thread_get_gpr</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>xnu_thread_t</name><modifier>*</modifier></type> <name>get_xnu_thread</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_x86_hwstep_enable64</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R_REG_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>get_xnu_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xnu_thread_get_gpr</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to get gpr registers in trace bit intel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>R_REG_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>gpr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>flavor</name></name> <operator>==</operator> <name>x86_THREAD_STATE32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts32</name><operator>.</operator><name>__eflags</name></name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts32</name><operator>.</operator><name>__eflags</name></name> <operator>&amp;</operator> \

<operator>~</operator><literal type="number">0x100UL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><literal type="number">0x100UL</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>flavor</name></name> <operator>==</operator> <name>x86_THREAD_STATE64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts64</name><operator>.</operator><name>__rflags</name></name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts64</name><operator>.</operator><name>__rflags</name></name> <operator>&amp;</operator> \

<operator>~</operator><literal type="number">0x100UL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><literal type="number">0x100UL</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid bit size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xnu_thread_set_gpr</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error xnu_thread_set_gpr in modify_trace_bit intel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_x86_hwstep_enable32</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R_REG_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>get_xnu_thread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>xnu_thread_get_gpr</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to get gpr registers in trace bit intel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>R_REG_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>gpr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>flavor</name></name> <operator>==</operator> <name>x86_THREAD_STATE32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts32</name><operator>.</operator><name>__eflags</name></name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts32</name><operator>.</operator><name>__eflags</name></name> <operator>&amp;</operator> \

<operator>~</operator><literal type="number">0x100UL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><literal type="number">0x100UL</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid bit size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xnu_thread_set_gpr</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error xnu_thread_set_gpr in modify_trace_bit intel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>xnu_native_hwstep_enable</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>xnu_x86_hwstep_enable64</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>xnu_x86_hwstep_enable32</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
