<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\xnu\trap_arm.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm</name> <operator>||</operator> <name>__arm64</name> <operator>||</operator> <name>__arch64</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>isThumb32</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">0xE000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">0x1800</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ios_hwstep_enable64</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ARMDebugState64</name></type> <name>ds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>thread_t</name></type> <name>th</name> <init>= <expr><call><name>getcurthread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>count</name> <init>= <expr><name>ARM_DEBUG_STATE64_COUNT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>thread_get_state</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>ARM_DEBUG_STATE64</name></expr></argument>, <argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"thread-get-state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>mdscr_el1</name></name> <operator>|=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>mdscr_el1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1ULL</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>thread_set_state</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>ARM_DEBUG_STATE64</name></expr></argument>, <argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"thread-set-state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ios_hwstep_enable32</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arm_unified_thread_state_t</name></type> <name>state</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_STRUCT_ARM_DEBUG_STATE</name></type> <name>ds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>thread_t</name></type> <name>th</name> <init>= <expr><call><name>getcurthread</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>ARM_DEBUG_STATE32_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>thread_get_state</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>ARM_DEBUG_STATE32</name></expr></argument>, <argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"thread_get_state(debug)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>ARM_UNIFIED_THREAD_STATE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>thread_get_state</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>ARM_UNIFIED_THREAD_STATE</name></expr></argument>, <argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"thread_get_state(unified)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>pc</name> <init>= <expr><name><name>state</name><operator>.</operator><name>ts_32</name><operator>.</operator><name>__pc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cpsr</name> <init>= <expr><name><name>state</name><operator>.</operator><name>ts_32</name><operator>.</operator><name>__cpsr</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ds</name><operator>.</operator><name>__bvr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>__bvr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pc</name> <operator>&amp;</operator> <operator>(</operator><name>UT32_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BCR_M_IMVA_MISMATCH</name> <operator>|</operator> <name>S_USER</name> <operator>|</operator> <name>BCR_ENABLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpsr</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_2_3</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_0_1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isThumb32</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Thumb32 chain stepping not supported yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_ALL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_ALL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>thread_set_state</name> <argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>ARM_DEBUG_STATE32</name></expr></argument>, <argument><expr><operator>(</operator><name>thread_state_t</name><operator>)</operator><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><name>ARM_DEBUG_STATE32_COUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"ios_hwstep_enable32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>xnu_native_hwstep_enable</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <name>R_SYS_BITS_64</name> <operator>||</operator> <name><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ios_hwstep_enable64</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ios_hwstep_enable32</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
