<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\bsd\bsd_debug.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kvm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kvm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsd_debug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name> <operator>||</operator> <name>__DragonFly__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__OpenBSD__</name> <operator>||</operator> <name>__NetBSD__</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/proc.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addr_to_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer2</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sun</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_LOCAL</name></expr>:</case>

<expr_stmt><expr><name>sun</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator><name>ss</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>sun</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name><operator>)</operator></expr>?</condition><then>

<expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><name>sin</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>ss</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name> <argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ntohs</name> <argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AF_INET6</name></expr>:</case>

<expr_stmt><expr><name>sin6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>ss</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name> <argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>buffer2</name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name>buffer2</name></expr></argument>,

<argument><expr><call><name>ntohs</name> <argument_list>(<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>bsd_handle_signals</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>ptrace_lwpinfo</name></name></type> <name>linfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>siginfo_t</name></type> <name>siginfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_LWPINFO</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>linfo</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>linfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ESRCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"ptrace PTRACE_LWPINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>linfo</name><operator>.</operator><name>pl_event</name></name> <operator>==</operator> <name>PL_EVENT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_BREAKPOINT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>siginfo</name> <operator>=</operator> <name><name>linfo</name><operator>.</operator><name>pl_siginfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_SIGNAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>signum</name></name> <operator>=</operator> <name><name>siginfo</name><operator>.</operator><name>si_signo</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>signum</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SIGABRT</name></expr>:</case>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_ABORT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGSEGV</name></expr>:</case>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>R_DEBUG_REASON_SEGFAULT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>bsd_reg_write</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_REG_TYPE_GPR</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_SETREGS</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>reg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_TYPE_DRX</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name> <operator>||</operator> <name>__NetBSD__</name></expr></cpp:if>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_SETDBREGS</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dbreg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>R_REG_TYPE_FPU</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ptrace</name> <argument_list>(<argument><expr><name>PT_SETFPREGS</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>fpreg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>bsd_info</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>rdi</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdi</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>kp</name> <operator>=</operator> <call><name>kinfo_getproc</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_uid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_pgid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>exe</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_stat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSLEEP</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_SLEEP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSTOP</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_STOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SZOMB</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_ZOMBIE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SRUN</name></expr>:</case>

<case>case <expr><name>SIDL</name></expr>:</case>

<case>case <expr><name>SLOCK</name></expr>:</case>

<case>case <expr><name>SWAIT</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_RUN</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_DEAD</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdi</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__OpenBSD__</name></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>err</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>rdi</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdi</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>kvm_t</name> <modifier>*</modifier></type><name>kd</name> <init>= <expr><call><name>kvm_openfiles</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>KVM_NO_FILES</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>kvm_getprocs</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>KERN_PROC_PID</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>kp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>p_uid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>p__pgid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>exe</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>p_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_STOP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>p_psflags</name></name> <operator>&amp;</operator> <name>PS_ZOMBIE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_ZOMBIE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>p_psflags</name></name> <operator>&amp;</operator> <name>PS_STOPPED</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_STOP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>p_psflags</name></name> <operator>&amp;</operator> <name>PS_PPWAIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_SLEEP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>p_psflags</name></name> <operator>&amp;</operator> <name>PS_EXEC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>p_psflags</name></name> <operator>&amp;</operator> <name>PS_INEXEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_RUN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kvm_close</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdi</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__NetBSD__</name></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc2</name></name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>err</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>np</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugInfo</name> <modifier>*</modifier></type><name>rdi</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdi</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>kvm_t</name> <modifier>*</modifier></type><name>kd</name> <init>= <expr><call><name>kvm_openfiles</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>KVM_NO_FILES</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>kvm_getproc2</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>KERN_PROC_PID</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>p_uid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>p__pgid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>exe</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>p_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_STOP</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>p_stat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SDEAD</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_DEAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSTOP</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_STOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SZOMB</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_ZOMBIE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SACTIVE</name></expr>:</case>

<case>case <expr><name>SIDL</name></expr>:</case>

<case>case <expr><name>SDYING</name></expr>:</case>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_RUN</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>rdi</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>R_DBG_PROC_SLEEP</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kvm_close</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdi</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>bsd_pid_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_OPEN_FLAG</name></cpp:macro> <cpp:value>KVM_NO_FILES</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_GETPROCS</name><parameter_list>(<parameter><type><name>kd</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>cntptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kvm_getproc2 (kd, opt, arg, sizeof(struct kinfo_proc2), cntptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_COMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_comm</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_pid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PPID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_ppid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_UID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_uid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KINFO_PROC</name></cpp:macro> <cpp:value>kinfo_proc2</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_OPEN_FLAG</name></cpp:macro> <cpp:value>KVM_NO_FILES</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_GETPROCS</name><parameter_list>(<parameter><type><name>kd</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>cntptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kvm_getprocs (kd, opt, arg, sizeof(struct kinfo_proc), cntptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_COMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_comm</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_pid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PPID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_ppid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_UID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;p_uid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KINFO_PROC</name></cpp:macro> <cpp:value>kinfo_proc</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__DragonFly__</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_OPEN_FLAG</name></cpp:macro> <cpp:value>O_RDONLY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_GETPROCS</name><parameter_list>(<parameter><type><name>kd</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>cntptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kvm_getprocs (kd, opt, arg, cntptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_COMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;kp_comm</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;kp_pid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PPID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;kp_ppid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_UID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;kp_uid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KINFO_PROC</name></cpp:macro> <cpp:value>kinfo_proc</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_OPEN_FLAG</name></cpp:macro> <cpp:value>O_RDONLY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVM_GETPROCS</name><parameter_list>(<parameter><type><name>kd</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>cntptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kvm_getprocs (kd, opt, arg, cntptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_COMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;ki_comm</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;ki_pid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PPID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;ki_ppid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_UID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;ki_uid</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KINFO_PROC</name></cpp:macro> <cpp:value>kinfo_proc</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>KINFO_PROC</name></name><modifier>*</modifier></type> <name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kvm_t</name><modifier>*</modifier></type> <name>kd</name> <init>= <expr><call><name>kvm_openfiles</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>KVM_OPEN_FLAG</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"kvm_openfiles says %s\n"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>KVM_GETPROCS</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>KERN_PROC_PID</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_debug_pid_new</name> <argument_list>(<argument><expr><call><name>KP_COMM</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>KP_UID</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>KVM_GETPROCS</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>KERN_PROC_PID</name></expr></argument>, <argument><expr><call><name>KP_PPID</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_debug_pid_new</name> <argument_list>(<argument><expr><call><name>KP_COMM</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>KP_PID</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>KP_UID</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ppid</name></name> <operator>=</operator> <call><name>KP_PPID</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>KVM_GETPROCS</name> <argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>KERN_PROC_UID</name></expr></argument>, <argument><expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_debug_pid_new</name> <argument_list>(<argument><expr><call><name>KP_COMM</name> <argument_list>(<argument><expr><name>kp</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>KP_PID</name> <argument_list>(<argument><expr><name>kp</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>KP_UID</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ppid</name></name> <operator>=</operator> <call><name>KP_PPID</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>kvm_close</name><argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>bsd_native_sysctl_map</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_vmentry</name></name> <modifier>*</modifier></type><name>kve</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_KERN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KERN_PROC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KERN_PROC_VMMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eb</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_debug_map_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>bp</name> <operator>&lt;</operator> <name>eb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kve</name> <operator>=</operator> <operator>(</operator>struct <name>kinfo_vmentry</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>bp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>r_debug_map_new</name> <argument_list>(<argument><expr><name><name>kve</name><operator>-&gt;</operator><name>kve_path</name></name></expr></argument>, <argument><expr><name><name>kve</name><operator>-&gt;</operator><name>kve_start</name></name></expr></argument>,

<argument><expr><name><name>kve</name><operator>-&gt;</operator><name>kve_end</name></name></expr></argument>, <argument><expr><name><name>kve</name><operator>-&gt;</operator><name>kve_protection</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name><name>kve</name><operator>-&gt;</operator><name>kve_structsize</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__OpenBSD__</name></expr></cpp:elif>

<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_vmentry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_long</name></type> <name>old_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_KERN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KERN_PROC_VMMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>kve_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not get memory map: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_debug_map_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_end</name> <operator>==</operator> <name><name>entry</name><operator>.</operator><name>kve_end</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>r_debug_map_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>kve_start</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>kve_end</name></name></expr></argument>,

<argument><expr><name><name>entry</name><operator>.</operator><name>kve_protection</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>kve_start</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>kve_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>kve_end</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>list</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>bsd_desc_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"/><name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugDesc</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_file</name></name> <modifier>*</modifier></type><name>kve</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_KERN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KERN_PROC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KERN_PROC_FILEDESC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eb</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator> <name>r_debug_desc_free</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bp</name> <operator>&lt;</operator> <name>eb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kve</name> <operator>=</operator> <operator>(</operator>struct <name>kinfo_file</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>bp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name><name>kve</name><operator>-&gt;</operator><name>kf_structsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kve</name><operator>-&gt;</operator><name>kf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>kve</name><operator>-&gt;</operator><name>kf_path</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>kve</name><operator>-&gt;</operator><name>kf_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>KF_TYPE_VNODE</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_SOCKET</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> <operator>&lt;</operator> <literal type="number">1200031</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>kve</name><operator>-&gt;</operator><name>kf_sock_domain</name></name> <operator>==</operator> <name>AF_LOCAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sun</name> <init>=

<expr><operator>(</operator>struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_sa_local</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_sa_local</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_sa_peer</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_sa_local</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_sa_peer</name></name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>kve</name><operator>-&gt;</operator><name>kf_sock_domain</name></name> <operator>==</operator> <name>AF_LOCAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sun</name> <init>=

<expr><operator>(</operator>struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_un</name><operator>.</operator><name>kf_sock</name><operator>.</operator><name>kf_sa_local</name></name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_un</name><operator>.</operator><name>kf_sock</name><operator>.</operator><name>kf_sa_local</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_un</name><operator>.</operator><name>kf_sock</name><operator>.</operator><name>kf_sa_peer</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_un</name><operator>.</operator><name>kf_sock</name><operator>.</operator><name>kf_sa_local</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addr_to_string</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_un</name><operator>.</operator><name>kf_sock</name><operator>.</operator><name>kf_sa_peer</name></name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>KF_TYPE_PIPE</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_FIFO</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_KQUEUE</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'k'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_CRYPTO</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_MQUEUE</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_SHM</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_PTS</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_SEM</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KF_TYPE_NONE</name></expr>:</case>

<case>case <expr><name>KF_TYPE_UNKNOWN</name></expr>:</case>

<default>default:</default> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_flags</name></name> <operator>&amp;</operator> <name>KF_FLAG_READ</name><operator>)</operator></expr>?</condition><then> <expr><name>R_PERM_R</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>perm</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>kve</name><operator>-&gt;</operator><name>kf_flags</name></name> <operator>&amp;</operator> <name>KF_FLAG_WRITE</name><operator>)</operator></expr>?</condition><then> <expr><name>R_PERM_W</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_debug_desc_new</name> <argument_list>(<argument><expr><name><name>kve</name><operator>-&gt;</operator><name>kf_fd</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>kve</name><operator>-&gt;</operator><name>kf_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_r2_status</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>stat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SRUN</name></expr>:</case>

<case>case <expr><name>SIDL</name></expr>:</case>

<case>case <expr><name>SLOCK</name></expr>:</case>

<case>case <expr><name>SWAIT</name></expr>:</case>

<return>return <expr><name>R_DBG_PROC_RUN</name></expr>;</return>

<case>case <expr><name>SSTOP</name></expr>:</case>

<return>return <expr><name>R_DBG_PROC_STOP</name></expr>;</return>

<case>case <expr><name>SZOMB</name></expr>:</case>

<return>return <expr><name>R_DBG_PROC_ZOMBIE</name></expr>;</return>

<case>case <expr><name>SSLEEP</name></expr>:</case>

<return>return <expr><name>R_DBG_PROC_SLEEP</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>R_DBG_PROC_DEAD</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>RList</name> <modifier>*</modifier></type><name>bsd_thread_list</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__KFBSD__</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>CTL_KERN</name></expr>, <expr><name>KERN_PROC</name></expr>, <expr><name>KERN_PROC_PID</name> <operator>|</operator> <name>KERN_PROC_INC_THREAD</name></expr>, <expr><name>pid</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name> <argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>kp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>pid_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pid_stat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pid_stat</name> <operator>=</operator> <call><name>get_r2_status</name> <argument_list>(<argument><expr><name><name>kp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid_info</name> <operator>=</operator> <call><name>r_debug_pid_new</name> <argument_list>(<argument><expr><name><name>kp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_comm</name></expr></argument>, <argument><expr><name><name>kp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_tid</name></expr></argument>,

<argument><expr><name><name>kp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_uid</name></expr></argument>, <argument><expr><name>pid_stat</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>kp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_wchan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pid_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"bsd_thread_list unsupported on this platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
