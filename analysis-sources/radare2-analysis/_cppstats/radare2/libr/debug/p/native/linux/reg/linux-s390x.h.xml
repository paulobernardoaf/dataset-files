<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\linux\reg\linux-s390x.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

https:

s/390 &amp; z/Architecture Register usage

=====================================

r0 used by syscalls/assembly call-clobbered

r1 used by syscalls/assembly call-clobbered

r2 argument 0 / return value 0 call-clobbered

r3 argument 1 / return value 1 (if long long) call-clobbered

r4 argument 2 call-clobbered

r5 argument 3 call-clobbered

r6 argument 4 saved

r7 pointer-to arguments 5 to ... saved 

r8 this &amp; that saved

r9 this &amp; that saved

r10 static-chain ( if nested function ) saved

r11 frame-pointer ( if function used alloca ) saved

r12 got-pointer saved

r13 base-pointer saved

r14 return-address saved

r15 stack-pointer saved

$pc

$sp

f0 argument 0 / return value ( float/double ) call-clobbered

f2 argument 1 call-clobbered

f4 z/Architecture argument 2 saved

f6 z/Architecture argument 3 saved

The remaining floating points

f1,f3,f5 f7-f15 are call-clobbered.

The current architectures have the following registers.

16 General propose registers, 32 bit on s/390 and 64 bit on z/Architecture,

r0-r15 (or gpr0-gpr15), used for arithmetic and addressing.

16 Control registers, 32 bit on s/390 and 64 bit on z/Architecture, cr0-cr15,

kernel usage only, used for memory management, interrupt control, debugging

control etc.

16 Access registers (ar0-ar15), 32 bit on both s/390 and z/Architecture,

normally not used by normal programs but potentially could be used as

temporary storage. These registers have a 1:1 association with general

purpose registers and are designed to be used in the so-called access

register mode to select different address spaces.

Access register 0 (and access register 1 on z/Architecture, which needs a

64 bit pointer) is currently used by the pthread library as a pointer to

the current running threads private area.

16 64 bit floating point registers (fp0-fp15 ) IEEE &amp; HFP floating 

point format compliant on G5 upwards &amp; a Floating point control reg (FPC) 

4 64 bit registers (fp0,fp2,fp4 &amp; fp6) HFP only on older machines.

Note:

Linux (currently) always uses IEEE &amp; emulates G5 IEEE format on older machines,

( provided the kernel is configured for this ).

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>strdup</name> <argument_list>(

<argument><expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=LR r14\n"</literal>

<literal type="string">"=SP r15\n"</literal>

<literal type="string">"=BP r13\n"</literal>

<literal type="string">"=R0 r2\n"</literal>

<literal type="string">"=A0 r2\n"</literal>

<literal type="string">"=A1 r3\n"</literal>

<literal type="string">"=A2 r4\n"</literal>

<literal type="string">"=A3 r5\n"</literal>

<literal type="string">"=SN r0\n"</literal>

<literal type="string">"gpr r0 .32 0 0\n"</literal>

<literal type="string">"gpr r1 .32 4 0\n"</literal>

<literal type="string">"gpr r2 .32 8 0\n"</literal>

<literal type="string">"gpr r3 .32 12 0\n"</literal>

<literal type="string">"gpr r4 .32 16 0\n"</literal>

<literal type="string">"gpr r5 .32 20 0\n"</literal>

<literal type="string">"gpr r6 .32 24 0\n"</literal>

<literal type="string">"gpr r7 .32 28 0\n"</literal>

<literal type="string">"gpr r8 .32 32 0\n"</literal>

<literal type="string">"gpr r9 .32 36 0\n"</literal>

<literal type="string">"gpr r10 .32 40 0\n"</literal>

<literal type="string">"gpr r11 .32 44 0\n"</literal>

<literal type="string">"gpr r12 .32 48 0\n"</literal>

<literal type="string">"gpr r13 .32 52 0\n"</literal>

<literal type="string">"gpr r14 .32 56 0\n"</literal>

<literal type="string">"gpr r15 .32 60 0\n"</literal>

<literal type="string">"gpr pc .32 64 0\n"</literal>

<literal type="string">"gpr cr0 .32 68 0\n"</literal>

<literal type="string">"gpr cr1 .32 72 0\n"</literal>

<literal type="string">"gpr cr2 .32 76 0\n"</literal>

<literal type="string">"gpr cr3 .32 80 0\n"</literal>

<literal type="string">"gpr cr4 .32 84 0\n"</literal>

<literal type="string">"gpr cr5 .32 88 0\n"</literal>

<literal type="string">"gpr cr6 .32 92 0\n"</literal>

<literal type="string">"gpr cr7 .32 96 0\n"</literal>

<literal type="string">"gpr cr8 .32 100 0\n"</literal>

<literal type="string">"gpr cr9 .32 104 0\n"</literal>

<literal type="string">"gpr cr10 .32 108 0\n"</literal>

<literal type="string">"gpr cr11 .32 112 0\n"</literal>

<literal type="string">"gpr cr12 .32 116 0\n"</literal>

<literal type="string">"gpr cr13 .32 120 0\n"</literal>

<literal type="string">"gpr cr14 .32 124 0\n"</literal>

<literal type="string">"gpr cr15 .32 128 0\n"</literal>

<literal type="string">"gpr ar0 .32 132 0\n"</literal>

<literal type="string">"gpr ar1 .32 136 0\n"</literal>

<literal type="string">"gpr ar2 .32 140 0\n"</literal>

<literal type="string">"gpr ar3 .32 144 0\n"</literal>

<literal type="string">"gpr ar4 .32 148 0\n"</literal>

<literal type="string">"gpr ar5 .32 152 0\n"</literal>

<literal type="string">"gpr ar6 .32 156 0\n"</literal>

<literal type="string">"gpr ar7 .32 160 0\n"</literal>

<literal type="string">"gpr ar8 .32 164 0\n"</literal>

<literal type="string">"gpr ar9 .32 170 0\n"</literal>

<literal type="string">"gpr ar10 .32 174 0\n"</literal>

<literal type="string">"gpr ar11 .32 178 0\n"</literal>

<literal type="string">"gpr ar12 .32 182 0\n"</literal>

<literal type="string">"gpr ar13 .32 186 0\n"</literal>

<literal type="string">"gpr ar14 .32 190 0\n"</literal>

<literal type="string">"gpr ar15 .32 194 0\n"</literal></expr></argument>

)</argument_list></call></expr>;</return>

</unit>
