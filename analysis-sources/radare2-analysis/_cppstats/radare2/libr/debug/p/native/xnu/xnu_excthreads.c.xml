<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\native\xnu\xnu_excthreads.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xnu_threads.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_trace_bit</name><parameter_list>(<parameter><type><name>dbg</name></type></parameter>, <parameter><type><name>thread</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>modify_trace_bit (dbg, thread, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clear_trace_bit</name><parameter_list>(<parameter><type><name>dbg</name></type></parameter>, <parameter><type><name>thread</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>modify_trace_bit (dbg, thread, 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if> 

<function><type><specifier>static</specifier> <name>bool</name></type> <name>modify_trace_bit</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R_REG_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xnu_thread_get_gpr</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to get gpr registers in trace bit intel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>R_REG_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>gpr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>flavor</name></name> <operator>==</operator> <name>x86_THREAD_STATE32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts32</name><operator>.</operator><name>__eflags</name></name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts32</name><operator>.</operator><name>__eflags</name></name> <operator>&amp;</operator> \

<operator>~</operator><literal type="number">0x100UL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><literal type="number">0x100UL</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>tsh</name><operator>.</operator><name>flavor</name></name> <operator>==</operator> <name>x86_THREAD_STATE64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts64</name><operator>.</operator><name>__rflags</name></name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>uts</name><operator>.</operator><name>ts64</name><operator>.</operator><name>__rflags</name></name> <operator>&amp;</operator> \

<operator>~</operator><literal type="number">0x100UL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><literal type="number">0x100UL</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid bit size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xnu_thread_set_gpr</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error xnu_thread_set_gpr in modify_trace_bit intel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:elif> 

<function><type><specifier>static</specifier> <name>bool</name></type> <name>modify_trace_bit</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static bool modify_trace_bit(RDebug *dbg, xnu_thread *th, int enable) {

return false;

R_REG_T state;

unsigned int state_count = R_REG_STATE_SZ;

kern_return_t kr;

kr = thread_get_state (th-&gt;tid, R_REG_STATE_T,

(thread_state_t)&amp;state, &amp;state_count);

if (kr != KERN_SUCCESS) {

eprintf ("error modify_trace_bit\n");

return false;

}

state.srr1 = (state.srr1 &amp; ~0x400UL) | (enable ? 0x400UL : 0);

kr = thread_set_state (th-&gt;tid, R_REG_STATE_T,

(thread_state_t)&amp;state, state_count);

if (kr != KERN_SUCCESS) {

eprintf ("Error to set thread state modificy_trace_bit ppc\n");

return false;

}

return true;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm</name> <operator>||</operator> <name>__arm64</name> <operator>||</operator> <name>__aarch64</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCR_M_IMVA_MATCH</name></cpp:macro> <cpp:value>((uint32_t)(0u &lt;&lt; 21))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCR_M_CONTEXT_ID_MATCH</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 21))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCR_M_IMVA_MISMATCH</name></cpp:macro> <cpp:value>((uint32_t)(2u &lt;&lt; 21))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCR_M_RESERVED</name></cpp:macro> <cpp:value>((uint32_t)(3u &lt;&lt; 21))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ENABLE_LINKING</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 20))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAS_IMVA_PLUS_0</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAS_IMVA_PLUS_1</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAS_IMVA_PLUS_2</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAS_IMVA_PLUS_3</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAS_IMVA_0_1</name></cpp:macro> <cpp:value>((uint32_t)(3u &lt;&lt; 5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAS_IMVA_2_3</name></cpp:macro> <cpp:value>((uint32_t)(3u &lt;&lt; 7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAS_IMVA_ALL</name></cpp:macro> <cpp:value>((uint32_t)(0xfu &lt;&lt; 5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RSVD</name></cpp:macro> <cpp:value>((uint32_t)(0u &lt;&lt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_PRIV</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_USER</name></cpp:macro> <cpp:value>((uint32_t)(2u &lt;&lt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_PRIV_USER</name></cpp:macro> <cpp:value>((S_PRIV) | (S_USER))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCR_ENABLE</name></cpp:macro> <cpp:value>((uint32_t)(1u))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCR_ENABLE</name></cpp:macro> <cpp:value>((uint32_t)(1u))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCR_LOAD</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCR_STORE</name></cpp:macro> <cpp:value>((uint32_t)(1u &lt;&lt; 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_ENABLE</name></cpp:macro> <cpp:value>((uint32_t)(1u))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm</name> <operator>||</operator> <name>__arm__</name> <operator>||</operator> <name>__armv7</name> <operator>||</operator> <name>__armv7__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_thumb_32</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">0xE000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">0x1800</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modify_trace_bit</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>xnu_thread_get_drx</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to get drx registers modificy_trace_bit arm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__arm64</name> <operator>||</operator> <name>__arm64__</name> <operator>||</operator> <name>__aarch64</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>flavor</name></name> <operator>==</operator> <name>ARM_DEBUG_STATE32</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>arm_debug_state32_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx32</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>|</operator> <name>SS_ENABLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>&amp;</operator> <operator>~</operator><name>SS_ENABLE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>flavor</name></name> <operator>==</operator> <name>ARM_DEBUG_STATE64</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>arm_debug_state64_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx64</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>|</operator> <name>SS_ENABLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>__mdscr_el1</name></name> <operator>&amp;</operator> <operator>~</operator><name>SS_ENABLE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm</name> <operator>||</operator> <name>__arm__</name> <operator>||</operator> <name>__armv7</name> <operator>||</operator> <name>__armv7__</name></expr></cpp:elif>

if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>flavor</name></name> <operator>==</operator> <name>ARM_DEBUG_STATE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>arm_debug_state_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>debug</name><operator>.</operator><name>drx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_REG_T</name> <modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xnu_thread_get_gpr</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to get gpr register modificy_trace_bit arm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regs</name> <operator>=</operator> <operator>(</operator><name>R_REG_T</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>gpr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>chained_address</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chained_address</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bvr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>chained_address</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFCu</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chained_address</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bvr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>regs</name><operator>-&gt;</operator><name>ts_32</name><operator>.</operator><name>__pc</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFCu</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BCR_M_IMVA_MISMATCH</name> <operator>|</operator> 

<name>S_USER</name> <operator>|</operator> 

<name>BCR_ENABLE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>regs</name><operator>-&gt;</operator><name>ts_32</name><operator>.</operator><name>__cpsr</name></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regs</name><operator>-&gt;</operator><name>ts_32</name><operator>.</operator><name>__pc</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_2_3</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_0_1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>bio</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bio</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>ts_32</name><operator>.</operator><name>__pc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to read opcode modify_trace_bit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_thumb_32</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chained_address</name> <operator>=</operator> <name><name>regs</name><operator>-&gt;</operator><name>ts_32</name><operator>.</operator><name>__pc</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_ALL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>BAS_IMVA_ALL</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bvr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>BCR_ENABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bvr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>__bcr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Bad flavor modificy_trace_bit arm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xnu_thread_set_drx</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to set drx modificy_trace_bit arm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modify_trace_bit</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>xnu_thread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unknown architecture"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>xnu_exception_info</name></type> <name>ex</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xnu_restore_exception_ports</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>task</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ex</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>task_set_exception_ports</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>masks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>behaviors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>flavors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"fail to restore exception ports\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>exception_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to deallocate exception port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_reply</name><parameter_list>(<parameter><decl><type><name>mig_reply_error_t</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>mach_msg_header_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>mach_msg_header_t</name> <modifier>*</modifier></type><name>rh</name> <init>= <expr><operator>&amp;</operator><name><name>reply</name><operator>-&gt;</operator><name>Head</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rh</name><operator>-&gt;</operator><name>msgh_bits</name></name> <operator>=</operator> <call><name>MACH_MSGH_BITS</name> <argument_list>(<argument><expr><call><name>MACH_MSGH_BITS_REMOTE</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>msgh_bits</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rh</name><operator>-&gt;</operator><name>msgh_remote_port</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>msgh_remote_port</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rh</name><operator>-&gt;</operator><name>msgh_size</name></name> <operator>=</operator> <operator>(</operator><name>mach_msg_size_t</name><operator>)</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mig_reply_error_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rh</name><operator>-&gt;</operator><name>msgh_local_port</name></name> <operator>=</operator> <name>MACH_PORT_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rh</name><operator>-&gt;</operator><name>msgh_id</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>msgh_id</name></name> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>NDR</name></name> <operator>=</operator> <name>NDR_record</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>RetCode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validate_mach_message</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>exc_msg</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:if>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>msgh_local_port</name></name> <operator>!=</operator> <name><name>ex</name><operator>.</operator><name>exception_port</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>msgh_bits</name></name> <operator>&amp;</operator> <name>MACH_MSGH_BITS_COMPLEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>msgh_id</name></name> <operator>&gt;</operator> <literal type="number">2405</literal> <operator>||</operator> <name><name>msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>msgh_id</name></name> <operator>&lt;</operator> <literal type="number">2401</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>msgh_size</name></name> <operator>&lt;</operator>

<sizeof>sizeof <argument_list>(<argument><expr><name>mach_msg_header_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach_msg_body_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach_msg_port_descriptor_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<sizeof>sizeof <argument_list>(<argument><expr><name>NDR_record_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>exception_type_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<sizeof>sizeof <argument_list>(<argument><expr><name>mach_msg_type_number_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<sizeof>sizeof <argument_list>(<argument><expr><name>mach_exception_data_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>NDR</name><operator>.</operator><name>mig_vers</name></name> <operator>!=</operator> <name>NDR_PROTOCOL_2_0</name> <operator>||</operator>

<name><name>msg</name><operator>-&gt;</operator><name>NDR</name><operator>.</operator><name>if_vers</name></name> <operator>!=</operator> <name>NDR_PROTOCOL_2_0</name> <operator>||</operator>

<name><name>msg</name><operator>-&gt;</operator><name>NDR</name><operator>.</operator><name>mig_encoding</name></name> <operator>!=</operator> <name><name>NDR_record</name><operator>.</operator><name>mig_encoding</name></name> <operator>||</operator>

<name><name>msg</name><operator>-&gt;</operator><name>NDR</name><operator>.</operator><name>int_rep</name></name> <operator>!=</operator> <name><name>NDR_record</name><operator>.</operator><name>int_rep</name></name> <operator>||</operator>

<name><name>msg</name><operator>-&gt;</operator><name>NDR</name><operator>.</operator><name>char_rep</name></name> <operator>!=</operator> <name><name>NDR_record</name><operator>.</operator><name>char_rep</name></name> <operator>||</operator>

<name><name>msg</name><operator>-&gt;</operator><name>NDR</name><operator>.</operator><name>float_rep</name></name> <operator>!=</operator> <name><name>NDR_record</name><operator>.</operator><name>float_rep</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>msg</name><operator>-&gt;</operator><name>task</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>task</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"validate_mach_message: failed to deallocate task port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>thread</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"validate_mach_message2: failed to deallocated task port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_dead_notify</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>exc_msg</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>msgh_id</name></name> <operator>==</operator> <literal type="number">0x48</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_exception_message</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>exc_msg</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>R_DEBUG_REASON_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_code</name> <operator>=</operator> <name>KERN_SUCCESS</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>exception</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXC_BAD_ACCESS</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_SEGFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_code</name> <operator>=</operator> <name>KERN_FAILURE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>task_suspend</name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>task</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to suspend task bad access\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"EXC_BAD_ACCESS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXC_BAD_INSTRUCTION</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_ILLEGAL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_code</name> <operator>=</operator> <name>KERN_FAILURE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>task_suspend</name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>task</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to suspend task bad instruction\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"EXC_BAD_INSTRUCTION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXC_ARITHMETIC</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"EXC_ARITHMETIC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXC_EMULATION</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"EXC_EMULATION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXC_SOFTWARE</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"EXC_SOFTWARE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXC_BREAKPOINT</name></expr>:</case>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>task_suspend</name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>task</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to suspend task breakpoint\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>R_DEBUG_REASON_BREAKPOINT</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"UNKNOWN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>task</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to deallocate task port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name> <argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>thread</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to deallocated task port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__xnu_wait</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_code</name></decl>, <decl><type ref="prev"/><name>reason</name> <init>= <expr><name>R_DEBUG_REASON_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mig_reply_error_t</name></type> <name>reply</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>exc_msg</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>reason</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>hdr</name><operator>.</operator><name>msgh_local_port</name></name> <operator>=</operator> <name><name>ex</name><operator>.</operator><name>exception_port</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>hdr</name><operator>.</operator><name>msgh_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>exc_msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_msg</name> <argument_list>(

<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>hdr</name></name></expr></argument>,

<argument><expr><name>MACH_RCV_MSG</name> <operator>|</operator> <name>MACH_RCV_INTERRUPT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>exc_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>exception_port</name></name></expr></argument>,

<argument><expr><name>MACH_MSG_TIMEOUT_NONE</name></expr></argument>, <argument><expr><name>MACH_PORT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>==</operator> <name>MACH_RCV_INTERRUPTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_MACH_RCV_INTERRUPTED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>MACH_MSG_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"message didn't succeeded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_mach_message</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handle_dead_notify</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reason</name> <operator>=</operator> <name>R_DEBUG_REASON_DEAD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encode_reply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>KERN_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_msg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>reply</name><operator>.</operator><name>Head</name></name></expr></argument>, <argument><expr><name>MACH_SEND_MSG</name> <operator>|</operator> <name>MACH_SEND_INTERRUPT</name></expr></argument>,

<argument><expr><name><name>reply</name><operator>.</operator><name>Head</name><operator>.</operator><name>msgh_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>MACH_PORT_NULL</name></expr></argument>, <argument><expr><name>MACH_MSG_TIMEOUT_NONE</name></expr></argument>,

<argument><expr><name>MACH_PORT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>.</operator><name>Head</name><operator>.</operator><name>msgh_remote_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>kr</name> <operator>!=</operator> <name>MACH_MSG_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name><argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>reply</name><operator>.</operator><name>Head</name><operator>.</operator><name>msgh_remote_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to deallocate reply port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>handle_exception_message</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_reply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>ret_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_msg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>reply</name><operator>.</operator><name>Head</name></name></expr></argument>, <argument><expr><name>MACH_SEND_MSG</name> <operator>|</operator> <name>MACH_SEND_INTERRUPT</name></expr></argument>,

<argument><expr><name><name>reply</name><operator>.</operator><name>Head</name><operator>.</operator><name>msgh_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>MACH_PORT_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>MACH_PORT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>.</operator><name>Head</name><operator>.</operator><name>msgh_remote_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>kr</name> <operator>!=</operator> <name>MACH_MSG_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_deallocate</name><argument_list>(<argument><expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>reply</name><operator>.</operator><name>Head</name><operator>.</operator><name>msgh_remote_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed to deallocate reply port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break> 

</block_content>}</block></for>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>stopaddr</name></name> <operator>=</operator> <call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>reason</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>xnu_create_exception_thread</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__POWERPC__</name></expr></cpp:if>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>kr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_port_t</name></type> <name>exception_port</name> <init>= <expr><name>MACH_PORT_NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_port_t</name></type> <name>req_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_port_t</name></type> <name>task_self</name> <init>= <expr><call><name>mach_task_self</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>task_t</name></type> <name>task</name> <init>= <expr><call><name>pid_to_task</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>task</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to get task for the debuggee process"</literal>

<literal type="string">" xnu_start_exception_thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_debug_ptrace</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>PT_ATTACHEXC</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MACH_PORT_VALID</name> <argument_list>(<argument><expr><name>task_self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error to get the task for the current process"</literal>

<literal type="string">" xnu_start_exception_thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_allocate</name> <argument_list>(<argument><expr><name>task_self</name></expr></argument>, <argument><expr><name>MACH_PORT_RIGHT_RECEIVE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>exception_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_ON_MACH_ERROR</name> <argument_list>(<argument><expr><literal type="string">"error to allocate mach_port exception\n"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_insert_right</name> <argument_list>(<argument><expr><name>task_self</name></expr></argument>, <argument><expr><name>exception_port</name></expr></argument>, <argument><expr><name>exception_port</name></expr></argument>,

<argument><expr><name>MACH_MSG_TYPE_MAKE_SEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_ON_MACH_ERROR</name> <argument_list>(<argument><expr><literal type="string">"error to allocate insert right\n"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>count</name></name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>ports</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>ex</name><operator>.</operator><name>ports</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>task_swap_exception_ports</name> <argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>EXC_MASK_ALL</name></expr></argument>, <argument><expr><name>exception_port</name></expr></argument>,

<argument><expr><name>EXCEPTION_DEFAULT</name> <operator>|</operator> <name>MACH_EXCEPTION_CODES</name></expr></argument>, <argument><expr><name>THREAD_STATE_NONE</name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>masks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>ports</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>behaviors</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>flavors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_ON_MACH_ERROR</name> <argument_list>(<argument><expr><literal type="string">"failed to swap exception ports\n"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kr</name> <operator>=</operator> <call><name>mach_port_request_notification</name> <argument_list>(<argument><expr><name>task_self</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>MACH_NOTIFY_DEAD_NAME</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>exception_port</name></expr></argument>, <argument><expr><name>MACH_MSG_TYPE_MAKE_SEND_ONCE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Termination notification request failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>exception_port</name></name> <operator>=</operator> <name>exception_port</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
