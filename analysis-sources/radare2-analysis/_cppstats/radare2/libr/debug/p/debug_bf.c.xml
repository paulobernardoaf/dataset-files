<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\debug_bf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_API</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bfvm.c"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>bfvm</name></decl>;</decl_stmt>

}</block></struct></type> <name>RIOBdescbg</name>;</typedef>

<struct>struct <name>bfvm_regs</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>scr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>scri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>inp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>inpi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>memi</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>bfvm_regs</name></name></type> <name>r</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_io_bf</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>plugin</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"bfdbg"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: the iodesc data is not brainfuck friendly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_step_over</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>oop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>bfvm_op</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oop</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>oop</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bfvm_in_trap</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bfvm_step</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oop</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_step</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfvm_step</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_reg_read</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dbg</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_io_bf</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>eip</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>esp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>scr</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>scri</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>inp</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>inpi</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>memi</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><sizeof>sizeof <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_reg_write</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_io_bf</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>eip</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>pc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>esp</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>sp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>scr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>screen_idx</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>scri</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>inp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>input_idx</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>inpi</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>mem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>memi</name></name></expr>;</expr_stmt> 

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_continue</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfvm_cont</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_continue_syscall</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bfvm_contsc</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_wait</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_attach</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_io_bf</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_detach</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_debug_bf_reg_profile</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(

<argument><expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP esp\n"</literal>

<literal type="string">"=BP ptr\n"</literal>

<literal type="string">"gpr pc .32 0 0\n"</literal>

<literal type="string">"gpr ptr .32 4 0\n"</literal>

<literal type="string">"gpr esp .32 8 0\n"</literal>

<literal type="string">"gpr scr .32 12 0\n"</literal>

<literal type="string">"gpr scri .32 16 0\n"</literal>

<literal type="string">"gpr inp .32 20 0\n"</literal>

<literal type="string">"gpr inpi .32 24 0\n"</literal>

<literal type="string">"gpr mem .32 28 0\n"</literal>

<literal type="string">"gpr memi .32 32 0\n"</literal></expr></argument>

)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_breakpoint</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bp_t</name></name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_debug_bf_kill</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_io_bf</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bfvm_reset</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_native_map_get</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_io_bf</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_debug_map_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_debug_map_new</name> <argument_list>(

<argument><expr><literal type="string">"code"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_debug_map_new</name> <argument_list>(

<argument><expr><literal type="string">"memory"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_debug_map_new</name> <argument_list>(

<argument><expr><literal type="string">"screen"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>screen</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>screen_size</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>r_debug_map_new</name> <argument_list>(

<argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>input_size</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_bf_stop</name><parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_io_bf</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOBdescbg</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BfvmCPU</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>bfvm</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RDebugPlugin</name></type> <name>r_debug_plugin_bf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bf"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"bf"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_32</name> <operator>|</operator> <name>R_SYS_BITS_64</name></expr>,

<expr><operator>.</operator><name>step</name> <operator>=</operator> <name>r_debug_bf_step</name></expr>,

<expr><operator>.</operator><name>step_over</name> <operator>=</operator> <name>r_debug_bf_step_over</name></expr>,

<expr><operator>.</operator><name>cont</name> <operator>=</operator> <name>r_debug_bf_continue</name></expr>,

<expr><operator>.</operator><name>contsc</name> <operator>=</operator> <name>r_debug_bf_continue_syscall</name></expr>,

<expr><operator>.</operator><name>attach</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_bf_attach</name></expr>,

<expr><operator>.</operator><name>detach</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_bf_detach</name></expr>,

<expr><operator>.</operator><name>wait</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_bf_wait</name></expr>,

<expr><operator>.</operator><name>stop</name> <operator>=</operator> <name>r_debug_bf_stop</name></expr>,

<expr><operator>.</operator><name>kill</name> <operator>=</operator> <name>r_debug_bf_kill</name></expr>,

<expr><operator>.</operator><name>breakpoint</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_bf_breakpoint</name></expr>,

<expr><operator>.</operator><name>reg_read</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_bf_reg_read</name></expr>,

<expr><operator>.</operator><name>reg_write</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_bf_reg_write</name></expr>,

<expr><operator>.</operator><name>reg_profile</name> <operator>=</operator> <name>r_debug_bf_reg_profile</name></expr>,

<expr><operator>.</operator><name>map_get</name> <operator>=</operator> <name>r_debug_native_map_get</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_DBG</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_plugin_bf</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
