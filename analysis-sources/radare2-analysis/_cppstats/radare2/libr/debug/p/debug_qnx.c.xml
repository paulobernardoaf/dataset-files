<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\debug\p\debug_qnx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libqnxr.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RDebugPid</name> <modifier>*</modifier></type><name>__r_debug_pid_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDebugPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>runnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>__r_debug_pid_free</name><parameter_list>(<parameter><decl><type><name>RDebugPid</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>libqnxr_t</name></type> <name>desc</name></decl>;</decl_stmt>

}</block></struct></type> <name>RIOQnx</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>libqnxr_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>reg_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pidlist_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>__r_debug_pid_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_select</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>qnxr_select</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_qnx_tids</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: TODO: Threads\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_qnx_pids</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><operator>&amp;</operator><name>__r_debug_pid_free</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>__r_debug_pid_new</name> <argument_list>(<argument><expr><literal type="string">"(current)"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_pidlist</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pidlist_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_reg_read</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copy_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>qnxr_read_registers</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_reg_get_bytes</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_debug_qnx_reg_read: small buffer %d vs %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>copy_size</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_buf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>copy_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>new_buf</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>reg_buf</name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg_buf</name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>copy_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>reg_buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>volatile</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>volatile</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>volatile</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>reg_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>volatile</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>reg_buf</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>recv</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_debug_qnx_map_get</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_reg_write</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcname</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>pcname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name><name>reg</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_reg_get_bytes</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>new_buf</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>reg_buf</name></expr></argument>, <argument><expr><name>buflen</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg_buf</name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>new_buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>r_reg_next_diff</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reg_buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><name>bits</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qnxr_write_reg</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_continue</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_continue</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_step</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_step</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_wait</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ptid_t</name></type> <name>ptid</name> <init>= <expr><call><name>qnxr_wait</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ptid_equal</name> <argument_list>(<argument><expr><name>ptid</name></expr></argument>, <argument><expr><name>null_ptid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>reason</name><operator>.</operator><name>signum</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>signal</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>notify_type</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_stop</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_stop</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_attach</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>swstep</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>plugin</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><literal type="string">"qnx"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RIOQnx</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arch</name> <init>= <expr><call><name>r_sys_arch_id</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>desc</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>arch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_set_architecture</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>X86_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supported register %s %d profile\n"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_set_architecture</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>ARM_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not supported register %s %d profile\n"</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_attach</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: error: underlying IO descriptor isn't a QNX one\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_detach</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_disconnect</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_debug_qnx_reg_profile</name> <parameter_list>(<parameter><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>arch</name> <init>= <expr><call><name>r_sys_arch_id</name> <argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>dbg</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>arch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<return>return <expr><call><name>strdup</name> <argument_list>(

<argument><expr><literal type="string">"=PC eip\n"</literal>

<literal type="string">"=SP esp\n"</literal>

<literal type="string">"=BP ebp\n"</literal>

<literal type="string">"=A0 eax\n"</literal>

<literal type="string">"=A1 ebx\n"</literal>

<literal type="string">"=A2 ecx\n"</literal>

<literal type="string">"=A3 edi\n"</literal>

<literal type="string">"gpr eax .32 0 0\n"</literal>

<literal type="string">"gpr ecx .32 4 0\n"</literal>

<literal type="string">"gpr edx .32 8 0\n"</literal>

<literal type="string">"gpr ebx .32 12 0\n"</literal>

<literal type="string">"gpr esp .32 16 0\n"</literal>

<literal type="string">"gpr ebp .32 20 0\n"</literal>

<literal type="string">"gpr esi .32 24 0\n"</literal>

<literal type="string">"gpr edi .32 28 0\n"</literal>

<literal type="string">"gpr eip .32 32 0\n"</literal>

<literal type="string">"gpr eflags .32 36 0\n"</literal>

<literal type="string">"seg cs .32 40 0\n"</literal>

<literal type="string">"seg ss .32 44 0\n"</literal></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

"seg ds .32 48 0\n"

"seg es .32 52 0\n"

"seg fs .32 56 0\n"

"seg gs .32 60 0\n"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</return>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(

<argument><expr><literal type="string">"=PC r15\n"</literal>

<literal type="string">"=SP r14\n"</literal> 

<literal type="string">"=A0 r0\n"</literal>

<literal type="string">"=A1 r1\n"</literal>

<literal type="string">"=A2 r2\n"</literal>

<literal type="string">"=A3 r3\n"</literal>

<literal type="string">"gpr r0 .32 0 0\n"</literal>

<literal type="string">"gpr r1 .32 4 0\n"</literal>

<literal type="string">"gpr r2 .32 8 0\n"</literal>

<literal type="string">"gpr r3 .32 12 0\n"</literal>

<literal type="string">"gpr r4 .32 16 0\n"</literal>

<literal type="string">"gpr r5 .32 20 0\n"</literal>

<literal type="string">"gpr r6 .32 24 0\n"</literal>

<literal type="string">"gpr r7 .32 28 0\n"</literal>

<literal type="string">"gpr r8 .32 32 0\n"</literal>

<literal type="string">"gpr r9 .32 36 0\n"</literal>

<literal type="string">"gpr r10 .32 40 0\n"</literal>

<literal type="string">"gpr r11 .32 44 0\n"</literal>

<literal type="string">"gpr r12 .32 48 0\n"</literal>

<literal type="string">"gpr sp .32 52 0\n"</literal> 

<literal type="string">"gpr lr .32 56 0\n"</literal> 

<literal type="string">"gpr pc .32 60 0\n"</literal> 

<literal type="string">"gpr r13 .32 52 0\n"</literal>

<literal type="string">"gpr r14 .32 56 0\n"</literal>

<literal type="string">"gpr r15 .32 60 0\n"</literal>

<literal type="string">"gpr cpsr .96 64 0\n"</literal>

<literal type="string">"mmx d0 .64 68 0\n"</literal> 

<literal type="string">"mmx d1 .64 76 0\n"</literal> 

<literal type="string">"mmx d2 .64 84 0\n"</literal> 

<literal type="string">"mmx d3 .64 92 0\n"</literal> 

<literal type="string">"mmx d4 .64 100 0\n"</literal> 

<literal type="string">"mmx d5 .64 108 0\n"</literal> 

<literal type="string">"mmx d6 .64 116 0\n"</literal> 

<literal type="string">"mmx d7 .64 124 0\n"</literal> 

<literal type="string">"mmx d8 .64 132 0\n"</literal> 

<literal type="string">"mmx d9 .64 140 0\n"</literal> 

<literal type="string">"mmx d10 .64 148 0\n"</literal> 

<literal type="string">"mmx d11 .64 156 0\n"</literal> 

<literal type="string">"mmx d12 .64 164 0\n"</literal> 

<literal type="string">"mmx d13 .64 172 0\n"</literal> 

<literal type="string">"mmx d14 .64 180 0\n"</literal> 

<literal type="string">"mmx d15 .64 188 0\n"</literal> 

<literal type="string">"mmx d16 .64 196 0\n"</literal> 

<literal type="string">"mmx d17 .64 204 0\n"</literal> 

<literal type="string">"mmx d18 .64 212 0\n"</literal> 

<literal type="string">"mmx d19 .64 220 0\n"</literal> 

<literal type="string">"mmx d20 .64 228 0\n"</literal> 

<literal type="string">"mmx d21 .64 236 0\n"</literal> 

<literal type="string">"mmx d22 .64 244 0\n"</literal> 

<literal type="string">"mmx d23 .64 252 0\n"</literal> 

<literal type="string">"mmx d24 .64 260 0\n"</literal> 

<literal type="string">"mmx d25 .64 268 0\n"</literal> 

<literal type="string">"mmx d26 .64 276 0\n"</literal> 

<literal type="string">"mmx d27 .64 284 0\n"</literal> 

<literal type="string">"mmx d28 .64 292 0\n"</literal> 

<literal type="string">"mmx d29 .64 300 0\n"</literal> 

<literal type="string">"mmx d30 .64 308 0\n"</literal> 

<literal type="string">"mmx d31 .64 316 0\n"</literal> 

<literal type="string">"mmx fpscr .32 324 0\n"</literal></expr></argument> 

)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_debug_qnx_breakpoint</name> <parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>set</name></expr>

?</condition><then> <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>hw</name></name></expr>

?</condition><then> <expr><call><name>qnxr_set_hwbp</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>qnxr_set_bp</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>

</then><else>: <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>hw</name></name></expr>

?</condition><then> <expr><call><name>qnxr_remove_hwbp</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>qnxr_remove_bp</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RDebugPlugin</name></type> <name>r_debug_plugin_qnx</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"qnx"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"x86,arm"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name>R_SYS_BITS_32</name></expr>,

<expr><operator>.</operator><name>step</name> <operator>=</operator> <name>r_debug_qnx_step</name></expr>,

<expr><operator>.</operator><name>cont</name> <operator>=</operator> <name>r_debug_qnx_continue</name></expr>,

<expr><operator>.</operator><name>attach</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_attach</name></expr>,

<expr><operator>.</operator><name>detach</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_detach</name></expr>,

<expr><operator>.</operator><name>pids</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_pids</name></expr>,

<expr><operator>.</operator><name>tids</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_tids</name></expr>,

<expr><operator>.</operator><name>select</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_select</name></expr>,

<expr><operator>.</operator><name>stop</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_stop</name></expr>,

<expr><operator>.</operator><name>canstep</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>wait</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_wait</name></expr>,

<expr><operator>.</operator><name>map_get</name> <operator>=</operator> <name>r_debug_qnx_map_get</name></expr>,

<expr><operator>.</operator><name>breakpoint</name> <operator>=</operator> <name>r_debug_qnx_breakpoint</name></expr>,

<expr><operator>.</operator><name>reg_read</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_reg_read</name></expr>,

<expr><operator>.</operator><name>reg_write</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_qnx_reg_write</name></expr>,

<expr><operator>.</operator><name>reg_profile</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>r_debug_qnx_reg_profile</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_DBG</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_debug_plugin_qnx</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
