<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\mangling\demangler.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"demangler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"microsoft_demangle.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>EManglingType</name> <block>{

<decl><name>eManglingMicrosoft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>eManglingUnsupported</name></decl>,

<decl><name>eManglingUnknown</name></decl>,

<decl><name>eManglingTypeMax</name></decl>

}</block></enum></type> <name>EManglingType</name>;</typedef>

<function><type><specifier>static</specifier> <name>EManglingType</name></type> <name>get_mangling_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EManglingType</name></type> <name>mangling_type</name> <init>= <expr><name>eManglingUnsupported</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mangling_type</name> <operator>=</operator> <name>eManglingUnknown</name></expr>;</expr_stmt>

<goto>goto <name>get_mangling_type_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<expr_stmt><expr><name>mangling_type</name> <operator>=</operator> <name>eManglingMicrosoft</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<label><name>get_mangling_type_err</name>:</label>

<return>return <expr><name>mangling_type</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>EDemanglerErr</name></type> <name>create_demangler</name><parameter_list>(<parameter><decl><type><name>SDemangler</name> <modifier>*</modifier><modifier>*</modifier></type><name>demangler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EDemanglerErr</name></type> <name>err</name> <init>= <expr><name>eDemanglerErrOK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>demangler</name> <operator>=</operator> <operator>(</operator><name>SDemangler</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDemangler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>demangler</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>eDemanglerErrMemoryAllocation</name></expr>;</expr_stmt>

<goto>goto <name>create_demagler_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>demangler</name><operator>)</operator><operator>-&gt;</operator><name>demangle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>demangler</name><operator>)</operator><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>create_demagler_err</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>EDemanglerErr</name></type> <name>init_demangler</name><parameter_list>(<parameter><decl><type><name>SDemangler</name> <modifier>*</modifier></type><name>demangler</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EManglingType</name></type> <name>mangling_type</name> <init>= <expr><name>eManglingUnsupported</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EDemanglerErr</name></type> <name>err</name> <init>= <expr><name>eDemanglerErrOK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demangle_func</name></type> <name><name>demangle_funcs</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>microsoft_demangle</name></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>demangler</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>eDemanglerErrMemoryAllocation</name></expr>;</expr_stmt>

<goto>goto <name>init_demangler_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mangling_type</name> <operator>=</operator> <call><name>get_mangling_type</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mangling_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>eManglingUnsupported</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>eDemanglerErrUnsupportedMangling</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eManglingUnknown</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>eDemanglerErrUnkown</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>eDemanglerErrOK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>init_demangler_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>demangler</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demangler</name><operator>-&gt;</operator><name>demangle</name></name> <operator>=</operator> <name><name>demangle_funcs</name><index>[<expr><name>mangling_type</name></expr>]</index></name></expr>;</expr_stmt>

<label><name>init_demangler_err</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_demangler</name><parameter_list>(<parameter><decl><type><name>SDemangler</name> <modifier>*</modifier></type><name>demangler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name><name>demangler</name><operator>-&gt;</operator><name>symbol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>demangler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
